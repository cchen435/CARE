; ModuleID = 'miniMD-O3.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%ident_t = type { i32, i32, i32, i32, i8* }
%class.Integrate = type { double, double, i32, i32, i32, double*, double*, double*, double*, double, i32, %class.ThreadData* }
%class.ThreadData = type { i32, i32, i32, i32, i32 }
%class.Atom = type <{ i32, i32, i32, i32, double*, double*, double*, i32, [4 x i8], i32*, double*, %class.ThreadData*, double, double, i32, i32, i32, [4 x i8], %struct.Box, i32*, i32*, double*, double*, i32*, i32, [4 x i8] }>
%struct.Box = type { double, double, double, double, double, double, double, double, double }
%class.ForceLJ = type { %class.Force }
%class.Force = type { i32 (...)**, double, double*, double, double, i32, double, i32, i32, i32, %class.ThreadData*, i32, %class.Timer*, double*, double*, double*, i32, i32 }
%class.Timer = type { double*, double, double }
%class.ForceEAM = type { %class.Force, double, i32, i32, i32, i32, double*, double*, double*, double, double, double, double, double*, double*, double*, double*, double*, i32, i32*, %"struct.ForceEAM::Funcfl" }
%"struct.ForceEAM::Funcfl" = type { i8*, i32, i32, double, double, double, double, double*, double*, double* }
%class.Neighbor = type <{ i32, i32, i32, i32, double, double*, i32, i32, i32*, i32*, i32, i32, i32, i32, %class.Timer*, %class.ThreadData*, i32*, i32*, i32, i32, double, double, double, i32, i32, i32, [4 x i8], i32*, i32, i32, i32, i32, i32, i32, double, double, double, double, double, double, i32, [4 x i8] }>
%class.Thermo = type { i32, i32, i32, i32*, double*, double*, double*, double, double, double, double, double, double, double, double, %class.ThreadData*, double }
%class.Comm = type <{ i32, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32**, i32*, double*, double*, double*, i32, i32, [3 x [2 x i32]], [3 x i32], [3 x i32], double*, double*, %class.ThreadData*, i32, i32, %class.Timer*, i32, [4 x i8], i32*, i32*, i32*, i32**, i32*, i32*, i32, i32, i32, [4 x i8] }>
%struct.In = type { i32, i32, i32, double, double, i32, i32, double, double, i8*, i32, double, i32, double, double, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }

$__clang_call_terminate = comdat any

$_ZN5Force8finaliseEv = comdat any

$_ZN7ForceLJ16compute_originalILi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_halfneighILi1ELi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi0EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_halfneighILi1ELi0EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_fullneighILi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ16compute_originalILi0EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_halfneighILi0ELi1EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi0EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_halfneighILi0ELi0EEEvR4AtomR8Neighbori = comdat any

$_ZN7ForceLJ17compute_fullneighILi0EEEvR4AtomR8Neighbori = comdat any

$_ZTI5Force = comdat any

$_ZTS5Force = comdat any

@.str = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"--input_file\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"in.lj.miniMD\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"--num_threads\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"--teams\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"--nsteps\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"--size\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"-nx\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"-ny\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"-nz\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"--ntypes\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"-b\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"--neigh_bins\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"--half_neigh\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"-sse\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"--check_exchange\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"--yaml_output\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"--yaml_screen\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"--data_file\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"--units\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"metal\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"--force\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"eam\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"-gn\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"--ghost_newton\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@str = private unnamed_addr constant [109 x i8] c"\0A-----------------------------------------------------------------------------------------------------------\00"
@str.111 = private unnamed_addr constant [67 x i8] c"-------------miniMD-Reference 2.0 (MPI+OpenMP)--------------------\00"
@str.112 = private unnamed_addr constant [111 x i8] c"-------------------------------------------------------------------------------------------------------------\0A\00"
@str.113 = private unnamed_addr constant [335 x i8] c"miniMD is a simple, parallel molecular dynamics (MD) code,\0Awhich is part of the Mantevo project at Sandia National\0ALaboratories ( http://www.mantevo.org ).\0AThe original authors of miniMD are Steve Plimpton (sjplimp@sandia.gov) ,\0APaul Crozier (pscrozi@sandia.gov) with current\0Aversions written by Christian Trott (crtrott@sandia.gov).\0A\00"
@str.114 = private unnamed_addr constant [21 x i8] c"Commandline Options:\00"
@str.115 = private unnamed_addr constant [28 x i8] c"\0A  Execution configuration:\00"
@str.116 = private unnamed_addr constant [88 x i8] c"\09--teams <nteams>:             set number of thread-teams used per MPI rank (default 1)\00"
@str.117 = private unnamed_addr constant [81 x i8] c"\09-t / --num_threads <threads>: set number of threads per thread-team (default 1)\00"
@str.118 = private unnamed_addr constant [268 x i8] c"\09--half_neigh <int>:           use half neighborlists (default 1)\0A\09                                0: full neighborlist\0A\09                                1: half neighborlist\0A\09                               -1: original miniMD half neighborlist force (not OpenMP safe)\00"
@str.119 = private unnamed_addr constant [88 x i8] c"\09-d / --device <int>:          choose device to use (only applicable for GPU execution)\00"
@str.120 = private unnamed_addr constant [56 x i8] c"\09-dm / --device_map:           map devices to MPI ranks\00"
@.str.46 = private unnamed_addr constant [175 x i8] c"\09-ng / --num_gpus <int>:       give number of GPUs per Node (used in conjuction with -dm\0A\09                              to determine device id: 'id=mpi_rank%%ng' (default 2)\0A\00", align 1
@str.121 = private unnamed_addr constant [184 x i8] c"\09--skip_gpu <int>:             skip the specified gpu when assigning devices to MPI ranks\0A\09                              used in conjunction with -dm (but must come first in arg list)\00"
@str.122 = private unnamed_addr constant [84 x i8] c"\09-sse <sse_version>:           use explicit sse intrinsics (use miniMD-SSE variant)\00"
@str.123 = private unnamed_addr constant [153 x i8] c"\09-gn / --ghost_newton <int>:   set usage of newtons third law for ghost atoms\0A\09                                (only applicable with half neighborlists)\00"
@str.124 = private unnamed_addr constant [21 x i8] c"\0A  Simulation setup:\00"
@str.125 = private unnamed_addr constant [81 x i8] c"\09-i / --input_file <string>:   set input file to be used (default: in.lj.miniMD)\00"
@str.126 = private unnamed_addr constant [84 x i8] c"\09--ntypes <int>:               set number of atom types for simulation (default: 4)\00"
@str.127 = private unnamed_addr constant [70 x i8] c"\09-n / --nsteps <int>:          set number of timesteps for simulation\00"
@str.128 = private unnamed_addr constant [65 x i8] c"\09-s / --size <int>:            set linear dimension of systembox\00"
@str.129 = private unnamed_addr constant [84 x i8] c"\09-nx/-ny/-nz <int>:            set linear dimension of systembox in x/y/z direction\00"
@str.130 = private unnamed_addr constant [73 x i8] c"\09-b / --neigh_bins <int>:      set linear dimension of neighbor bin grid\00"
@str.131 = private unnamed_addr constant [81 x i8] c"\09-u / --units <string>:        set units (lj or metal), see LAMMPS documentation\00"
@str.132 = private unnamed_addr constant [65 x i8] c"\09-p / --force <string>:        set interaction model (lj or eam)\00"
@str.133 = private unnamed_addr constant [72 x i8] c"\09-f / --data_file <string>:    read configuration from LAMMPS data file\00"
@str.134 = private unnamed_addr constant [17 x i8] c"\0A  Miscelaneous:\00"
@str.135 = private unnamed_addr constant [86 x i8] c"\09--check_exchange:             check whether atoms moved further than subdomain width\00"
@str.136 = private unnamed_addr constant [160 x i8] c"\09--safe_exchange:              perform exchange communication with all MPI processes\0A\09                                within rcut_neighbor (outer force cutoff)\00"
@.str.63 = private unnamed_addr constant [116 x i8] c"\09--sort <n>:                   resort atoms (simple bins) every <n> steps (default: use reneigh frequency; never=0)\00", align 1
@str.137 = private unnamed_addr constant [64 x i8] c"\09-o / --yaml_output <int>:     level of yaml output (default 1)\00"
@str.138 = private unnamed_addr constant [64 x i8] c"\09--yaml_screen:                write yaml output also to screen\00"
@str.139 = private unnamed_addr constant [58 x i8] c"\09-h / --help:                  display this help message\0A\00"
@str.140 = private unnamed_addr constant [59 x i8] c"---------------------------------------------------------\0A\00"
@str.149 = private unnamed_addr constant [67 x i8] c"# EAM currently requires '--ghost_newton 0'; Changing setting now.\00"
@str.141 = private unnamed_addr constant [96 x i8] c"ERROR: Trying to run with -sse with miniMD reference version. Use SSE variant instead. Exiting.\00"
@str.148 = private unnamed_addr constant [17 x i8] c"# Create System:\00"
@str.147 = private unnamed_addr constant [13 x i8] c"# Done .... \00"
@stdout = external global %struct._IO_FILE*, align 8
@.str.72 = private unnamed_addr constant [48 x i8] c"# miniMD-Reference 2.0 (MPI+OpenMP) output ...\0A\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"# Run Settings: \0A\00", align 1
@.str.74 = private unnamed_addr constant [22 x i8] c"\09# MPI processes: %i\0A\00", align 1
@.str.75 = private unnamed_addr constant [23 x i8] c"\09# OpenMP threads: %i\0A\00", align 1
@.str.76 = private unnamed_addr constant [18 x i8] c"\09# Inputfile: %s\0A\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@.str.77 = private unnamed_addr constant [17 x i8] c"\09# Datafile: %s\0A\00", align 1
@.str.79 = private unnamed_addr constant [22 x i8] c"# Physics Settings: \0A\00", align 1
@.str.81 = private unnamed_addr constant [3 x i8] c"LJ\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"EAM\00", align 1
@.str.80 = private unnamed_addr constant [19 x i8] c"\09# ForceStyle: %s\0A\00", align 1
@.str.83 = private unnamed_addr constant [36 x i8] c"\09# Force Parameters: %2.2lf %2.2lf\0A\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"METAL\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"\09# Units: %s\0A\00", align 1
@.str.86 = private unnamed_addr constant [14 x i8] c"\09# Atoms: %i\0A\00", align 1
@.str.87 = private unnamed_addr constant [19 x i8] c"\09# Atom types: %i\0A\00", align 1
@.str.88 = private unnamed_addr constant [61 x i8] c"\09# System size: %2.2lf %2.2lf %2.2lf (unit cells: %i %i %i)\0A\00", align 1
@.str.89 = private unnamed_addr constant [17 x i8] c"\09# Density: %lf\0A\00", align 1
@.str.90 = private unnamed_addr constant [22 x i8] c"\09# Force cutoff: %lf\0A\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"\09# Timestep size: %lf\0A\00", align 1
@.str.92 = private unnamed_addr constant [24 x i8] c"# Technical Settings: \0A\00", align 1
@.str.93 = private unnamed_addr constant [22 x i8] c"\09# Neigh cutoff: %lf\0A\00", align 1
@.str.94 = private unnamed_addr constant [27 x i8] c"\09# Half neighborlists: %i\0A\00", align 1
@.str.95 = private unnamed_addr constant [28 x i8] c"\09# Neighbor bins: %i %i %i\0A\00", align 1
@.str.96 = private unnamed_addr constant [27 x i8] c"\09# Neighbor frequency: %i\0A\00", align 1
@.str.97 = private unnamed_addr constant [26 x i8] c"\09# Sorting frequency: %i\0A\00", align 1
@.str.98 = private unnamed_addr constant [25 x i8] c"\09# Thermo frequency: %i\0A\00", align 1
@.str.99 = private unnamed_addr constant [21 x i8] c"\09# Ghost Newton: %i\0A\00", align 1
@.str.100 = private unnamed_addr constant [23 x i8] c"\09# Use intrinsics: %i\0A\00", align 1
@.str.101 = private unnamed_addr constant [25 x i8] c"\09# Do safe exchange: %i\0A\00", align 1
@.str.102 = private unnamed_addr constant [23 x i8] c"\09# Size of float: %i\0A\0A\00", align 1
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.103, i32 0, i32 0) }, align 8
@.str.103 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@str.145 = private unnamed_addr constant [24 x i8] c"# Starting dynamics ...\00"
@str.146 = private unnamed_addr constant [22 x i8] c"# Timestep T U P Time\00"
@str.142 = private unnamed_addr constant [2 x i8] c"\0A\00"
@str.143 = private unnamed_addr constant [23 x i8] c"# Performance Summary:\00"
@str.144 = private unnamed_addr constant [120 x i8] c"# MPI_proc OMP_threads nsteps natoms t_total t_force t_neigh t_comm t_other performance perf/thread grep_string t_extra\00"
@.str.110 = private unnamed_addr constant [60 x i8] c"%i %i %i %i %lf %lf %lf %lf %lf %lf %lf PERF_SUMMARY %lf\0A\0A\0A\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1.36 = private unnamed_addr constant [23 x i8] c"ERROR: Cannot open %s\0A\00", align 1
@.str.2.37 = private unnamed_addr constant [4 x i8] c" \09\0A\00", align 1
@.str.3.38 = private unnamed_addr constant [3 x i8] c"lj\00", align 1
@.str.4.39 = private unnamed_addr constant [6 x i8] c"metal\00", align 1
@.str.5.40 = private unnamed_addr constant [82 x i8] c"Unknown units option in file at line 3 ('%s'). Expecting either 'lj' or 'metal'.\0A\00", align 1
@.str.6.41 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.7.42 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.8.43 = private unnamed_addr constant [4 x i8] c"eam\00", align 1
@.str.9.44 = private unnamed_addr constant [84 x i8] c"Unknown forcetype option in file at line 5 ('%s'). Expecting either 'lj' or 'eam'.\0A\00", align 1
@.str.10.45 = private unnamed_addr constant [8 x i8] c"%le %le\00", align 1
@.str.11.46 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.12.47 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.13.48 = private unnamed_addr constant [4 x i8] c"%le\00", align 1
@1 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i32 0, i32 0) }, align 8
@.str.51 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@2 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i32 0, i32 0) }, align 8
@3 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i32 0, i32 0) }, align 8
@.str.1.55 = private unnamed_addr constant [227 x i8] c"Warning: Atoms move further than your subdomain size, which will eventually cause lost atoms.\0AIncrease reneighboring frequency or choose a different processor grid\0AMaximum move distance: %lf; Subdomain dimensions: %lf %lf %lf\0A\00", align 1
@str.60 = private unnamed_addr constant [27 x i8] c"ERROR: No memory for atoms\00"
@4 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.61, i32 0, i32 0) }, align 8
@.str.1.61 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@5 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.61, i32 0, i32 0) }, align 8
@6 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.61, i32 0, i32 0) }, align 8
@_ZTV7ForceLJ = unnamed_addr constant [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTI7ForceLJ to i8*), i8* bitcast (void (%class.ForceLJ*)* @_ZN7ForceLJD2Ev to i8*), i8* bitcast (void (%class.ForceLJ*)* @_ZN7ForceLJD0Ev to i8*), i8* bitcast (void (%class.ForceLJ*)* @_ZN7ForceLJ5setupEv to i8*), i8* bitcast (void (%class.Force*)* @_ZN5Force8finaliseEv to i8*), i8* bitcast (void (%class.ForceLJ*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)* @_ZN7ForceLJ7computeER4AtomR8NeighborR4Commi to i8*)], align 8
@_ZTI7ForceLJ = constant { i8*, i8*, i32, i32, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZTS7ForceLJ, i32 0, i32 0), i32 0, i32 1, i8* bitcast ({ i8*, i8* }* @_ZTI5Force to i8*), i64 0 }
@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external global i8*
@_ZTS7ForceLJ = constant [9 x i8] c"7ForceLJ\00"
@_ZTI5Force = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZTS5Force, i32 0, i32 0) }, comdat
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTS5Force = linkonce_odr constant [7 x i8] c"5Force\00", comdat
@7 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.68, i32 0, i32 0) }, align 8
@.str.68 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@8 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.68, i32 0, i32 0) }, align 8
@9 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.68, i32 0, i32 0) }, align 8
@_ZTV8ForceEAM = unnamed_addr constant [12 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTI8ForceEAM to i8*), i8* bitcast (void (%class.ForceEAM*)* @_ZN8ForceEAMD2Ev to i8*), i8* bitcast (void (%class.ForceEAM*)* @_ZN8ForceEAMD0Ev to i8*), i8* bitcast (void (%class.ForceEAM*)* @_ZN8ForceEAM5setupEv to i8*), i8* bitcast (void (%class.Force*)* @_ZN5Force8finaliseEv to i8*), i8* bitcast (void (%class.ForceEAM*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)* @_ZN8ForceEAM7computeER4AtomR8NeighborR4Commi to i8*), i8* bitcast (void (%class.ForceEAM*, i8*)* @_ZN8ForceEAM5coeffEPKc to i8*), i8* bitcast (i32 (%class.ForceEAM*, i32, i32, double*, i32**)* @_ZN8ForceEAM9pack_commEiiPdPPi to i8*), i8* bitcast (void (%class.ForceEAM*, i32, i32, double*)* @_ZN8ForceEAM11unpack_commEiiPd to i8*), i8* bitcast (void (%class.ForceEAM*, i8*)* @_ZN8ForceEAM9read_fileEPKc to i8*), i8* bitcast (void (%class.ForceEAM*)* @_ZN8ForceEAM10file2arrayEv to i8*)], align 8
@_ZTI8ForceEAM = constant { i8*, i8*, i32, i32, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZTS8ForceEAM, i32 0, i32 0), i32 0, i32 1, i8* bitcast ({ i8*, i8* }* @_ZTI5Force to i8*), i64 0 }
@_ZTS8ForceEAM = constant [10 x i8] c"8ForceEAM\00"
@.str.71 = private unnamed_addr constant [10 x i8] c"Cu_u6.eam\00", align 1
@10 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.72, i32 0, i32 0) }, align 8
@.str.1.72 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@11 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.72, i32 0, i32 0) }, align 8
@12 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.72, i32 0, i32 0) }, align 8
@.str.2.73 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3.74 = private unnamed_addr constant [35 x i8] c"Can't open EAM Potential file: %s\0A\00", align 1
@.str.4.75 = private unnamed_addr constant [7 x i8] c"%d %lg\00", align 1
@.str.5.76 = private unnamed_addr constant [18 x i8] c"%d %lg %d %lg %lg\00", align 1
@.str.6.77 = private unnamed_addr constant [6 x i8] c" \09\0A\0D\0C\00", align 1
@.str.7.78 = private unnamed_addr constant [31 x i8] c"Numeric index is out of bounds\00", align 1
@13 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.104, i32 0, i32 0) }, align 8
@.str.104 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@14 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.104, i32 0, i32 0) }, align 8
@15 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.104, i32 0, i32 0) }, align 8
@16 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.117, i32 0, i32 0) }, align 8
@.str.117 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@17 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.117, i32 0, i32 0) }, align 8
@18 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.117, i32 0, i32 0) }, align 8
@.str.1.118 = private unnamed_addr constant [20 x i8] c"%i %e %e %e %6.3lf\0A\00", align 1
@str.150 = private unnamed_addr constant [30 x i8] c"ERROR: Bad grid of processors\00"
@19 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.153, i32 0, i32 0) }, align 8
@.str.1.153 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@20 = private unnamed_addr constant %ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.153, i32 0, i32 0) }, align 8
@21 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.153, i32 0, i32 0) }, align 8
@.str.182 = private unnamed_addr constant [24 x i8] c"Atom counts = %d %d %d\0A\00", align 1
@str.183 = private unnamed_addr constant [33 x i8] c"ERROR: Incorrect number of atoms\00"
@.str.2.184 = private unnamed_addr constant [41 x i8] c"miniMD-%4d-%02d-%02d-%02d-%02d-%02d.yaml\00", align 1
@.str.3.185 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.4.186 = private unnamed_addr constant [21 x i8] c"run_configuration: \0A\00", align 1
@.str.5.187 = private unnamed_addr constant [46 x i8] c"  variant: miniMD-Reference 2.0 (MPI+OpenMP)\0A\00", align 1
@.str.6.188 = private unnamed_addr constant [21 x i8] c"  mpi_processes: %i\0A\00", align 1
@.str.7.189 = private unnamed_addr constant [20 x i8] c"  thread_teams: %i\0A\00", align 1
@.str.8.190 = private unnamed_addr constant [15 x i8] c"  threads: %i\0A\00", align 1
@.str.10.191 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@.str.9.192 = private unnamed_addr constant [16 x i8] c"  datafile: %s\0A\00", align 1
@.str.12.193 = private unnamed_addr constant [3 x i8] c"LJ\00", align 1
@.str.13.194 = private unnamed_addr constant [6 x i8] c"METAL\00", align 1
@.str.11.195 = private unnamed_addr constant [13 x i8] c"  units: %s\0A\00", align 1
@.str.14.196 = private unnamed_addr constant [13 x i8] c"  atoms: %i\0A\00", align 1
@.str.15.197 = private unnamed_addr constant [18 x i8] c"  atom_types: %i\0A\00", align 1
@.str.16.198 = private unnamed_addr constant [37 x i8] c"  system_size: %2.2lf %2.2lf %2.2lf\0A\00", align 1
@.str.17.199 = private unnamed_addr constant [24 x i8] c"  unit_cells: %i %i %i\0A\00", align 1
@.str.18.200 = private unnamed_addr constant [16 x i8] c"  density: %lf\0A\00", align 1
@.str.20.201 = private unnamed_addr constant [4 x i8] c"EAM\00", align 1
@.str.19.202 = private unnamed_addr constant [18 x i8] c"  force_type: %s\0A\00", align 1
@.str.21.203 = private unnamed_addr constant [21 x i8] c"  force_cutoff: %lf\0A\00", align 1
@.str.22.204 = private unnamed_addr constant [31 x i8] c"  force_params: %2.2lf %2.2lf\0A\00", align 1
@.str.23.205 = private unnamed_addr constant [24 x i8] c"  neighbor_cutoff: %lf\0A\00", align 1
@.str.24.206 = private unnamed_addr constant [21 x i8] c"  neighbor_type: %i\0A\00", align 1
@.str.25.207 = private unnamed_addr constant [27 x i8] c"  neighbor_bins: %i %i %i\0A\00", align 1
@.str.26.208 = private unnamed_addr constant [26 x i8] c"  neighbor_frequency: %i\0A\00", align 1
@.str.27.209 = private unnamed_addr constant [22 x i8] c"  sort_frequency: %i\0A\00", align 1
@.str.28.210 = private unnamed_addr constant [22 x i8] c"  timestep_size: %lf\0A\00", align 1
@.str.29.211 = private unnamed_addr constant [24 x i8] c"  thermo_frequency: %i\0A\00", align 1
@.str.30.212 = private unnamed_addr constant [20 x i8] c"  ghost_newton: %i\0A\00", align 1
@.str.31.213 = private unnamed_addr constant [22 x i8] c"  use_intrinsics: %i\0A\00", align 1
@.str.32.214 = private unnamed_addr constant [21 x i8] c"  safe_exchange: %i\0A\00", align 1
@.str.33.215 = private unnamed_addr constant [19 x i8] c"  float_size: %i\0A\0A\00", align 1
@.str.34.216 = private unnamed_addr constant [25 x i8] c"\0A\0Athermodynamic_output:\0A\00", align 1
@.str.35.217 = private unnamed_addr constant [17 x i8] c"  timestep: %d \0A\00", align 1
@.str.36 = private unnamed_addr constant [30 x i8] c"      T*:           %15.10g \0A\00", align 1
@.str.37 = private unnamed_addr constant [30 x i8] c"      U*:           %15.10g \0A\00", align 1
@.str.38 = private unnamed_addr constant [30 x i8] c"      P*:           %15.10g \0A\00", align 1
@.str.39 = private unnamed_addr constant [30 x i8] c"      Conservation: %15.10g \0A\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"time:\0A\00", align 1
@.str.42 = private unnamed_addr constant [10 x i8] c"  total:\0A\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"    time: %g \0A\00", align 1
@.str.44 = private unnamed_addr constant [26 x i8] c"    performance: %10.5e \0A\00", align 1
@.str.45 = private unnamed_addr constant [31 x i8] c"    performance_proc: %10.5e \0A\00", align 1
@.str.46.218 = private unnamed_addr constant [13 x i8] c"  force: %g\0A\00", align 1
@.str.47 = private unnamed_addr constant [13 x i8] c"  neigh: %g\0A\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"  comm:  %g\0A\00", align 1
@.str.49 = private unnamed_addr constant [13 x i8] c"  other: %g\0A\00", align 1
@.str.51.219 = private unnamed_addr constant [22 x i8] c"# Timing histograms \0A\00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c"# Force time: %g ave %g max %g min\0A\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"# Histogram:\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.55 = private unnamed_addr constant [36 x i8] c"# Neigh time: %g ave %g max %g min\0A\00", align 1
@.str.56 = private unnamed_addr constant [36 x i8] c"# Comm  time: %g ave %g max %g min\0A\00", align 1
@.str.57 = private unnamed_addr constant [36 x i8] c"# Other time: %g ave %g max %g min\0A\00", align 1
@.str.58 = private unnamed_addr constant [36 x i8] c"# Nlocal:     %g ave %g max %g min\0A\00", align 1
@.str.59 = private unnamed_addr constant [36 x i8] c"# Nghost:     %g ave %g max %g min\0A\00", align 1
@.str.60 = private unnamed_addr constant [36 x i8] c"# Nswaps:     %g ave %g max %g min\0A\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"# Neighs:     %g ave %g max %g min\0A\00", align 1
@.str.62 = private unnamed_addr constant [29 x i8] c"# Total # of neighbors = %g\0A\00", align 1
@line = global [255 x i8] zeroinitializer, align 16
@fp = global %struct._IO_FILE* null, align 8
@keyword = global [255 x i8] zeroinitializer, align 16
@.str.220 = private unnamed_addr constant [5 x i8] c" \09\0A\0D\00", align 1
@.str.4.221 = private unnamed_addr constant [6 x i8] c"atoms\00", align 1
@.str.5.222 = private unnamed_addr constant [3 x i8] c"%i\00", align 1
@.str.6.223 = private unnamed_addr constant [11 x i8] c"atom types\00", align 1
@.str.7.224 = private unnamed_addr constant [8 x i8] c"xlo xhi\00", align 1
@.str.8.225 = private unnamed_addr constant [8 x i8] c"%lg %lg\00", align 1
@.str.9.226 = private unnamed_addr constant [8 x i8] c"ylo yhi\00", align 1
@.str.10.227 = private unnamed_addr constant [8 x i8] c"zlo zhi\00", align 1
@.str.1.228 = private unnamed_addr constant [6 x i8] c"Atoms\00", align 1
@.str.2.229 = private unnamed_addr constant [11 x i8] c"Velocities\00", align 1
@.str.11.230 = private unnamed_addr constant [36 x i8] c"Unknown identifier in data file: %s\00", align 1
@.str.3.231 = private unnamed_addr constant [7 x i8] c"Masses\00", align 1
@.str.12.232 = private unnamed_addr constant [18 x i8] c"%i %i %lg %lg %lg\00", align 1
@.str.13.233 = private unnamed_addr constant [15 x i8] c"%i %lg %lg %lg\00", align 1
@.str.14.236 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.15.237 = private unnamed_addr constant [20 x i8] c"Cannot open file %s\00", align 1
@str.20 = private unnamed_addr constant [34 x i8] c"Must read Atoms before Velocities\00"
@.str.17.238 = private unnamed_addr constant [7 x i8] c"%i %lg\00", align 1
@str.21 = private unnamed_addr constant [29 x i8] c"Created incorrect # of atoms\00"
@str.22 = private unnamed_addr constant [20 x i8] c"No memory for atoms\00"

@_ZN9IntegrateC1Ev = alias void (%class.Integrate*), void (%class.Integrate*)* @_ZN9IntegrateC2Ev
@_ZN9IntegrateD1Ev = alias void (%class.Integrate*), void (%class.Integrate*)* @_ZN9IntegrateD2Ev
@_ZN4AtomC1Ei = alias void (%class.Atom*, i32), void (%class.Atom*, i32)* @_ZN4AtomC2Ei
@_ZN4AtomD1Ev = alias void (%class.Atom*), void (%class.Atom*)* @_ZN4AtomD2Ev
@_ZN7ForceLJC1Ei = alias void (%class.ForceLJ*, i32), void (%class.ForceLJ*, i32)* @_ZN7ForceLJC2Ei
@_ZN7ForceLJD1Ev = alias void (%class.ForceLJ*), void (%class.ForceLJ*)* @_ZN7ForceLJD2Ev
@_ZN8ForceEAMC1Ei = alias void (%class.ForceEAM*, i32), void (%class.ForceEAM*, i32)* @_ZN8ForceEAMC2Ei
@_ZN8ForceEAMD1Ev = alias void (%class.ForceEAM*), void (%class.ForceEAM*)* @_ZN8ForceEAMD2Ev
@_ZN8NeighborC1Ei = alias void (%class.Neighbor*, i32), void (%class.Neighbor*, i32)* @_ZN8NeighborC2Ei
@_ZN8NeighborD1Ev = alias void (%class.Neighbor*), void (%class.Neighbor*)* @_ZN8NeighborD2Ev
@_ZN6ThermoC1Ev = alias void (%class.Thermo*), void (%class.Thermo*)* @_ZN6ThermoC2Ev
@_ZN6ThermoD1Ev = alias void (%class.Thermo*), void (%class.Thermo*)* @_ZN6ThermoD2Ev
@_ZN4CommC1Ev = alias void (%class.Comm*), void (%class.Comm*)* @_ZN4CommC2Ev
@_ZN4CommD1Ev = alias void (%class.Comm*), void (%class.Comm*)* @_ZN4CommD2Ev
@_ZN5TimerC1Ev = alias void (%class.Timer*), void (%class.Timer*)* @_ZN5TimerC2Ev
@_ZN5TimerD1Ev = alias void (%class.Timer*), void (%class.Timer*)* @_ZN5TimerD2Ev

; Function Attrs: norecurse uwtable
define i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i8**, align 8
  %in = alloca %struct.In, align 8
  %me = alloca i32, align 4
  %nprocs = alloca i32, align 4
  %atom = alloca %class.Atom, align 8
  %neighbor = alloca %class.Neighbor, align 8
  %integrate = alloca %class.Integrate, align 8
  %thermo = alloca %class.Thermo, align 8
  %comm = alloca %class.Comm, align 8
  %timer = alloca %class.Timer, align 8
  %threads = alloca %class.ThreadData, align 16
  %force = alloca %class.Force*, align 8
  %natoms = alloca i32, align 4
  store i32 %argc, i32* %1, align 4, !tbaa !1
  store i8** %argv, i8*** %2, align 8, !tbaa !5
  %3 = bitcast %struct.In* %in to i8*
  call void @llvm.lifetime.start(i64 112, i8* %3) #7
  %4 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 9
  store i8* null, i8** %4, align 8, !tbaa !7
  %5 = bitcast i32* %me to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  store i32 0, i32* %me, align 4, !tbaa !1
  %6 = bitcast i32* %nprocs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #7
  store i32 1, i32* %nprocs, align 4, !tbaa !1
  %7 = icmp sgt i32 %argc, 0
  br i1 %7, label %.lr.ph110.preheader, label %._crit_edge111

.lr.ph110.preheader:                              ; preds = %0
  br label %.lr.ph110

._crit_edge111.loopexit:                          ; preds = %25
  br label %._crit_edge111

._crit_edge111:                                   ; preds = %._crit_edge111.loopexit, %0
  %input_file.0.lcssa = phi i8* [ null, %0 ], [ %input_file.1, %._crit_edge111.loopexit ]
  %8 = call i32 @MPI_Init(i32* nonnull %1, i8*** nonnull %2)
  %9 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %me)
  %10 = call i32 @MPI_Comm_size(i32 1140850688, i32* nonnull %nprocs)
  %11 = icmp eq i8* %input_file.0.lcssa, null
  br i1 %11, label %28, label %30

.lr.ph110:                                        ; preds = %25, %.lr.ph110.preheader
  %i.0108 = phi i32 [ %26, %25 ], [ 0, %.lr.ph110.preheader ]
  %input_file.0107 = phi i8* [ %input_file.1, %25 ], [ null, %.lr.ph110.preheader ]
  %12 = sext i32 %i.0108 to i64
  %13 = getelementptr inbounds i8*, i8** %argv, i64 %12
  %14 = load i8*, i8** %13, align 8, !tbaa !5
  %15 = tail call i32 @strcmp(i8* %14, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #16
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

; <label>:17                                      ; preds = %.lr.ph110
  %18 = tail call i32 @strcmp(i8* %14, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #16
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %25

; <label>:20                                      ; preds = %17, %.lr.ph110
  %21 = add nsw i32 %i.0108, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8*, i8** %argv, i64 %22
  %24 = load i8*, i8** %23, align 8, !tbaa !5
  br label %25

; <label>:25                                      ; preds = %20, %17
  %input_file.1 = phi i8* [ %24, %20 ], [ %input_file.0107, %17 ]
  %i.1 = phi i32 [ %21, %20 ], [ %i.0108, %17 ]
  %26 = add nsw i32 %i.1, 1
  %27 = icmp slt i32 %26, %argc
  br i1 %27, label %.lr.ph110, label %._crit_edge111.loopexit

; <label>:28                                      ; preds = %._crit_edge111
  %29 = call i32 @_Z5inputR2InPKc(%struct.In* nonnull dereferenceable(112) %in, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  br label %32

; <label>:30                                      ; preds = %._crit_edge111
  %31 = call i32 @_Z5inputR2InPKc(%struct.In* nonnull dereferenceable(112) %in, i8* nonnull %input_file.0.lcssa)
  br label %32

; <label>:32                                      ; preds = %30, %28
  %error.0 = phi i32 [ %29, %28 ], [ %31, %30 ]
  %33 = icmp eq i32 %error.0, 0
  br i1 %33, label %36, label %34

; <label>:34                                      ; preds = %32
  %35 = call i32 @MPI_Finalize()
  call void @exit(i32 0) #17
  unreachable

; <label>:36                                      ; preds = %32
  call void @srand(i32 5413) #7
  %37 = load i32, i32* %1, align 4, !tbaa !1
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %.lr.ph92, label %._crit_edge

.lr.ph92:                                         ; preds = %36
  %39 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %40 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  br label %43

._crit_edge.loopexit:                             ; preds = %261
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %36
  %num_threads.0.lcssa = phi i32 [ 1, %36 ], [ %num_threads.1, %._crit_edge.loopexit ]
  %num_steps.0.lcssa = phi i32 [ -1, %36 ], [ %num_steps.1, %._crit_edge.loopexit ]
  %ntypes.0.lcssa = phi i32 [ 4, %36 ], [ %ntypes.1, %._crit_edge.loopexit ]
  %sort.0.lcssa = phi i32 [ -1, %36 ], [ %sort.1, %._crit_edge.loopexit ]
  %ghost_newton.0.lcssa = phi i32 [ 1, %36 ], [ %ghost_newton.1, %._crit_edge.loopexit ]
  %neighbor_size.0.lcssa = phi i32 [ -1, %36 ], [ %neighbor_size.1, %._crit_edge.loopexit ]
  %system_size.0.lcssa = phi i32 [ -1, %36 ], [ %system_size.1, %._crit_edge.loopexit ]
  %halfneigh.0.lcssa = phi i32 [ 1, %36 ], [ %halfneigh.1, %._crit_edge.loopexit ]
  %yaml_output.0.lcssa = phi i32 [ 0, %36 ], [ %yaml_output.1, %._crit_edge.loopexit ]
  %screen_yaml.0.lcssa = phi i32 [ 0, %36 ], [ %screen_yaml.1, %._crit_edge.loopexit ]
  %use_sse.0.lcssa = phi i32 [ 0, %36 ], [ %use_sse.1, %._crit_edge.loopexit ]
  %nx.0.lcssa = phi i32 [ -1, %36 ], [ %nx.1, %._crit_edge.loopexit ]
  %check_safeexchange.0.lcssa = phi i32 [ 0, %36 ], [ %check_safeexchange.1, %._crit_edge.loopexit ]
  %nz.0.lcssa = phi i32 [ -1, %36 ], [ %nz.1, %._crit_edge.loopexit ]
  %ny.0.lcssa = phi i32 [ -1, %36 ], [ %ny.1, %._crit_edge.loopexit ]
  %41 = bitcast %class.Atom* %atom to i8*
  call void @llvm.lifetime.start(i64 224, i8* %41) #7
  call void @_ZN4AtomC1Ei(%class.Atom* nonnull %atom, i32 %ntypes.0.lcssa)
  %42 = bitcast %class.Neighbor* %neighbor to i8*
  call void @llvm.lifetime.start(i64 240, i8* %42) #7
  invoke void @_ZN8NeighborC1Ei(%class.Neighbor* nonnull %neighbor, i32 %ntypes.0.lcssa)
          to label %265 unwind label %296

; <label>:43                                      ; preds = %261, %.lr.ph92
  %num_threads.091 = phi i32 [ 1, %.lr.ph92 ], [ %num_threads.1, %261 ]
  %num_steps.090 = phi i32 [ -1, %.lr.ph92 ], [ %num_steps.1, %261 ]
  %i1.089 = phi i32 [ 0, %.lr.ph92 ], [ %262, %261 ]
  %ntypes.088 = phi i32 [ 4, %.lr.ph92 ], [ %ntypes.1, %261 ]
  %sort.087 = phi i32 [ -1, %.lr.ph92 ], [ %sort.1, %261 ]
  %ghost_newton.086 = phi i32 [ 1, %.lr.ph92 ], [ %ghost_newton.1, %261 ]
  %neighbor_size.085 = phi i32 [ -1, %.lr.ph92 ], [ %neighbor_size.1, %261 ]
  %system_size.084 = phi i32 [ -1, %.lr.ph92 ], [ %system_size.1, %261 ]
  %halfneigh.083 = phi i32 [ 1, %.lr.ph92 ], [ %halfneigh.1, %261 ]
  %yaml_output.082 = phi i32 [ 0, %.lr.ph92 ], [ %yaml_output.1, %261 ]
  %screen_yaml.081 = phi i32 [ 0, %.lr.ph92 ], [ %screen_yaml.1, %261 ]
  %use_sse.080 = phi i32 [ 0, %.lr.ph92 ], [ %use_sse.1, %261 ]
  %nx.079 = phi i32 [ -1, %.lr.ph92 ], [ %nx.1, %261 ]
  %check_safeexchange.078 = phi i32 [ 0, %.lr.ph92 ], [ %check_safeexchange.1, %261 ]
  %nz.077 = phi i32 [ -1, %.lr.ph92 ], [ %nz.1, %261 ]
  %ny.076 = phi i32 [ -1, %.lr.ph92 ], [ %ny.1, %261 ]
  %44 = sext i32 %i1.089 to i64
  %45 = load i8**, i8*** %2, align 8, !tbaa !5
  %46 = getelementptr inbounds i8*, i8** %45, i64 %44
  %47 = load i8*, i8** %46, align 8, !tbaa !5
  %48 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

; <label>:50                                      ; preds = %43
  %51 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)) #16
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %60

; <label>:53                                      ; preds = %50, %43
  %54 = add nsw i32 %i1.089, 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8*, i8** %45, i64 %55
  %57 = load i8*, i8** %56, align 8, !tbaa !5
  %58 = call i64 @strtol(i8* nocapture nonnull %57, i8** null, i32 10) #7
  %59 = trunc i64 %58 to i32
  br label %261

; <label>:60                                      ; preds = %50
  %61 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0)) #16
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

; <label>:63                                      ; preds = %60
  %64 = add nsw i32 %i1.089, 1
  br label %261

; <label>:65                                      ; preds = %60
  %66 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #16
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %68

; <label>:68                                      ; preds = %65
  %69 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0)) #16
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %78

; <label>:71                                      ; preds = %68, %65
  %72 = add nsw i32 %i1.089, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8*, i8** %45, i64 %73
  %75 = load i8*, i8** %74, align 8, !tbaa !5
  %76 = call i64 @strtol(i8* nocapture nonnull %75, i8** null, i32 10) #7
  %77 = trunc i64 %76 to i32
  br label %261

; <label>:78                                      ; preds = %68
  %79 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)) #16
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

; <label>:81                                      ; preds = %78
  %82 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)) #16
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %91

; <label>:84                                      ; preds = %81, %78
  %85 = add nsw i32 %i1.089, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8*, i8** %45, i64 %86
  %88 = load i8*, i8** %87, align 8, !tbaa !5
  %89 = call i64 @strtol(i8* nocapture nonnull %88, i8** null, i32 10) #7
  %90 = trunc i64 %89 to i32
  br label %261

; <label>:91                                      ; preds = %81
  %92 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)) #16
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %101

; <label>:94                                      ; preds = %91
  %95 = add nsw i32 %i1.089, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8*, i8** %45, i64 %96
  %98 = load i8*, i8** %97, align 8, !tbaa !5
  %99 = call i64 @strtol(i8* nocapture nonnull %98, i8** null, i32 10) #7
  %100 = trunc i64 %99 to i32
  br label %261

; <label>:101                                     ; preds = %91
  %102 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0)) #16
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %111

; <label>:104                                     ; preds = %101
  %105 = add nsw i32 %i1.089, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8*, i8** %45, i64 %106
  %108 = load i8*, i8** %107, align 8, !tbaa !5
  %109 = call i64 @strtol(i8* nocapture nonnull %108, i8** null, i32 10) #7
  %110 = trunc i64 %109 to i32
  br label %261

; <label>:111                                     ; preds = %101
  %112 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0)) #16
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %121

; <label>:114                                     ; preds = %111
  %115 = add nsw i32 %i1.089, 1
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8*, i8** %45, i64 %116
  %118 = load i8*, i8** %117, align 8, !tbaa !5
  %119 = call i64 @strtol(i8* nocapture nonnull %118, i8** null, i32 10) #7
  %120 = trunc i64 %119 to i32
  br label %261

; <label>:121                                     ; preds = %111
  %122 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0)) #16
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %131

; <label>:124                                     ; preds = %121
  %125 = add nsw i32 %i1.089, 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8*, i8** %45, i64 %126
  %128 = load i8*, i8** %127, align 8, !tbaa !5
  %129 = call i64 @strtol(i8* nocapture nonnull %128, i8** null, i32 10) #7
  %130 = trunc i64 %129 to i32
  br label %261

; <label>:131                                     ; preds = %121
  %132 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0)) #16
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %137, label %134

; <label>:134                                     ; preds = %131
  %135 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0)) #16
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %144

; <label>:137                                     ; preds = %134, %131
  %138 = add nsw i32 %i1.089, 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8*, i8** %45, i64 %139
  %141 = load i8*, i8** %140, align 8, !tbaa !5
  %142 = call i64 @strtol(i8* nocapture nonnull %141, i8** null, i32 10) #7
  %143 = trunc i64 %142 to i32
  br label %261

; <label>:144                                     ; preds = %134
  %145 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0)) #16
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %154

; <label>:147                                     ; preds = %144
  %148 = add nsw i32 %i1.089, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8*, i8** %45, i64 %149
  %151 = load i8*, i8** %150, align 8, !tbaa !5
  %152 = call i64 @strtol(i8* nocapture nonnull %151, i8** null, i32 10) #7
  %153 = trunc i64 %152 to i32
  br label %261

; <label>:154                                     ; preds = %144
  %155 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i64 0, i64 0)) #16
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %164

; <label>:157                                     ; preds = %154
  %158 = add nsw i32 %i1.089, 1
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8*, i8** %45, i64 %159
  %161 = load i8*, i8** %160, align 8, !tbaa !5
  %162 = call i64 @strtol(i8* nocapture nonnull %161, i8** null, i32 10) #7
  %163 = trunc i64 %162 to i32
  br label %261

; <label>:164                                     ; preds = %154
  %165 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0)) #16
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %261, label %167

; <label>:167                                     ; preds = %164
  %168 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0)) #16
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %177

; <label>:170                                     ; preds = %167
  %171 = add nsw i32 %i1.089, 1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8*, i8** %45, i64 %172
  %174 = load i8*, i8** %173, align 8, !tbaa !5
  %175 = call i64 @strtol(i8* nocapture nonnull %174, i8** null, i32 10) #7
  %176 = trunc i64 %175 to i32
  br label %261

; <label>:177                                     ; preds = %167
  %178 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0)) #16
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %183, label %180

; <label>:180                                     ; preds = %177
  %181 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0)) #16
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %190

; <label>:183                                     ; preds = %180, %177
  %184 = add nsw i32 %i1.089, 1
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8*, i8** %45, i64 %185
  %187 = load i8*, i8** %186, align 8, !tbaa !5
  %188 = call i64 @strtol(i8* nocapture nonnull %187, i8** null, i32 10) #7
  %189 = trunc i64 %188 to i32
  br label %261

; <label>:190                                     ; preds = %180
  %191 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #16
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %261, label %193

; <label>:193                                     ; preds = %190
  %194 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0)) #16
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %199, label %196

; <label>:196                                     ; preds = %193
  %197 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0)) #16
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

; <label>:199                                     ; preds = %196, %193
  %200 = load i8*, i8** %4, align 8, !tbaa !7
  %201 = icmp eq i8* %200, null
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %199
  %203 = call noalias i8* @_Znam(i64 1000) #18
  store i8* %203, i8** %4, align 8, !tbaa !7
  br label %204

; <label>:204                                     ; preds = %202, %199
  %205 = phi i8* [ %203, %202 ], [ %200, %199 ]
  %206 = add nsw i32 %i1.089, 1
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8*, i8** %45, i64 %207
  %209 = load i8*, i8** %208, align 8, !tbaa !5
  %210 = call i8* @strcpy(i8* nonnull %205, i8* %209) #7
  br label %261

; <label>:211                                     ; preds = %196
  %212 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0)) #16
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %217, label %214

; <label>:214                                     ; preds = %211
  %215 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0)) #16
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %225

; <label>:217                                     ; preds = %214, %211
  %218 = add nsw i32 %i1.089, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8*, i8** %45, i64 %219
  %221 = load i8*, i8** %220, align 8, !tbaa !5
  %222 = call i32 @strcmp(i8* %221, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i64 0, i64 0)) #16
  %223 = icmp eq i32 %222, 0
  %224 = zext i1 %223 to i32
  store i32 %224, i32* %39, align 8, !tbaa !11
  br label %261

; <label>:225                                     ; preds = %214
  %226 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i64 0, i64 0)) #16
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %231, label %228

; <label>:228                                     ; preds = %225
  %229 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0)) #16
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %239

; <label>:231                                     ; preds = %228, %225
  %232 = add nsw i32 %i1.089, 1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8*, i8** %45, i64 %233
  %235 = load i8*, i8** %234, align 8, !tbaa !5
  %236 = call i32 @strcmp(i8* %235, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0)) #16
  %237 = icmp eq i32 %236, 0
  %238 = zext i1 %237 to i32
  store i32 %238, i32* %40, align 4, !tbaa !12
  br label %261

; <label>:239                                     ; preds = %228
  %240 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0)) #16
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %245, label %242

; <label>:242                                     ; preds = %239
  %243 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0)) #16
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %245, label %252

; <label>:245                                     ; preds = %242, %239
  %246 = add nsw i32 %i1.089, 1
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8*, i8** %45, i64 %247
  %249 = load i8*, i8** %248, align 8, !tbaa !5
  %250 = call i64 @strtol(i8* nocapture nonnull %249, i8** null, i32 10) #7
  %251 = trunc i64 %250 to i32
  br label %261

; <label>:252                                     ; preds = %242
  %253 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)) #16
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %258, label %255

; <label>:255                                     ; preds = %252
  %256 = call i32 @strcmp(i8* %47, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0)) #16
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %261

; <label>:258                                     ; preds = %255, %252
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([109 x i8], [109 x i8]* @str, i64 0, i64 0))
  %puts9 = call i32 @puts(i8* nonnull getelementptr inbounds ([67 x i8], [67 x i8]* @str.111, i64 0, i64 0))
  %puts10 = call i32 @puts(i8* nonnull getelementptr inbounds ([111 x i8], [111 x i8]* @str.112, i64 0, i64 0))
  %puts11 = call i32 @puts(i8* nonnull getelementptr inbounds ([335 x i8], [335 x i8]* @str.113, i64 0, i64 0))
  %puts12 = call i32 @puts(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @str.114, i64 0, i64 0))
  %puts13 = call i32 @puts(i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @str.115, i64 0, i64 0))
  %puts14 = call i32 @puts(i8* nonnull getelementptr inbounds ([88 x i8], [88 x i8]* @str.116, i64 0, i64 0))
  %puts15 = call i32 @puts(i8* nonnull getelementptr inbounds ([81 x i8], [81 x i8]* @str.117, i64 0, i64 0))
  %puts16 = call i32 @puts(i8* nonnull getelementptr inbounds ([268 x i8], [268 x i8]* @str.118, i64 0, i64 0))
  %puts17 = call i32 @puts(i8* nonnull getelementptr inbounds ([88 x i8], [88 x i8]* @str.119, i64 0, i64 0))
  %puts18 = call i32 @puts(i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @str.120, i64 0, i64 0))
  %259 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([175 x i8], [175 x i8]* @.str.46, i64 0, i64 0))
  %puts19 = call i32 @puts(i8* nonnull getelementptr inbounds ([184 x i8], [184 x i8]* @str.121, i64 0, i64 0))
  %puts20 = call i32 @puts(i8* nonnull getelementptr inbounds ([84 x i8], [84 x i8]* @str.122, i64 0, i64 0))
  %puts21 = call i32 @puts(i8* nonnull getelementptr inbounds ([153 x i8], [153 x i8]* @str.123, i64 0, i64 0))
  %puts22 = call i32 @puts(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @str.124, i64 0, i64 0))
  %puts23 = call i32 @puts(i8* nonnull getelementptr inbounds ([81 x i8], [81 x i8]* @str.125, i64 0, i64 0))
  %puts24 = call i32 @puts(i8* nonnull getelementptr inbounds ([84 x i8], [84 x i8]* @str.126, i64 0, i64 0))
  %puts25 = call i32 @puts(i8* nonnull getelementptr inbounds ([70 x i8], [70 x i8]* @str.127, i64 0, i64 0))
  %puts26 = call i32 @puts(i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @str.128, i64 0, i64 0))
  %puts27 = call i32 @puts(i8* nonnull getelementptr inbounds ([84 x i8], [84 x i8]* @str.129, i64 0, i64 0))
  %puts28 = call i32 @puts(i8* nonnull getelementptr inbounds ([73 x i8], [73 x i8]* @str.130, i64 0, i64 0))
  %puts29 = call i32 @puts(i8* nonnull getelementptr inbounds ([81 x i8], [81 x i8]* @str.131, i64 0, i64 0))
  %puts30 = call i32 @puts(i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @str.132, i64 0, i64 0))
  %puts31 = call i32 @puts(i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @str.133, i64 0, i64 0))
  %puts32 = call i32 @puts(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @str.134, i64 0, i64 0))
  %puts33 = call i32 @puts(i8* nonnull getelementptr inbounds ([86 x i8], [86 x i8]* @str.135, i64 0, i64 0))
  %puts34 = call i32 @puts(i8* nonnull getelementptr inbounds ([160 x i8], [160 x i8]* @str.136, i64 0, i64 0))
  %260 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([116 x i8], [116 x i8]* @.str.63, i64 0, i64 0))
  %puts35 = call i32 @puts(i8* nonnull getelementptr inbounds ([64 x i8], [64 x i8]* @str.137, i64 0, i64 0))
  %puts36 = call i32 @puts(i8* nonnull getelementptr inbounds ([64 x i8], [64 x i8]* @str.138, i64 0, i64 0))
  %puts37 = call i32 @puts(i8* nonnull getelementptr inbounds ([58 x i8], [58 x i8]* @str.139, i64 0, i64 0))
  %puts38 = call i32 @puts(i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @str.140, i64 0, i64 0))
  call void @exit(i32 0) #17
  unreachable

; <label>:261                                     ; preds = %255, %245, %231, %217, %204, %190, %183, %170, %164, %157, %147, %137, %124, %114, %104, %94, %84, %71, %63, %53
  %ny.1 = phi i32 [ %ny.076, %53 ], [ %ny.076, %63 ], [ %ny.076, %71 ], [ %ny.076, %84 ], [ %ny.076, %94 ], [ %110, %104 ], [ %ny.076, %114 ], [ %ny.076, %124 ], [ %ny.076, %137 ], [ %ny.076, %147 ], [ %ny.076, %157 ], [ %ny.076, %170 ], [ %ny.076, %183 ], [ %ny.076, %204 ], [ %ny.076, %217 ], [ %ny.076, %231 ], [ %ny.076, %245 ], [ %ny.076, %255 ], [ %ny.076, %164 ], [ %ny.076, %190 ]
  %nz.1 = phi i32 [ %nz.077, %53 ], [ %nz.077, %63 ], [ %nz.077, %71 ], [ %nz.077, %84 ], [ %nz.077, %94 ], [ %nz.077, %104 ], [ %120, %114 ], [ %nz.077, %124 ], [ %nz.077, %137 ], [ %nz.077, %147 ], [ %nz.077, %157 ], [ %nz.077, %170 ], [ %nz.077, %183 ], [ %nz.077, %204 ], [ %nz.077, %217 ], [ %nz.077, %231 ], [ %nz.077, %245 ], [ %nz.077, %255 ], [ %nz.077, %164 ], [ %nz.077, %190 ]
  %check_safeexchange.1 = phi i32 [ %check_safeexchange.078, %53 ], [ %check_safeexchange.078, %63 ], [ %check_safeexchange.078, %71 ], [ %check_safeexchange.078, %84 ], [ %check_safeexchange.078, %94 ], [ %check_safeexchange.078, %104 ], [ %check_safeexchange.078, %114 ], [ %check_safeexchange.078, %124 ], [ %check_safeexchange.078, %137 ], [ %check_safeexchange.078, %147 ], [ %check_safeexchange.078, %157 ], [ %check_safeexchange.078, %170 ], [ %check_safeexchange.078, %183 ], [ %check_safeexchange.078, %204 ], [ %check_safeexchange.078, %217 ], [ %check_safeexchange.078, %231 ], [ %check_safeexchange.078, %245 ], [ %check_safeexchange.078, %255 ], [ 1, %164 ], [ %check_safeexchange.078, %190 ]
  %nx.1 = phi i32 [ %nx.079, %53 ], [ %nx.079, %63 ], [ %nx.079, %71 ], [ %nx.079, %84 ], [ %100, %94 ], [ %nx.079, %104 ], [ %nx.079, %114 ], [ %nx.079, %124 ], [ %nx.079, %137 ], [ %nx.079, %147 ], [ %nx.079, %157 ], [ %nx.079, %170 ], [ %nx.079, %183 ], [ %nx.079, %204 ], [ %nx.079, %217 ], [ %nx.079, %231 ], [ %nx.079, %245 ], [ %nx.079, %255 ], [ %nx.079, %164 ], [ %nx.079, %190 ]
  %use_sse.1 = phi i32 [ %use_sse.080, %53 ], [ %use_sse.080, %63 ], [ %use_sse.080, %71 ], [ %use_sse.080, %84 ], [ %use_sse.080, %94 ], [ %use_sse.080, %104 ], [ %use_sse.080, %114 ], [ %use_sse.080, %124 ], [ %use_sse.080, %137 ], [ %use_sse.080, %147 ], [ %163, %157 ], [ %use_sse.080, %170 ], [ %use_sse.080, %183 ], [ %use_sse.080, %204 ], [ %use_sse.080, %217 ], [ %use_sse.080, %231 ], [ %use_sse.080, %245 ], [ %use_sse.080, %255 ], [ %use_sse.080, %164 ], [ %use_sse.080, %190 ]
  %screen_yaml.1 = phi i32 [ %screen_yaml.081, %53 ], [ %screen_yaml.081, %63 ], [ %screen_yaml.081, %71 ], [ %screen_yaml.081, %84 ], [ %screen_yaml.081, %94 ], [ %screen_yaml.081, %104 ], [ %screen_yaml.081, %114 ], [ %screen_yaml.081, %124 ], [ %screen_yaml.081, %137 ], [ %screen_yaml.081, %147 ], [ %screen_yaml.081, %157 ], [ %screen_yaml.081, %170 ], [ %screen_yaml.081, %183 ], [ %screen_yaml.081, %204 ], [ %screen_yaml.081, %217 ], [ %screen_yaml.081, %231 ], [ %screen_yaml.081, %245 ], [ %screen_yaml.081, %255 ], [ %screen_yaml.081, %164 ], [ 1, %190 ]
  %yaml_output.1 = phi i32 [ %yaml_output.082, %53 ], [ %yaml_output.082, %63 ], [ %yaml_output.082, %71 ], [ %yaml_output.082, %84 ], [ %yaml_output.082, %94 ], [ %yaml_output.082, %104 ], [ %yaml_output.082, %114 ], [ %yaml_output.082, %124 ], [ %yaml_output.082, %137 ], [ %yaml_output.082, %147 ], [ %yaml_output.082, %157 ], [ %yaml_output.082, %170 ], [ %189, %183 ], [ %yaml_output.082, %204 ], [ %yaml_output.082, %217 ], [ %yaml_output.082, %231 ], [ %yaml_output.082, %245 ], [ %yaml_output.082, %255 ], [ %yaml_output.082, %164 ], [ %yaml_output.082, %190 ]
  %halfneigh.1 = phi i32 [ %halfneigh.083, %53 ], [ %halfneigh.083, %63 ], [ %halfneigh.083, %71 ], [ %halfneigh.083, %84 ], [ %halfneigh.083, %94 ], [ %halfneigh.083, %104 ], [ %halfneigh.083, %114 ], [ %halfneigh.083, %124 ], [ %halfneigh.083, %137 ], [ %153, %147 ], [ %halfneigh.083, %157 ], [ %halfneigh.083, %170 ], [ %halfneigh.083, %183 ], [ %halfneigh.083, %204 ], [ %halfneigh.083, %217 ], [ %halfneigh.083, %231 ], [ %halfneigh.083, %245 ], [ %halfneigh.083, %255 ], [ %halfneigh.083, %164 ], [ %halfneigh.083, %190 ]
  %system_size.1 = phi i32 [ %system_size.084, %53 ], [ %system_size.084, %63 ], [ %system_size.084, %71 ], [ %90, %84 ], [ %system_size.084, %94 ], [ %system_size.084, %104 ], [ %system_size.084, %114 ], [ %system_size.084, %124 ], [ %system_size.084, %137 ], [ %system_size.084, %147 ], [ %system_size.084, %157 ], [ %system_size.084, %170 ], [ %system_size.084, %183 ], [ %system_size.084, %204 ], [ %system_size.084, %217 ], [ %system_size.084, %231 ], [ %system_size.084, %245 ], [ %system_size.084, %255 ], [ %system_size.084, %164 ], [ %system_size.084, %190 ]
  %neighbor_size.1 = phi i32 [ %neighbor_size.085, %53 ], [ %neighbor_size.085, %63 ], [ %neighbor_size.085, %71 ], [ %neighbor_size.085, %84 ], [ %neighbor_size.085, %94 ], [ %neighbor_size.085, %104 ], [ %neighbor_size.085, %114 ], [ %neighbor_size.085, %124 ], [ %143, %137 ], [ %neighbor_size.085, %147 ], [ %neighbor_size.085, %157 ], [ %neighbor_size.085, %170 ], [ %neighbor_size.085, %183 ], [ %neighbor_size.085, %204 ], [ %neighbor_size.085, %217 ], [ %neighbor_size.085, %231 ], [ %neighbor_size.085, %245 ], [ %neighbor_size.085, %255 ], [ %neighbor_size.085, %164 ], [ %neighbor_size.085, %190 ]
  %ghost_newton.1 = phi i32 [ %ghost_newton.086, %53 ], [ %ghost_newton.086, %63 ], [ %ghost_newton.086, %71 ], [ %ghost_newton.086, %84 ], [ %ghost_newton.086, %94 ], [ %ghost_newton.086, %104 ], [ %ghost_newton.086, %114 ], [ %ghost_newton.086, %124 ], [ %ghost_newton.086, %137 ], [ %ghost_newton.086, %147 ], [ %ghost_newton.086, %157 ], [ %ghost_newton.086, %170 ], [ %ghost_newton.086, %183 ], [ %ghost_newton.086, %204 ], [ %ghost_newton.086, %217 ], [ %ghost_newton.086, %231 ], [ %251, %245 ], [ %ghost_newton.086, %255 ], [ %ghost_newton.086, %164 ], [ %ghost_newton.086, %190 ]
  %sort.1 = phi i32 [ %sort.087, %53 ], [ %sort.087, %63 ], [ %sort.087, %71 ], [ %sort.087, %84 ], [ %sort.087, %94 ], [ %sort.087, %104 ], [ %sort.087, %114 ], [ %sort.087, %124 ], [ %sort.087, %137 ], [ %sort.087, %147 ], [ %sort.087, %157 ], [ %176, %170 ], [ %sort.087, %183 ], [ %sort.087, %204 ], [ %sort.087, %217 ], [ %sort.087, %231 ], [ %sort.087, %245 ], [ %sort.087, %255 ], [ %sort.087, %164 ], [ %sort.087, %190 ]
  %ntypes.1 = phi i32 [ %ntypes.088, %53 ], [ %ntypes.088, %63 ], [ %ntypes.088, %71 ], [ %ntypes.088, %84 ], [ %ntypes.088, %94 ], [ %ntypes.088, %104 ], [ %ntypes.088, %114 ], [ %130, %124 ], [ %ntypes.088, %137 ], [ %ntypes.088, %147 ], [ %ntypes.088, %157 ], [ %ntypes.088, %170 ], [ %ntypes.088, %183 ], [ %ntypes.088, %204 ], [ %ntypes.088, %217 ], [ %ntypes.088, %231 ], [ %ntypes.088, %245 ], [ %ntypes.088, %255 ], [ %ntypes.088, %164 ], [ %ntypes.088, %190 ]
  %i1.1 = phi i32 [ %54, %53 ], [ %64, %63 ], [ %72, %71 ], [ %85, %84 ], [ %95, %94 ], [ %105, %104 ], [ %115, %114 ], [ %125, %124 ], [ %138, %137 ], [ %148, %147 ], [ %158, %157 ], [ %171, %170 ], [ %184, %183 ], [ %206, %204 ], [ %218, %217 ], [ %232, %231 ], [ %246, %245 ], [ %i1.089, %255 ], [ %i1.089, %164 ], [ %i1.089, %190 ]
  %num_steps.1 = phi i32 [ %num_steps.090, %53 ], [ %num_steps.090, %63 ], [ %77, %71 ], [ %num_steps.090, %84 ], [ %num_steps.090, %94 ], [ %num_steps.090, %104 ], [ %num_steps.090, %114 ], [ %num_steps.090, %124 ], [ %num_steps.090, %137 ], [ %num_steps.090, %147 ], [ %num_steps.090, %157 ], [ %num_steps.090, %170 ], [ %num_steps.090, %183 ], [ %num_steps.090, %204 ], [ %num_steps.090, %217 ], [ %num_steps.090, %231 ], [ %num_steps.090, %245 ], [ %num_steps.090, %255 ], [ %num_steps.090, %164 ], [ %num_steps.090, %190 ]
  %num_threads.1 = phi i32 [ %59, %53 ], [ %num_threads.091, %63 ], [ %num_threads.091, %71 ], [ %num_threads.091, %84 ], [ %num_threads.091, %94 ], [ %num_threads.091, %104 ], [ %num_threads.091, %114 ], [ %num_threads.091, %124 ], [ %num_threads.091, %137 ], [ %num_threads.091, %147 ], [ %num_threads.091, %157 ], [ %num_threads.091, %170 ], [ %num_threads.091, %183 ], [ %num_threads.091, %204 ], [ %num_threads.091, %217 ], [ %num_threads.091, %231 ], [ %num_threads.091, %245 ], [ %num_threads.091, %255 ], [ %num_threads.091, %164 ], [ %num_threads.091, %190 ]
  %262 = add nsw i32 %i1.1, 1
  %263 = load i32, i32* %1, align 4, !tbaa !1
  %264 = icmp slt i32 %262, %263
  br i1 %264, label %43, label %._crit_edge.loopexit

; <label>:265                                     ; preds = %._crit_edge
  %266 = bitcast %class.Integrate* %integrate to i8*
  call void @llvm.lifetime.start(i64 88, i8* %266) #7
  invoke void @_ZN9IntegrateC1Ev(%class.Integrate* nonnull %integrate)
          to label %267 unwind label %300

; <label>:267                                     ; preds = %265
  %268 = bitcast %class.Thermo* %thermo to i8*
  call void @llvm.lifetime.start(i64 128, i8* %268) #7
  invoke void @_ZN6ThermoC1Ev(%class.Thermo* nonnull %thermo)
          to label %269 unwind label %304

; <label>:269                                     ; preds = %267
  %270 = bitcast %class.Comm* %comm to i8*
  call void @llvm.lifetime.start(i64 336, i8* %270) #7
  invoke void @_ZN4CommC1Ev(%class.Comm* nonnull %comm)
          to label %271 unwind label %308

; <label>:271                                     ; preds = %269
  %272 = bitcast %class.Timer* %timer to i8*
  call void @llvm.lifetime.start(i64 24, i8* %272) #7
  invoke void @_ZN5TimerC1Ev(%class.Timer* nonnull %timer)
          to label %273 unwind label %312

; <label>:273                                     ; preds = %271
  %274 = bitcast %class.ThreadData* %threads to i8*
  call void @llvm.lifetime.start(i64 20, i8* %274) #7
  %275 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %threads, i64 0, i32 0
  %276 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %threads, i64 0, i32 1
  %277 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %threads, i64 0, i32 2
  %278 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %threads, i64 0, i32 3
  %279 = bitcast %class.ThreadData* %threads to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, <4 x i32>* %279, align 16, !tbaa !1
  %280 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %threads, i64 0, i32 4
  store i32 1, i32* %280, align 16, !tbaa !13
  %281 = bitcast %class.Force** %force to i8*
  call void @llvm.lifetime.start(i64 8, i8* %281) #7
  %282 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  %283 = load i32, i32* %282, align 4, !tbaa !12
  %284 = icmp eq i32 %283, 1
  br i1 %284, label %285, label %324

; <label>:285                                     ; preds = %273
  %286 = invoke noalias i8* @_Znwm(i64 336) #18
          to label %287 unwind label %316

; <label>:287                                     ; preds = %285
  %288 = bitcast i8* %286 to %class.ForceEAM*
  invoke void @_ZN8ForceEAMC1Ei(%class.ForceEAM* %288, i32 %ntypes.0.lcssa)
          to label %289 unwind label %320

; <label>:289                                     ; preds = %287
  %290 = bitcast %class.Force** %force to i8**
  store i8* %286, i8** %290, align 8, !tbaa !5
  %291 = icmp eq i32 %ghost_newton.0.lcssa, 1
  br i1 %291, label %292, label %thread-pre-split

; <label>:292                                     ; preds = %289
  %293 = load i32, i32* %me, align 4, !tbaa !1
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %thread-pre-split

; <label>:295                                     ; preds = %292
  %puts59 = call i32 @puts(i8* nonnull getelementptr inbounds ([67 x i8], [67 x i8]* @str.149, i64 0, i64 0))
  br label %thread-pre-split

; <label>:296                                     ; preds = %841, %._crit_edge
  %297 = landingpad { i8*, i32 }
          cleanup
  %298 = extractvalue { i8*, i32 } %297, 0
  %299 = extractvalue { i8*, i32 } %297, 1
  br label %845

; <label>:300                                     ; preds = %839, %265
  %301 = landingpad { i8*, i32 }
          cleanup
  %302 = extractvalue { i8*, i32 } %301, 0
  %303 = extractvalue { i8*, i32 } %301, 1
  br label %844

; <label>:304                                     ; preds = %837, %267
  %305 = landingpad { i8*, i32 }
          cleanup
  %306 = extractvalue { i8*, i32 } %305, 0
  %307 = extractvalue { i8*, i32 } %305, 1
  br label %842

; <label>:308                                     ; preds = %836, %269
  %309 = landingpad { i8*, i32 }
          cleanup
  %310 = extractvalue { i8*, i32 } %309, 0
  %311 = extractvalue { i8*, i32 } %309, 1
  br label %840

; <label>:312                                     ; preds = %834, %271
  %313 = landingpad { i8*, i32 }
          cleanup
  %314 = extractvalue { i8*, i32 } %313, 0
  %315 = extractvalue { i8*, i32 } %313, 1
  br label %838

; <label>:316                                     ; preds = %832, %830, %825, %820, %778, %777, %764, %759, %758, %756, %.thread50, %749, %741, %740, %.thread48, %618, %614, %606, %590, %589, %587, %584, %574, %545, %541, %423, %327, %285
  %317 = landingpad { i8*, i32 }
          cleanup
  %318 = extractvalue { i8*, i32 } %317, 0
  %319 = extractvalue { i8*, i32 } %317, 1
  br label %835

; <label>:320                                     ; preds = %287
  %321 = landingpad { i8*, i32 }
          cleanup
  %322 = extractvalue { i8*, i32 } %321, 0
  %323 = extractvalue { i8*, i32 } %321, 1
  call void @_ZdlPv(i8* nonnull %286) #19
  br label %835

thread-pre-split:                                 ; preds = %295, %292, %289
  %ghost_newton.2.ph = phi i32 [ 0, %292 ], [ 0, %295 ], [ %ghost_newton.0.lcssa, %289 ]
  %.pr = load i32, i32* %282, align 4, !tbaa !12
  br label %324

; <label>:324                                     ; preds = %thread-pre-split, %273
  %325 = phi i32 [ %.pr, %thread-pre-split ], [ %283, %273 ]
  %ghost_newton.2 = phi i32 [ %ghost_newton.2.ph, %thread-pre-split ], [ %ghost_newton.0.lcssa, %273 ]
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %._crit_edge113

._crit_edge113:                                   ; preds = %324
  %.pre = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  br label %338

; <label>:327                                     ; preds = %324
  %328 = invoke noalias i8* @_Znwm(i64 128) #18
          to label %329 unwind label %316

; <label>:329                                     ; preds = %327
  %330 = bitcast i8* %328 to %class.ForceLJ*
  invoke void @_ZN7ForceLJC1Ei(%class.ForceLJ* %330, i32 %ntypes.0.lcssa)
          to label %331 unwind label %334

; <label>:331                                     ; preds = %329
  %332 = bitcast %class.Force** %force to i8**
  store i8* %328, i8** %332, align 8, !tbaa !5
  %333 = bitcast i8* %328 to %class.Force*
  %.pre114 = load i32, i32* %282, align 4, !tbaa !12
  br label %338

; <label>:334                                     ; preds = %329
  %335 = landingpad { i8*, i32 }
          cleanup
  %336 = extractvalue { i8*, i32 } %335, 0
  %337 = extractvalue { i8*, i32 } %335, 1
  call void @_ZdlPv(i8* nonnull %328) #19
  br label %835

; <label>:338                                     ; preds = %331, %._crit_edge113
  %339 = phi i32 [ %325, %._crit_edge113 ], [ %.pre114, %331 ]
  %340 = phi %class.Force* [ %.pre, %._crit_edge113 ], [ %333, %331 ]
  %341 = load i32, i32* %me, align 4, !tbaa !1
  store i32 %341, i32* %275, align 16, !tbaa !15
  %342 = load i32, i32* %nprocs, align 4, !tbaa !1
  store i32 %342, i32* %276, align 4, !tbaa !16
  store i32 0, i32* %277, align 8, !tbaa !17
  store i32 %num_threads.0.lcssa, i32* %278, align 4, !tbaa !18
  %343 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 11
  store %class.ThreadData* %threads, %class.ThreadData** %343, align 8, !tbaa !19
  %344 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 29
  store %class.ThreadData* %threads, %class.ThreadData** %344, align 8, !tbaa !22
  %345 = getelementptr inbounds %class.Force, %class.Force* %340, i64 0, i32 10
  store %class.ThreadData* %threads, %class.ThreadData** %345, align 8, !tbaa !24
  %346 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 11
  store %class.ThreadData* %threads, %class.ThreadData** %346, align 8, !tbaa !26
  %347 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 15
  store %class.ThreadData* %threads, %class.ThreadData** %347, align 8, !tbaa !28
  %348 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 15
  store %class.ThreadData* %threads, %class.ThreadData** %348, align 8, !tbaa !30
  %349 = icmp eq i32 %339, 0
  br i1 %349, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %338
  %350 = mul i32 %ntypes.0.lcssa, %ntypes.0.lcssa
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %352 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 7
  %353 = bitcast double* %352 to i64*
  %354 = load %class.Force*, %class.Force** %force, align 8
  %355 = getelementptr inbounds %class.Force, %class.Force* %354, i64 0, i32 13
  %356 = load double*, double** %355, align 8
  %357 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 8
  %358 = bitcast double* %357 to i64*
  %359 = getelementptr inbounds %class.Force, %class.Force* %354, i64 0, i32 15
  %360 = load double*, double** %359, align 8
  %361 = getelementptr inbounds %class.Force, %class.Force* %354, i64 0, i32 14
  %362 = load double*, double** %361, align 8
  %363 = zext i32 %350 to i64
  %xtraiter = and i32 %350, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %364

; <label>:364                                     ; preds = %.lr.ph
  %365 = load i64, i64* %353, align 8, !tbaa !32
  %366 = bitcast double* %356 to i64*
  store i64 %365, i64* %366, align 8, !tbaa !33
  %367 = load i64, i64* %358, align 8, !tbaa !34
  %368 = bitcast double* %360 to i64*
  store i64 %367, i64* %368, align 8, !tbaa !33
  %369 = load double, double* %357, align 8, !tbaa !34
  %370 = fmul double %369, %369
  %371 = fmul double %369, %370
  %372 = fmul double %369, %371
  %373 = fmul double %369, %372
  %374 = fmul double %369, %373
  store double %374, double* %362, align 8, !tbaa !33
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %364, %.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph ], [ 1, %364 ]
  %375 = icmp eq i32 %350, 1
  br i1 %375, label %.loopexit.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %376

; <label>:376                                     ; preds = %376, %.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.split.split ], [ %indvars.iv.next.1, %376 ]
  %377 = load i64, i64* %353, align 8, !tbaa !32
  %378 = getelementptr inbounds double, double* %356, i64 %indvars.iv
  %379 = bitcast double* %378 to i64*
  store i64 %377, i64* %379, align 8, !tbaa !33
  %380 = load i64, i64* %358, align 8, !tbaa !34
  %381 = getelementptr inbounds double, double* %360, i64 %indvars.iv
  %382 = bitcast double* %381 to i64*
  store i64 %380, i64* %382, align 8, !tbaa !33
  %383 = load double, double* %357, align 8, !tbaa !34
  %384 = fmul double %383, %383
  %385 = fmul double %383, %384
  %386 = fmul double %383, %385
  %387 = fmul double %383, %386
  %388 = fmul double %383, %387
  %389 = getelementptr inbounds double, double* %362, i64 %indvars.iv
  store double %388, double* %389, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %390 = load i64, i64* %353, align 8, !tbaa !32
  %391 = getelementptr inbounds double, double* %356, i64 %indvars.iv.next
  %392 = bitcast double* %391 to i64*
  store i64 %390, i64* %392, align 8, !tbaa !33
  %393 = load i64, i64* %358, align 8, !tbaa !34
  %394 = getelementptr inbounds double, double* %360, i64 %indvars.iv.next
  %395 = bitcast double* %394 to i64*
  store i64 %393, i64* %395, align 8, !tbaa !33
  %396 = load double, double* %357, align 8, !tbaa !34
  %397 = fmul double %396, %396
  %398 = fmul double %396, %397
  %399 = fmul double %396, %398
  %400 = fmul double %396, %399
  %401 = fmul double %396, %400
  %402 = getelementptr inbounds double, double* %362, i64 %indvars.iv.next
  store double %401, double* %402, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %403 = icmp slt i64 %indvars.iv.next.1, %363
  br i1 %403, label %376, label %.loopexit.loopexit.unr-lcssa

.loopexit.loopexit.unr-lcssa:                     ; preds = %376
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.loopexit.loopexit.unr-lcssa, %.lr.ph.split
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader, %338
  %404 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  store i32 %ghost_newton.2, i32* %404, align 8, !tbaa !35
  call void @omp_set_num_threads(i32 %num_threads.0.lcssa) #7
  %405 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 14
  store %class.Timer* %timer, %class.Timer** %405, align 8, !tbaa !36
  %406 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %407 = getelementptr inbounds %class.Force, %class.Force* %406, i64 0, i32 12
  store %class.Timer* %timer, %class.Timer** %407, align 8, !tbaa !37
  %408 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 30
  store i32 %check_safeexchange.0.lcssa, i32* %408, align 8, !tbaa !38
  %409 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 31
  store i32 0, i32* %409, align 4, !tbaa !39
  %410 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %411 = getelementptr inbounds %class.Force, %class.Force* %410, i64 0, i32 8
  store i32 %use_sse.0.lcssa, i32* %411, align 4, !tbaa !40
  %412 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  store i32 %halfneigh.0.lcssa, i32* %412, align 4, !tbaa !41
  %413 = icmp slt i32 %halfneigh.0.lcssa, 0
  br i1 %413, label %414, label %417

; <label>:414                                     ; preds = %.loopexit
  %415 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %416 = getelementptr inbounds %class.Force, %class.Force* %415, i64 0, i32 9
  store i32 1, i32* %416, align 8, !tbaa !42
  br label %417

; <label>:417                                     ; preds = %414, %.loopexit
  %418 = icmp eq i32 %use_sse.0.lcssa, 0
  br i1 %418, label %426, label %419

; <label>:419                                     ; preds = %417
  %420 = load i32, i32* %me, align 4, !tbaa !1
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %423

; <label>:422                                     ; preds = %419
  %puts51 = call i32 @puts(i8* nonnull getelementptr inbounds ([96 x i8], [96 x i8]* @str.141, i64 0, i64 0))
  br label %423

; <label>:423                                     ; preds = %422, %419
  %424 = invoke i32 @MPI_Finalize()
          to label %425 unwind label %316

; <label>:425                                     ; preds = %423
  call void @exit(i32 0) #17
  unreachable

; <label>:426                                     ; preds = %417
  %427 = icmp sgt i32 %num_steps.0.lcssa, 0
  br i1 %427, label %428, label %430

; <label>:428                                     ; preds = %426
  %429 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 10
  store i32 %num_steps.0.lcssa, i32* %429, align 8, !tbaa !43
  br label %430

; <label>:430                                     ; preds = %428, %426
  %431 = icmp sgt i32 %system_size.0.lcssa, 0
  br i1 %431, label %432, label %436

; <label>:432                                     ; preds = %430
  %433 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 0
  store i32 %system_size.0.lcssa, i32* %433, align 8, !tbaa !44
  %434 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 1
  store i32 %system_size.0.lcssa, i32* %434, align 4, !tbaa !45
  %435 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  store i32 %system_size.0.lcssa, i32* %435, align 8, !tbaa !46
  br label %436

; <label>:436                                     ; preds = %432, %430
  %437 = icmp sgt i32 %nx.0.lcssa, 0
  br i1 %437, label %438, label %455

; <label>:438                                     ; preds = %436
  %439 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 0
  store i32 %nx.0.lcssa, i32* %439, align 8, !tbaa !44
  %440 = icmp sgt i32 %ny.0.lcssa, 0
  br i1 %440, label %441, label %443

; <label>:441                                     ; preds = %438
  %442 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 1
  store i32 %ny.0.lcssa, i32* %442, align 4, !tbaa !45
  br label %447

; <label>:443                                     ; preds = %438
  %444 = icmp slt i32 %system_size.0.lcssa, 0
  br i1 %444, label %445, label %447

; <label>:445                                     ; preds = %443
  %446 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 1
  store i32 %nx.0.lcssa, i32* %446, align 4, !tbaa !45
  br label %447

; <label>:447                                     ; preds = %445, %443, %441
  %448 = icmp sgt i32 %nz.0.lcssa, 0
  br i1 %448, label %449, label %451

; <label>:449                                     ; preds = %447
  %450 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  store i32 %nz.0.lcssa, i32* %450, align 8, !tbaa !46
  br label %455

; <label>:451                                     ; preds = %447
  %452 = icmp slt i32 %system_size.0.lcssa, 0
  br i1 %452, label %453, label %455

; <label>:453                                     ; preds = %451
  %454 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  store i32 %nx.0.lcssa, i32* %454, align 8, !tbaa !46
  br label %455

; <label>:455                                     ; preds = %453, %451, %449, %436
  %456 = icmp sgt i32 %neighbor_size.0.lcssa, 0
  br i1 %456, label %.thread, label %460

.thread:                                          ; preds = %455
  %457 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  store i32 %neighbor_size.0.lcssa, i32* %457, align 4, !tbaa !47
  %458 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  store i32 %neighbor_size.0.lcssa, i32* %458, align 8, !tbaa !48
  %459 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 3
  store i32 %neighbor_size.0.lcssa, i32* %459, align 4, !tbaa !49
  %.pre115 = load i8*, i8** %4, align 8
  br label %.thread124

; <label>:460                                     ; preds = %455
  %461 = icmp slt i32 %neighbor_size.0.lcssa, 0
  %462 = load i8*, i8** %4, align 8
  %463 = icmp eq i8* %462, null
  %or.cond = and i1 %461, %463
  br i1 %or.cond, label %464, label %484

; <label>:464                                     ; preds = %460
  %465 = bitcast %struct.In* %in to i64*
  %466 = load i64, i64* %465, align 8
  %467 = trunc i64 %466 to i32
  %468 = sitofp i32 %467 to double
  %469 = fmul double %468, 0x3FEAAAAAAAAAAAAB
  %470 = fptosi double %469 to i32
  %471 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  store i32 %470, i32* %471, align 4, !tbaa !47
  %472 = lshr i64 %466, 32
  %473 = trunc i64 %472 to i32
  %474 = sitofp i32 %473 to double
  %475 = fmul double %474, 0x3FEAAAAAAAAAAAAB
  %476 = fptosi double %475 to i32
  %477 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  store i32 %476, i32* %477, align 8, !tbaa !48
  %478 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %479 = load i32, i32* %478, align 8, !tbaa !46
  %480 = sitofp i32 %479 to double
  %481 = fmul double %480, 0x3FEAAAAAAAAAAAAB
  %482 = fptosi double %481 to i32
  %483 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 3
  store i32 %482, i32* %483, align 4, !tbaa !49
  br label %.thread124

; <label>:484                                     ; preds = %460
  %.not = xor i1 %461, true
  %or.cond41 = or i1 %463, %.not
  br i1 %or.cond41, label %..thread124_crit_edge, label %.thread127

..thread124_crit_edge:                            ; preds = %484
  %.phi.trans.insert.phi.trans.insert = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  %.pre117.pre = load i32, i32* %.phi.trans.insert.phi.trans.insert, align 4, !tbaa !47
  br label %.thread124

.thread127:                                       ; preds = %484
  %485 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  store i32 -1, i32* %485, align 4, !tbaa !47
  br label %489

.thread124:                                       ; preds = %..thread124_crit_edge, %464, %.thread
  %.phi.trans.insert.pre-phi = phi i32* [ %.phi.trans.insert.phi.trans.insert, %..thread124_crit_edge ], [ %471, %464 ], [ %457, %.thread ]
  %.pre117 = phi i32 [ %.pre117.pre, %..thread124_crit_edge ], [ %470, %464 ], [ %neighbor_size.0.lcssa, %.thread ]
  %486 = phi i8* [ %462, %..thread124_crit_edge ], [ null, %464 ], [ %.pre115, %.thread ]
  %487 = icmp eq i32 %.pre117, 0
  br i1 %487, label %488, label %489

; <label>:488                                     ; preds = %.thread124
  store i32 1, i32* %.phi.trans.insert.pre-phi, align 4, !tbaa !47
  br label %489

; <label>:489                                     ; preds = %488, %.thread124, %.thread127
  %.pre-phi128 = phi i32* [ %485, %.thread127 ], [ %.phi.trans.insert.pre-phi, %488 ], [ %.phi.trans.insert.pre-phi, %.thread124 ]
  %490 = phi i8* [ %462, %.thread127 ], [ %486, %488 ], [ %486, %.thread124 ]
  %491 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  %492 = bitcast i32* %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = trunc i64 %493 to i32
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %496, label %497

; <label>:496                                     ; preds = %489
  store i32 1, i32* %491, align 8, !tbaa !48
  br label %497

; <label>:497                                     ; preds = %496, %489
  %498 = icmp ult i64 %493, 4294967296
  br i1 %498, label %499, label %501

; <label>:499                                     ; preds = %497
  %500 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 3
  store i32 1, i32* %500, align 4, !tbaa !49
  br label %501

; <label>:501                                     ; preds = %499, %497
  %502 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 10
  %503 = load i32, i32* %502, align 8, !tbaa !43
  %504 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 2
  store i32 %503, i32* %504, align 8, !tbaa !50
  %505 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 11
  %506 = bitcast double* %505 to i64*
  %507 = load i64, i64* %506, align 8, !tbaa !51
  %508 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 0
  %509 = bitcast %class.Integrate* %integrate to i64*
  store i64 %507, i64* %509, align 8, !tbaa !52
  %510 = icmp sgt i32 %sort.0.lcssa, 0
  br i1 %510, label %._crit_edge118, label %511

._crit_edge118:                                   ; preds = %501
  %.phi.trans.insert119 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 12
  %.pre120 = load i32, i32* %.phi.trans.insert119, align 8, !tbaa !53
  br label %516

; <label>:511                                     ; preds = %501
  %512 = icmp slt i32 %sort.0.lcssa, 0
  %513 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 12
  %514 = load i32, i32* %513, align 8, !tbaa !53
  %515 = select i1 %512, i32 %514, i32 0
  br label %516

; <label>:516                                     ; preds = %511, %._crit_edge118
  %517 = phi i32 [ %.pre120, %._crit_edge118 ], [ %514, %511 ]
  %518 = phi i32 [ %sort.0.lcssa, %._crit_edge118 ], [ %515, %511 ]
  %519 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 10
  store i32 %518, i32* %519, align 8, !tbaa !54
  %520 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 0
  store i32 %517, i32* %520, align 8, !tbaa !55
  %521 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 14
  %522 = bitcast double* %521 to i64*
  %523 = load i64, i64* %522, align 8, !tbaa !56
  %524 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 4
  %525 = bitcast double* %524 to i64*
  store i64 %523, i64* %525, align 8, !tbaa !57
  %526 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 13
  %527 = bitcast double* %526 to i64*
  %528 = load i64, i64* %527, align 8, !tbaa !58
  %529 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %530 = getelementptr inbounds %class.Force, %class.Force* %529, i64 0, i32 1
  %531 = bitcast double* %530 to i64*
  store i64 %528, i64* %531, align 8, !tbaa !59
  %532 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 15
  %533 = load i32, i32* %532, align 8, !tbaa !60
  %534 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 0
  store i32 %533, i32* %534, align 8, !tbaa !61
  %535 = load i32, i32* %me, align 4, !tbaa !1
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %537, label %538

; <label>:537                                     ; preds = %516
  %puts58 = call i32 @puts(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @str.148, i64 0, i64 0))
  %.pre121 = load i8*, i8** %4, align 8, !tbaa !7
  br label %538

; <label>:538                                     ; preds = %537, %516
  %539 = phi i8* [ %.pre121, %537 ], [ %490, %516 ]
  %540 = icmp eq i8* %539, null
  br i1 %540, label %574, label %541

; <label>:541                                     ; preds = %538
  %542 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %543 = load i32, i32* %542, align 8, !tbaa !11
  %544 = invoke i32 @_Z16read_lammps_dataR4AtomR4CommR8NeighborR9IntegrateR6ThermoPci(%class.Atom* nonnull dereferenceable(224) %atom, %class.Comm* nonnull dereferenceable(336) %comm, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Integrate* nonnull dereferenceable(88) %integrate, %class.Thermo* nonnull dereferenceable(128) %thermo, i8* nonnull %539, i32 %543)
          to label %545 unwind label %316

; <label>:545                                     ; preds = %541
  %546 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %547 = load double, double* %546, align 8, !tbaa !62
  %548 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %549 = load double, double* %548, align 8, !tbaa !63
  %550 = fmul double %547, %549
  %551 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %552 = load double, double* %551, align 8, !tbaa !64
  %553 = fmul double %550, %552
  %554 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %555 = load i32, i32* %554, align 8, !tbaa !65
  %556 = sitofp i32 %555 to double
  %557 = fdiv double %556, %553
  %558 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 4
  store double %557, double* %558, align 8, !tbaa !66
  %559 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %560 = bitcast %class.Force* %559 to void (%class.Force*)***
  %561 = load void (%class.Force*)**, void (%class.Force*)*** %560, align 8, !tbaa !67
  %562 = getelementptr inbounds void (%class.Force*)*, void (%class.Force*)** %561, i64 2
  %563 = load void (%class.Force*)*, void (%class.Force*)** %562, align 8
  invoke void %563(%class.Force* %559)
          to label %564 unwind label %316

; <label>:564                                     ; preds = %545
  %565 = load i32, i32* %282, align 4, !tbaa !12
  %566 = icmp eq i32 %565, 1
  br i1 %566, label %567, label %621

; <label>:567                                     ; preds = %564
  %568 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %569 = getelementptr inbounds %class.Force, %class.Force* %568, i64 0, i32 4
  %570 = bitcast double* %569 to i64*
  %571 = load i64, i64* %570, align 8, !tbaa !69
  %572 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 13
  %573 = bitcast double* %572 to i64*
  store i64 %571, i64* %573, align 8, !tbaa !70
  br label %621

; <label>:574                                     ; preds = %538
  %575 = bitcast %struct.In* %in to i64*
  %576 = load i64, i64* %575, align 8
  %577 = trunc i64 %576 to i32
  %578 = lshr i64 %576, 32
  %579 = trunc i64 %578 to i32
  %580 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %581 = load i32, i32* %580, align 8, !tbaa !46
  %582 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 4
  %583 = load double, double* %582, align 8, !tbaa !66
  invoke void @_Z10create_boxR4Atomiiid(%class.Atom* nonnull dereferenceable(224) %atom, i32 %577, i32 %579, i32 %581, double %583)
          to label %584 unwind label %316

; <label>:584                                     ; preds = %574
  %585 = load double, double* %524, align 8, !tbaa !57
  %586 = invoke i32 @_ZN4Comm5setupEdR4Atom(%class.Comm* nonnull %comm, double %585, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %587 unwind label %316

; <label>:587                                     ; preds = %584
  %588 = invoke i32 @_ZN8Neighbor5setupER4Atom(%class.Neighbor* nonnull %neighbor, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %589 unwind label %316

; <label>:589                                     ; preds = %587
  invoke void @_ZN9Integrate5setupEv(%class.Integrate* nonnull %integrate)
          to label %590 unwind label %316

; <label>:590                                     ; preds = %589
  %591 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %592 = bitcast %class.Force* %591 to void (%class.Force*)***
  %593 = load void (%class.Force*)**, void (%class.Force*)*** %592, align 8, !tbaa !67
  %594 = getelementptr inbounds void (%class.Force*)*, void (%class.Force*)** %593, i64 2
  %595 = load void (%class.Force*)*, void (%class.Force*)** %594, align 8
  invoke void %595(%class.Force* %591)
          to label %596 unwind label %316

; <label>:596                                     ; preds = %590
  %597 = load i32, i32* %282, align 4, !tbaa !12
  %598 = icmp eq i32 %597, 1
  br i1 %598, label %599, label %606

; <label>:599                                     ; preds = %596
  %600 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %601 = getelementptr inbounds %class.Force, %class.Force* %600, i64 0, i32 4
  %602 = bitcast double* %601 to i64*
  %603 = load i64, i64* %602, align 8, !tbaa !69
  %604 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 13
  %605 = bitcast double* %604 to i64*
  store i64 %603, i64* %605, align 8, !tbaa !70
  br label %606

; <label>:606                                     ; preds = %599, %596
  %607 = load i64, i64* %575, align 8
  %608 = trunc i64 %607 to i32
  %609 = lshr i64 %607, 32
  %610 = trunc i64 %609 to i32
  %611 = load i32, i32* %580, align 8, !tbaa !46
  %612 = load double, double* %582, align 8, !tbaa !66
  %613 = invoke i32 @_Z12create_atomsR4Atomiiid(%class.Atom* nonnull dereferenceable(224) %atom, i32 %608, i32 %610, i32 %611, double %612)
          to label %614 unwind label %316

; <label>:614                                     ; preds = %606
  %615 = load double, double* %582, align 8, !tbaa !66
  %616 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %617 = load i32, i32* %616, align 8, !tbaa !11
  invoke void @_ZN6Thermo5setupEdR9IntegrateR4Atomi(%class.Thermo* nonnull %thermo, double %615, %class.Integrate* nonnull dereferenceable(88) %integrate, %class.Atom* nonnull dereferenceable(224) %atom, i32 %617)
          to label %618 unwind label %316

; <label>:618                                     ; preds = %614
  %619 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 3
  %620 = load double, double* %619, align 8, !tbaa !71
  invoke void @_Z15create_velocitydR4AtomR6Thermo(double %620, %class.Atom* nonnull dereferenceable(224) %atom, %class.Thermo* nonnull dereferenceable(128) %thermo)
          to label %621 unwind label %316

; <label>:621                                     ; preds = %618, %567, %564
  %622 = load i32, i32* %me, align 4, !tbaa !1
  %623 = icmp eq i32 %622, 0
  br i1 %623, label %624, label %.thread48

; <label>:624                                     ; preds = %621
  %puts57 = call i32 @puts(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @str.147, i64 0, i64 0))
  %.pr47 = load i32, i32* %me, align 4, !tbaa !1
  %625 = icmp eq i32 %.pr47, 0
  br i1 %625, label %626, label %.thread48

; <label>:626                                     ; preds = %624
  %627 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %628 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str.72, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %627)
  %629 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %630 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %629)
  %631 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %632 = load %class.ThreadData*, %class.ThreadData** %347, align 8, !tbaa !28
  %633 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %632, i64 0, i32 1
  %634 = load i32, i32* %633, align 4, !tbaa !16
  %635 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %631, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.74, i64 0, i64 0), i32 %634)
  %636 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %637 = load %class.ThreadData*, %class.ThreadData** %347, align 8, !tbaa !28
  %638 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %637, i64 0, i32 3
  %639 = load i32, i32* %638, align 4, !tbaa !18
  %640 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %636, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.75, i64 0, i64 0), i32 %639)
  %641 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %642 = select i1 %11, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8* %input_file.0.lcssa
  %643 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %641, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.76, i64 0, i64 0), i8* %642)
  %644 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %645 = load i8*, i8** %4, align 8, !tbaa !7
  %646 = icmp ne i8* %645, null
  %647 = select i1 %646, i8* %645, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0)
  %648 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %644, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.77, i64 0, i64 0), i8* %647)
  %649 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %650 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.79, i64 0, i64 0), i64 21, i64 1, %struct._IO_FILE* %649)
  %651 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %652 = load i32, i32* %282, align 4, !tbaa !12
  %653 = icmp eq i32 %652, 0
  %654 = select i1 %653, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0)
  %655 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %651, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.80, i64 0, i64 0), i8* %654)
  %656 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %657 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 7
  %658 = load double, double* %657, align 8, !tbaa !32
  %659 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 8
  %660 = load double, double* %659, align 8, !tbaa !34
  %661 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %656, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.83, i64 0, i64 0), double %658, double %660)
  %662 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %663 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %664 = load i32, i32* %663, align 8, !tbaa !11
  %665 = icmp eq i32 %664, 0
  %666 = select i1 %665, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0)
  %667 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %662, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i64 0, i64 0), i8* %666)
  %668 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %669 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %670 = load i32, i32* %669, align 8, !tbaa !65
  %671 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %668, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.86, i64 0, i64 0), i32 %670)
  %672 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %673 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 7
  %674 = load i32, i32* %673, align 8, !tbaa !72
  %675 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %672, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.87, i64 0, i64 0), i32 %674)
  %676 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %677 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %678 = load double, double* %677, align 8, !tbaa !62
  %679 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %680 = load double, double* %679, align 8, !tbaa !63
  %681 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %682 = load double, double* %681, align 8, !tbaa !64
  %683 = bitcast %struct.In* %in to i64*
  %684 = load i64, i64* %683, align 8
  %685 = trunc i64 %684 to i32
  %686 = lshr i64 %684, 32
  %687 = trunc i64 %686 to i32
  %688 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %689 = load i32, i32* %688, align 8, !tbaa !46
  %690 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %676, i8* nonnull getelementptr inbounds ([61 x i8], [61 x i8]* @.str.88, i64 0, i64 0), double %678, double %680, double %682, i32 %685, i32 %687, i32 %689)
  %691 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %692 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 4
  %693 = load double, double* %692, align 8, !tbaa !66
  %694 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %691, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.89, i64 0, i64 0), double %693)
  %695 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %696 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %697 = getelementptr inbounds %class.Force, %class.Force* %696, i64 0, i32 1
  %698 = load double, double* %697, align 8, !tbaa !59
  %699 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %695, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.90, i64 0, i64 0), double %698)
  %700 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %701 = load double, double* %508, align 8, !tbaa !52
  %702 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %700, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.91, i64 0, i64 0), double %701)
  %703 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %704 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.92, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %703)
  %705 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %706 = load double, double* %524, align 8, !tbaa !57
  %707 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %705, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.93, i64 0, i64 0), double %706)
  %708 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %709 = load i32, i32* %412, align 4, !tbaa !41
  %710 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %708, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.94, i64 0, i64 0), i32 %709)
  %711 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %712 = load i32, i32* %.pre-phi128, align 4, !tbaa !47
  %713 = load i64, i64* %492, align 8
  %714 = trunc i64 %713 to i32
  %715 = lshr i64 %713, 32
  %716 = trunc i64 %715 to i32
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %711, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95, i64 0, i64 0), i32 %712, i32 %714, i32 %716)
  %718 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %719 = load i32, i32* %520, align 8, !tbaa !55
  %720 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %718, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.96, i64 0, i64 0), i32 %719)
  %721 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %722 = load i32, i32* %519, align 8, !tbaa !54
  %723 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %721, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.97, i64 0, i64 0), i32 %722)
  %724 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %725 = load i32, i32* %534, align 8, !tbaa !61
  %726 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %724, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.98, i64 0, i64 0), i32 %725)
  %727 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %728 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %727, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.99, i64 0, i64 0), i32 %ghost_newton.2)
  %729 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %730 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %731 = getelementptr inbounds %class.Force, %class.Force* %730, i64 0, i32 8
  %732 = load i32, i32* %731, align 4, !tbaa !40
  %733 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %729, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.100, i64 0, i64 0), i32 %732)
  %734 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %735 = load i32, i32* %409, align 4, !tbaa !39
  %736 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %734, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.101, i64 0, i64 0), i32 %735)
  %737 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %738 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %737, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.102, i64 0, i64 0), i32 8)
  br label %.thread48

.thread48:                                        ; preds = %626, %624, %621
  invoke void @_ZN4Comm8exchangeER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %739 unwind label %316

; <label>:739                                     ; preds = %.thread48
  br i1 %510, label %740, label %741

; <label>:740                                     ; preds = %739
  invoke void @_ZN4Atom4sortER8Neighbor(%class.Atom* nonnull %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor)
          to label %741 unwind label %316

; <label>:741                                     ; preds = %740, %739
  invoke void @_ZN4Comm7bordersER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %742 unwind label %316

; <label>:742                                     ; preds = %741
  %743 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %744 = getelementptr inbounds %class.Force, %class.Force* %743, i64 0, i32 5
  store i32 1, i32* %744, align 8, !tbaa !73
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 5, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %class.Neighbor*, %class.Atom*, %class.Force**, %class.Comm*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*), %class.Neighbor* nonnull %neighbor, %class.Atom* nonnull %atom, %class.Force** nonnull %force, %class.Comm* nonnull %comm, i32* nonnull %me)
  %745 = load i32, i32* %412, align 4, !tbaa !41
  %746 = icmp eq i32 %745, 0
  %747 = load i32, i32* %404, align 8
  %748 = icmp eq i32 %747, 0
  %or.cond43 = or i1 %746, %748
  br i1 %or.cond43, label %750, label %749

; <label>:749                                     ; preds = %742
  invoke void @_ZN4Comm19reverse_communicateER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %750 unwind label %316

; <label>:750                                     ; preds = %749, %742
  %751 = load i32, i32* %me, align 4, !tbaa !1
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %753, label %.thread50

; <label>:753                                     ; preds = %750
  %puts55 = call i32 @puts(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @str.145, i64 0, i64 0))
  %.pr49 = load i32, i32* %me, align 4, !tbaa !1
  %754 = icmp eq i32 %.pr49, 0
  br i1 %754, label %755, label %.thread50

; <label>:755                                     ; preds = %753
  %puts56 = call i32 @puts(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @str.146, i64 0, i64 0))
  br label %.thread50

.thread50:                                        ; preds = %755, %753, %750
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %class.Thermo*, %class.Atom*, %class.Neighbor*, %class.Force**, %class.Timer*, %class.Comm*)* @.omp_outlined..106 to void (i32*, i32*, ...)*), %class.Thermo* nonnull %thermo, %class.Atom* nonnull %atom, %class.Neighbor* nonnull %neighbor, %class.Force** nonnull %force, %class.Timer* nonnull %timer, %class.Comm* nonnull %comm)
  invoke void @_ZN5Timer13barrier_startEi(%class.Timer* nonnull %timer, i32 0)
          to label %756 unwind label %316

; <label>:756                                     ; preds = %.thread50
  %757 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  invoke void @_ZN9Integrate3runER4AtomP5ForceR8NeighborR4CommR6ThermoR5Timer(%class.Integrate* nonnull %integrate, %class.Atom* nonnull dereferenceable(224) %atom, %class.Force* %757, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, %class.Thermo* nonnull dereferenceable(128) %thermo, %class.Timer* nonnull dereferenceable(24) %timer)
          to label %758 unwind label %316

; <label>:758                                     ; preds = %756
  invoke void @_ZN5Timer12barrier_stopEi(%class.Timer* nonnull %timer, i32 0)
          to label %759 unwind label %316

; <label>:759                                     ; preds = %758
  %760 = bitcast i32* %natoms to i8*
  call void @llvm.lifetime.start(i64 4, i8* %760) #7
  %761 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %762 = bitcast i32* %761 to i8*
  %763 = invoke i32 @MPI_Allreduce(i8* %762, i8* %760, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
          to label %764 unwind label %316

; <label>:764                                     ; preds = %759
  %765 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %766 = getelementptr inbounds %class.Force, %class.Force* %765, i64 0, i32 5
  store i32 1, i32* %766, align 8, !tbaa !73
  %767 = bitcast %class.Force* %765 to void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)***
  %768 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)**, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*** %767, align 8, !tbaa !67
  %769 = getelementptr inbounds void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %768, i64 4
  %770 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %769, align 8
  %771 = load i32, i32* %me, align 4, !tbaa !1
  invoke void %770(%class.Force* %765, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, i32 %771)
          to label %772 unwind label %316

; <label>:772                                     ; preds = %764
  %773 = load i32, i32* %412, align 4, !tbaa !41
  %774 = icmp eq i32 %773, 0
  %775 = load i32, i32* %404, align 8
  %776 = icmp eq i32 %775, 0
  %or.cond45 = or i1 %774, %776
  br i1 %or.cond45, label %778, label %777

; <label>:777                                     ; preds = %772
  invoke void @_ZN4Comm19reverse_communicateER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %778 unwind label %316

; <label>:778                                     ; preds = %777, %772
  %779 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  invoke void @_ZN6Thermo7computeEiR4AtomR8NeighborP5ForceR5TimerR4Comm(%class.Thermo* nonnull %thermo, i32 -1, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Force* %779, %class.Timer* nonnull dereferenceable(24) %timer, %class.Comm* nonnull dereferenceable(336) %comm)
          to label %780 unwind label %316

; <label>:780                                     ; preds = %778
  %781 = load i32, i32* %me, align 4, !tbaa !1
  %782 = icmp eq i32 %781, 0
  br i1 %782, label %783, label %818

; <label>:783                                     ; preds = %780
  %784 = getelementptr inbounds %class.Timer, %class.Timer* %timer, i64 0, i32 0
  %785 = load double*, double** %784, align 8, !tbaa !74
  %786 = load double, double* %785, align 8, !tbaa !33
  %787 = getelementptr inbounds double, double* %785, i64 2
  %788 = load double, double* %787, align 8, !tbaa !33
  %789 = fsub double %786, %788
  %790 = getelementptr inbounds double, double* %785, i64 3
  %791 = load double, double* %790, align 8, !tbaa !33
  %792 = fsub double %789, %791
  %793 = getelementptr inbounds double, double* %785, i64 1
  %794 = load double, double* %793, align 8, !tbaa !33
  %795 = fsub double %792, %794
  %puts52 = call i32 @puts(i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @str.142, i64 0, i64 0))
  %puts53 = call i32 @puts(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @str.143, i64 0, i64 0))
  %puts54 = call i32 @puts(i8* nonnull getelementptr inbounds ([120 x i8], [120 x i8]* @str.144, i64 0, i64 0))
  %796 = load i32, i32* %nprocs, align 4, !tbaa !1
  %797 = load i32, i32* %504, align 8, !tbaa !50
  %798 = load i32, i32* %natoms, align 4, !tbaa !1
  %799 = load double*, double** %784, align 8, !tbaa !74
  %800 = load double, double* %799, align 8, !tbaa !33
  %801 = getelementptr inbounds double, double* %799, i64 2
  %802 = load double, double* %801, align 8, !tbaa !33
  %803 = getelementptr inbounds double, double* %799, i64 3
  %804 = load double, double* %803, align 8, !tbaa !33
  %805 = getelementptr inbounds double, double* %799, i64 1
  %806 = load double, double* %805, align 8, !tbaa !33
  %807 = sitofp i32 %798 to double
  %808 = sitofp i32 %797 to double
  %809 = fmul double %808, %807
  %810 = fdiv double %809, %800
  %811 = sitofp i32 %796 to double
  %812 = fdiv double %810, %811
  %813 = sitofp i32 %num_threads.0.lcssa to double
  %814 = fdiv double %812, %813
  %815 = getelementptr inbounds double, double* %799, i64 4
  %816 = load double, double* %815, align 8, !tbaa !33
  %817 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.110, i64 0, i64 0), i32 %796, i32 %num_threads.0.lcssa, i32 %797, i32 %798, double %800, double %802, double %804, double %806, double %795, double %810, double %814, double %816)
  br label %818

; <label>:818                                     ; preds = %783, %780
  %819 = icmp eq i32 %yaml_output.0.lcssa, 0
  br i1 %819, label %822, label %820

; <label>:820                                     ; preds = %818
  %821 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  invoke void @_Z6outputR2InR4AtomP5ForceR8NeighborR4CommR6ThermoR9IntegrateR5Timeri(%struct.In* nonnull dereferenceable(112) %in, %class.Atom* nonnull dereferenceable(224) %atom, %class.Force* %821, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, %class.Thermo* nonnull dereferenceable(128) %thermo, %class.Integrate* nonnull dereferenceable(88) %integrate, %class.Timer* nonnull dereferenceable(24) %timer, i32 %screen_yaml.0.lcssa)
          to label %822 unwind label %316

; <label>:822                                     ; preds = %820, %818
  %823 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %824 = icmp eq %class.Force* %823, null
  br i1 %824, label %830, label %825

; <label>:825                                     ; preds = %822
  %826 = bitcast %class.Force* %823 to void (%class.Force*)***
  %827 = load void (%class.Force*)**, void (%class.Force*)*** %826, align 8, !tbaa !67
  %828 = getelementptr inbounds void (%class.Force*)*, void (%class.Force*)** %827, i64 1
  %829 = load void (%class.Force*)*, void (%class.Force*)** %828, align 8
  invoke void %829(%class.Force* nonnull %823)
          to label %830 unwind label %316

; <label>:830                                     ; preds = %825, %822
  %831 = invoke i32 @MPI_Barrier(i32 1140850688)
          to label %832 unwind label %316

; <label>:832                                     ; preds = %830
  %833 = invoke i32 @MPI_Finalize()
          to label %834 unwind label %316

; <label>:834                                     ; preds = %832
  call void @llvm.lifetime.end(i64 4, i8* %760) #7
  call void @llvm.lifetime.end(i64 8, i8* nonnull %281) #7
  call void @llvm.lifetime.end(i64 20, i8* %274) #7
  invoke void @_ZN5TimerD1Ev(%class.Timer* nonnull %timer)
          to label %836 unwind label %312

; <label>:835                                     ; preds = %334, %320, %316
  %.03 = phi i8* [ %318, %316 ], [ %336, %334 ], [ %322, %320 ]
  %.0 = phi i32 [ %319, %316 ], [ %337, %334 ], [ %323, %320 ]
  invoke void @_ZN5TimerD1Ev(%class.Timer* nonnull %timer)
          to label %838 unwind label %849

; <label>:836                                     ; preds = %834
  call void @llvm.lifetime.end(i64 24, i8* %272) #7
  invoke void @_ZN4CommD1Ev(%class.Comm* nonnull %comm)
          to label %837 unwind label %308

; <label>:837                                     ; preds = %836
  call void @llvm.lifetime.end(i64 336, i8* %270) #7
  invoke void @_ZN6ThermoD1Ev(%class.Thermo* nonnull %thermo)
          to label %839 unwind label %304

; <label>:838                                     ; preds = %835, %312
  %.14 = phi i8* [ %.03, %835 ], [ %314, %312 ]
  %.1 = phi i32 [ %.0, %835 ], [ %315, %312 ]
  invoke void @_ZN4CommD1Ev(%class.Comm* nonnull %comm)
          to label %840 unwind label %849

; <label>:839                                     ; preds = %837
  call void @llvm.lifetime.end(i64 128, i8* %268) #7
  invoke void @_ZN9IntegrateD1Ev(%class.Integrate* nonnull %integrate)
          to label %841 unwind label %300

; <label>:840                                     ; preds = %838, %308
  %.25 = phi i8* [ %.14, %838 ], [ %310, %308 ]
  %.2 = phi i32 [ %.1, %838 ], [ %311, %308 ]
  invoke void @_ZN6ThermoD1Ev(%class.Thermo* nonnull %thermo)
          to label %842 unwind label %849

; <label>:841                                     ; preds = %839
  call void @llvm.lifetime.end(i64 88, i8* %266) #7
  invoke void @_ZN8NeighborD1Ev(%class.Neighbor* nonnull %neighbor)
          to label %843 unwind label %296

; <label>:842                                     ; preds = %840, %304
  %.36 = phi i8* [ %.25, %840 ], [ %306, %304 ]
  %.3 = phi i32 [ %.2, %840 ], [ %307, %304 ]
  invoke void @_ZN9IntegrateD1Ev(%class.Integrate* nonnull %integrate)
          to label %844 unwind label %849

; <label>:843                                     ; preds = %841
  call void @llvm.lifetime.end(i64 240, i8* %42) #7
  call void @_ZN4AtomD1Ev(%class.Atom* nonnull %atom)
  call void @llvm.lifetime.end(i64 224, i8* %41) #7
  call void @llvm.lifetime.end(i64 4, i8* %6) #7
  call void @llvm.lifetime.end(i64 4, i8* %5) #7
  call void @llvm.lifetime.end(i64 112, i8* %3) #7
  ret i32 0

; <label>:844                                     ; preds = %842, %300
  %.47 = phi i8* [ %.36, %842 ], [ %302, %300 ]
  %.4 = phi i32 [ %.3, %842 ], [ %303, %300 ]
  invoke void @_ZN8NeighborD1Ev(%class.Neighbor* nonnull %neighbor)
          to label %845 unwind label %849

; <label>:845                                     ; preds = %844, %296
  %.58 = phi i8* [ %.47, %844 ], [ %298, %296 ]
  %.5 = phi i32 [ %.4, %844 ], [ %299, %296 ]
  invoke void @_ZN4AtomD1Ev(%class.Atom* nonnull %atom)
          to label %846 unwind label %849

; <label>:846                                     ; preds = %845
  %847 = insertvalue { i8*, i32 } undef, i8* %.58, 0
  %848 = insertvalue { i8*, i32 } %847, i32 %.5, 1
  resume { i8*, i32 } %848

; <label>:849                                     ; preds = %845, %844, %842, %840, %838, %835
  %850 = landingpad { i8*, i32 }
          catch i8* null
  %851 = extractvalue { i8*, i32 } %850, 0
  call void @__clang_call_terminate(i8* %851) #17
  unreachable
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

declare i32 @MPI_Init(i32*, i8***) #2

declare i32 @MPI_Comm_rank(i32, i32*) #2

declare i32 @MPI_Comm_size(i32, i32*) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #3

declare i32 @MPI_Finalize() #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind
declare void @srand(i32) #5

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) #5

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znam(i64) #6

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #5

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture) #7

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #5

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znwm(i64) #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #8

; Function Attrs: nounwind
declare void @omp_set_num_threads(i32) #5

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #7

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #5

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readnone %.global_tid., i32* noalias nocapture readnone %.bound_tid., %class.Neighbor* dereferenceable(240) %neighbor, %class.Atom* dereferenceable(224) %atom, %class.Force** nocapture readonly dereferenceable(8) %force, %class.Comm* dereferenceable(336) %comm, i32* nocapture readonly dereferenceable(4) %me) #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  invoke void @_ZN8Neighbor5buildER4Atom(%class.Neighbor* nonnull %neighbor, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %1 unwind label %9

; <label>:1                                       ; preds = %0
  %2 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %3 = bitcast %class.Force* %2 to void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)***
  %4 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)**, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*** %3, align 8, !tbaa !67
  %5 = getelementptr inbounds void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %4, i64 4
  %6 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %5, align 8
  %7 = load i32, i32* %me, align 4, !tbaa !1
  invoke void %6(%class.Force* %2, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, i32 %7)
          to label %8 unwind label %9

; <label>:8                                       ; preds = %1
  ret void

; <label>:9                                       ; preds = %1, %0
  %10 = landingpad { i8*, i32 }
          catch i8* null
  %11 = extractvalue { i8*, i32 } %10, 0
  tail call void @__clang_call_terminate(i8* %11) #17
  unreachable
}

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #10 comdat {
  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #7
  tail call void @_ZSt9terminatev() #17
  unreachable
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..106(i32* noalias nocapture readnone %.global_tid., i32* noalias nocapture readnone %.bound_tid., %class.Thermo* dereferenceable(128) %thermo, %class.Atom* dereferenceable(224) %atom, %class.Neighbor* dereferenceable(240) %neighbor, %class.Force** nocapture readonly dereferenceable(8) %force, %class.Timer* dereferenceable(24) %timer, %class.Comm* dereferenceable(336) %comm) #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  invoke void @_ZN6Thermo7computeEiR4AtomR8NeighborP5ForceR5TimerR4Comm(%class.Thermo* nonnull %thermo, i32 0, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Force* %1, %class.Timer* nonnull dereferenceable(24) %timer, %class.Comm* nonnull dereferenceable(336) %comm)
          to label %2 unwind label %3

; <label>:2                                       ; preds = %0
  ret void

; <label>:3                                       ; preds = %0
  %4 = landingpad { i8*, i32 }
          catch i8* null
  %5 = extractvalue { i8*, i32 } %4, 0
  tail call void @__clang_call_terminate(i8* %5) #17
  unreachable
}

declare i32 @MPI_Allreduce(i8*, i8*, i32, i32, i32, i32) #2

declare i32 @MPI_Barrier(i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: uwtable
define i32 @_Z5inputR2InPKc(%struct.In* dereferenceable(112) %in, i8* %filename) #11 {
  %line = alloca [256 x i8], align 16
  %me = alloca i32, align 4
  %1 = getelementptr inbounds [256 x i8], [256 x i8]* %line, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %1) #7
  %2 = bitcast i32* %me to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %3 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %me)
  %4 = call %struct._IO_FILE* @fopen(i8* %filename, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i64 0, i64 0))
  %5 = icmp eq %struct._IO_FILE* %4, null
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = load i32, i32* %me, align 4, !tbaa !1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %94

; <label>:9                                       ; preds = %6
  %10 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.36, i64 0, i64 0), i8* %filename)
  br label %94

; <label>:11                                      ; preds = %0
  %12 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %13 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %14 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %15 = call i8* @strtok(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.37, i64 0, i64 0)) #7
  %16 = call i32 @strcmp(i8* %15, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.38, i64 0, i64 0)) #16
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %11
  %19 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  store i32 0, i32* %19, align 8, !tbaa !11
  br label %28

; <label>:20                                      ; preds = %11
  %21 = call i32 @strcmp(i8* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.39, i64 0, i64 0)) #16
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %20
  %24 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  store i32 1, i32* %24, align 8, !tbaa !11
  br label %28

; <label>:25                                      ; preds = %20
  %26 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([82 x i8], [82 x i8]* @.str.5.40, i64 0, i64 0), i8* %1)
  %27 = call i32 @MPI_Finalize()
  call void @exit(i32 0) #17
  unreachable

; <label>:28                                      ; preds = %23, %18
  %29 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %30 = call i8* @strtok(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.37, i64 0, i64 0)) #7
  %31 = call i32 @strcmp(i8* %30, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.41, i64 0, i64 0)) #16
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %28
  %34 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 9
  store i8* null, i8** %34, align 8, !tbaa !7
  br label %42

; <label>:35                                      ; preds = %28
  %36 = call noalias i8* @_Znam(i64 1000) #18
  %37 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 9
  store i8* %36, i8** %37, align 8, !tbaa !7
  %38 = call i8* @strtok(i8* %1, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7.42, i64 0, i64 0)) #7
  %39 = icmp eq i8* %38, null
  %.1 = select i1 %39, i8* %1, i8* %38
  %40 = load i8*, i8** %37, align 8, !tbaa !7
  %41 = call i8* @strcpy(i8* %40, i8* %.1) #7
  br label %42

; <label>:42                                      ; preds = %35, %33
  %43 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %44 = call i8* @strtok(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.37, i64 0, i64 0)) #7
  %45 = call i32 @strcmp(i8* %44, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.38, i64 0, i64 0)) #16
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

; <label>:47                                      ; preds = %42
  %48 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  store i32 0, i32* %48, align 4, !tbaa !12
  br label %57

; <label>:49                                      ; preds = %42
  %50 = call i32 @strcmp(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8.43, i64 0, i64 0)) #16
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %49
  %53 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  store i32 1, i32* %53, align 4, !tbaa !12
  br label %57

; <label>:54                                      ; preds = %49
  %55 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([84 x i8], [84 x i8]* @.str.9.44, i64 0, i64 0), i8* %1)
  %56 = call i32 @MPI_Finalize()
  call void @exit(i32 0) #17
  unreachable

; <label>:57                                      ; preds = %52, %47
  %58 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %59 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 7
  %60 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 8
  %61 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.45, i64 0, i64 0), double* %59, double* %60) #7
  %62 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %63 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 0
  %64 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 1
  %65 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %66 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.46, i64 0, i64 0), i32* %63, i32* %64, i32* %65) #7
  %67 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %68 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 10
  %69 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.47, i64 0, i64 0), i32* %68) #7
  %70 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %71 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 11
  %72 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.48, i64 0, i64 0), double* %71) #7
  %73 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %74 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 3
  %75 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.48, i64 0, i64 0), double* %74) #7
  %76 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %77 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 4
  %78 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.48, i64 0, i64 0), double* %77) #7
  %79 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %80 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 12
  %81 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.47, i64 0, i64 0), i32* %80) #7
  %82 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %83 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 13
  %84 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 14
  %85 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.45, i64 0, i64 0), double* %83, double* %84) #7
  %86 = call i8* @fgets(i8* %1, i32 256, %struct._IO_FILE* nonnull %4)
  %87 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 15
  %88 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.47, i64 0, i64 0), i32* %87) #7
  %89 = call i32 @fclose(%struct._IO_FILE* nonnull %4)
  %90 = load double, double* %83, align 8, !tbaa !58
  %91 = load double, double* %84, align 8, !tbaa !56
  %92 = fadd double %90, %91
  store double %92, double* %84, align 8, !tbaa !56
  %93 = call i32 @MPI_Barrier(i32 1140850688)
  br label %94

; <label>:94                                      ; preds = %57, %9, %6
  %.0 = phi i32 [ 0, %57 ], [ 1, %9 ], [ 1, %6 ]
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  call void @llvm.lifetime.end(i64 256, i8* %1) #7
  ret i32 %.0
}

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #5

; Function Attrs: nounwind
declare i8* @fgets(i8*, i32, %struct._IO_FILE* nocapture) #5

; Function Attrs: nounwind
declare i8* @strtok(i8*, i8* nocapture readonly) #5

; Function Attrs: nounwind
declare i32 @sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) #5

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #5

; Function Attrs: norecurse nounwind uwtable
define void @_ZN9IntegrateC2Ev(%class.Integrate* nocapture %this) unnamed_addr #12 align 2 {
  %1 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 10
  store i32 20, i32* %1, align 8, !tbaa !54
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN9IntegrateD2Ev(%class.Integrate* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @_ZN9Integrate5setupEv(%class.Integrate* nocapture %this) #12 align 2 {
  %1 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 0
  %2 = load double, double* %1, align 8, !tbaa !52
  %3 = fmul double %2, 5.000000e-01
  %4 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 1
  store double %3, double* %4, align 8, !tbaa !76
  ret void
}

; Function Attrs: uwtable
define void @_ZN9Integrate16initialIntegrateEv(%class.Integrate* nocapture readonly %this) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @1)
  %2 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 3
  %3 = load i32, i32* %2, align 4, !tbaa !77
  %4 = add nsw i32 %3, -1
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %._crit_edge3

._crit_edge3:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre4 = bitcast i32* %.omp.stride to i8*
  %.pre6 = bitcast i32* %.omp.ub to i8*
  %.pre8 = bitcast i32* %.omp.lb to i8*
  br label %73

; <label>:6                                       ; preds = %0
  %7 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 %4, i32* %.omp.ub, align 4, !tbaa !1
  %9 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %10 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %11 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %12 = icmp sgt i32 %11, %4
  %13 = select i1 %12, i32 %4, i32 %11
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %14 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %15 = icmp sgt i32 %14, %13
  br i1 %15, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %6
  %16 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 1
  %17 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 7
  %18 = load double*, double** %17, align 8
  %19 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 6
  %20 = load double*, double** %19, align 8
  %21 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 0
  %22 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 5
  %23 = load double*, double** %22, align 8
  %24 = sext i32 %14 to i64
  %25 = sext i32 %13 to i64
  br label %26

; <label>:26                                      ; preds = %26, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %26 ], [ %24, %.lr.ph ]
  %.omp.iv.02 = phi i32 [ %71, %26 ], [ %14, %.lr.ph ]
  %27 = load double, double* %16, align 8, !tbaa !76
  %28 = mul nsw i32 %.omp.iv.02, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %18, i64 %29
  %31 = load double, double* %30, align 8, !tbaa !33
  %32 = fmul double %27, %31
  %33 = getelementptr inbounds double, double* %20, i64 %29
  %34 = load double, double* %33, align 8, !tbaa !33
  %35 = fadd double %32, %34
  store double %35, double* %33, align 8, !tbaa !33
  %36 = load double, double* %16, align 8, !tbaa !76
  %37 = add nsw i32 %28, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double, double* %18, i64 %38
  %40 = load double, double* %39, align 8, !tbaa !33
  %41 = fmul double %36, %40
  %42 = getelementptr inbounds double, double* %20, i64 %38
  %43 = load double, double* %42, align 8, !tbaa !33
  %44 = fadd double %41, %43
  store double %44, double* %42, align 8, !tbaa !33
  %45 = load double, double* %16, align 8, !tbaa !76
  %46 = add nsw i32 %28, 2
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds double, double* %18, i64 %47
  %49 = load double, double* %48, align 8, !tbaa !33
  %50 = fmul double %45, %49
  %51 = getelementptr inbounds double, double* %20, i64 %47
  %52 = load double, double* %51, align 8, !tbaa !33
  %53 = fadd double %50, %52
  store double %53, double* %51, align 8, !tbaa !33
  %54 = load double, double* %21, align 8, !tbaa !52
  %55 = fmul double %54, %35
  %56 = getelementptr inbounds double, double* %23, i64 %29
  %57 = load double, double* %56, align 8, !tbaa !33
  %58 = fadd double %55, %57
  store double %58, double* %56, align 8, !tbaa !33
  %59 = load double, double* %21, align 8, !tbaa !52
  %60 = load double, double* %42, align 8, !tbaa !33
  %61 = fmul double %59, %60
  %62 = getelementptr inbounds double, double* %23, i64 %38
  %63 = load double, double* %62, align 8, !tbaa !33
  %64 = fadd double %61, %63
  store double %64, double* %62, align 8, !tbaa !33
  %65 = load double, double* %21, align 8, !tbaa !52
  %66 = load double, double* %51, align 8, !tbaa !33
  %67 = fmul double %65, %66
  %68 = getelementptr inbounds double, double* %23, i64 %47
  %69 = load double, double* %68, align 8, !tbaa !33
  %70 = fadd double %67, %69
  store double %70, double* %68, align 8, !tbaa !33
  %71 = add nsw i32 %.omp.iv.02, 1
  %72 = icmp slt i64 %indvars.iv, %25
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %72, label %26, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %26
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %1)
  br label %73

; <label>:73                                      ; preds = %._crit_edge, %._crit_edge3
  %.pre-phi9 = phi i8* [ %.pre8, %._crit_edge3 ], [ %7, %._crit_edge ]
  %.pre-phi7 = phi i8* [ %.pre6, %._crit_edge3 ], [ %8, %._crit_edge ]
  %.pre-phi5 = phi i8* [ %.pre4, %._crit_edge3 ], [ %9, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge3 ], [ %10, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi5) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi7) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi9) #7
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %1)
  ret void
}

declare i32 @__kmpc_global_thread_num(%ident_t*)

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%ident_t*, i32)

declare void @__kmpc_barrier(%ident_t*, i32)

; Function Attrs: uwtable
define void @_ZN9Integrate14finalIntegrateEv(%class.Integrate* nocapture readonly %this) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @1)
  %2 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 3
  %3 = load i32, i32* %2, align 4, !tbaa !77
  %4 = add nsw i32 %3, -1
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %._crit_edge3

._crit_edge3:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre4 = bitcast i32* %.omp.stride to i8*
  %.pre6 = bitcast i32* %.omp.ub to i8*
  %.pre8 = bitcast i32* %.omp.lb to i8*
  br label %53

; <label>:6                                       ; preds = %0
  %7 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 %4, i32* %.omp.ub, align 4, !tbaa !1
  %9 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %10 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %11 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %12 = icmp sgt i32 %11, %4
  %13 = select i1 %12, i32 %4, i32 %11
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %14 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %15 = icmp sgt i32 %14, %13
  br i1 %15, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %6
  %16 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 1
  %17 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 7
  %18 = load double*, double** %17, align 8
  %19 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 6
  %20 = load double*, double** %19, align 8
  %21 = sext i32 %14 to i64
  %22 = sext i32 %13 to i64
  br label %23

; <label>:23                                      ; preds = %23, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %23 ], [ %21, %.lr.ph ]
  %.omp.iv.02 = phi i32 [ %51, %23 ], [ %14, %.lr.ph ]
  %24 = load double, double* %16, align 8, !tbaa !76
  %25 = mul nsw i32 %.omp.iv.02, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %18, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !33
  %29 = fmul double %24, %28
  %30 = getelementptr inbounds double, double* %20, i64 %26
  %31 = load double, double* %30, align 8, !tbaa !33
  %32 = fadd double %29, %31
  store double %32, double* %30, align 8, !tbaa !33
  %33 = load double, double* %16, align 8, !tbaa !76
  %34 = add nsw i32 %25, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %18, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !33
  %38 = fmul double %33, %37
  %39 = getelementptr inbounds double, double* %20, i64 %35
  %40 = load double, double* %39, align 8, !tbaa !33
  %41 = fadd double %38, %40
  store double %41, double* %39, align 8, !tbaa !33
  %42 = load double, double* %16, align 8, !tbaa !76
  %43 = add nsw i32 %25, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %18, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !33
  %47 = fmul double %42, %46
  %48 = getelementptr inbounds double, double* %20, i64 %44
  %49 = load double, double* %48, align 8, !tbaa !33
  %50 = fadd double %47, %49
  store double %50, double* %48, align 8, !tbaa !33
  %51 = add nsw i32 %.omp.iv.02, 1
  %52 = icmp slt i64 %indvars.iv, %22
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %52, label %23, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %23
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %1)
  br label %53

; <label>:53                                      ; preds = %._crit_edge, %._crit_edge3
  %.pre-phi9 = phi i8* [ %.pre8, %._crit_edge3 ], [ %7, %._crit_edge ]
  %.pre-phi7 = phi i8* [ %.pre6, %._crit_edge3 ], [ %8, %._crit_edge ]
  %.pre-phi5 = phi i8* [ %.pre4, %._crit_edge3 ], [ %9, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge3 ], [ %10, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi5) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi7) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi9) #7
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %1)
  ret void
}

; Function Attrs: uwtable
define void @_ZN9Integrate3runER4AtomP5ForceR8NeighborR4CommR6ThermoR5Timer(%class.Integrate* %this, %class.Atom* dereferenceable(224) %atom, %class.Force* %force, %class.Neighbor* dereferenceable(240) %neighbor, %class.Comm* dereferenceable(336) %comm, %class.Thermo* dereferenceable(128) %thermo, %class.Timer* dereferenceable(24) %timer) #11 align 2 {
  %1 = alloca %class.Force*, align 8
  %check_safeexchange = alloca i32, align 4
  store %class.Force* %force, %class.Force** %1, align 8, !tbaa !5
  %2 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 32
  store %class.Timer* %timer, %class.Timer** %2, align 8, !tbaa !78
  %3 = getelementptr inbounds %class.Timer, %class.Timer* %timer, i64 0, i32 0
  %4 = load double*, double** %3, align 8, !tbaa !74
  %5 = getelementptr inbounds double, double* %4, i64 4
  store double 0.000000e+00, double* %5, align 8, !tbaa !33
  %6 = bitcast i32* %check_safeexchange to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #7
  %7 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 30
  %8 = load i32, i32* %7, align 8, !tbaa !38
  store i32 %8, i32* %check_safeexchange, align 4, !tbaa !1
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 13
  %10 = load double, double* %9, align 8, !tbaa !70
  %11 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 9
  store double %10, double* %11, align 8, !tbaa !79
  %12 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 1
  %13 = load double, double* %12, align 8, !tbaa !76
  %14 = fdiv double %13, %10
  store double %14, double* %12, align 8, !tbaa !76
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @1, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, %class.Integrate*, %class.Atom*, %class.Timer*, %class.Neighbor*, %class.Comm*, i32*, %class.Force**, %class.Thermo*)* @.omp_outlined..54 to void (i32*, i32*, ...)*), %class.Integrate* %this, %class.Atom* nonnull %atom, %class.Timer* nonnull %timer, %class.Neighbor* nonnull %neighbor, %class.Comm* nonnull %comm, i32* nonnull %check_safeexchange, %class.Force** nonnull %1, %class.Thermo* nonnull %thermo)
  call void @llvm.lifetime.end(i64 4, i8* %6) #7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..54(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %class.Integrate* nocapture %this, %class.Atom* dereferenceable(224) %atom, %class.Timer* dereferenceable(24) %timer, %class.Neighbor* dereferenceable(240) %neighbor, %class.Comm* dereferenceable(336) %comm, i32* nocapture readonly dereferenceable(4) %check_safeexchange, %class.Force** nocapture readonly dereferenceable(8) %force, %class.Thermo* dereferenceable(128) %thermo) #9 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
.preheader3:
  %0 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 10
  %1 = load i32, i32* %0, align 8, !tbaa !54
  %.phi.trans.insert = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 2
  %.pre = load i32, i32* %.phi.trans.insert, align 8, !tbaa !50
  %2 = icmp sgt i32 %.pre, 0
  br i1 %2, label %.lr.ph26, label %._crit_edge27

.lr.ph26:                                         ; preds = %.preheader3
  %3 = icmp sgt i32 %1, 0
  %4 = add nsw i32 %.pre, 1
  %next_sort.0.ph = select i1 %3, i32 %1, i32 %4
  %5 = load i32, i32* %.global_tid., align 4
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 5
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 5
  %9 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 6
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %11 = bitcast double** %10 to i64*
  %12 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 7
  %13 = bitcast double** %12 to i64*
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 10
  %15 = bitcast double** %14 to i64*
  %16 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 8
  %17 = bitcast double** %16 to i64*
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %19 = getelementptr inbounds %class.Integrate, %class.Integrate* %this, i64 0, i32 3
  %20 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 0
  %21 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %22 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %23 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  %24 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %25 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  %26 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %27 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %28 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %29 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %30 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 0
  %31 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 0
  %32 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %33 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  %34 = bitcast double** %6 to <2 x i64>*
  %35 = bitcast double** %7 to <2 x i64>*
  %36 = bitcast double** %8 to <2 x i64>*
  %37 = bitcast double** %9 to <2 x i64>*
  br label %38

; <label>:38                                      ; preds = %.backedge, %.lr.ph26
  %next_sort.025 = phi i32 [ %next_sort.0.ph, %.lr.ph26 ], [ %next_sort.2, %.backedge ]
  %n.024 = phi i32 [ 0, %.lr.ph26 ], [ %52, %.backedge ]
  tail call void @__kmpc_barrier(%ident_t* nonnull @3, i32 %5) #7
  %39 = load <2 x i64>, <2 x i64>* %34, align 8, !tbaa !5
  store <2 x i64> %39, <2 x i64>* %35, align 8, !tbaa !5
  %40 = load i64, i64* %11, align 8, !tbaa !80
  store i64 %40, i64* %13, align 8, !tbaa !81
  %41 = load i64, i64* %15, align 8, !tbaa !82
  store i64 %41, i64* %17, align 8, !tbaa !83
  %42 = load i32, i32* %18, align 4, !tbaa !84
  store i32 %42, i32* %19, align 4, !tbaa !77
  invoke void @_ZN9Integrate16initialIntegrateEv(%class.Integrate* nonnull %this)
          to label %43 unwind label %282

; <label>:43                                      ; preds = %38
  %44 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %51, label %46

; <label>:46                                      ; preds = %43
  invoke void @_ZN5Timer5stampEv(%class.Timer* nonnull %timer)
          to label %47 unwind label %48

; <label>:47                                      ; preds = %46
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %51

; <label>:48                                      ; preds = %46
  %49 = landingpad { i8*, i32 }
          catch i8* null
  %50 = extractvalue { i8*, i32 } %49, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:51                                      ; preds = %47, %43
  %52 = add nuw nsw i32 %n.024, 1
  %53 = load i32, i32* %20, align 8, !tbaa !55
  %54 = srem i32 %52, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %65, label %56

; <label>:56                                      ; preds = %51
  invoke void @_ZN4Comm11communicateER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %57 unwind label %282

; <label>:57                                      ; preds = %56
  %58 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %237, label %60

; <label>:60                                      ; preds = %57
  invoke void @_ZN5Timer5stampEi(%class.Timer* nonnull %timer, i32 1)
          to label %61 unwind label %62

; <label>:61                                      ; preds = %60
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %237

; <label>:62                                      ; preds = %60
  %63 = landingpad { i8*, i32 }
          catch i8* null
  %64 = extractvalue { i8*, i32 } %63, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:65                                      ; preds = %51
  %66 = load i32, i32* %check_safeexchange, align 4, !tbaa !1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %137, label %68

; <label>:68                                      ; preds = %65
  %69 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %137, label %.preheader2

.preheader2:                                      ; preds = %68
  %71 = load i32, i32* %18, align 4, !tbaa !84
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader2
  %73 = load double*, double** %7, align 8
  %74 = load double*, double** %16, align 8
  %75 = load double, double* %27, align 8
  %76 = fsub double -0.000000e+00, %75
  %77 = load double, double* %28, align 8
  %78 = fsub double -0.000000e+00, %77
  %79 = load double, double* %29, align 8
  %80 = fsub double -0.000000e+00, %79
  %81 = sext i32 %71 to i64
  br label %82

; <label>:82                                      ; preds = %82, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %82 ]
  %d_max.020 = phi double [ 0.000000e+00, %.lr.ph ], [ %d_max.1, %82 ]
  %83 = mul nuw nsw i64 %indvars.iv, 3
  %84 = getelementptr inbounds double, double* %73, i64 %83
  %85 = load double, double* %84, align 8, !tbaa !33
  %86 = getelementptr inbounds double, double* %74, i64 %83
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = fsub double %85, %87
  %89 = fcmp ogt double %88, %75
  %90 = fsub double %88, %75
  %dx.0 = select i1 %89, double %90, double %88
  %91 = fcmp olt double %dx.0, %76
  %92 = fadd double %75, %dx.0
  %dx.1 = select i1 %91, double %92, double %dx.0
  %93 = add nuw nsw i64 %83, 1
  %94 = getelementptr inbounds double, double* %73, i64 %93
  %95 = load double, double* %94, align 8, !tbaa !33
  %96 = getelementptr inbounds double, double* %74, i64 %93
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = fsub double %95, %97
  %99 = fcmp ogt double %98, %77
  %100 = fsub double %98, %77
  %dy.0 = select i1 %99, double %100, double %98
  %101 = fcmp olt double %dy.0, %78
  %102 = fadd double %77, %dy.0
  %dy.1 = select i1 %101, double %102, double %dy.0
  %103 = add nuw nsw i64 %83, 2
  %104 = getelementptr inbounds double, double* %73, i64 %103
  %105 = load double, double* %104, align 8, !tbaa !33
  %106 = getelementptr inbounds double, double* %74, i64 %103
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fsub double %105, %107
  %109 = fcmp ogt double %108, %79
  %110 = fsub double %108, %79
  %dz.0 = select i1 %109, double %110, double %108
  %111 = fcmp olt double %dz.0, %80
  %112 = fadd double %79, %dz.0
  %dz.1 = select i1 %111, double %112, double %dz.0
  %113 = fmul double %dx.1, %dx.1
  %114 = fmul double %dy.1, %dy.1
  %115 = fadd double %113, %114
  %116 = fmul double %dz.1, %dz.1
  %117 = fadd double %115, %116
  %118 = fcmp ogt double %117, %d_max.020
  %d_max.1 = select i1 %118, double %117, double %d_max.020
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %119 = icmp slt i64 %indvars.iv.next, %81
  br i1 %119, label %82, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %82
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader2
  %d_max.0.lcssa = phi double [ 0.000000e+00, %.preheader2 ], [ %d_max.1, %._crit_edge.loopexit ]
  %120 = tail call double @sqrt(double %d_max.0.lcssa) #7
  %121 = load double, double* %21, align 8, !tbaa !85
  %122 = load double, double* %22, align 8, !tbaa !86
  %123 = fsub double %121, %122
  %124 = fcmp ogt double %120, %123
  %.pre48 = load double, double* %23, align 8, !tbaa !87
  %.pre49 = load double, double* %24, align 8, !tbaa !88
  %125 = fsub double %.pre48, %.pre49
  %126 = fcmp ogt double %120, %125
  %or.cond = or i1 %124, %126
  br i1 %or.cond, label %._crit_edge.._crit_edge._crit_edge_crit_edge, label %127

._crit_edge.._crit_edge._crit_edge_crit_edge:     ; preds = %._crit_edge
  %.pre1 = load double, double* %25, align 8, !tbaa !89
  %.pre2 = load double, double* %26, align 8, !tbaa !90
  br label %._crit_edge._crit_edge

; <label>:127                                     ; preds = %._crit_edge
  %128 = load double, double* %25, align 8, !tbaa !89
  %129 = load double, double* %26, align 8, !tbaa !90
  %130 = fsub double %128, %129
  %131 = fcmp ogt double %120, %130
  br i1 %131, label %._crit_edge._crit_edge, label %136

._crit_edge._crit_edge:                           ; preds = %._crit_edge.._crit_edge._crit_edge_crit_edge, %127
  %132 = phi double [ %.pre2, %._crit_edge.._crit_edge._crit_edge_crit_edge ], [ %129, %127 ]
  %133 = phi double [ %.pre1, %._crit_edge.._crit_edge._crit_edge_crit_edge ], [ %128, %127 ]
  %134 = fsub double %133, %132
  %135 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([227 x i8], [227 x i8]* @.str.1.55, i64 0, i64 0), double %120, double %123, double %125, double %134)
  br label %136

; <label>:136                                     ; preds = %._crit_edge._crit_edge, %127
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %137

; <label>:137                                     ; preds = %136, %68, %65
  %138 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %145, label %140

; <label>:140                                     ; preds = %137
  invoke void @_ZN5Timer17stamp_extra_startEv(%class.Timer* nonnull %timer)
          to label %141 unwind label %142

; <label>:141                                     ; preds = %140
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %145

; <label>:142                                     ; preds = %140
  %143 = landingpad { i8*, i32 }
          catch i8* null
  %144 = extractvalue { i8*, i32 } %143, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:145                                     ; preds = %141, %137
  invoke void @_ZN4Comm8exchangeER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %146 unwind label %282

; <label>:146                                     ; preds = %145
  %147 = icmp slt i32 %52, %next_sort.025
  br i1 %147, label %152, label %148

; <label>:148                                     ; preds = %146
  invoke void @_ZN4Atom4sortER8Neighbor(%class.Atom* nonnull %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor)
          to label %149 unwind label %282

; <label>:149                                     ; preds = %148
  %150 = load i32, i32* %0, align 8, !tbaa !54
  %151 = add nsw i32 %150, %next_sort.025
  br label %152

; <label>:152                                     ; preds = %149, %146
  %next_sort.1 = phi i32 [ %151, %149 ], [ %next_sort.025, %146 ]
  invoke void @_ZN4Comm7bordersER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %153 unwind label %282

; <label>:153                                     ; preds = %152
  %154 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %162, label %156

; <label>:156                                     ; preds = %153
  invoke void @_ZN5Timer16stamp_extra_stopEi(%class.Timer* nonnull %timer, i32 4)
          to label %157 unwind label %159

; <label>:157                                     ; preds = %156
  invoke void @_ZN5Timer5stampEi(%class.Timer* nonnull %timer, i32 1)
          to label %158 unwind label %159

; <label>:158                                     ; preds = %157
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %162

; <label>:159                                     ; preds = %157, %156
  %160 = landingpad { i8*, i32 }
          catch i8* null
  %161 = extractvalue { i8*, i32 } %160, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:162                                     ; preds = %158, %153
  %163 = load i32, i32* %check_safeexchange, align 4, !tbaa !1
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %162
  %165 = load i32, i32* %18, align 4, !tbaa !84
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %.lr.ph23, label %.loopexit

.lr.ph23:                                         ; preds = %.preheader
  %167 = load double*, double** %7, align 8
  %168 = load double*, double** %16, align 8
  %169 = mul i32 %165, 3
  %170 = sext i32 %169 to i64
  %171 = icmp sgt i64 %170, 1
  %smax = select i1 %171, i64 %170, i64 1
  %min.iters.check = icmp ult i64 %smax, 16
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %.lr.ph23
  %n.vec = and i64 %smax, -16
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %scevgep = getelementptr double, double* %168, i64 -1
  %scevgep52 = getelementptr double, double* %scevgep, i64 %smax
  %scevgep54 = getelementptr double, double* %167, i64 -1
  %scevgep55 = getelementptr double, double* %scevgep54, i64 %smax
  %bound0 = icmp ule double* %168, %scevgep55
  %bound1 = icmp ule double* %167, %scevgep52
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %172 = add nsw i64 %smax, -16
  %173 = lshr i64 %172, 4
  %174 = and i64 %173, 1
  %lcmp.mod = icmp eq i64 %174, 0
  br i1 %lcmp.mod, label %vector.body.prol, label %vector.body.preheader.split

vector.body.prol:                                 ; preds = %vector.body.preheader
  %175 = bitcast double* %167 to <4 x i64>*
  %wide.load.prol = load <4 x i64>, <4 x i64>* %175, align 8, !tbaa !33
  %176 = getelementptr double, double* %167, i64 4
  %177 = bitcast double* %176 to <4 x i64>*
  %wide.load60.prol = load <4 x i64>, <4 x i64>* %177, align 8, !tbaa !33
  %178 = getelementptr double, double* %167, i64 8
  %179 = bitcast double* %178 to <4 x i64>*
  %wide.load61.prol = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !33
  %180 = getelementptr double, double* %167, i64 12
  %181 = bitcast double* %180 to <4 x i64>*
  %wide.load62.prol = load <4 x i64>, <4 x i64>* %181, align 8, !tbaa !33
  %182 = bitcast double* %168 to <4 x i64>*
  store <4 x i64> %wide.load.prol, <4 x i64>* %182, align 8, !tbaa !33
  %183 = getelementptr double, double* %168, i64 4
  %184 = bitcast double* %183 to <4 x i64>*
  store <4 x i64> %wide.load60.prol, <4 x i64>* %184, align 8, !tbaa !33
  %185 = getelementptr double, double* %168, i64 8
  %186 = bitcast double* %185 to <4 x i64>*
  store <4 x i64> %wide.load61.prol, <4 x i64>* %186, align 8, !tbaa !33
  %187 = getelementptr double, double* %168, i64 12
  %188 = bitcast double* %187 to <4 x i64>*
  store <4 x i64> %wide.load62.prol, <4 x i64>* %188, align 8, !tbaa !33
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.prol, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 16, %vector.body.prol ]
  %189 = icmp eq i64 %173, 0
  br i1 %189, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %190 = getelementptr inbounds double, double* %167, i64 %index
  %191 = bitcast double* %190 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %191, align 8, !tbaa !33
  %192 = getelementptr double, double* %190, i64 4
  %193 = bitcast double* %192 to <4 x i64>*
  %wide.load60 = load <4 x i64>, <4 x i64>* %193, align 8, !tbaa !33
  %194 = getelementptr double, double* %190, i64 8
  %195 = bitcast double* %194 to <4 x i64>*
  %wide.load61 = load <4 x i64>, <4 x i64>* %195, align 8, !tbaa !33
  %196 = getelementptr double, double* %190, i64 12
  %197 = bitcast double* %196 to <4 x i64>*
  %wide.load62 = load <4 x i64>, <4 x i64>* %197, align 8, !tbaa !33
  %198 = getelementptr inbounds double, double* %168, i64 %index
  %199 = bitcast double* %198 to <4 x i64>*
  store <4 x i64> %wide.load, <4 x i64>* %199, align 8, !tbaa !33
  %200 = getelementptr double, double* %198, i64 4
  %201 = bitcast double* %200 to <4 x i64>*
  store <4 x i64> %wide.load60, <4 x i64>* %201, align 8, !tbaa !33
  %202 = getelementptr double, double* %198, i64 8
  %203 = bitcast double* %202 to <4 x i64>*
  store <4 x i64> %wide.load61, <4 x i64>* %203, align 8, !tbaa !33
  %204 = getelementptr double, double* %198, i64 12
  %205 = bitcast double* %204 to <4 x i64>*
  store <4 x i64> %wide.load62, <4 x i64>* %205, align 8, !tbaa !33
  %index.next = add i64 %index, 16
  %206 = getelementptr inbounds double, double* %167, i64 %index.next
  %207 = bitcast double* %206 to <4 x i64>*
  %wide.load.1 = load <4 x i64>, <4 x i64>* %207, align 8, !tbaa !33
  %208 = getelementptr double, double* %206, i64 4
  %209 = bitcast double* %208 to <4 x i64>*
  %wide.load60.1 = load <4 x i64>, <4 x i64>* %209, align 8, !tbaa !33
  %210 = getelementptr double, double* %206, i64 8
  %211 = bitcast double* %210 to <4 x i64>*
  %wide.load61.1 = load <4 x i64>, <4 x i64>* %211, align 8, !tbaa !33
  %212 = getelementptr double, double* %206, i64 12
  %213 = bitcast double* %212 to <4 x i64>*
  %wide.load62.1 = load <4 x i64>, <4 x i64>* %213, align 8, !tbaa !33
  %214 = getelementptr inbounds double, double* %168, i64 %index.next
  %215 = bitcast double* %214 to <4 x i64>*
  store <4 x i64> %wide.load.1, <4 x i64>* %215, align 8, !tbaa !33
  %216 = getelementptr double, double* %214, i64 4
  %217 = bitcast double* %216 to <4 x i64>*
  store <4 x i64> %wide.load60.1, <4 x i64>* %217, align 8, !tbaa !33
  %218 = getelementptr double, double* %214, i64 8
  %219 = bitcast double* %218 to <4 x i64>*
  store <4 x i64> %wide.load61.1, <4 x i64>* %219, align 8, !tbaa !33
  %220 = getelementptr double, double* %214, i64 12
  %221 = bitcast double* %220 to <4 x i64>*
  store <4 x i64> %wide.load62.1, <4 x i64>* %221, align 8, !tbaa !33
  %index.next.1 = add i64 %index, 32
  %222 = icmp eq i64 %index.next.1, %n.vec
  br i1 %222, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !91

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %cmp.n = icmp eq i64 %smax, %n.vec
  br i1 %cmp.n, label %.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %.lr.ph23
  %indvars.iv46.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %.lr.ph23 ], [ %n.vec, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv46 = phi i64 [ %indvars.iv.next47, %scalar.ph ], [ %indvars.iv46.ph, %scalar.ph.preheader ]
  %223 = getelementptr inbounds double, double* %167, i64 %indvars.iv46
  %224 = bitcast double* %223 to i64*
  %225 = load i64, i64* %224, align 8, !tbaa !33
  %226 = getelementptr inbounds double, double* %168, i64 %indvars.iv46
  %227 = bitcast double* %226 to i64*
  store i64 %225, i64* %227, align 8, !tbaa !33
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %228 = icmp slt i64 %indvars.iv.next47, %170
  br i1 %228, label %scalar.ph, label %.loopexit.loopexit, !llvm.loop !94

.loopexit.loopexit:                               ; preds = %scalar.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %middle.block, %.preheader, %162
  tail call void @__kmpc_barrier(%ident_t* nonnull @3, i32 %5) #7
  invoke void @_ZN8Neighbor5buildER4Atom(%class.Neighbor* nonnull %neighbor, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %229 unwind label %282

; <label>:229                                     ; preds = %.loopexit
  %230 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %237, label %232

; <label>:232                                     ; preds = %229
  invoke void @_ZN5Timer5stampEi(%class.Timer* nonnull %timer, i32 3)
          to label %233 unwind label %234

; <label>:233                                     ; preds = %232
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %237

; <label>:234                                     ; preds = %232
  %235 = landingpad { i8*, i32 }
          catch i8* null
  %236 = extractvalue { i8*, i32 } %235, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:237                                     ; preds = %233, %229, %61, %57
  %next_sort.2 = phi i32 [ %next_sort.025, %61 ], [ %next_sort.025, %57 ], [ %next_sort.1, %233 ], [ %next_sort.1, %229 ]
  %238 = load i32, i32* %30, align 8, !tbaa !61
  %239 = srem i32 %52, %238
  %240 = icmp eq i32 %239, 0
  %241 = zext i1 %240 to i32
  %242 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  %243 = getelementptr inbounds %class.Force, %class.Force* %242, i64 0, i32 5
  store i32 %241, i32* %243, align 8, !tbaa !73
  %244 = bitcast %class.Force* %242 to void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)***
  %245 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)**, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*** %244, align 8, !tbaa !67
  %246 = getelementptr inbounds void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %245, i64 4
  %247 = load void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)*, void (%class.Force*, %class.Atom*, %class.Neighbor*, %class.Comm*, i32)** %246, align 8
  %248 = load i32, i32* %31, align 8, !tbaa !95
  invoke void %247(%class.Force* %242, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, i32 %248)
          to label %249 unwind label %282

; <label>:249                                     ; preds = %237
  %250 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %257, label %252

; <label>:252                                     ; preds = %249
  invoke void @_ZN5Timer5stampEi(%class.Timer* nonnull %timer, i32 2)
          to label %253 unwind label %254

; <label>:253                                     ; preds = %252
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %257

; <label>:254                                     ; preds = %252
  %255 = landingpad { i8*, i32 }
          catch i8* null
  %256 = extractvalue { i8*, i32 } %255, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:257                                     ; preds = %253, %249
  %258 = load i32, i32* %32, align 4, !tbaa !41
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %272, label %260

; <label>:260                                     ; preds = %257
  %261 = load i32, i32* %33, align 8, !tbaa !35
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %272, label %263

; <label>:263                                     ; preds = %260
  invoke void @_ZN4Comm19reverse_communicateER4Atom(%class.Comm* nonnull %comm, %class.Atom* nonnull dereferenceable(224) %atom)
          to label %264 unwind label %282

; <label>:264                                     ; preds = %263
  %265 = tail call i32 @__kmpc_master(%ident_t* nonnull @1, i32 %5) #7
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %272, label %267

; <label>:267                                     ; preds = %264
  invoke void @_ZN5Timer5stampEi(%class.Timer* nonnull %timer, i32 1)
          to label %268 unwind label %269

; <label>:268                                     ; preds = %267
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %272

; <label>:269                                     ; preds = %267
  %270 = landingpad { i8*, i32 }
          catch i8* null
  %271 = extractvalue { i8*, i32 } %270, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @1, i32 %5) #7
  br label %285

; <label>:272                                     ; preds = %268, %264, %260, %257
  %273 = load <2 x i64>, <2 x i64>* %36, align 8, !tbaa !5
  store <2 x i64> %273, <2 x i64>* %37, align 8, !tbaa !5
  %274 = load i32, i32* %18, align 4, !tbaa !84
  store i32 %274, i32* %19, align 4, !tbaa !77
  tail call void @__kmpc_barrier(%ident_t* nonnull @3, i32 %5) #7
  invoke void @_ZN9Integrate14finalIntegrateEv(%class.Integrate* %this)
          to label %275 unwind label %282

; <label>:275                                     ; preds = %272
  %276 = load i32, i32* %30, align 8, !tbaa !61
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %.backedge, label %280

.backedge:                                        ; preds = %280, %275
  %278 = load i32, i32* %.phi.trans.insert, align 8, !tbaa !50
  %279 = icmp slt i32 %52, %278
  br i1 %279, label %38, label %._crit_edge27.loopexit

; <label>:280                                     ; preds = %275
  %281 = load %class.Force*, %class.Force** %force, align 8, !tbaa !5
  invoke void @_ZN6Thermo7computeEiR4AtomR8NeighborP5ForceR5TimerR4Comm(%class.Thermo* nonnull %thermo, i32 %52, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Force* %281, %class.Timer* nonnull dereferenceable(24) %timer, %class.Comm* nonnull dereferenceable(336) %comm)
          to label %.backedge unwind label %282

._crit_edge27.loopexit:                           ; preds = %.backedge
  br label %._crit_edge27

._crit_edge27:                                    ; preds = %._crit_edge27.loopexit, %.preheader3
  ret void

; <label>:282                                     ; preds = %280, %272, %263, %237, %.loopexit, %152, %148, %145, %56, %38
  %283 = landingpad { i8*, i32 }
          catch i8* null
  %284 = extractvalue { i8*, i32 } %283, 0
  tail call void @__clang_call_terminate(i8* %284) #17
  unreachable

; <label>:285                                     ; preds = %269, %254, %234, %159, %142, %62, %48
  %.0 = phi i8* [ %271, %269 ], [ %256, %254 ], [ %64, %62 ], [ %236, %234 ], [ %161, %159 ], [ %144, %142 ], [ %50, %48 ]
  tail call void @__clang_call_terminate(i8* %.0) #17
  unreachable
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare void @__kmpc_end_master(%ident_t*, i32)

; Function Attrs: nounwind
declare double @sqrt(double) #5

; Function Attrs: norecurse nounwind uwtable
define void @_ZN4AtomC2Ei(%class.Atom* nocapture %this, i32 %ntypes_) unnamed_addr #12 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 21
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 14
  %4 = bitcast %class.Atom* %this to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 40, i32 8, i1 false)
  %5 = bitcast i32** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 8, i1 false)
  %6 = bitcast double** %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 28, i32 8, i1 false)
  store i32 3, i32* %3, align 8, !tbaa !96
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 15
  store i32 3, i32* %7, align 4, !tbaa !97
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 16
  store i32 4, i32* %8, align 8, !tbaa !98
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 13
  store double 1.000000e+00, double* %9, align 8, !tbaa !70
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 7
  store i32 %ntypes_, i32* %10, align 8, !tbaa !72
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define void @_ZN4AtomD2Ev(%class.Atom* nocapture readonly %this) unnamed_addr #9 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %2 = load i32, i32* %1, align 4, !tbaa !99
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %_ZN4Atom20destroy_1d_int_arrayEPi.exit, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %6 = load double*, double** %5, align 8, !tbaa !100
  %7 = icmp eq double* %6, null
  br i1 %7, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit, label %8

; <label>:8                                       ; preds = %4
  %9 = bitcast double* %6 to i8*
  tail call void @free(i8* %9) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit:     ; preds = %8, %4
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %11 = load double*, double** %10, align 8, !tbaa !101
  %12 = icmp eq double* %11, null
  br i1 %12, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit1, label %13

; <label>:13                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit
  %14 = bitcast double* %11 to i8*
  tail call void @free(i8* %14) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit1

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit1:    ; preds = %13, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit
  %15 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 6
  %16 = load double*, double** %15, align 8, !tbaa !80
  %17 = icmp eq double* %16, null
  br i1 %17, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2, label %18

; <label>:18                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit1
  %19 = bitcast double* %16 to i8*
  tail call void @free(i8* %19) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2:    ; preds = %18, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit1
  %20 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 10
  %21 = load double*, double** %20, align 8, !tbaa !82
  %22 = icmp eq double* %21, null
  br i1 %22, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit3, label %23

; <label>:23                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2
  %24 = bitcast double* %21 to i8*
  tail call void @free(i8* %24) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit3

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit3:    ; preds = %23, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2
  %25 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %26 = load i32*, i32** %25, align 8, !tbaa !102
  %27 = icmp eq i32* %26, null
  br i1 %27, label %_ZN4Atom20destroy_1d_int_arrayEPi.exit, label %28

; <label>:28                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit3
  %29 = bitcast i32* %26 to i8*
  tail call void @free(i8* %29) #7
  br label %_ZN4Atom20destroy_1d_int_arrayEPi.exit

_ZN4Atom20destroy_1d_int_arrayEPi.exit:           ; preds = %28, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit3, %0
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #5

; Function Attrs: nounwind uwtable
define void @_ZN4Atom26destroy_2d_MMD_float_arrayEPd(%class.Atom* nocapture readnone %this, double* %array) #9 align 2 {
  %1 = icmp eq double* %array, null
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = bitcast double* %array to i8*
  tail call void @free(i8* %3) #7
  br label %4

; <label>:4                                       ; preds = %2, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN4Atom20destroy_1d_int_arrayEPi(%class.Atom* nocapture readnone %this, i32* %array) #9 align 2 {
  %1 = icmp eq i32* %array, null
  br i1 %1, label %4, label %2

; <label>:2                                       ; preds = %0
  %3 = bitcast i32* %array to i8*
  tail call void @free(i8* %3) #7
  br label %4

; <label>:4                                       ; preds = %2, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN4Atom9growarrayEv(%class.Atom* nocapture %this) #9 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %2 = load i32, i32* %1, align 4, !tbaa !99
  %3 = add nsw i32 %2, 20000
  store i32 %3, i32* %1, align 4, !tbaa !99
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %5 = load double*, double** %4, align 8, !tbaa !100
  %6 = mul nsw i32 %2, 3
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i, label %8

; <label>:8                                       ; preds = %0
  %9 = mul nsw i32 %3, 3
  %10 = add nsw i32 %9, 1025
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 3
  %13 = tail call noalias i8* @malloc(i64 %12) #7
  %14 = bitcast i8* %13 to double*
  br label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i

_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i:    ; preds = %8, %0
  %.0.i.i = phi double* [ %14, %8 ], [ null, %0 ]
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %21, label %16

; <label>:16                                      ; preds = %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i
  %17 = bitcast double* %.0.i.i to i8*
  %18 = bitcast double* %5 to i8*
  %19 = sext i32 %6 to i64
  %20 = shl nsw i64 %19, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 %20, i32 8, i1 false) #7
  br label %21

; <label>:21                                      ; preds = %16, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i
  %22 = icmp eq double* %5, null
  br i1 %22, label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit, label %23

; <label>:23                                      ; preds = %21
  %24 = bitcast double* %5 to i8*
  tail call void @free(i8* %24) #7
  %.pre = load i32, i32* %1, align 4, !tbaa !99
  br label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit

_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit:  ; preds = %23, %21
  %25 = phi i32 [ %3, %21 ], [ %.pre, %23 ]
  store double* %.0.i.i, double** %4, align 8, !tbaa !100
  %26 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %27 = load double*, double** %26, align 8, !tbaa !101
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i2, label %29

; <label>:29                                      ; preds = %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit
  %30 = mul nsw i32 %25, 3
  %31 = add nsw i32 %30, 1025
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 3
  %34 = tail call noalias i8* @malloc(i64 %33) #7
  %35 = bitcast i8* %34 to double*
  br label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i2

_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i2:   ; preds = %29, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit
  %.0.i.i1 = phi double* [ %35, %29 ], [ null, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit ]
  br i1 %15, label %41, label %36

; <label>:36                                      ; preds = %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i2
  %37 = bitcast double* %.0.i.i1 to i8*
  %38 = bitcast double* %27 to i8*
  %39 = sext i32 %6 to i64
  %40 = shl nsw i64 %39, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 %40, i32 8, i1 false) #7
  br label %41

; <label>:41                                      ; preds = %36, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i2
  %42 = icmp eq double* %27, null
  br i1 %42, label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3, label %43

; <label>:43                                      ; preds = %41
  %44 = bitcast double* %27 to i8*
  tail call void @free(i8* %44) #7
  %.pre11 = load i32, i32* %1, align 4, !tbaa !99
  br label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3

_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3: ; preds = %43, %41
  %45 = phi i32 [ %25, %41 ], [ %.pre11, %43 ]
  store double* %.0.i.i1, double** %26, align 8, !tbaa !101
  %46 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 6
  %47 = load double*, double** %46, align 8, !tbaa !80
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i5, label %49

; <label>:49                                      ; preds = %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3
  %50 = mul nsw i32 %45, 3
  %51 = add nsw i32 %50, 1025
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 3
  %54 = tail call noalias i8* @malloc(i64 %53) #7
  %55 = bitcast i8* %54 to double*
  br label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i5

_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i5:   ; preds = %49, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3
  %.0.i.i4 = phi double* [ %55, %49 ], [ null, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit3 ]
  br i1 %15, label %61, label %56

; <label>:56                                      ; preds = %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i5
  %57 = bitcast double* %.0.i.i4 to i8*
  %58 = bitcast double* %47 to i8*
  %59 = sext i32 %6 to i64
  %60 = shl nsw i64 %59, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 %60, i32 8, i1 false) #7
  br label %61

; <label>:61                                      ; preds = %56, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i5
  %62 = icmp eq double* %47, null
  br i1 %62, label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6, label %63

; <label>:63                                      ; preds = %61
  %64 = bitcast double* %47 to i8*
  tail call void @free(i8* %64) #7
  %.pre12 = load i32, i32* %1, align 4, !tbaa !99
  br label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6

_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6: ; preds = %63, %61
  %65 = phi i32 [ %45, %61 ], [ %.pre12, %63 ]
  store double* %.0.i.i4, double** %46, align 8, !tbaa !80
  %66 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %67 = load i32*, i32** %66, align 8, !tbaa !102
  %68 = icmp eq i32 %65, 0
  br i1 %68, label %_ZN4Atom19create_1d_int_arrayEi.exit.i, label %69

; <label>:69                                      ; preds = %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6
  %70 = sext i32 %65 to i64
  %71 = shl nsw i64 %70, 2
  %72 = tail call noalias i8* @malloc(i64 %71) #7
  %73 = bitcast i8* %72 to i32*
  br label %_ZN4Atom19create_1d_int_arrayEi.exit.i

_ZN4Atom19create_1d_int_arrayEi.exit.i:           ; preds = %69, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6
  %.0.i.i7 = phi i32* [ %73, %69 ], [ null, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit6 ]
  br i1 %15, label %79, label %74

; <label>:74                                      ; preds = %_ZN4Atom19create_1d_int_arrayEi.exit.i
  %75 = bitcast i32* %.0.i.i7 to i8*
  %76 = bitcast i32* %67 to i8*
  %77 = sext i32 %2 to i64
  %78 = shl nsw i64 %77, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %75, i8* %76, i64 %78, i32 4, i1 false) #7
  br label %79

; <label>:79                                      ; preds = %74, %_ZN4Atom19create_1d_int_arrayEi.exit.i
  %80 = icmp eq i32* %67, null
  br i1 %80, label %_ZN4Atom20realloc_1d_int_arrayEPiii.exit, label %81

; <label>:81                                      ; preds = %79
  %82 = bitcast i32* %67 to i8*
  tail call void @free(i8* %82) #7
  %.pre13 = load i32, i32* %1, align 4, !tbaa !99
  br label %_ZN4Atom20realloc_1d_int_arrayEPiii.exit

_ZN4Atom20realloc_1d_int_arrayEPiii.exit:         ; preds = %81, %79
  %83 = phi i32 [ %65, %79 ], [ %.pre13, %81 ]
  store i32* %.0.i.i7, i32** %66, align 8, !tbaa !102
  %84 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 10
  %85 = load double*, double** %84, align 8, !tbaa !82
  %86 = icmp eq i32 %83, 0
  br i1 %86, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i9, label %87

; <label>:87                                      ; preds = %_ZN4Atom20realloc_1d_int_arrayEPiii.exit
  %88 = mul nsw i32 %83, 3
  %89 = add nsw i32 %88, 1025
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 3
  %92 = tail call noalias i8* @malloc(i64 %91) #7
  %93 = bitcast i8* %92 to double*
  br label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i9

_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i9:   ; preds = %87, %_ZN4Atom20realloc_1d_int_arrayEPiii.exit
  %.0.i.i8 = phi double* [ %93, %87 ], [ null, %_ZN4Atom20realloc_1d_int_arrayEPiii.exit ]
  br i1 %15, label %99, label %94

; <label>:94                                      ; preds = %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i9
  %95 = bitcast double* %.0.i.i8 to i8*
  %96 = bitcast double* %85 to i8*
  %97 = sext i32 %6 to i64
  %98 = shl nsw i64 %97, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 %98, i32 8, i1 false) #7
  br label %99

; <label>:99                                      ; preds = %94, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit.i9
  %100 = icmp eq double* %85, null
  br i1 %100, label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit10, label %101

; <label>:101                                     ; preds = %99
  %102 = bitcast double* %85 to i8*
  tail call void @free(i8* %102) #7
  br label %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit10

_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit10: ; preds = %101, %99
  store double* %.0.i.i8, double** %84, align 8, !tbaa !82
  %103 = load double*, double** %4, align 8, !tbaa !100
  %104 = icmp eq double* %103, null
  br i1 %104, label %112, label %105

; <label>:105                                     ; preds = %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit10
  %106 = load double*, double** %26, align 8, !tbaa !101
  %107 = icmp eq double* %106, null
  br i1 %107, label %112, label %108

; <label>:108                                     ; preds = %105
  %109 = load double*, double** %46, align 8, !tbaa !80
  %110 = icmp eq double* %109, null
  %111 = icmp eq double* %.0.i.i8, null
  %or.cond = or i1 %111, %110
  br i1 %or.cond, label %112, label %113

; <label>:112                                     ; preds = %108, %105, %_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii.exit10
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @str.60, i64 0, i64 0))
  br label %113

; <label>:113                                     ; preds = %112, %108
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define noalias double* @_ZN4Atom26realloc_2d_MMD_float_arrayEPdiii(%class.Atom* nocapture readnone %this, double* %array, i32 %n1, i32 %n2, i32 %nold) #9 align 2 {
  %1 = mul nsw i32 %n2, %n1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = add nsw i32 %1, 1025
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 3
  %7 = tail call noalias i8* @malloc(i64 %6) #7
  %8 = bitcast i8* %7 to double*
  br label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit

_ZN4Atom25create_2d_MMD_float_arrayEii.exit:      ; preds = %3, %0
  %.0.i = phi double* [ %8, %3 ], [ null, %0 ]
  %9 = icmp eq i32 %nold, 0
  br i1 %9, label %15, label %10

; <label>:10                                      ; preds = %_ZN4Atom25create_2d_MMD_float_arrayEii.exit
  %11 = bitcast double* %.0.i to i8*
  %12 = bitcast double* %array to i8*
  %13 = sext i32 %nold to i64
  %14 = shl nsw i64 %13, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 %14, i32 8, i1 false)
  br label %15

; <label>:15                                      ; preds = %10, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit
  %16 = icmp eq double* %array, null
  br i1 %16, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit, label %17

; <label>:17                                      ; preds = %15
  %18 = bitcast double* %array to i8*
  tail call void @free(i8* %18) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit:     ; preds = %17, %15
  ret double* %.0.i
}

; Function Attrs: nounwind uwtable
define noalias i32* @_ZN4Atom20realloc_1d_int_arrayEPiii(%class.Atom* nocapture readnone %this, i32* %array, i32 %n1, i32 %nold) #9 align 2 {
  %1 = icmp eq i32 %n1, 0
  br i1 %1, label %_ZN4Atom19create_1d_int_arrayEi.exit, label %2

; <label>:2                                       ; preds = %0
  %3 = sext i32 %n1 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias i8* @malloc(i64 %4) #7
  %6 = bitcast i8* %5 to i32*
  br label %_ZN4Atom19create_1d_int_arrayEi.exit

_ZN4Atom19create_1d_int_arrayEi.exit:             ; preds = %2, %0
  %.0.i = phi i32* [ %6, %2 ], [ null, %0 ]
  %7 = icmp eq i32 %nold, 0
  br i1 %7, label %13, label %8

; <label>:8                                       ; preds = %_ZN4Atom19create_1d_int_arrayEi.exit
  %9 = bitcast i32* %.0.i to i8*
  %10 = bitcast i32* %array to i8*
  %11 = sext i32 %nold to i64
  %12 = shl nsw i64 %11, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 %12, i32 4, i1 false)
  br label %13

; <label>:13                                      ; preds = %8, %_ZN4Atom19create_1d_int_arrayEi.exit
  %14 = icmp eq i32* %array, null
  br i1 %14, label %_ZN4Atom20destroy_1d_int_arrayEPi.exit, label %15

; <label>:15                                      ; preds = %13
  %16 = bitcast i32* %array to i8*
  tail call void @free(i8* %16) #7
  br label %_ZN4Atom20destroy_1d_int_arrayEPi.exit

_ZN4Atom20destroy_1d_int_arrayEPi.exit:           ; preds = %15, %13
  ret i32* %.0.i
}

; Function Attrs: nounwind uwtable
define void @_ZN4Atom7addatomEdddddd(%class.Atom* nocapture %this, double %x_in, double %y_in, double %z_in, double %vx_in, double %vy_in, double %vz_in) #9 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %4 = load i32, i32* %3, align 4, !tbaa !99
  %5 = icmp eq i32 %2, %4
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %0
  tail call void @_ZN4Atom9growarrayEv(%class.Atom* nonnull %this)
  %.pre = load i32, i32* %1, align 4, !tbaa !84
  br label %7

; <label>:7                                       ; preds = %6, %0
  %8 = phi i32 [ %.pre, %6 ], [ %2, %0 ]
  %9 = mul nsw i32 %8, 3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %12 = load double*, double** %11, align 8, !tbaa !100
  %13 = getelementptr inbounds double, double* %12, i64 %10
  store double %x_in, double* %13, align 8, !tbaa !33
  %14 = add nsw i32 %9, 1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double, double* %12, i64 %15
  store double %y_in, double* %16, align 8, !tbaa !33
  %17 = add nsw i32 %9, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %12, i64 %18
  store double %z_in, double* %19, align 8, !tbaa !33
  %20 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %21 = load double*, double** %20, align 8, !tbaa !101
  %22 = getelementptr inbounds double, double* %21, i64 %10
  store double %vx_in, double* %22, align 8, !tbaa !33
  %23 = getelementptr inbounds double, double* %21, i64 %15
  store double %vy_in, double* %23, align 8, !tbaa !33
  %24 = getelementptr inbounds double, double* %21, i64 %18
  store double %vz_in, double* %24, align 8, !tbaa !33
  %25 = tail call i32 @rand() #7
  %26 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 7
  %27 = load i32, i32* %26, align 8, !tbaa !72
  %28 = srem i32 %25, %27
  %29 = load i32, i32* %1, align 4, !tbaa !84
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %32 = load i32*, i32** %31, align 8, !tbaa !102
  %33 = getelementptr inbounds i32, i32* %32, i64 %30
  store i32 %28, i32* %33, align 4, !tbaa !1
  %34 = load i32, i32* %1, align 4, !tbaa !84
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %1, align 4, !tbaa !84
  ret void
}

; Function Attrs: nounwind
declare i32 @rand() #5

; Function Attrs: uwtable
define void @_ZN4Atom3pbcEv(%class.Atom* nocapture readonly %this) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = add nsw i32 %3, -1
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %._crit_edge3

._crit_edge3:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre4 = bitcast i32* %.omp.stride to i8*
  %.pre6 = bitcast i32* %.omp.ub to i8*
  %.pre8 = bitcast i32* %.omp.lb to i8*
  br label %71

; <label>:6                                       ; preds = %0
  %7 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 %4, i32* %.omp.ub, align 4, !tbaa !1
  %9 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %10 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %11 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %12 = icmp sgt i32 %11, %4
  %13 = select i1 %12, i32 %4, i32 %11
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %14 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %15 = icmp sgt i32 %14, %13
  br i1 %15, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %6
  %16 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %17 = load double*, double** %16, align 8
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 0
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 1
  %20 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 2
  %21 = sext i32 %14 to i64
  %22 = sext i32 %13 to i64
  br label %23

; <label>:23                                      ; preds = %68, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %68 ], [ %21, %.lr.ph ]
  %.omp.iv.02 = phi i32 [ %69, %68 ], [ %14, %.lr.ph ]
  %24 = mul nsw i32 %.omp.iv.02, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %17, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !33
  %28 = fcmp olt double %27, 0.000000e+00
  br i1 %28, label %29, label %32

; <label>:29                                      ; preds = %23
  %30 = load double, double* %18, align 8, !tbaa !62
  %31 = fadd double %27, %30
  store double %31, double* %26, align 8, !tbaa !33
  br label %32

; <label>:32                                      ; preds = %29, %23
  %33 = phi double [ %31, %29 ], [ %27, %23 ]
  %34 = load double, double* %18, align 8, !tbaa !62
  %35 = fcmp ult double %33, %34
  br i1 %35, label %38, label %36

; <label>:36                                      ; preds = %32
  %37 = fsub double %33, %34
  store double %37, double* %26, align 8, !tbaa !33
  br label %38

; <label>:38                                      ; preds = %36, %32
  %39 = add nsw i32 %24, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, double* %17, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !33
  %43 = fcmp olt double %42, 0.000000e+00
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %38
  %45 = load double, double* %19, align 8, !tbaa !63
  %46 = fadd double %42, %45
  store double %46, double* %41, align 8, !tbaa !33
  br label %47

; <label>:47                                      ; preds = %44, %38
  %48 = phi double [ %46, %44 ], [ %42, %38 ]
  %49 = load double, double* %19, align 8, !tbaa !63
  %50 = fcmp ult double %48, %49
  br i1 %50, label %53, label %51

; <label>:51                                      ; preds = %47
  %52 = fsub double %48, %49
  store double %52, double* %41, align 8, !tbaa !33
  br label %53

; <label>:53                                      ; preds = %51, %47
  %54 = add nsw i32 %24, 2
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double, double* %17, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !33
  %58 = fcmp olt double %57, 0.000000e+00
  br i1 %58, label %59, label %62

; <label>:59                                      ; preds = %53
  %60 = load double, double* %20, align 8, !tbaa !64
  %61 = fadd double %57, %60
  store double %61, double* %56, align 8, !tbaa !33
  br label %62

; <label>:62                                      ; preds = %59, %53
  %63 = phi double [ %61, %59 ], [ %57, %53 ]
  %64 = load double, double* %20, align 8, !tbaa !64
  %65 = fcmp ult double %63, %64
  br i1 %65, label %68, label %66

; <label>:66                                      ; preds = %62
  %67 = fsub double %63, %64
  store double %67, double* %56, align 8, !tbaa !33
  br label %68

; <label>:68                                      ; preds = %66, %62
  %69 = add nsw i32 %.omp.iv.02, 1
  %70 = icmp slt i64 %indvars.iv, %22
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %70, label %23, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %68
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %71

; <label>:71                                      ; preds = %._crit_edge, %._crit_edge3
  %.pre-phi9 = phi i8* [ %.pre8, %._crit_edge3 ], [ %7, %._crit_edge ]
  %.pre-phi7 = phi i8* [ %.pre6, %._crit_edge3 ], [ %8, %._crit_edge ]
  %.pre-phi5 = phi i8* [ %.pre4, %._crit_edge3 ], [ %9, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge3 ], [ %10, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi5) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi7) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi9) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @_ZN4Atom4copyEii(%class.Atom* nocapture readonly %this, i32 %i, i32 %j) #12 align 2 {
  %1 = mul nsw i32 %i, 3
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %4 = load double*, double** %3, align 8, !tbaa !100
  %5 = getelementptr inbounds double, double* %4, i64 %2
  %6 = bitcast double* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !33
  %8 = mul nsw i32 %j, 3
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds double, double* %4, i64 %9
  %11 = bitcast double* %10 to i64*
  store i64 %7, i64* %11, align 8, !tbaa !33
  %12 = add nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds double, double* %4, i64 %13
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !33
  %17 = add nsw i32 %8, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %4, i64 %18
  %20 = bitcast double* %19 to i64*
  store i64 %16, i64* %20, align 8, !tbaa !33
  %21 = add nsw i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %4, i64 %22
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !33
  %26 = add nsw i32 %8, 2
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, double* %4, i64 %27
  %29 = bitcast double* %28 to i64*
  store i64 %25, i64* %29, align 8, !tbaa !33
  %30 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %31 = load double*, double** %30, align 8, !tbaa !101
  %32 = getelementptr inbounds double, double* %31, i64 %2
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !33
  %35 = getelementptr inbounds double, double* %31, i64 %9
  %36 = bitcast double* %35 to i64*
  store i64 %34, i64* %36, align 8, !tbaa !33
  %37 = getelementptr inbounds double, double* %31, i64 %13
  %38 = bitcast double* %37 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !33
  %40 = getelementptr inbounds double, double* %31, i64 %18
  %41 = bitcast double* %40 to i64*
  store i64 %39, i64* %41, align 8, !tbaa !33
  %42 = getelementptr inbounds double, double* %31, i64 %22
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !33
  %45 = getelementptr inbounds double, double* %31, i64 %27
  %46 = bitcast double* %45 to i64*
  store i64 %44, i64* %46, align 8, !tbaa !33
  %47 = sext i32 %i to i64
  %48 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %49 = load i32*, i32** %48, align 8, !tbaa !102
  %50 = getelementptr inbounds i32, i32* %49, i64 %47
  %51 = load i32, i32* %50, align 4, !tbaa !1
  %52 = sext i32 %j to i64
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  store i32 %51, i32* %53, align 4, !tbaa !1
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Atom9pack_commEiPiPdS0_(%class.Atom* nocapture readonly %this, i32 %n, i32* nocapture readonly %list, double* nocapture %buf, i32* nocapture readonly %pbc_flags) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %.omp.lb6 = alloca i32, align 4
  %.omp.ub7 = alloca i32, align 4
  %.omp.stride8 = alloca i32, align 4
  %.omp.is_last9 = alloca i32, align 4
  %2 = load i32, i32* %pbc_flags, align 4, !tbaa !1
  %3 = icmp eq i32 %2, 0
  %4 = add nsw i32 %n, -1
  %5 = icmp sgt i32 %n, 0
  br i1 %3, label %6, label %54

; <label>:6                                       ; preds = %0
  br i1 %5, label %7, label %._crit_edge19

._crit_edge19:                                    ; preds = %6
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre20 = bitcast i32* %.omp.stride to i8*
  %.pre22 = bitcast i32* %.omp.ub to i8*
  %.pre24 = bitcast i32* %.omp.lb to i8*
  br label %53

; <label>:7                                       ; preds = %6
  %8 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %9 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #7
  store i32 %4, i32* %.omp.ub, align 4, !tbaa !1
  %10 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %11 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %12 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %13 = icmp sgt i32 %12, %4
  %14 = select i1 %13, i32 %4, i32 %12
  store i32 %14, i32* %.omp.ub, align 4, !tbaa !1
  %15 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %16 = icmp sgt i32 %15, %14
  br i1 %16, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %7
  %17 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %18 = load double*, double** %17, align 8
  %19 = sext i32 %15 to i64
  %20 = sext i32 %14 to i64
  br label %21

; <label>:21                                      ; preds = %21, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %21 ], [ %19, %.lr.ph ]
  %.omp.iv.011 = phi i32 [ %51, %21 ], [ %15, %.lr.ph ]
  %22 = getelementptr inbounds i32, i32* %list, i64 %indvars.iv
  %23 = load i32, i32* %22, align 4, !tbaa !1
  %24 = mul nsw i32 %23, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %18, i64 %25
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !33
  %29 = mul nsw i32 %.omp.iv.011, 3
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double, double* %buf, i64 %30
  %32 = bitcast double* %31 to i64*
  store i64 %28, i64* %32, align 8, !tbaa !33
  %33 = add nsw i32 %24, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double, double* %18, i64 %34
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !33
  %38 = add nsw i32 %29, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %buf, i64 %39
  %41 = bitcast double* %40 to i64*
  store i64 %37, i64* %41, align 8, !tbaa !33
  %42 = add nsw i32 %24, 2
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double, double* %18, i64 %43
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !33
  %47 = add nsw i32 %29, 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, double* %buf, i64 %48
  %50 = bitcast double* %49 to i64*
  store i64 %46, i64* %50, align 8, !tbaa !33
  %51 = add nsw i32 %.omp.iv.011, 1
  %52 = icmp slt i64 %indvars.iv, %20
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %52, label %21, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %21
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %7
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %53

; <label>:53                                      ; preds = %._crit_edge, %._crit_edge19
  %.pre-phi25 = phi i8* [ %.pre24, %._crit_edge19 ], [ %8, %._crit_edge ]
  %.pre-phi23 = phi i8* [ %.pre22, %._crit_edge19 ], [ %9, %._crit_edge ]
  %.pre-phi21 = phi i8* [ %.pre20, %._crit_edge19 ], [ %10, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge19 ], [ %11, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi21) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi23) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi25) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  br label %117

; <label>:54                                      ; preds = %0
  br i1 %5, label %55, label %._crit_edge18

._crit_edge18:                                    ; preds = %54
  %.pre26 = bitcast i32* %.omp.is_last9 to i8*
  %.pre28 = bitcast i32* %.omp.stride8 to i8*
  %.pre30 = bitcast i32* %.omp.ub7 to i8*
  %.pre32 = bitcast i32* %.omp.lb6 to i8*
  br label %116

; <label>:55                                      ; preds = %54
  %56 = bitcast i32* %.omp.lb6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %56) #7
  store i32 0, i32* %.omp.lb6, align 4, !tbaa !1
  %57 = bitcast i32* %.omp.ub7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %57) #7
  store i32 %4, i32* %.omp.ub7, align 4, !tbaa !1
  %58 = bitcast i32* %.omp.stride8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %58) #7
  store i32 1, i32* %.omp.stride8, align 4, !tbaa !1
  %59 = bitcast i32* %.omp.is_last9 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %59) #7
  store i32 0, i32* %.omp.is_last9, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last9, i32* nonnull %.omp.lb6, i32* nonnull %.omp.ub7, i32* nonnull %.omp.stride8, i32 1, i32 1)
  %60 = load i32, i32* %.omp.ub7, align 4, !tbaa !1
  %61 = icmp sgt i32 %60, %4
  %62 = select i1 %61, i32 %4, i32 %60
  store i32 %62, i32* %.omp.ub7, align 4, !tbaa !1
  %63 = load i32, i32* %.omp.lb6, align 4, !tbaa !1
  %64 = icmp sgt i32 %63, %62
  br i1 %64, label %._crit_edge15, label %.lr.ph14

.lr.ph14:                                         ; preds = %55
  %65 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %66 = load double*, double** %65, align 8
  %67 = getelementptr inbounds i32, i32* %pbc_flags, i64 1
  %68 = load i32, i32* %67, align 4
  %69 = sitofp i32 %68 to double
  %70 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 0
  %71 = getelementptr inbounds i32, i32* %pbc_flags, i64 2
  %72 = load i32, i32* %71, align 4
  %73 = sitofp i32 %72 to double
  %74 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 1
  %75 = getelementptr inbounds i32, i32* %pbc_flags, i64 3
  %76 = load i32, i32* %75, align 4
  %77 = sitofp i32 %76 to double
  %78 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 2
  %79 = sext i32 %63 to i64
  %80 = sext i32 %62 to i64
  br label %81

; <label>:81                                      ; preds = %81, %.lr.ph14
  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %81 ], [ %79, %.lr.ph14 ]
  %.omp.iv3.012 = phi i32 [ %114, %81 ], [ %63, %.lr.ph14 ]
  %82 = getelementptr inbounds i32, i32* %list, i64 %indvars.iv16
  %83 = load i32, i32* %82, align 4, !tbaa !1
  %84 = mul nsw i32 %83, 3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %66, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = load double, double* %70, align 8, !tbaa !62
  %89 = fmul double %69, %88
  %90 = fadd double %87, %89
  %91 = mul nsw i32 %.omp.iv3.012, 3
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double, double* %buf, i64 %92
  store double %90, double* %93, align 8, !tbaa !33
  %94 = add nsw i32 %84, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %66, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = load double, double* %74, align 8, !tbaa !63
  %99 = fmul double %73, %98
  %100 = fadd double %97, %99
  %101 = add nsw i32 %91, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %buf, i64 %102
  store double %100, double* %103, align 8, !tbaa !33
  %104 = add nsw i32 %84, 2
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %66, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = load double, double* %78, align 8, !tbaa !64
  %109 = fmul double %77, %108
  %110 = fadd double %107, %109
  %111 = add nsw i32 %91, 2
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds double, double* %buf, i64 %112
  store double %110, double* %113, align 8, !tbaa !33
  %114 = add nsw i32 %.omp.iv3.012, 1
  %115 = icmp slt i64 %indvars.iv16, %80
  %indvars.iv.next17 = add nsw i64 %indvars.iv16, 1
  br i1 %115, label %81, label %._crit_edge15.loopexit

._crit_edge15.loopexit:                           ; preds = %81
  br label %._crit_edge15

._crit_edge15:                                    ; preds = %._crit_edge15.loopexit, %55
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %116

; <label>:116                                     ; preds = %._crit_edge15, %._crit_edge18
  %.pre-phi33 = phi i8* [ %.pre32, %._crit_edge18 ], [ %56, %._crit_edge15 ]
  %.pre-phi31 = phi i8* [ %.pre30, %._crit_edge18 ], [ %57, %._crit_edge15 ]
  %.pre-phi29 = phi i8* [ %.pre28, %._crit_edge18 ], [ %58, %._crit_edge15 ]
  %.pre-phi27 = phi i8* [ %.pre26, %._crit_edge18 ], [ %59, %._crit_edge15 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi27) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi29) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi31) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi33) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  br label %117

; <label>:117                                     ; preds = %116, %53
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Atom11unpack_commEiiPd(%class.Atom* nocapture readonly %this, i32 %n, i32 %first, double* nocapture readonly %buf) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %2 = add nsw i32 %n, -1
  %3 = icmp sgt i32 %n, 0
  br i1 %3, label %4, label %._crit_edge4

._crit_edge4:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre5 = bitcast i32* %.omp.stride to i8*
  %.pre7 = bitcast i32* %.omp.ub to i8*
  %.pre9 = bitcast i32* %.omp.lb to i8*
  br label %49

; <label>:4                                       ; preds = %0
  %5 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %6 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #7
  store i32 %2, i32* %.omp.ub, align 4, !tbaa !1
  %7 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %9 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %10 = icmp sgt i32 %9, %2
  %11 = select i1 %10, i32 %2, i32 %9
  store i32 %11, i32* %.omp.ub, align 4, !tbaa !1
  %12 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %13 = icmp sgt i32 %12, %11
  br i1 %13, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %4
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %15 = load double*, double** %14, align 8
  %16 = sext i32 %12 to i64
  %17 = sext i32 %11 to i64
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %18 ], [ %16, %.lr.ph ]
  %.omp.iv.03 = phi i32 [ %47, %18 ], [ %12, %.lr.ph ]
  %19 = mul nsw i32 %.omp.iv.03, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double, double* %buf, i64 %20
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !33
  %24 = add nsw i32 %.omp.iv.03, %first
  %25 = mul nsw i32 %24, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %15, i64 %26
  %28 = bitcast double* %27 to i64*
  store i64 %23, i64* %28, align 8, !tbaa !33
  %29 = add nsw i32 %19, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double, double* %buf, i64 %30
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !33
  %34 = add nsw i32 %25, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %15, i64 %35
  %37 = bitcast double* %36 to i64*
  store i64 %33, i64* %37, align 8, !tbaa !33
  %38 = add nsw i32 %19, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %buf, i64 %39
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !33
  %43 = add nsw i32 %25, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %15, i64 %44
  %46 = bitcast double* %45 to i64*
  store i64 %42, i64* %46, align 8, !tbaa !33
  %47 = add nsw i32 %.omp.iv.03, 1
  %48 = icmp slt i64 %indvars.iv, %17
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %48, label %18, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %49

; <label>:49                                      ; preds = %._crit_edge, %._crit_edge4
  %.pre-phi10 = phi i8* [ %.pre9, %._crit_edge4 ], [ %5, %._crit_edge ]
  %.pre-phi8 = phi i8* [ %.pre7, %._crit_edge4 ], [ %6, %._crit_edge ]
  %.pre-phi6 = phi i8* [ %.pre5, %._crit_edge4 ], [ %7, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge4 ], [ %8, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi6) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi8) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi10) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Atom12pack_reverseEiiPd(%class.Atom* nocapture readonly %this, i32 %n, i32 %first, double* nocapture %buf) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %2 = add nsw i32 %n, -1
  %3 = icmp sgt i32 %n, 0
  br i1 %3, label %4, label %._crit_edge4

._crit_edge4:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre5 = bitcast i32* %.omp.stride to i8*
  %.pre7 = bitcast i32* %.omp.ub to i8*
  %.pre9 = bitcast i32* %.omp.lb to i8*
  br label %49

; <label>:4                                       ; preds = %0
  %5 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %6 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #7
  store i32 %2, i32* %.omp.ub, align 4, !tbaa !1
  %7 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %9 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %10 = icmp sgt i32 %9, %2
  %11 = select i1 %10, i32 %2, i32 %9
  store i32 %11, i32* %.omp.ub, align 4, !tbaa !1
  %12 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %13 = icmp sgt i32 %12, %11
  br i1 %13, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %4
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 6
  %15 = load double*, double** %14, align 8
  %16 = sext i32 %12 to i64
  %17 = sext i32 %11 to i64
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %18 ], [ %16, %.lr.ph ]
  %.omp.iv.03 = phi i32 [ %47, %18 ], [ %12, %.lr.ph ]
  %19 = add nsw i32 %.omp.iv.03, %first
  %20 = mul nsw i32 %19, 3
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds double, double* %15, i64 %21
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !33
  %25 = mul nsw i32 %.omp.iv.03, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %buf, i64 %26
  %28 = bitcast double* %27 to i64*
  store i64 %24, i64* %28, align 8, !tbaa !33
  %29 = add nsw i32 %20, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double, double* %15, i64 %30
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !33
  %34 = add nsw i32 %25, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %buf, i64 %35
  %37 = bitcast double* %36 to i64*
  store i64 %33, i64* %37, align 8, !tbaa !33
  %38 = add nsw i32 %20, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %15, i64 %39
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !33
  %43 = add nsw i32 %25, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %buf, i64 %44
  %46 = bitcast double* %45 to i64*
  store i64 %42, i64* %46, align 8, !tbaa !33
  %47 = add nsw i32 %.omp.iv.03, 1
  %48 = icmp slt i64 %indvars.iv, %17
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %48, label %18, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %49

; <label>:49                                      ; preds = %._crit_edge, %._crit_edge4
  %.pre-phi10 = phi i8* [ %.pre9, %._crit_edge4 ], [ %5, %._crit_edge ]
  %.pre-phi8 = phi i8* [ %.pre7, %._crit_edge4 ], [ %6, %._crit_edge ]
  %.pre-phi6 = phi i8* [ %.pre5, %._crit_edge4 ], [ %7, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge4 ], [ %8, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi6) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi8) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi10) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Atom14unpack_reverseEiPiPd(%class.Atom* nocapture readonly %this, i32 %n, i32* nocapture readonly %list, double* nocapture readonly %buf) #11 align 2 {
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %2 = add nsw i32 %n, -1
  %3 = icmp sgt i32 %n, 0
  br i1 %3, label %4, label %._crit_edge4

._crit_edge4:                                     ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre5 = bitcast i32* %.omp.stride to i8*
  %.pre7 = bitcast i32* %.omp.ub to i8*
  %.pre9 = bitcast i32* %.omp.lb to i8*
  br label %50

; <label>:4                                       ; preds = %0
  %5 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %6 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #7
  store i32 %2, i32* %.omp.ub, align 4, !tbaa !1
  %7 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %8 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %9 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %10 = icmp sgt i32 %9, %2
  %11 = select i1 %10, i32 %2, i32 %9
  store i32 %11, i32* %.omp.ub, align 4, !tbaa !1
  %12 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %13 = icmp sgt i32 %12, %11
  br i1 %13, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %4
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 6
  %15 = load double*, double** %14, align 8
  %16 = sext i32 %12 to i64
  %17 = sext i32 %11 to i64
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %18 ], [ %16, %.lr.ph ]
  %.omp.iv.03 = phi i32 [ %48, %18 ], [ %12, %.lr.ph ]
  %19 = getelementptr inbounds i32, i32* %list, i64 %indvars.iv
  %20 = load i32, i32* %19, align 4, !tbaa !1
  %21 = mul nsw i32 %.omp.iv.03, 3
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %buf, i64 %22
  %24 = load double, double* %23, align 8, !tbaa !33
  %25 = mul nsw i32 %20, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %15, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !33
  %29 = fadd double %24, %28
  store double %29, double* %27, align 8, !tbaa !33
  %30 = add nsw i32 %21, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %buf, i64 %31
  %33 = load double, double* %32, align 8, !tbaa !33
  %34 = add nsw i32 %25, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %15, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !33
  %38 = fadd double %33, %37
  store double %38, double* %36, align 8, !tbaa !33
  %39 = add nsw i32 %21, 2
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, double* %buf, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !33
  %43 = add nsw i32 %25, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %15, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !33
  %47 = fadd double %42, %46
  store double %47, double* %45, align 8, !tbaa !33
  %48 = add nsw i32 %.omp.iv.03, 1
  %49 = icmp slt i64 %indvars.iv, %17
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %49, label %18, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %50

; <label>:50                                      ; preds = %._crit_edge, %._crit_edge4
  %.pre-phi10 = phi i8* [ %.pre9, %._crit_edge4 ], [ %5, %._crit_edge ]
  %.pre-phi8 = phi i8* [ %.pre7, %._crit_edge4 ], [ %6, %._crit_edge ]
  %.pre-phi6 = phi i8* [ %.pre5, %._crit_edge4 ], [ %7, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge4 ], [ %8, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi6) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi8) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi10) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @_ZN4Atom11pack_borderEiPdPi(%class.Atom* nocapture readonly %this, i32 %i, double* nocapture %buf, i32* nocapture readonly %pbc_flags) #12 align 2 {
  %1 = load i32, i32* %pbc_flags, align 4, !tbaa !1
  %2 = icmp eq i32 %1, 0
  %3 = mul nsw i32 %i, 3
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %6 = load double*, double** %5, align 8, !tbaa !100
  %7 = getelementptr inbounds double, double* %6, i64 %4
  %8 = load double, double* %7, align 8, !tbaa !33
  br i1 %2, label %9, label %28

; <label>:9                                       ; preds = %0
  store double %8, double* %buf, align 8, !tbaa !33
  %10 = add nsw i32 %3, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double, double* %6, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !33
  %15 = getelementptr inbounds double, double* %buf, i64 1
  %16 = bitcast double* %15 to i64*
  store i64 %14, i64* %16, align 8, !tbaa !33
  %17 = add nsw i32 %3, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %6, i64 %18
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !33
  %22 = getelementptr inbounds double, double* %buf, i64 2
  %23 = bitcast double* %22 to i64*
  store i64 %21, i64* %23, align 8, !tbaa !33
  %24 = sext i32 %i to i64
  %25 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %26 = load i32*, i32** %25, align 8, !tbaa !102
  %27 = getelementptr inbounds i32, i32* %26, i64 %24
  br label %64

; <label>:28                                      ; preds = %0
  %29 = getelementptr inbounds i32, i32* %pbc_flags, i64 1
  %30 = load i32, i32* %29, align 4, !tbaa !1
  %31 = sitofp i32 %30 to double
  %32 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 0
  %33 = load double, double* %32, align 8, !tbaa !62
  %34 = fmul double %31, %33
  %35 = fadd double %8, %34
  store double %35, double* %buf, align 8, !tbaa !33
  %36 = add nsw i32 %3, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %6, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !33
  %40 = getelementptr inbounds i32, i32* %pbc_flags, i64 2
  %41 = load i32, i32* %40, align 4, !tbaa !1
  %42 = sitofp i32 %41 to double
  %43 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 1
  %44 = load double, double* %43, align 8, !tbaa !63
  %45 = fmul double %42, %44
  %46 = fadd double %39, %45
  %47 = getelementptr inbounds double, double* %buf, i64 1
  store double %46, double* %47, align 8, !tbaa !33
  %48 = add nsw i32 %3, 2
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %6, i64 %49
  %51 = load double, double* %50, align 8, !tbaa !33
  %52 = getelementptr inbounds i32, i32* %pbc_flags, i64 3
  %53 = load i32, i32* %52, align 4, !tbaa !1
  %54 = sitofp i32 %53 to double
  %55 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 18, i32 2
  %56 = load double, double* %55, align 8, !tbaa !64
  %57 = fmul double %54, %56
  %58 = fadd double %51, %57
  %59 = getelementptr inbounds double, double* %buf, i64 2
  store double %58, double* %59, align 8, !tbaa !33
  %60 = sext i32 %i to i64
  %61 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %62 = load i32*, i32** %61, align 8, !tbaa !102
  %63 = getelementptr inbounds i32, i32* %62, i64 %60
  br label %64

; <label>:64                                      ; preds = %28, %9
  %.sink.in.in = phi i32* [ %63, %28 ], [ %27, %9 ]
  %.sink.in = load i32, i32* %.sink.in.in, align 4, !tbaa !1
  %.sink = sitofp i32 %.sink.in to double
  %65 = getelementptr inbounds double, double* %buf, i64 3
  store double %.sink, double* %65, align 8
  ret i32 4
}

; Function Attrs: nounwind uwtable
define i32 @_ZN4Atom13unpack_borderEiPd(%class.Atom* nocapture %this, i32 %i, double* nocapture readonly %buf) #9 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %2 = load i32, i32* %1, align 4, !tbaa !99
  %3 = icmp eq i32 %2, %i
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  tail call void @_ZN4Atom9growarrayEv(%class.Atom* nonnull %this)
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = bitcast double* %buf to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !33
  %8 = mul nsw i32 %i, 3
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %11 = load double*, double** %10, align 8, !tbaa !100
  %12 = getelementptr inbounds double, double* %11, i64 %9
  %13 = bitcast double* %12 to i64*
  store i64 %7, i64* %13, align 8, !tbaa !33
  %14 = getelementptr inbounds double, double* %buf, i64 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !33
  %17 = add nsw i32 %8, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %11, i64 %18
  %20 = bitcast double* %19 to i64*
  store i64 %16, i64* %20, align 8, !tbaa !33
  %21 = getelementptr inbounds double, double* %buf, i64 2
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !33
  %24 = add nsw i32 %8, 2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %11, i64 %25
  %27 = bitcast double* %26 to i64*
  store i64 %23, i64* %27, align 8, !tbaa !33
  %28 = getelementptr inbounds double, double* %buf, i64 3
  %29 = load double, double* %28, align 8, !tbaa !33
  %30 = fptosi double %29 to i32
  %31 = sext i32 %i to i64
  %32 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %33 = load i32*, i32** %32, align 8, !tbaa !102
  %34 = getelementptr inbounds i32, i32* %33, i64 %31
  store i32 %30, i32* %34, align 4, !tbaa !1
  ret i32 4
}

; Function Attrs: norecurse nounwind uwtable
define i32 @_ZN4Atom13pack_exchangeEiPd(%class.Atom* nocapture readonly %this, i32 %i, double* nocapture %buf) #12 align 2 {
  %1 = mul nsw i32 %i, 3
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %4 = load double*, double** %3, align 8, !tbaa !100
  %5 = getelementptr inbounds double, double* %4, i64 %2
  %6 = bitcast double* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !33
  %8 = bitcast double* %buf to i64*
  store i64 %7, i64* %8, align 8, !tbaa !33
  %9 = add nsw i32 %1, 1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds double, double* %4, i64 %10
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !33
  %14 = getelementptr inbounds double, double* %buf, i64 1
  %15 = bitcast double* %14 to i64*
  store i64 %13, i64* %15, align 8, !tbaa !33
  %16 = add nsw i32 %1, 2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double, double* %4, i64 %17
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !33
  %21 = getelementptr inbounds double, double* %buf, i64 2
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8, !tbaa !33
  %23 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %24 = load double*, double** %23, align 8, !tbaa !101
  %25 = getelementptr inbounds double, double* %24, i64 %2
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !33
  %28 = getelementptr inbounds double, double* %buf, i64 3
  %29 = bitcast double* %28 to i64*
  store i64 %27, i64* %29, align 8, !tbaa !33
  %30 = getelementptr inbounds double, double* %24, i64 %10
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !33
  %33 = getelementptr inbounds double, double* %buf, i64 4
  %34 = bitcast double* %33 to i64*
  store i64 %32, i64* %34, align 8, !tbaa !33
  %35 = getelementptr inbounds double, double* %24, i64 %17
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !33
  %38 = getelementptr inbounds double, double* %buf, i64 5
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 8, !tbaa !33
  %40 = sext i32 %i to i64
  %41 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %42 = load i32*, i32** %41, align 8, !tbaa !102
  %43 = getelementptr inbounds i32, i32* %42, i64 %40
  %44 = load i32, i32* %43, align 4, !tbaa !1
  %45 = sitofp i32 %44 to double
  %46 = getelementptr inbounds double, double* %buf, i64 6
  store double %45, double* %46, align 8, !tbaa !33
  ret i32 7
}

; Function Attrs: nounwind uwtable
define i32 @_ZN4Atom15unpack_exchangeEiPd(%class.Atom* nocapture %this, i32 %i, double* nocapture readonly %buf) #9 align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %2 = load i32, i32* %1, align 4, !tbaa !99
  %3 = icmp eq i32 %2, %i
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  tail call void @_ZN4Atom9growarrayEv(%class.Atom* nonnull %this)
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = bitcast double* %buf to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !33
  %8 = mul nsw i32 %i, 3
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %11 = load double*, double** %10, align 8, !tbaa !100
  %12 = getelementptr inbounds double, double* %11, i64 %9
  %13 = bitcast double* %12 to i64*
  store i64 %7, i64* %13, align 8, !tbaa !33
  %14 = getelementptr inbounds double, double* %buf, i64 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !33
  %17 = add nsw i32 %8, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %11, i64 %18
  %20 = bitcast double* %19 to i64*
  store i64 %16, i64* %20, align 8, !tbaa !33
  %21 = getelementptr inbounds double, double* %buf, i64 2
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !33
  %24 = add nsw i32 %8, 2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %11, i64 %25
  %27 = bitcast double* %26 to i64*
  store i64 %23, i64* %27, align 8, !tbaa !33
  %28 = getelementptr inbounds double, double* %buf, i64 3
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !33
  %31 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %32 = load double*, double** %31, align 8, !tbaa !101
  %33 = getelementptr inbounds double, double* %32, i64 %9
  %34 = bitcast double* %33 to i64*
  store i64 %30, i64* %34, align 8, !tbaa !33
  %35 = getelementptr inbounds double, double* %buf, i64 4
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !33
  %38 = getelementptr inbounds double, double* %32, i64 %18
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 8, !tbaa !33
  %40 = getelementptr inbounds double, double* %buf, i64 5
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !33
  %43 = getelementptr inbounds double, double* %32, i64 %25
  %44 = bitcast double* %43 to i64*
  store i64 %42, i64* %44, align 8, !tbaa !33
  %45 = getelementptr inbounds double, double* %buf, i64 6
  %46 = load double, double* %45, align 8, !tbaa !33
  %47 = fptosi double %46 to i32
  %48 = sext i32 %i to i64
  %49 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %50 = load i32*, i32** %49, align 8, !tbaa !102
  %51 = getelementptr inbounds i32, i32* %50, i64 %48
  store i32 %47, i32* %51, align 4, !tbaa !1
  ret i32 7
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @_ZN4Atom13skip_exchangeEPd(%class.Atom* nocapture readnone %this, double* nocapture readnone %buf) #13 align 2 {
  ret i32 7
}

; Function Attrs: nounwind uwtable
define noalias double* @_ZN4Atom25create_2d_MMD_float_arrayEii(%class.Atom* nocapture readnone %this, i32 %n1, i32 %n2) #9 align 2 {
  %1 = mul nsw i32 %n2, %n1
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %9, label %3

; <label>:3                                       ; preds = %0
  %4 = add nsw i32 %1, 1025
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 3
  %7 = tail call noalias i8* @malloc(i64 %6) #7
  %8 = bitcast i8* %7 to double*
  br label %9

; <label>:9                                       ; preds = %3, %0
  %.0 = phi double* [ %8, %3 ], [ null, %0 ]
  ret double* %.0
}

; Function Attrs: nounwind uwtable
define noalias i32* @_ZN4Atom19create_1d_int_arrayEi(%class.Atom* nocapture readnone %this, i32 %n1) #9 align 2 {
  %1 = icmp eq i32 %n1, 0
  br i1 %1, label %7, label %2

; <label>:2                                       ; preds = %0
  %3 = sext i32 %n1 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias i8* @malloc(i64 %4) #7
  %6 = bitcast i8* %5 to i32*
  br label %7

; <label>:7                                       ; preds = %2, %0
  %.0 = phi i32* [ %6, %2 ], [ null, %0 ]
  ret i32* %.0
}

; Function Attrs: uwtable
define void @_ZN4Atom4sortER8Neighbor(%class.Atom* %this, %class.Neighbor* dereferenceable(240) %neighbor) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @4)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  tail call void @_ZN8Neighbor8binatomsER4Atomi(%class.Neighbor* nonnull %neighbor, %class.Atom* dereferenceable(224) %this, i32 %3)
  tail call void @__kmpc_barrier(%ident_t* nonnull @6, i32 %1)
  %4 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 16
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 19
  %6 = bitcast i32** %4 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !5
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 20
  %9 = bitcast i32** %5 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %9, align 8, !tbaa !5
  %10 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 18
  %11 = bitcast i32* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__kmpc_master(%ident_t* nonnull @4, i32 %1)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %78, label %.preheader

.preheader:                                       ; preds = %0
  %16 = icmp sgt i32 %13, 1
  br i1 %16, label %.lr.ph13, label %._crit_edge14

.lr.ph13:                                         ; preds = %.preheader
  %17 = load i32*, i32** %5, align 8
  %.pre = load i32, i32* %17, align 4, !tbaa !1
  %18 = add i32 %13, 3
  %19 = add i32 %13, -2
  %xtraiter = and i32 %18, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph13.split, label %.preheader30

.preheader30:                                     ; preds = %.lr.ph13
  br label %20

; <label>:20                                      ; preds = %20, %.preheader30
  %21 = phi i32 [ %24, %20 ], [ %.pre, %.preheader30 ]
  %indvars.iv17.prol = phi i64 [ %indvars.iv.next18.prol, %20 ], [ 1, %.preheader30 ]
  %prol.iter = phi i32 [ %prol.iter.sub, %20 ], [ %xtraiter, %.preheader30 ]
  %22 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv17.prol
  %23 = load i32, i32* %22, align 4, !tbaa !1
  %24 = add nsw i32 %23, %21
  store i32 %24, i32* %22, align 4, !tbaa !1
  %indvars.iv.next18.prol = add nuw nsw i64 %indvars.iv17.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph13.split.loopexit, label %20, !llvm.loop !103

.lr.ph13.split.loopexit:                          ; preds = %20
  br label %.lr.ph13.split

.lr.ph13.split:                                   ; preds = %.lr.ph13.split.loopexit, %.lr.ph13
  %.unr = phi i32 [ %.pre, %.lr.ph13 ], [ %24, %.lr.ph13.split.loopexit ]
  %indvars.iv17.unr = phi i64 [ 1, %.lr.ph13 ], [ %indvars.iv.next18.prol, %.lr.ph13.split.loopexit ]
  %25 = icmp ult i32 %19, 3
  br i1 %25, label %._crit_edge14.loopexit, label %.lr.ph13.split.split

.lr.ph13.split.split:                             ; preds = %.lr.ph13.split
  br label %31

._crit_edge14.loopexit.unr-lcssa:                 ; preds = %31
  br label %._crit_edge14.loopexit

._crit_edge14.loopexit:                           ; preds = %._crit_edge14.loopexit.unr-lcssa, %.lr.ph13.split
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge14.loopexit, %.preheader
  %26 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 24
  %27 = load i32, i32* %26, align 8, !tbaa !105
  %28 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 3
  %29 = load i32, i32* %28, align 4, !tbaa !99
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %45, label %77

; <label>:31                                      ; preds = %31, %.lr.ph13.split.split
  %32 = phi i32 [ %.unr, %.lr.ph13.split.split ], [ %44, %31 ]
  %indvars.iv17 = phi i64 [ %indvars.iv17.unr, %.lr.ph13.split.split ], [ %indvars.iv.next18.3, %31 ]
  %33 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv17
  %34 = load i32, i32* %33, align 4, !tbaa !1
  %35 = add nsw i32 %34, %32
  store i32 %35, i32* %33, align 4, !tbaa !1
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %36 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv.next18
  %37 = load i32, i32* %36, align 4, !tbaa !1
  %38 = add nsw i32 %37, %35
  store i32 %38, i32* %36, align 4, !tbaa !1
  %indvars.iv.next18.1 = add nsw i64 %indvars.iv17, 2
  %39 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv.next18.1
  %40 = load i32, i32* %39, align 4, !tbaa !1
  %41 = add nsw i32 %40, %38
  store i32 %41, i32* %39, align 4, !tbaa !1
  %indvars.iv.next18.2 = add nsw i64 %indvars.iv17, 3
  %42 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv.next18.2
  %43 = load i32, i32* %42, align 4, !tbaa !1
  %44 = add nsw i32 %43, %41
  store i32 %44, i32* %42, align 4, !tbaa !1
  %indvars.iv.next18.3 = add nsw i64 %indvars.iv17, 4
  %lftr.wideiv19.3 = trunc i64 %indvars.iv.next18.3 to i32
  %exitcond20.3 = icmp eq i32 %lftr.wideiv19.3, %13
  br i1 %exitcond20.3, label %._crit_edge14.loopexit.unr-lcssa, label %31

; <label>:45                                      ; preds = %._crit_edge14
  %46 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 21
  %47 = load double*, double** %46, align 8, !tbaa !106
  %48 = icmp eq double* %47, null
  br i1 %48, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit, label %49

; <label>:49                                      ; preds = %45
  %50 = bitcast double* %47 to i8*
  tail call void @free(i8* %50) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit:     ; preds = %49, %45
  %51 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 22
  %52 = load double*, double** %51, align 8, !tbaa !107
  %53 = icmp eq double* %52, null
  br i1 %53, label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2, label %54

; <label>:54                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit
  %55 = bitcast double* %52 to i8*
  tail call void @free(i8* %55) #7
  br label %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2

_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2:    ; preds = %54, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit
  %56 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 23
  %57 = load i32*, i32** %56, align 8, !tbaa !108
  %58 = icmp eq i32* %57, null
  br i1 %58, label %_ZN4Atom20destroy_1d_int_arrayEPi.exit, label %59

; <label>:59                                      ; preds = %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2
  %60 = bitcast i32* %57 to i8*
  tail call void @free(i8* %60) #7
  br label %_ZN4Atom20destroy_1d_int_arrayEPi.exit

_ZN4Atom20destroy_1d_int_arrayEPi.exit:           ; preds = %59, %_ZN4Atom26destroy_2d_MMD_float_arrayEPd.exit2
  %61 = load i32, i32* %28, align 4, !tbaa !99
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %_ZN4Atom25create_2d_MMD_float_arrayEii.exit4.thread, label %64

_ZN4Atom25create_2d_MMD_float_arrayEii.exit4.thread: ; preds = %_ZN4Atom20destroy_1d_int_arrayEPi.exit
  %63 = bitcast double** %46 to <2 x double*>*
  store <2 x double*> zeroinitializer, <2 x double*>* %63, align 8, !tbaa !5
  br label %_ZN4Atom19create_1d_int_arrayEi.exit

; <label>:64                                      ; preds = %_ZN4Atom20destroy_1d_int_arrayEPi.exit
  %65 = mul nsw i32 %61, 3
  %66 = add nsw i32 %65, 1025
  %67 = sext i32 %66 to i64
  %68 = shl nsw i64 %67, 3
  %69 = tail call noalias i8* @malloc(i64 %68) #7
  %70 = bitcast double** %46 to i8**
  store i8* %69, i8** %70, align 8, !tbaa !106
  %71 = tail call noalias i8* @malloc(i64 %68) #7
  %72 = bitcast double** %51 to i8**
  store i8* %71, i8** %72, align 8, !tbaa !107
  %73 = sext i32 %61 to i64
  %74 = shl nsw i64 %73, 2
  %75 = tail call noalias i8* @malloc(i64 %74) #7
  %76 = bitcast i8* %75 to i32*
  br label %_ZN4Atom19create_1d_int_arrayEi.exit

_ZN4Atom19create_1d_int_arrayEi.exit:             ; preds = %64, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit4.thread
  %.0.i5 = phi i32* [ %76, %64 ], [ null, %_ZN4Atom25create_2d_MMD_float_arrayEii.exit4.thread ]
  store i32* %.0.i5, i32** %56, align 8, !tbaa !108
  store i32 %61, i32* %26, align 8, !tbaa !105
  br label %77

; <label>:77                                      ; preds = %_ZN4Atom19create_1d_int_arrayEi.exit, %._crit_edge14
  tail call void @__kmpc_end_master(%ident_t* nonnull @4, i32 %1)
  br label %78

; <label>:78                                      ; preds = %77, %0
  tail call void @__kmpc_barrier(%ident_t* nonnull @6, i32 %1)
  %79 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 21
  %80 = load double*, double** %79, align 8, !tbaa !106
  %81 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 22
  %82 = load double*, double** %81, align 8, !tbaa !107
  %83 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 23
  %84 = load i32*, i32** %83, align 8, !tbaa !108
  %85 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 4
  %86 = load double*, double** %85, align 8, !tbaa !100
  %87 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 5
  %88 = load double*, double** %87, align 8, !tbaa !101
  %89 = getelementptr inbounds %class.Atom, %class.Atom* %this, i64 0, i32 9
  %90 = load i32*, i32** %89, align 8, !tbaa !102
  %91 = add nsw i32 %13, -1
  %92 = icmp sgt i32 %13, 0
  br i1 %92, label %93, label %._crit_edge22

._crit_edge22:                                    ; preds = %78
  %.pre23 = bitcast i32* %.omp.is_last to i8*
  %.pre24 = bitcast i32* %.omp.stride to i8*
  %.pre26 = bitcast i32* %.omp.ub to i8*
  %.pre28 = bitcast i32* %.omp.lb to i8*
  br label %179

; <label>:93                                      ; preds = %78
  %94 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %94) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %95 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %95) #7
  store i32 %91, i32* %.omp.ub, align 4, !tbaa !1
  %96 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %96) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %97 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %97) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @4, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %98 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %99 = icmp sgt i32 %98, %91
  %100 = select i1 %99, i32 %91, i32 %98
  store i32 %100, i32* %.omp.ub, align 4, !tbaa !1
  %101 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %102 = icmp sgt i32 %101, %100
  br i1 %102, label %._crit_edge11, label %.lr.ph10

.lr.ph10:                                         ; preds = %93
  %103 = load i32*, i32** %5, align 8
  %104 = sext i32 %101 to i64
  %105 = ashr i64 %12, 32
  br label %106

; <label>:106                                     ; preds = %._crit_edge, %.lr.ph10
  %107 = phi i32 [ %123, %._crit_edge ], [ %100, %.lr.ph10 ]
  %indvars.iv15 = phi i64 [ %indvars.iv.next16, %._crit_edge ], [ %104, %.lr.ph10 ]
  %108 = icmp sgt i64 %indvars.iv15, 0
  br i1 %108, label %109, label %114

; <label>:109                                     ; preds = %106
  %110 = add nsw i64 %indvars.iv15, -1
  %111 = load i32*, i32** %5, align 8, !tbaa !109
  %112 = getelementptr inbounds i32, i32* %111, i64 %110
  %113 = load i32, i32* %112, align 4, !tbaa !1
  br label %114

; <label>:114                                     ; preds = %109, %106
  %115 = phi i32 [ %113, %109 ], [ 0, %106 ]
  %116 = getelementptr inbounds i32, i32* %103, i64 %indvars.iv15
  %117 = load i32, i32* %116, align 4, !tbaa !1
  %118 = sub i32 %117, %115
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %114
  %120 = mul nsw i64 %indvars.iv15, %105
  %121 = load i32*, i32** %8, align 8
  %122 = sext i32 %115 to i64
  br label %126

._crit_edge.loopexit:                             ; preds = %126
  %.pre21 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %114
  %123 = phi i32 [ %.pre21, %._crit_edge.loopexit ], [ %107, %114 ]
  %124 = sext i32 %123 to i64
  %125 = icmp slt i64 %indvars.iv15, %124
  %indvars.iv.next16 = add i64 %indvars.iv15, 1
  br i1 %125, label %106, label %._crit_edge11.loopexit

; <label>:126                                     ; preds = %126, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %126 ]
  %k.06 = phi i32 [ 0, %.lr.ph ], [ %178, %126 ]
  %127 = add nsw i64 %indvars.iv, %122
  %128 = add nsw i32 %k.06, %115
  %129 = add nsw i64 %indvars.iv, %120
  %130 = getelementptr inbounds i32, i32* %121, i64 %129
  %131 = load i32, i32* %130, align 4, !tbaa !1
  %132 = mul nsw i32 %131, 3
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds double, double* %86, i64 %133
  %135 = bitcast double* %134 to i64*
  %136 = load i64, i64* %135, align 8, !tbaa !33
  %137 = mul nsw i32 %128, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds double, double* %80, i64 %138
  %140 = bitcast double* %139 to i64*
  store i64 %136, i64* %140, align 8, !tbaa !33
  %141 = add nsw i32 %132, 1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %86, i64 %142
  %144 = bitcast double* %143 to i64*
  %145 = load i64, i64* %144, align 8, !tbaa !33
  %146 = add nsw i32 %137, 1
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double, double* %80, i64 %147
  %149 = bitcast double* %148 to i64*
  store i64 %145, i64* %149, align 8, !tbaa !33
  %150 = add nsw i32 %132, 2
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double, double* %86, i64 %151
  %153 = bitcast double* %152 to i64*
  %154 = load i64, i64* %153, align 8, !tbaa !33
  %155 = add nsw i32 %137, 2
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds double, double* %80, i64 %156
  %158 = bitcast double* %157 to i64*
  store i64 %154, i64* %158, align 8, !tbaa !33
  %159 = getelementptr inbounds double, double* %88, i64 %133
  %160 = bitcast double* %159 to i64*
  %161 = load i64, i64* %160, align 8, !tbaa !33
  %162 = getelementptr inbounds double, double* %82, i64 %138
  %163 = bitcast double* %162 to i64*
  store i64 %161, i64* %163, align 8, !tbaa !33
  %164 = getelementptr inbounds double, double* %88, i64 %142
  %165 = bitcast double* %164 to i64*
  %166 = load i64, i64* %165, align 8, !tbaa !33
  %167 = getelementptr inbounds double, double* %82, i64 %147
  %168 = bitcast double* %167 to i64*
  store i64 %166, i64* %168, align 8, !tbaa !33
  %169 = getelementptr inbounds double, double* %88, i64 %151
  %170 = bitcast double* %169 to i64*
  %171 = load i64, i64* %170, align 8, !tbaa !33
  %172 = getelementptr inbounds double, double* %82, i64 %156
  %173 = bitcast double* %172 to i64*
  store i64 %171, i64* %173, align 8, !tbaa !33
  %174 = sext i32 %131 to i64
  %175 = getelementptr inbounds i32, i32* %90, i64 %174
  %176 = load i32, i32* %175, align 4, !tbaa !1
  %177 = getelementptr inbounds i32, i32* %84, i64 %127
  store i32 %176, i32* %177, align 4, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %178 = add nuw nsw i32 %k.06, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %118
  br i1 %exitcond, label %._crit_edge.loopexit, label %126

._crit_edge11.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %93
  call void @__kmpc_for_static_fini(%ident_t* nonnull @4, i32 %1)
  br label %179

; <label>:179                                     ; preds = %._crit_edge11, %._crit_edge22
  %.pre-phi29 = phi i8* [ %.pre28, %._crit_edge22 ], [ %94, %._crit_edge11 ]
  %.pre-phi27 = phi i8* [ %.pre26, %._crit_edge22 ], [ %95, %._crit_edge11 ]
  %.pre-phi25 = phi i8* [ %.pre24, %._crit_edge22 ], [ %96, %._crit_edge11 ]
  %.pre-phi = phi i8* [ %.pre23, %._crit_edge22 ], [ %97, %._crit_edge11 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi25) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi27) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi29) #7
  call void @__kmpc_barrier(%ident_t* nonnull @5, i32 %1)
  %180 = call i32 @__kmpc_master(%ident_t* nonnull @4, i32 %1)
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %191, label %182

; <label>:182                                     ; preds = %179
  %183 = bitcast double** %85 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8, !tbaa !5
  %185 = bitcast i32** %89 to i64*
  %186 = load i64, i64* %185, align 8, !tbaa !102
  %187 = bitcast double** %79 to <2 x i64>*
  %188 = load <2 x i64>, <2 x i64>* %187, align 8, !tbaa !5
  store <2 x i64> %188, <2 x i64>* %183, align 8, !tbaa !5
  %189 = bitcast i32** %83 to i64*
  %190 = load i64, i64* %189, align 8, !tbaa !108
  store i64 %190, i64* %185, align 8, !tbaa !102
  store <2 x i64> %184, <2 x i64>* %187, align 8, !tbaa !5
  store i64 %186, i64* %189, align 8, !tbaa !108
  call void @__kmpc_end_master(%ident_t* nonnull @4, i32 %1)
  br label %191

; <label>:191                                     ; preds = %182, %179
  call void @__kmpc_barrier(%ident_t* nonnull @6, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN7ForceLJD2Ev(%class.ForceLJ* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN7ForceLJD0Ev(%class.ForceLJ* %this) unnamed_addr #9 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = bitcast %class.ForceLJ* %this to i8*
  tail call void @_ZdlPv(i8* %1) #19
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @_ZN7ForceLJ5setupEv(%class.ForceLJ* nocapture readonly %this) unnamed_addr #12 align 2 {
  %1 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %2 = load i32, i32* %1, align 8, !tbaa !110
  %3 = mul i32 %2, %2
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %5 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %7 = load double*, double** %6, align 8
  %8 = zext i32 %3 to i64
  %9 = add nsw i64 %8, -1
  %xtraiter = and i64 %8, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %.preheader

.preheader:                                       ; preds = %.lr.ph
  br label %10

; <label>:10                                      ; preds = %10, %.preheader
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %10 ], [ 0, %.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %10 ], [ %xtraiter, %.preheader ]
  %11 = load double, double* %5, align 8, !tbaa !59
  %12 = fmul double %11, %11
  %13 = getelementptr inbounds double, double* %7, i64 %indvars.iv.prol
  store double %12, double* %13, align 8, !tbaa !33
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.split.loopexit, label %10, !llvm.loop !111

.lr.ph.split.loopexit:                            ; preds = %10
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %.lr.ph.split.loopexit, %.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.prol, %.lr.ph.split.loopexit ]
  %14 = icmp ult i64 %9, 3
  br i1 %14, label %._crit_edge.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %15

._crit_edge.loopexit.unr-lcssa:                   ; preds = %15
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void

; <label>:15                                      ; preds = %15, %.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.split.split ], [ %indvars.iv.next.3, %15 ]
  %16 = load double, double* %5, align 8, !tbaa !59
  %17 = fmul double %16, %16
  %18 = getelementptr inbounds double, double* %7, i64 %indvars.iv
  store double %17, double* %18, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %19 = load double, double* %5, align 8, !tbaa !59
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
  store double %20, double* %21, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %22 = load double, double* %5, align 8, !tbaa !59
  %23 = fmul double %22, %22
  %24 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.1
  store double %23, double* %24, align 8, !tbaa !33
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %25 = load double, double* %5, align 8, !tbaa !59
  %26 = fmul double %25, %25
  %27 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.2
  store double %26, double* %27, align 8, !tbaa !33
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %28 = icmp slt i64 %indvars.iv.next.3, %8
  br i1 %28, label %15, label %._crit_edge.loopexit.unr-lcssa
}

; Function Attrs: norecurse nounwind readnone uwtable
define linkonce_odr void @_ZN5Force8finaliseEv(%class.Force* nocapture %this) unnamed_addr #13 comdat align 2 {
  ret void
}

; Function Attrs: uwtable
define void @_ZN7ForceLJ7computeER4AtomR8NeighborR4Commi(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Comm* nocapture readnone dereferenceable(336) %comm, i32 %me) unnamed_addr #11 align 2 {
  %1 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  store double 0.000000e+00, double* %1, align 8, !tbaa !112
  %2 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  store double 0.000000e+00, double* %2, align 8, !tbaa !113
  %3 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 8, !tbaa !73
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 9
  %7 = load i32, i32* %6, align 8, !tbaa !42
  %8 = icmp ne i32 %7, 0
  br i1 %5, label %31, label %9

; <label>:9                                       ; preds = %0
  br i1 %8, label %10, label %11

; <label>:10                                      ; preds = %9
  tail call void @_ZN7ForceLJ16compute_originalILi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:11                                      ; preds = %9
  %12 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %13 = load i32, i32* %12, align 4, !tbaa !41
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %30, label %15

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  %17 = load i32, i32* %16, align 8, !tbaa !35
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 10
  %20 = load %class.ThreadData*, %class.ThreadData** %19, align 8, !tbaa !24
  %21 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %20, i64 0, i32 3
  %22 = load i32, i32* %21, align 4, !tbaa !18
  %23 = icmp sgt i32 %22, 1
  br i1 %18, label %27, label %24

; <label>:24                                      ; preds = %15
  br i1 %23, label %25, label %26

; <label>:25                                      ; preds = %24
  tail call void @_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:26                                      ; preds = %24
  tail call void @_ZN7ForceLJ17compute_halfneighILi1ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:27                                      ; preds = %15
  br i1 %23, label %28, label %29

; <label>:28                                      ; preds = %27
  tail call void @_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:29                                      ; preds = %27
  tail call void @_ZN7ForceLJ17compute_halfneighILi1ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:30                                      ; preds = %11
  tail call void @_ZN7ForceLJ17compute_fullneighILi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:31                                      ; preds = %0
  br i1 %8, label %32, label %33

; <label>:32                                      ; preds = %31
  tail call void @_ZN7ForceLJ16compute_originalILi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:33                                      ; preds = %31
  %34 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %35 = load i32, i32* %34, align 4, !tbaa !41
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %52, label %37

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  %39 = load i32, i32* %38, align 8, !tbaa !35
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 10
  %42 = load %class.ThreadData*, %class.ThreadData** %41, align 8, !tbaa !24
  %43 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %42, i64 0, i32 3
  %44 = load i32, i32* %43, align 4, !tbaa !18
  %45 = icmp sgt i32 %44, 1
  br i1 %40, label %49, label %46

; <label>:46                                      ; preds = %37
  br i1 %45, label %47, label %48

; <label>:47                                      ; preds = %46
  tail call void @_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:48                                      ; preds = %46
  tail call void @_ZN7ForceLJ17compute_halfneighILi0ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:49                                      ; preds = %37
  br i1 %45, label %50, label %51

; <label>:50                                      ; preds = %49
  tail call void @_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:51                                      ; preds = %49
  tail call void @_ZN7ForceLJ17compute_halfneighILi0ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:52                                      ; preds = %33
  tail call void @_ZN7ForceLJ17compute_fullneighILi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, i32 %me)
  br label %53

; <label>:53                                      ; preds = %52, %51, %50, %48, %47, %32, %30, %29, %28, %26, %25, %10
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ16compute_originalILi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  store double 0.000000e+00, double* %12, align 8, !tbaa !112
  %13 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  store double 0.000000e+00, double* %13, align 8, !tbaa !113
  %14 = icmp sgt i32 %5, 0
  br i1 %14, label %.lr.ph8.preheader, label %.preheader

.lr.ph8.preheader:                                ; preds = %0
  %15 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph8.preheader.split, label %.lr.ph8.prol.preheader

.lr.ph8.prol.preheader:                           ; preds = %.lr.ph8.preheader
  br label %.lr.ph8.prol

.lr.ph8.prol:                                     ; preds = %.lr.ph8.prol, %.lr.ph8.prol.preheader
  %indvars.iv13.prol = phi i64 [ %indvars.iv.next14.prol, %.lr.ph8.prol ], [ 0, %.lr.ph8.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph8.prol ], [ %xtraiter, %.lr.ph8.prol.preheader ]
  %16 = mul nuw nsw i64 %indvars.iv13.prol, 3
  %17 = getelementptr inbounds double, double* %9, i64 %16
  %18 = bitcast double* %17 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %18, align 8, !tbaa !33
  %19 = add nuw nsw i64 %16, 2
  %20 = getelementptr inbounds double, double* %9, i64 %19
  store double 0.000000e+00, double* %20, align 8, !tbaa !33
  %indvars.iv.next14.prol = add nuw nsw i64 %indvars.iv13.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph8.preheader.split.loopexit, label %.lr.ph8.prol, !llvm.loop !115

.lr.ph8.preheader.split.loopexit:                 ; preds = %.lr.ph8.prol
  br label %.lr.ph8.preheader.split

.lr.ph8.preheader.split:                          ; preds = %.lr.ph8.preheader.split.loopexit, %.lr.ph8.preheader
  %indvars.iv13.unr = phi i64 [ 0, %.lr.ph8.preheader ], [ %indvars.iv.next14.prol, %.lr.ph8.preheader.split.loopexit ]
  %21 = icmp ult i32 %15, 3
  br i1 %21, label %.preheader.loopexit, label %.lr.ph8.preheader.split.split

.lr.ph8.preheader.split.split:                    ; preds = %.lr.ph8.preheader.split
  br label %.lr.ph8

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph8
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph8.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %22 = icmp sgt i32 %2, 0
  br i1 %22, label %.lr.ph4, label %._crit_edge5

.lr.ph4:                                          ; preds = %.preheader
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %31 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %32 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %33 = sext i32 %24 to i64
  br label %54

.lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader.split.split
  %indvars.iv13 = phi i64 [ %indvars.iv13.unr, %.lr.ph8.preheader.split.split ], [ %indvars.iv.next14.3, %.lr.ph8 ]
  %34 = mul i64 %indvars.iv13, 3
  %35 = getelementptr inbounds double, double* %9, i64 %34
  %36 = bitcast double* %35 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %36, align 8, !tbaa !33
  %37 = add nuw nsw i64 %34, 2
  %38 = getelementptr inbounds double, double* %9, i64 %37
  store double 0.000000e+00, double* %38, align 8, !tbaa !33
  %39 = add i64 %34, 3
  %40 = getelementptr inbounds double, double* %9, i64 %39
  %41 = bitcast double* %40 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %41, align 8, !tbaa !33
  %42 = add i64 %34, 5
  %43 = getelementptr inbounds double, double* %9, i64 %42
  store double 0.000000e+00, double* %43, align 8, !tbaa !33
  %44 = add i64 %34, 6
  %45 = getelementptr inbounds double, double* %9, i64 %44
  %46 = bitcast double* %45 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %46, align 8, !tbaa !33
  %47 = add i64 %34, 8
  %48 = getelementptr inbounds double, double* %9, i64 %47
  store double 0.000000e+00, double* %48, align 8, !tbaa !33
  %49 = add i64 %34, 9
  %50 = getelementptr inbounds double, double* %9, i64 %49
  %51 = bitcast double* %50 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %51, align 8, !tbaa !33
  %52 = add i64 %34, 11
  %53 = getelementptr inbounds double, double* %9, i64 %52
  store double 0.000000e+00, double* %53, align 8, !tbaa !33
  %indvars.iv.next14.3 = add nsw i64 %indvars.iv13, 4
  %lftr.wideiv15.3 = trunc i64 %indvars.iv.next14.3 to i32
  %exitcond16.3 = icmp eq i32 %lftr.wideiv15.3, %5
  br i1 %exitcond16.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph8

._crit_edge5.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit, %.preheader
  ret void

; <label>:54                                      ; preds = %._crit_edge, %.lr.ph4
  %indvars.iv9 = phi i64 [ 0, %.lr.ph4 ], [ %indvars.iv.next10, %._crit_edge ]
  %55 = mul nsw i64 %33, %indvars.iv9
  %56 = getelementptr inbounds i32, i32* %26, i64 %55
  %57 = getelementptr inbounds i32, i32* %28, i64 %indvars.iv9
  %58 = load i32, i32* %57, align 4, !tbaa !1
  %59 = mul nuw nsw i64 %indvars.iv9, 3
  %60 = getelementptr inbounds double, double* %7, i64 %59
  %61 = bitcast double* %60 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8, !tbaa !33
  %63 = add nuw nsw i64 %59, 2
  %64 = getelementptr inbounds double, double* %7, i64 %63
  %65 = load double, double* %64, align 8, !tbaa !33
  %66 = icmp sgt i32 %58, 0
  br i1 %66, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %54
  %67 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv9
  %68 = load i32, i32* %67, align 4, !tbaa !1
  %69 = load i32, i32* %29, align 8
  %70 = mul nsw i32 %69, %68
  %71 = load double*, double** %30, align 8
  %72 = getelementptr inbounds double, double* %9, i64 %59
  %73 = getelementptr inbounds double, double* %9, i64 %63
  %74 = bitcast double* %72 to <2 x double>*
  br label %75

._crit_edge.loopexit:                             ; preds = %154
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %54
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %lftr.wideiv11 = trunc i64 %indvars.iv.next10 to i32
  %exitcond12 = icmp eq i32 %lftr.wideiv11, %2
  br i1 %exitcond12, label %._crit_edge5.loopexit, label %54

; <label>:75                                      ; preds = %154, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %154 ]
  %76 = getelementptr inbounds i32, i32* %56, i64 %indvars.iv
  %77 = load i32, i32* %76, align 4, !tbaa !1
  %78 = mul nsw i32 %77, 3
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %7, i64 %79
  %81 = load double, double* %80, align 8, !tbaa !33
  %82 = add nsw i32 %78, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %7, i64 %83
  %85 = load double, double* %84, align 8, !tbaa !33
  %86 = insertelement <2 x double> undef, double %81, i32 0
  %87 = insertelement <2 x double> %86, double %85, i32 1
  %88 = fsub <2 x double> %62, %87
  %89 = add nsw i32 %78, 2
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds double, double* %7, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !33
  %93 = fsub double %65, %92
  %94 = sext i32 %77 to i64
  %95 = getelementptr inbounds i32, i32* %11, i64 %94
  %96 = load i32, i32* %95, align 4, !tbaa !1
  %97 = extractelement <2 x double> %88, i32 0
  %98 = fmul double %97, %97
  %99 = extractelement <2 x double> %88, i32 1
  %100 = fmul double %99, %99
  %101 = fadd double %98, %100
  %102 = fmul double %93, %93
  %103 = fadd double %101, %102
  %104 = add nsw i32 %70, %96
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %71, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fcmp olt double %103, %107
  br i1 %108, label %109, label %154

; <label>:109                                     ; preds = %75
  %110 = fdiv double 1.000000e+00, %103
  %111 = fmul double %110, %110
  %112 = fmul double %110, %111
  %113 = load double*, double** %31, align 8, !tbaa !116
  %114 = getelementptr inbounds double, double* %113, i64 %105
  %115 = load double, double* %114, align 8, !tbaa !33
  %116 = fmul double %112, %115
  %117 = fmul double %116, 4.800000e+01
  %118 = fadd double %116, -5.000000e-01
  %119 = fmul double %117, %118
  %120 = fmul double %110, %119
  %121 = load double*, double** %32, align 8, !tbaa !117
  %122 = getelementptr inbounds double, double* %121, i64 %105
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fmul double %123, %120
  %125 = insertelement <2 x double> undef, double %124, i32 0
  %126 = insertelement <2 x double> %125, double %124, i32 1
  %127 = fmul <2 x double> %88, %126
  %128 = load <2 x double>, <2 x double>* %74, align 8, !tbaa !33
  %129 = fadd <2 x double> %128, %127
  store <2 x double> %129, <2 x double>* %74, align 8, !tbaa !33
  %130 = fmul double %93, %124
  %131 = load double, double* %73, align 8, !tbaa !33
  %132 = fadd double %130, %131
  store double %132, double* %73, align 8, !tbaa !33
  %133 = getelementptr inbounds double, double* %9, i64 %79
  %134 = load double, double* %133, align 8, !tbaa !33
  %135 = extractelement <2 x double> %127, i32 0
  %136 = fsub double %134, %135
  store double %136, double* %133, align 8, !tbaa !33
  %137 = getelementptr inbounds double, double* %9, i64 %83
  %138 = load double, double* %137, align 8, !tbaa !33
  %139 = extractelement <2 x double> %127, i32 1
  %140 = fsub double %138, %139
  store double %140, double* %137, align 8, !tbaa !33
  %141 = getelementptr inbounds double, double* %9, i64 %90
  %142 = load double, double* %141, align 8, !tbaa !33
  %143 = fsub double %142, %130
  store double %143, double* %141, align 8, !tbaa !33
  %144 = fmul double %116, 4.000000e+00
  %145 = fadd double %116, -1.000000e+00
  %146 = fmul double %144, %145
  %147 = load double, double* %122, align 8, !tbaa !33
  %148 = fmul double %146, %147
  %149 = load double, double* %12, align 8, !tbaa !112
  %150 = fadd double %149, %148
  store double %150, double* %12, align 8, !tbaa !112
  %151 = fmul double %103, %124
  %152 = load double, double* %13, align 8, !tbaa !113
  %153 = fadd double %151, %152
  store double %153, double* %13, align 8, !tbaa !113
  br label %154

; <label>:154                                     ; preds = %109, %75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %58
  br i1 %exitcond, label %._crit_edge.loopexit, label %75
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !114
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %8 = load double*, double** %7, align 8, !tbaa !100
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %10 = load double*, double** %9, align 8, !tbaa !80
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %12 = load i32*, i32** %11, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %13 = add nsw i32 %6, -1
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %._crit_edge44

._crit_edge44:                                    ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre45 = bitcast i32* %.omp.stride to i8*
  %.pre47 = bitcast i32* %.omp.ub to i8*
  %.pre49 = bitcast i32* %.omp.lb to i8*
  br label %39

; <label>:15                                      ; preds = %0
  %16 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %17 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #7
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %18 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %19 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %20 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %13
  %22 = select i1 %21, i32 %13, i32 %20
  store i32 %22, i32* %.omp.ub, align 4, !tbaa !1
  %23 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %24 = icmp sgt i32 %23, %22
  br i1 %24, label %._crit_edge38, label %.lr.ph37

.lr.ph37:                                         ; preds = %15
  %25 = sext i32 %23 to i64
  %26 = sext i32 %22 to i64
  br label %27

; <label>:27                                      ; preds = %27, %.lr.ph37
  %indvars.iv41 = phi i64 [ %indvars.iv.next42, %27 ], [ %25, %.lr.ph37 ]
  %.omp.iv.035 = phi i32 [ %37, %27 ], [ %23, %.lr.ph37 ]
  %28 = mul nsw i32 %.omp.iv.035, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %10, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %28, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %10, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %28, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %10, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add nsw i32 %.omp.iv.035, 1
  %38 = icmp slt i64 %indvars.iv41, %26
  %indvars.iv.next42 = add nsw i64 %indvars.iv41, 1
  br i1 %38, label %27, label %._crit_edge38.loopexit

._crit_edge38.loopexit:                           ; preds = %27
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %15
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %39

; <label>:39                                      ; preds = %._crit_edge38, %._crit_edge44
  %.pre-phi50 = phi i8* [ %.pre49, %._crit_edge44 ], [ %16, %._crit_edge38 ]
  %.pre-phi48 = phi i8* [ %.pre47, %._crit_edge44 ], [ %17, %._crit_edge38 ]
  %.pre-phi46 = phi i8* [ %.pre45, %._crit_edge44 ], [ %18, %._crit_edge38 ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge44 ], [ %19, %._crit_edge38 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi46) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi48) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi50) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %40 = add nsw i32 %3, -1
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge43

._crit_edge43:                                    ; preds = %39
  %.pre51 = bitcast i32* %.omp.is_last8 to i8*
  %.pre53 = bitcast i32* %.omp.stride7 to i8*
  %.pre55 = bitcast i32* %.omp.ub6 to i8*
  %.pre57 = bitcast i32* %.omp.lb5 to i8*
  br label %233

; <label>:42                                      ; preds = %39
  %43 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #7
  store i32 %40, i32* %.omp.ub6, align 4, !tbaa !1
  %45 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %46 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %46) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %47 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %48 = icmp sgt i32 %47, %40
  %49 = select i1 %48, i32 %40, i32 %47
  store i32 %49, i32* %.omp.ub6, align 4, !tbaa !1
  %50 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %51 = icmp sgt i32 %50, %49
  br i1 %51, label %._crit_edge32, label %.lr.ph31

.lr.ph31:                                         ; preds = %42
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %54 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %56 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %58 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %59 = sext i32 %50 to i64
  %60 = sext i32 %49 to i64
  br label %61

; <label>:61                                      ; preds = %229, %.lr.ph31
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %229 ], [ %59, %.lr.ph31 ]
  %.omp.iv2.027 = phi i32 [ %230, %229 ], [ %50, %.lr.ph31 ]
  %62 = phi <2 x double> [ %87, %229 ], [ zeroinitializer, %.lr.ph31 ]
  %63 = load i32, i32* %52, align 8, !tbaa !118
  %64 = trunc i64 %indvars.iv39 to i32
  %65 = mul nsw i32 %63, %64
  %66 = sext i32 %65 to i64
  %67 = load i32*, i32** %53, align 8, !tbaa !119
  %68 = getelementptr inbounds i32, i32* %67, i64 %66
  %69 = load i32*, i32** %54, align 8, !tbaa !120
  %70 = getelementptr inbounds i32, i32* %69, i64 %indvars.iv39
  %71 = load i32, i32* %70, align 4, !tbaa !1
  %72 = mul nsw i32 %.omp.iv2.027, 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds double, double* %8, i64 %73
  %75 = load double, double* %74, align 8, !tbaa !33
  %76 = add nsw i32 %72, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds double, double* %8, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !33
  %80 = add nsw i32 %72, 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %8, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv39
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = icmp sgt i32 %71, 0
  br i1 %86, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %61
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %195
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fix.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fix.1, %._crit_edge.loopexit ]
  %fiy.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiy.1, %._crit_edge.loopexit ]
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %87 = phi <2 x double> [ %62, %61 ], [ %196, %._crit_edge.loopexit ]
  %88 = getelementptr inbounds double, double* %10, i64 %73
  %89 = bitcast double* %88 to i64*
  %90 = load atomic i64, i64* %89 monotonic, align 8, !tbaa !33
  br label %197

.lr.ph:                                           ; preds = %195, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %195 ], [ 0, %.lr.ph.preheader ]
  %fix.020 = phi double [ %fix.1, %195 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiy.019 = phi double [ %fiy.1, %195 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiz.018 = phi double [ %fiz.1, %195 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %91 = phi <2 x double> [ %196, %195 ], [ %62, %.lr.ph.preheader ]
  %92 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = mul nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %8, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = fsub double %75, %97
  %99 = add nsw i32 %94, 1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds double, double* %8, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !33
  %103 = fsub double %79, %102
  %104 = add nsw i32 %94, 2
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %8, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fsub double %83, %107
  %109 = sext i32 %93 to i64
  %110 = getelementptr inbounds i32, i32* %12, i64 %109
  %111 = load i32, i32* %110, align 4, !tbaa !1
  %112 = fmul double %98, %98
  %113 = fmul double %103, %103
  %114 = fadd double %112, %113
  %115 = fmul double %108, %108
  %116 = fadd double %114, %115
  %117 = load i32, i32* %55, align 8, !tbaa !110
  %118 = mul nsw i32 %117, %85
  %119 = add nsw i32 %118, %111
  %120 = sext i32 %119 to i64
  %121 = load double*, double** %56, align 8, !tbaa !121
  %122 = getelementptr inbounds double, double* %121, i64 %120
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fcmp olt double %116, %123
  br i1 %124, label %125, label %195

; <label>:125                                     ; preds = %.lr.ph
  %126 = fdiv double 1.000000e+00, %116
  %127 = fmul double %126, %126
  %128 = fmul double %126, %127
  %129 = load double*, double** %57, align 8, !tbaa !116
  %130 = getelementptr inbounds double, double* %129, i64 %120
  %131 = load double, double* %130, align 8, !tbaa !33
  %132 = fmul double %128, %131
  %133 = fmul double %132, 4.800000e+01
  %134 = fadd double %132, -5.000000e-01
  %135 = fmul double %133, %134
  %136 = fmul double %126, %135
  %137 = load double*, double** %58, align 8, !tbaa !117
  %138 = getelementptr inbounds double, double* %137, i64 %120
  %139 = load double, double* %138, align 8, !tbaa !33
  %140 = fmul double %139, %136
  %141 = fmul double %98, %140
  %142 = fmul double %103, %140
  %143 = fmul double %108, %140
  %144 = getelementptr inbounds double, double* %10, i64 %95
  %145 = bitcast double* %144 to i64*
  %146 = load atomic i64, i64* %145 monotonic, align 8, !tbaa !33
  br label %147

; <label>:147                                     ; preds = %147, %125
  %148 = phi i64 [ %146, %125 ], [ %153, %147 ]
  %149 = bitcast i64 %148 to double
  %150 = fsub double %149, %141
  %151 = bitcast double %150 to i64
  %152 = cmpxchg i64* %145, i64 %148, i64 %151 monotonic monotonic
  %153 = extractvalue { i64, i1 } %152, 0
  %154 = extractvalue { i64, i1 } %152, 1
  br i1 %154, label %155, label %147

; <label>:155                                     ; preds = %147
  %156 = fadd double %fiy.019, %142
  %157 = getelementptr inbounds double, double* %10, i64 %100
  %158 = bitcast double* %157 to i64*
  %159 = load atomic i64, i64* %158 monotonic, align 8, !tbaa !33
  br label %160

; <label>:160                                     ; preds = %160, %155
  %161 = phi i64 [ %159, %155 ], [ %166, %160 ]
  %162 = bitcast i64 %161 to double
  %163 = fsub double %162, %142
  %164 = bitcast double %163 to i64
  %165 = cmpxchg i64* %158, i64 %161, i64 %164 monotonic monotonic
  %166 = extractvalue { i64, i1 } %165, 0
  %167 = extractvalue { i64, i1 } %165, 1
  br i1 %167, label %168, label %160

; <label>:168                                     ; preds = %160
  %169 = fadd double %fix.020, %141
  %170 = getelementptr inbounds double, double* %10, i64 %105
  %171 = bitcast double* %170 to i64*
  %172 = load atomic i64, i64* %171 monotonic, align 8, !tbaa !33
  br label %173

; <label>:173                                     ; preds = %173, %168
  %174 = phi i64 [ %172, %168 ], [ %179, %173 ]
  %175 = bitcast i64 %174 to double
  %176 = fsub double %175, %143
  %177 = bitcast double %176 to i64
  %178 = cmpxchg i64* %171, i64 %174, i64 %177 monotonic monotonic
  %179 = extractvalue { i64, i1 } %178, 0
  %180 = extractvalue { i64, i1 } %178, 1
  br i1 %180, label %181, label %173

; <label>:181                                     ; preds = %173
  %182 = fadd double %fiz.018, %143
  %183 = fmul double %132, 4.000000e+00
  %184 = fadd double %132, -1.000000e+00
  %185 = fmul double %183, %184
  %186 = load double*, double** %58, align 8, !tbaa !117
  %187 = getelementptr inbounds double, double* %186, i64 %120
  %188 = load double, double* %187, align 8, !tbaa !33
  %189 = insertelement <2 x double> undef, double %116, i32 0
  %190 = insertelement <2 x double> %189, double %188, i32 1
  %191 = insertelement <2 x double> undef, double %140, i32 0
  %192 = insertelement <2 x double> %191, double %185, i32 1
  %193 = fmul <2 x double> %190, %192
  %194 = fadd <2 x double> %91, %193
  br label %195

; <label>:195                                     ; preds = %181, %.lr.ph
  %fiz.1 = phi double [ %182, %181 ], [ %fiz.018, %.lr.ph ]
  %fiy.1 = phi double [ %156, %181 ], [ %fiy.019, %.lr.ph ]
  %fix.1 = phi double [ %169, %181 ], [ %fix.020, %.lr.ph ]
  %196 = phi <2 x double> [ %194, %181 ], [ %91, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %71
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:197                                     ; preds = %197, %._crit_edge
  %198 = phi i64 [ %90, %._crit_edge ], [ %203, %197 ]
  %199 = bitcast i64 %198 to double
  %200 = fadd double %fix.0.lcssa, %199
  %201 = bitcast double %200 to i64
  %202 = cmpxchg i64* %89, i64 %198, i64 %201 monotonic monotonic
  %203 = extractvalue { i64, i1 } %202, 0
  %204 = extractvalue { i64, i1 } %202, 1
  br i1 %204, label %205, label %197

; <label>:205                                     ; preds = %197
  %206 = getelementptr inbounds double, double* %10, i64 %77
  %207 = bitcast double* %206 to i64*
  %208 = load atomic i64, i64* %207 monotonic, align 8, !tbaa !33
  br label %209

; <label>:209                                     ; preds = %209, %205
  %210 = phi i64 [ %208, %205 ], [ %215, %209 ]
  %211 = bitcast i64 %210 to double
  %212 = fadd double %fiy.0.lcssa, %211
  %213 = bitcast double %212 to i64
  %214 = cmpxchg i64* %207, i64 %210, i64 %213 monotonic monotonic
  %215 = extractvalue { i64, i1 } %214, 0
  %216 = extractvalue { i64, i1 } %214, 1
  br i1 %216, label %217, label %209

; <label>:217                                     ; preds = %209
  %218 = getelementptr inbounds double, double* %10, i64 %81
  %219 = bitcast double* %218 to i64*
  %220 = load atomic i64, i64* %219 monotonic, align 8, !tbaa !33
  br label %221

; <label>:221                                     ; preds = %221, %217
  %222 = phi i64 [ %220, %217 ], [ %227, %221 ]
  %223 = bitcast i64 %222 to double
  %224 = fadd double %fiz.0.lcssa, %223
  %225 = bitcast double %224 to i64
  %226 = cmpxchg i64* %219, i64 %222, i64 %225 monotonic monotonic
  %227 = extractvalue { i64, i1 } %226, 0
  %228 = extractvalue { i64, i1 } %226, 1
  br i1 %228, label %229, label %221

; <label>:229                                     ; preds = %221
  %230 = add nsw i32 %.omp.iv2.027, 1
  %231 = icmp slt i64 %indvars.iv39, %60
  %indvars.iv.next40 = add i64 %indvars.iv39, 1
  br i1 %231, label %61, label %._crit_edge32.loopexit

._crit_edge32.loopexit:                           ; preds = %229
  br label %._crit_edge32

._crit_edge32:                                    ; preds = %._crit_edge32.loopexit, %42
  %232 = phi <2 x double> [ zeroinitializer, %42 ], [ %87, %._crit_edge32.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %233

; <label>:233                                     ; preds = %._crit_edge32, %._crit_edge43
  %.pre-phi58 = phi i8* [ %.pre57, %._crit_edge43 ], [ %43, %._crit_edge32 ]
  %.pre-phi56 = phi i8* [ %.pre55, %._crit_edge43 ], [ %44, %._crit_edge32 ]
  %.pre-phi54 = phi i8* [ %.pre53, %._crit_edge43 ], [ %45, %._crit_edge32 ]
  %.pre-phi52 = phi i8* [ %.pre51, %._crit_edge43 ], [ %46, %._crit_edge32 ]
  %234 = phi <2 x double> [ zeroinitializer, %._crit_edge43 ], [ %232, %._crit_edge32 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi52) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi54) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi56) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi58) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %235 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %236 = bitcast double* %235 to i64*
  %237 = load atomic i64, i64* %236 monotonic, align 8, !tbaa !33
  %238 = extractelement <2 x double> %234, i32 1
  br label %239

; <label>:239                                     ; preds = %239, %233
  %240 = phi i64 [ %237, %233 ], [ %245, %239 ]
  %241 = bitcast i64 %240 to double
  %242 = fadd double %238, %241
  %243 = bitcast double %242 to i64
  %244 = cmpxchg i64* %236, i64 %240, i64 %243 monotonic monotonic
  %245 = extractvalue { i64, i1 } %244, 0
  %246 = extractvalue { i64, i1 } %244, 1
  br i1 %246, label %247, label %239

; <label>:247                                     ; preds = %239
  %248 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %249 = bitcast double* %248 to i64*
  %250 = load atomic i64, i64* %249 monotonic, align 8, !tbaa !33
  %251 = extractelement <2 x double> %234, i32 0
  br label %252

; <label>:252                                     ; preds = %252, %247
  %253 = phi i64 [ %250, %247 ], [ %258, %252 ]
  %254 = bitcast i64 %253 to double
  %255 = fadd double %251, %254
  %256 = bitcast double %255 to i64
  %257 = cmpxchg i64* %249, i64 %253, i64 %256 monotonic monotonic
  %258 = extractvalue { i64, i1 } %257, 0
  %259 = extractvalue { i64, i1 } %257, 1
  br i1 %259, label %260, label %252

; <label>:260                                     ; preds = %252
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_halfneighILi1ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %.lr.ph21.preheader, label %.preheader

.lr.ph21.preheader:                               ; preds = %0
  %13 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph21.preheader.split, label %.lr.ph21.prol.preheader

.lr.ph21.prol.preheader:                          ; preds = %.lr.ph21.preheader
  br label %.lr.ph21.prol

.lr.ph21.prol:                                    ; preds = %.lr.ph21.prol, %.lr.ph21.prol.preheader
  %indvars.iv26.prol = phi i64 [ %indvars.iv.next27.prol, %.lr.ph21.prol ], [ 0, %.lr.ph21.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph21.prol ], [ %xtraiter, %.lr.ph21.prol.preheader ]
  %14 = mul nuw nsw i64 %indvars.iv26.prol, 3
  %15 = getelementptr inbounds double, double* %9, i64 %14
  %16 = bitcast double* %15 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %16, align 8, !tbaa !33
  %17 = add nuw nsw i64 %14, 2
  %18 = getelementptr inbounds double, double* %9, i64 %17
  store double 0.000000e+00, double* %18, align 8, !tbaa !33
  %indvars.iv.next27.prol = add nuw nsw i64 %indvars.iv26.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph21.preheader.split.loopexit, label %.lr.ph21.prol, !llvm.loop !122

.lr.ph21.preheader.split.loopexit:                ; preds = %.lr.ph21.prol
  br label %.lr.ph21.preheader.split

.lr.ph21.preheader.split:                         ; preds = %.lr.ph21.preheader.split.loopexit, %.lr.ph21.preheader
  %indvars.iv26.unr = phi i64 [ 0, %.lr.ph21.preheader ], [ %indvars.iv.next27.prol, %.lr.ph21.preheader.split.loopexit ]
  %19 = icmp ult i32 %13, 3
  br i1 %19, label %.preheader.loopexit, label %.lr.ph21.preheader.split.split

.lr.ph21.preheader.split.split:                   ; preds = %.lr.ph21.preheader.split
  br label %.lr.ph21

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph21
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph21.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %20 = icmp sgt i32 %2, 0
  br i1 %20, label %.lr.ph15, label %._crit_edge16

.lr.ph15:                                         ; preds = %.preheader
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %28 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %31 = sext i32 %22 to i64
  br label %61

.lr.ph21:                                         ; preds = %.lr.ph21, %.lr.ph21.preheader.split.split
  %indvars.iv26 = phi i64 [ %indvars.iv26.unr, %.lr.ph21.preheader.split.split ], [ %indvars.iv.next27.3, %.lr.ph21 ]
  %32 = mul i64 %indvars.iv26, 3
  %33 = getelementptr inbounds double, double* %9, i64 %32
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %34, align 8, !tbaa !33
  %35 = add nuw nsw i64 %32, 2
  %36 = getelementptr inbounds double, double* %9, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add i64 %32, 3
  %38 = getelementptr inbounds double, double* %9, i64 %37
  %39 = bitcast double* %38 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %39, align 8, !tbaa !33
  %40 = add i64 %32, 5
  %41 = getelementptr inbounds double, double* %9, i64 %40
  store double 0.000000e+00, double* %41, align 8, !tbaa !33
  %42 = add i64 %32, 6
  %43 = getelementptr inbounds double, double* %9, i64 %42
  %44 = bitcast double* %43 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %44, align 8, !tbaa !33
  %45 = add i64 %32, 8
  %46 = getelementptr inbounds double, double* %9, i64 %45
  store double 0.000000e+00, double* %46, align 8, !tbaa !33
  %47 = add i64 %32, 9
  %48 = getelementptr inbounds double, double* %9, i64 %47
  %49 = bitcast double* %48 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8, !tbaa !33
  %50 = add i64 %32, 11
  %51 = getelementptr inbounds double, double* %9, i64 %50
  store double 0.000000e+00, double* %51, align 8, !tbaa !33
  %indvars.iv.next27.3 = add nsw i64 %indvars.iv26, 4
  %lftr.wideiv28.3 = trunc i64 %indvars.iv.next27.3 to i32
  %exitcond29.3 = icmp eq i32 %lftr.wideiv28.3, %5
  br i1 %exitcond29.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph21

._crit_edge16.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %.preheader
  %52 = phi <2 x double> [ zeroinitializer, %.preheader ], [ %80, %._crit_edge16.loopexit ]
  %53 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %54 = load double, double* %53, align 8, !tbaa !112
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fadd double %55, %54
  store double %56, double* %53, align 8, !tbaa !112
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %58 = load double, double* %57, align 8, !tbaa !113
  %59 = extractelement <2 x double> %52, i32 1
  %60 = fadd double %59, %58
  store double %60, double* %57, align 8, !tbaa !113
  ret void

; <label>:61                                      ; preds = %._crit_edge, %.lr.ph15
  %indvars.iv22 = phi i64 [ 0, %.lr.ph15 ], [ %indvars.iv.next23, %._crit_edge ]
  %62 = phi <2 x double> [ zeroinitializer, %.lr.ph15 ], [ %80, %._crit_edge ]
  %63 = mul nsw i64 %31, %indvars.iv22
  %64 = getelementptr inbounds i32, i32* %24, i64 %63
  %65 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv22
  %66 = load i32, i32* %65, align 4, !tbaa !1
  %67 = mul nuw nsw i64 %indvars.iv22, 3
  %68 = getelementptr inbounds double, double* %7, i64 %67
  %69 = bitcast double* %68 to <2 x double>*
  %70 = load <2 x double>, <2 x double>* %69, align 8, !tbaa !33
  %71 = add nuw nsw i64 %67, 2
  %72 = getelementptr inbounds double, double* %7, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !33
  %74 = icmp sgt i32 %66, 0
  br i1 %74, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %61
  %75 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv22
  %76 = load i32, i32* %75, align 4, !tbaa !1
  %77 = load i32, i32* %27, align 8
  %78 = mul nsw i32 %77, %76
  %79 = load double*, double** %28, align 8
  br label %89

._crit_edge.loopexit:                             ; preds = %169
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %80 = phi <2 x double> [ %62, %61 ], [ %170, %._crit_edge.loopexit ]
  %81 = phi <2 x double> [ zeroinitializer, %61 ], [ %171, %._crit_edge.loopexit ]
  %82 = getelementptr inbounds double, double* %9, i64 %67
  %83 = bitcast double* %82 to <2 x double>*
  %84 = load <2 x double>, <2 x double>* %83, align 8, !tbaa !33
  %85 = fadd <2 x double> %81, %84
  store <2 x double> %85, <2 x double>* %83, align 8, !tbaa !33
  %86 = getelementptr inbounds double, double* %9, i64 %71
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = fadd double %fiz.0.lcssa, %87
  store double %88, double* %86, align 8, !tbaa !33
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %lftr.wideiv24 = trunc i64 %indvars.iv.next23 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv24, %2
  br i1 %exitcond25, label %._crit_edge16.loopexit, label %61

; <label>:89                                      ; preds = %169, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %169 ]
  %fiz.03 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %169 ]
  %90 = phi <2 x double> [ %62, %.lr.ph ], [ %170, %169 ]
  %91 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %171, %169 ]
  %92 = getelementptr inbounds i32, i32* %64, i64 %indvars.iv
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = mul nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %7, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = add nsw i32 %94, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double, double* %7, i64 %99
  %101 = load double, double* %100, align 8, !tbaa !33
  %102 = insertelement <2 x double> undef, double %97, i32 0
  %103 = insertelement <2 x double> %102, double %101, i32 1
  %104 = fsub <2 x double> %70, %103
  %105 = add nsw i32 %94, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %7, i64 %106
  %108 = load double, double* %107, align 8, !tbaa !33
  %109 = fsub double %73, %108
  %110 = sext i32 %93 to i64
  %111 = getelementptr inbounds i32, i32* %11, i64 %110
  %112 = load i32, i32* %111, align 4, !tbaa !1
  %113 = extractelement <2 x double> %104, i32 0
  %114 = fmul double %113, %113
  %115 = extractelement <2 x double> %104, i32 1
  %116 = fmul double %115, %115
  %117 = fadd double %114, %116
  %118 = fmul double %109, %109
  %119 = fadd double %117, %118
  %120 = add nsw i32 %78, %112
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %79, i64 %121
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fcmp olt double %119, %123
  br i1 %124, label %125, label %169

; <label>:125                                     ; preds = %89
  %126 = fdiv double 1.000000e+00, %119
  %127 = fmul double %126, %126
  %128 = fmul double %126, %127
  %129 = load double*, double** %29, align 8, !tbaa !116
  %130 = getelementptr inbounds double, double* %129, i64 %121
  %131 = load double, double* %130, align 8, !tbaa !33
  %132 = fmul double %128, %131
  %133 = fmul double %132, 4.800000e+01
  %134 = fadd double %132, -5.000000e-01
  %135 = fmul double %133, %134
  %136 = load double*, double** %30, align 8, !tbaa !117
  %137 = getelementptr inbounds double, double* %136, i64 %121
  %138 = load double, double* %137, align 8, !tbaa !33
  %139 = insertelement <2 x double> <double 4.000000e+00, double undef>, double %126, i32 1
  %140 = insertelement <2 x double> undef, double %132, i32 0
  %141 = insertelement <2 x double> %140, double %135, i32 1
  %142 = fmul <2 x double> %139, %141
  %143 = fadd double %132, -1.000000e+00
  %144 = insertelement <2 x double> undef, double %143, i32 0
  %145 = insertelement <2 x double> %144, double %138, i32 1
  %146 = fmul <2 x double> %142, %145
  %147 = extractelement <2 x double> %146, i32 1
  %148 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %149 = fmul <2 x double> %104, %148
  %150 = fadd <2 x double> %91, %149
  %151 = fmul double %109, %147
  %152 = fadd double %fiz.03, %151
  %153 = getelementptr inbounds double, double* %9, i64 %95
  %154 = load double, double* %153, align 8, !tbaa !33
  %155 = extractelement <2 x double> %149, i32 0
  %156 = fsub double %154, %155
  store double %156, double* %153, align 8, !tbaa !33
  %157 = getelementptr inbounds double, double* %9, i64 %99
  %158 = load double, double* %157, align 8, !tbaa !33
  %159 = extractelement <2 x double> %149, i32 1
  %160 = fsub double %158, %159
  store double %160, double* %157, align 8, !tbaa !33
  %161 = getelementptr inbounds double, double* %9, i64 %106
  %162 = load double, double* %161, align 8, !tbaa !33
  %163 = fsub double %162, %151
  store double %163, double* %161, align 8, !tbaa !33
  %164 = load double, double* %137, align 8, !tbaa !33
  %165 = insertelement <2 x double> undef, double %164, i32 0
  %166 = insertelement <2 x double> %165, double %119, i32 1
  %167 = fmul <2 x double> %146, %166
  %168 = fadd <2 x double> %90, %167
  br label %169

; <label>:169                                     ; preds = %125, %89
  %fiz.1 = phi double [ %152, %125 ], [ %fiz.03, %89 ]
  %170 = phi <2 x double> [ %168, %125 ], [ %90, %89 ]
  %171 = phi <2 x double> [ %150, %125 ], [ %91, %89 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %66
  br i1 %exitcond, label %._crit_edge.loopexit, label %89
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ26compute_halfneigh_threadedILi1ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !114
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %8 = load double*, double** %7, align 8, !tbaa !100
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %10 = load double*, double** %9, align 8, !tbaa !80
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %12 = load i32*, i32** %11, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %13 = add nsw i32 %6, -1
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %._crit_edge45

._crit_edge45:                                    ; preds = %0
  %.pre46 = bitcast i32* %.omp.is_last to i8*
  %.pre47 = bitcast i32* %.omp.stride to i8*
  %.pre49 = bitcast i32* %.omp.ub to i8*
  %.pre51 = bitcast i32* %.omp.lb to i8*
  br label %39

; <label>:15                                      ; preds = %0
  %16 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %17 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #7
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %18 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %19 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %20 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %13
  %22 = select i1 %21, i32 %13, i32 %20
  store i32 %22, i32* %.omp.ub, align 4, !tbaa !1
  %23 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %24 = icmp sgt i32 %23, %22
  br i1 %24, label %._crit_edge38, label %.lr.ph37

.lr.ph37:                                         ; preds = %15
  %25 = sext i32 %23 to i64
  %26 = sext i32 %22 to i64
  br label %27

; <label>:27                                      ; preds = %27, %.lr.ph37
  %indvars.iv41 = phi i64 [ %indvars.iv.next42, %27 ], [ %25, %.lr.ph37 ]
  %.omp.iv.035 = phi i32 [ %37, %27 ], [ %23, %.lr.ph37 ]
  %28 = mul nsw i32 %.omp.iv.035, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %10, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %28, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %10, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %28, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %10, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add nsw i32 %.omp.iv.035, 1
  %38 = icmp slt i64 %indvars.iv41, %26
  %indvars.iv.next42 = add nsw i64 %indvars.iv41, 1
  br i1 %38, label %27, label %._crit_edge38.loopexit

._crit_edge38.loopexit:                           ; preds = %27
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %15
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %39

; <label>:39                                      ; preds = %._crit_edge38, %._crit_edge45
  %.pre-phi52 = phi i8* [ %.pre51, %._crit_edge45 ], [ %16, %._crit_edge38 ]
  %.pre-phi50 = phi i8* [ %.pre49, %._crit_edge45 ], [ %17, %._crit_edge38 ]
  %.pre-phi48 = phi i8* [ %.pre47, %._crit_edge45 ], [ %18, %._crit_edge38 ]
  %.pre-phi = phi i8* [ %.pre46, %._crit_edge45 ], [ %19, %._crit_edge38 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi48) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi50) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi52) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %40 = add nsw i32 %3, -1
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge44

._crit_edge44:                                    ; preds = %39
  %.pre53 = bitcast i32* %.omp.is_last8 to i8*
  %.pre55 = bitcast i32* %.omp.stride7 to i8*
  %.pre57 = bitcast i32* %.omp.ub6 to i8*
  %.pre59 = bitcast i32* %.omp.lb5 to i8*
  br label %236

; <label>:42                                      ; preds = %39
  %43 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #7
  store i32 %40, i32* %.omp.ub6, align 4, !tbaa !1
  %45 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %46 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %46) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %47 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %48 = icmp sgt i32 %47, %40
  %49 = select i1 %48, i32 %40, i32 %47
  store i32 %49, i32* %.omp.ub6, align 4, !tbaa !1
  %50 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %51 = icmp sgt i32 %50, %49
  br i1 %51, label %._crit_edge32, label %.lr.ph31

.lr.ph31:                                         ; preds = %42
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %54 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %56 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %58 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %59 = sext i32 %50 to i64
  %60 = sext i32 %49 to i64
  br label %61

; <label>:61                                      ; preds = %232, %.lr.ph31
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %232 ], [ %59, %.lr.ph31 ]
  %.omp.iv2.027 = phi i32 [ %233, %232 ], [ %50, %.lr.ph31 ]
  %62 = phi <2 x double> [ %87, %232 ], [ zeroinitializer, %.lr.ph31 ]
  %63 = load i32, i32* %52, align 8, !tbaa !118
  %64 = trunc i64 %indvars.iv39 to i32
  %65 = mul nsw i32 %63, %64
  %66 = sext i32 %65 to i64
  %67 = load i32*, i32** %53, align 8, !tbaa !119
  %68 = getelementptr inbounds i32, i32* %67, i64 %66
  %69 = load i32*, i32** %54, align 8, !tbaa !120
  %70 = getelementptr inbounds i32, i32* %69, i64 %indvars.iv39
  %71 = load i32, i32* %70, align 4, !tbaa !1
  %72 = mul nsw i32 %.omp.iv2.027, 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds double, double* %8, i64 %73
  %75 = load double, double* %74, align 8, !tbaa !33
  %76 = add nsw i32 %72, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds double, double* %8, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !33
  %80 = add nsw i32 %72, 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %8, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv39
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = icmp sgt i32 %71, 0
  br i1 %86, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %61
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %198
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fix.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fix.1, %._crit_edge.loopexit ]
  %fiy.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiy.1, %._crit_edge.loopexit ]
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %87 = phi <2 x double> [ %62, %61 ], [ %199, %._crit_edge.loopexit ]
  %88 = getelementptr inbounds double, double* %10, i64 %73
  %89 = bitcast double* %88 to i64*
  %90 = load atomic i64, i64* %89 monotonic, align 8, !tbaa !33
  br label %200

.lr.ph:                                           ; preds = %198, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %198 ], [ 0, %.lr.ph.preheader ]
  %fix.020 = phi double [ %fix.1, %198 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiy.019 = phi double [ %fiy.1, %198 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiz.018 = phi double [ %fiz.1, %198 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %91 = phi <2 x double> [ %199, %198 ], [ %62, %.lr.ph.preheader ]
  %92 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = mul nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %8, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = fsub double %75, %97
  %99 = add nsw i32 %94, 1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds double, double* %8, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !33
  %103 = fsub double %79, %102
  %104 = add nsw i32 %94, 2
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %8, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fsub double %83, %107
  %109 = sext i32 %93 to i64
  %110 = getelementptr inbounds i32, i32* %12, i64 %109
  %111 = load i32, i32* %110, align 4, !tbaa !1
  %112 = fmul double %98, %98
  %113 = fmul double %103, %103
  %114 = fadd double %112, %113
  %115 = fmul double %108, %108
  %116 = fadd double %114, %115
  %117 = load i32, i32* %55, align 8, !tbaa !110
  %118 = mul nsw i32 %117, %85
  %119 = add nsw i32 %118, %111
  %120 = sext i32 %119 to i64
  %121 = load double*, double** %56, align 8, !tbaa !121
  %122 = getelementptr inbounds double, double* %121, i64 %120
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fcmp olt double %116, %123
  br i1 %124, label %125, label %198

; <label>:125                                     ; preds = %.lr.ph
  %126 = fdiv double 1.000000e+00, %116
  %127 = fmul double %126, %126
  %128 = fmul double %126, %127
  %129 = load double*, double** %57, align 8, !tbaa !116
  %130 = getelementptr inbounds double, double* %129, i64 %120
  %131 = load double, double* %130, align 8, !tbaa !33
  %132 = fmul double %128, %131
  %133 = fmul double %132, 4.800000e+01
  %134 = fadd double %132, -5.000000e-01
  %135 = fmul double %133, %134
  %136 = fmul double %126, %135
  %137 = load double*, double** %58, align 8, !tbaa !117
  %138 = getelementptr inbounds double, double* %137, i64 %120
  %139 = load double, double* %138, align 8, !tbaa !33
  %140 = fmul double %139, %136
  %141 = fmul double %98, %140
  %142 = fadd double %fix.020, %141
  %143 = fmul double %103, %140
  %144 = fadd double %fiy.019, %143
  %145 = fmul double %108, %140
  %146 = fadd double %fiz.018, %145
  %147 = icmp slt i32 %93, %3
  br i1 %147, label %148, label %.loopexit

; <label>:148                                     ; preds = %125
  %149 = getelementptr inbounds double, double* %10, i64 %95
  %150 = bitcast double* %149 to i64*
  %151 = load atomic i64, i64* %150 monotonic, align 8, !tbaa !33
  br label %152

; <label>:152                                     ; preds = %152, %148
  %153 = phi i64 [ %151, %148 ], [ %158, %152 ]
  %154 = bitcast i64 %153 to double
  %155 = fsub double %154, %141
  %156 = bitcast double %155 to i64
  %157 = cmpxchg i64* %150, i64 %153, i64 %156 monotonic monotonic
  %158 = extractvalue { i64, i1 } %157, 0
  %159 = extractvalue { i64, i1 } %157, 1
  br i1 %159, label %160, label %152

; <label>:160                                     ; preds = %152
  %161 = getelementptr inbounds double, double* %10, i64 %100
  %162 = bitcast double* %161 to i64*
  %163 = load atomic i64, i64* %162 monotonic, align 8, !tbaa !33
  br label %164

; <label>:164                                     ; preds = %164, %160
  %165 = phi i64 [ %163, %160 ], [ %170, %164 ]
  %166 = bitcast i64 %165 to double
  %167 = fsub double %166, %143
  %168 = bitcast double %167 to i64
  %169 = cmpxchg i64* %162, i64 %165, i64 %168 monotonic monotonic
  %170 = extractvalue { i64, i1 } %169, 0
  %171 = extractvalue { i64, i1 } %169, 1
  br i1 %171, label %172, label %164

; <label>:172                                     ; preds = %164
  %173 = getelementptr inbounds double, double* %10, i64 %105
  %174 = bitcast double* %173 to i64*
  %175 = load atomic i64, i64* %174 monotonic, align 8, !tbaa !33
  br label %176

; <label>:176                                     ; preds = %176, %172
  %177 = phi i64 [ %175, %172 ], [ %182, %176 ]
  %178 = bitcast i64 %177 to double
  %179 = fsub double %178, %145
  %180 = bitcast double %179 to i64
  %181 = cmpxchg i64* %174, i64 %177, i64 %180 monotonic monotonic
  %182 = extractvalue { i64, i1 } %181, 0
  %183 = extractvalue { i64, i1 } %181, 1
  br i1 %183, label %.loopexit.loopexit, label %176

.loopexit.loopexit:                               ; preds = %176
  %.pre = load double*, double** %58, align 8, !tbaa !117
  %.phi.trans.insert = getelementptr inbounds double, double* %.pre, i64 %120
  %.pre43 = load double, double* %.phi.trans.insert, align 8, !tbaa !33
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %125
  %184 = phi double [ %.pre43, %.loopexit.loopexit ], [ %139, %125 ]
  %185 = select i1 %147, double 1.000000e+00, double 5.000000e-01
  %186 = fmul double %132, 4.000000e+00
  %187 = fadd double %132, -1.000000e+00
  %188 = fmul double %186, %187
  %189 = insertelement <2 x double> undef, double %185, i32 0
  %190 = insertelement <2 x double> %189, double %185, i32 1
  %191 = insertelement <2 x double> undef, double %116, i32 0
  %192 = insertelement <2 x double> %191, double %188, i32 1
  %193 = fmul <2 x double> %190, %192
  %194 = insertelement <2 x double> undef, double %140, i32 0
  %195 = insertelement <2 x double> %194, double %184, i32 1
  %196 = fmul <2 x double> %193, %195
  %197 = fadd <2 x double> %91, %196
  br label %198

; <label>:198                                     ; preds = %.loopexit, %.lr.ph
  %fiz.1 = phi double [ %146, %.loopexit ], [ %fiz.018, %.lr.ph ]
  %fiy.1 = phi double [ %144, %.loopexit ], [ %fiy.019, %.lr.ph ]
  %fix.1 = phi double [ %142, %.loopexit ], [ %fix.020, %.lr.ph ]
  %199 = phi <2 x double> [ %197, %.loopexit ], [ %91, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %71
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:200                                     ; preds = %200, %._crit_edge
  %201 = phi i64 [ %90, %._crit_edge ], [ %206, %200 ]
  %202 = bitcast i64 %201 to double
  %203 = fadd double %fix.0.lcssa, %202
  %204 = bitcast double %203 to i64
  %205 = cmpxchg i64* %89, i64 %201, i64 %204 monotonic monotonic
  %206 = extractvalue { i64, i1 } %205, 0
  %207 = extractvalue { i64, i1 } %205, 1
  br i1 %207, label %208, label %200

; <label>:208                                     ; preds = %200
  %209 = getelementptr inbounds double, double* %10, i64 %77
  %210 = bitcast double* %209 to i64*
  %211 = load atomic i64, i64* %210 monotonic, align 8, !tbaa !33
  br label %212

; <label>:212                                     ; preds = %212, %208
  %213 = phi i64 [ %211, %208 ], [ %218, %212 ]
  %214 = bitcast i64 %213 to double
  %215 = fadd double %fiy.0.lcssa, %214
  %216 = bitcast double %215 to i64
  %217 = cmpxchg i64* %210, i64 %213, i64 %216 monotonic monotonic
  %218 = extractvalue { i64, i1 } %217, 0
  %219 = extractvalue { i64, i1 } %217, 1
  br i1 %219, label %220, label %212

; <label>:220                                     ; preds = %212
  %221 = getelementptr inbounds double, double* %10, i64 %81
  %222 = bitcast double* %221 to i64*
  %223 = load atomic i64, i64* %222 monotonic, align 8, !tbaa !33
  br label %224

; <label>:224                                     ; preds = %224, %220
  %225 = phi i64 [ %223, %220 ], [ %230, %224 ]
  %226 = bitcast i64 %225 to double
  %227 = fadd double %fiz.0.lcssa, %226
  %228 = bitcast double %227 to i64
  %229 = cmpxchg i64* %222, i64 %225, i64 %228 monotonic monotonic
  %230 = extractvalue { i64, i1 } %229, 0
  %231 = extractvalue { i64, i1 } %229, 1
  br i1 %231, label %232, label %224

; <label>:232                                     ; preds = %224
  %233 = add nsw i32 %.omp.iv2.027, 1
  %234 = icmp slt i64 %indvars.iv39, %60
  %indvars.iv.next40 = add i64 %indvars.iv39, 1
  br i1 %234, label %61, label %._crit_edge32.loopexit

._crit_edge32.loopexit:                           ; preds = %232
  br label %._crit_edge32

._crit_edge32:                                    ; preds = %._crit_edge32.loopexit, %42
  %235 = phi <2 x double> [ zeroinitializer, %42 ], [ %87, %._crit_edge32.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %236

; <label>:236                                     ; preds = %._crit_edge32, %._crit_edge44
  %.pre-phi60 = phi i8* [ %.pre59, %._crit_edge44 ], [ %43, %._crit_edge32 ]
  %.pre-phi58 = phi i8* [ %.pre57, %._crit_edge44 ], [ %44, %._crit_edge32 ]
  %.pre-phi56 = phi i8* [ %.pre55, %._crit_edge44 ], [ %45, %._crit_edge32 ]
  %.pre-phi54 = phi i8* [ %.pre53, %._crit_edge44 ], [ %46, %._crit_edge32 ]
  %237 = phi <2 x double> [ zeroinitializer, %._crit_edge44 ], [ %235, %._crit_edge32 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi54) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi56) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi58) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi60) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %238 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %239 = bitcast double* %238 to i64*
  %240 = load atomic i64, i64* %239 monotonic, align 8, !tbaa !33
  %241 = extractelement <2 x double> %237, i32 1
  br label %242

; <label>:242                                     ; preds = %242, %236
  %243 = phi i64 [ %240, %236 ], [ %248, %242 ]
  %244 = bitcast i64 %243 to double
  %245 = fadd double %241, %244
  %246 = bitcast double %245 to i64
  %247 = cmpxchg i64* %239, i64 %243, i64 %246 monotonic monotonic
  %248 = extractvalue { i64, i1 } %247, 0
  %249 = extractvalue { i64, i1 } %247, 1
  br i1 %249, label %250, label %242

; <label>:250                                     ; preds = %242
  %251 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %252 = bitcast double* %251 to i64*
  %253 = load atomic i64, i64* %252 monotonic, align 8, !tbaa !33
  %254 = extractelement <2 x double> %237, i32 0
  br label %255

; <label>:255                                     ; preds = %255, %250
  %256 = phi i64 [ %253, %250 ], [ %261, %255 ]
  %257 = bitcast i64 %256 to double
  %258 = fadd double %254, %257
  %259 = bitcast double %258 to i64
  %260 = cmpxchg i64* %252, i64 %256, i64 %259 monotonic monotonic
  %261 = extractvalue { i64, i1 } %260, 0
  %262 = extractvalue { i64, i1 } %260, 1
  br i1 %262, label %263, label %255

; <label>:263                                     ; preds = %255
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_halfneighILi1ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %.lr.ph21.preheader, label %.preheader

.lr.ph21.preheader:                               ; preds = %0
  %13 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph21.preheader.split, label %.lr.ph21.prol.preheader

.lr.ph21.prol.preheader:                          ; preds = %.lr.ph21.preheader
  br label %.lr.ph21.prol

.lr.ph21.prol:                                    ; preds = %.lr.ph21.prol, %.lr.ph21.prol.preheader
  %indvars.iv26.prol = phi i64 [ %indvars.iv.next27.prol, %.lr.ph21.prol ], [ 0, %.lr.ph21.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph21.prol ], [ %xtraiter, %.lr.ph21.prol.preheader ]
  %14 = mul nuw nsw i64 %indvars.iv26.prol, 3
  %15 = getelementptr inbounds double, double* %9, i64 %14
  %16 = bitcast double* %15 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %16, align 8, !tbaa !33
  %17 = add nuw nsw i64 %14, 2
  %18 = getelementptr inbounds double, double* %9, i64 %17
  store double 0.000000e+00, double* %18, align 8, !tbaa !33
  %indvars.iv.next27.prol = add nuw nsw i64 %indvars.iv26.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph21.preheader.split.loopexit, label %.lr.ph21.prol, !llvm.loop !123

.lr.ph21.preheader.split.loopexit:                ; preds = %.lr.ph21.prol
  br label %.lr.ph21.preheader.split

.lr.ph21.preheader.split:                         ; preds = %.lr.ph21.preheader.split.loopexit, %.lr.ph21.preheader
  %indvars.iv26.unr = phi i64 [ 0, %.lr.ph21.preheader ], [ %indvars.iv.next27.prol, %.lr.ph21.preheader.split.loopexit ]
  %19 = icmp ult i32 %13, 3
  br i1 %19, label %.preheader.loopexit, label %.lr.ph21.preheader.split.split

.lr.ph21.preheader.split.split:                   ; preds = %.lr.ph21.preheader.split
  br label %.lr.ph21

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph21
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph21.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %20 = icmp sgt i32 %2, 0
  br i1 %20, label %.lr.ph15, label %._crit_edge16

.lr.ph15:                                         ; preds = %.preheader
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %28 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %31 = sext i32 %22 to i64
  br label %61

.lr.ph21:                                         ; preds = %.lr.ph21, %.lr.ph21.preheader.split.split
  %indvars.iv26 = phi i64 [ %indvars.iv26.unr, %.lr.ph21.preheader.split.split ], [ %indvars.iv.next27.3, %.lr.ph21 ]
  %32 = mul i64 %indvars.iv26, 3
  %33 = getelementptr inbounds double, double* %9, i64 %32
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %34, align 8, !tbaa !33
  %35 = add nuw nsw i64 %32, 2
  %36 = getelementptr inbounds double, double* %9, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add i64 %32, 3
  %38 = getelementptr inbounds double, double* %9, i64 %37
  %39 = bitcast double* %38 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %39, align 8, !tbaa !33
  %40 = add i64 %32, 5
  %41 = getelementptr inbounds double, double* %9, i64 %40
  store double 0.000000e+00, double* %41, align 8, !tbaa !33
  %42 = add i64 %32, 6
  %43 = getelementptr inbounds double, double* %9, i64 %42
  %44 = bitcast double* %43 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %44, align 8, !tbaa !33
  %45 = add i64 %32, 8
  %46 = getelementptr inbounds double, double* %9, i64 %45
  store double 0.000000e+00, double* %46, align 8, !tbaa !33
  %47 = add i64 %32, 9
  %48 = getelementptr inbounds double, double* %9, i64 %47
  %49 = bitcast double* %48 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8, !tbaa !33
  %50 = add i64 %32, 11
  %51 = getelementptr inbounds double, double* %9, i64 %50
  store double 0.000000e+00, double* %51, align 8, !tbaa !33
  %indvars.iv.next27.3 = add nsw i64 %indvars.iv26, 4
  %lftr.wideiv28.3 = trunc i64 %indvars.iv.next27.3 to i32
  %exitcond29.3 = icmp eq i32 %lftr.wideiv28.3, %5
  br i1 %exitcond29.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph21

._crit_edge16.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %.preheader
  %52 = phi <2 x double> [ zeroinitializer, %.preheader ], [ %80, %._crit_edge16.loopexit ]
  %53 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %54 = load double, double* %53, align 8, !tbaa !112
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fadd double %55, %54
  store double %56, double* %53, align 8, !tbaa !112
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %58 = load double, double* %57, align 8, !tbaa !113
  %59 = extractelement <2 x double> %52, i32 1
  %60 = fadd double %59, %58
  store double %60, double* %57, align 8, !tbaa !113
  ret void

; <label>:61                                      ; preds = %._crit_edge, %.lr.ph15
  %indvars.iv22 = phi i64 [ 0, %.lr.ph15 ], [ %indvars.iv.next23, %._crit_edge ]
  %62 = phi <2 x double> [ zeroinitializer, %.lr.ph15 ], [ %80, %._crit_edge ]
  %63 = mul nsw i64 %31, %indvars.iv22
  %64 = getelementptr inbounds i32, i32* %24, i64 %63
  %65 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv22
  %66 = load i32, i32* %65, align 4, !tbaa !1
  %67 = mul nuw nsw i64 %indvars.iv22, 3
  %68 = getelementptr inbounds double, double* %7, i64 %67
  %69 = bitcast double* %68 to <2 x double>*
  %70 = load <2 x double>, <2 x double>* %69, align 8, !tbaa !33
  %71 = add nuw nsw i64 %67, 2
  %72 = getelementptr inbounds double, double* %7, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !33
  %74 = icmp sgt i32 %66, 0
  br i1 %74, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %61
  %75 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv22
  %76 = load i32, i32* %75, align 4, !tbaa !1
  %77 = load i32, i32* %27, align 8
  %78 = mul nsw i32 %77, %76
  %79 = load double*, double** %28, align 8
  br label %89

._crit_edge.loopexit:                             ; preds = %175
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %80 = phi <2 x double> [ %62, %61 ], [ %176, %._crit_edge.loopexit ]
  %81 = phi <2 x double> [ zeroinitializer, %61 ], [ %177, %._crit_edge.loopexit ]
  %82 = getelementptr inbounds double, double* %9, i64 %67
  %83 = bitcast double* %82 to <2 x double>*
  %84 = load <2 x double>, <2 x double>* %83, align 8, !tbaa !33
  %85 = fadd <2 x double> %81, %84
  store <2 x double> %85, <2 x double>* %83, align 8, !tbaa !33
  %86 = getelementptr inbounds double, double* %9, i64 %71
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = fadd double %fiz.0.lcssa, %87
  store double %88, double* %86, align 8, !tbaa !33
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %lftr.wideiv24 = trunc i64 %indvars.iv.next23 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv24, %2
  br i1 %exitcond25, label %._crit_edge16.loopexit, label %61

; <label>:89                                      ; preds = %175, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %175 ]
  %fiz.03 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %175 ]
  %90 = phi <2 x double> [ %62, %.lr.ph ], [ %176, %175 ]
  %91 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %177, %175 ]
  %92 = getelementptr inbounds i32, i32* %64, i64 %indvars.iv
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = mul nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %7, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !33
  %98 = add nsw i32 %94, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double, double* %7, i64 %99
  %101 = load double, double* %100, align 8, !tbaa !33
  %102 = insertelement <2 x double> undef, double %97, i32 0
  %103 = insertelement <2 x double> %102, double %101, i32 1
  %104 = fsub <2 x double> %70, %103
  %105 = add nsw i32 %94, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %7, i64 %106
  %108 = load double, double* %107, align 8, !tbaa !33
  %109 = fsub double %73, %108
  %110 = sext i32 %93 to i64
  %111 = getelementptr inbounds i32, i32* %11, i64 %110
  %112 = load i32, i32* %111, align 4, !tbaa !1
  %113 = extractelement <2 x double> %104, i32 0
  %114 = fmul double %113, %113
  %115 = extractelement <2 x double> %104, i32 1
  %116 = fmul double %115, %115
  %117 = fadd double %114, %116
  %118 = fmul double %109, %109
  %119 = fadd double %117, %118
  %120 = add nsw i32 %78, %112
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %79, i64 %121
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fcmp olt double %119, %123
  br i1 %124, label %125, label %175

; <label>:125                                     ; preds = %89
  %126 = fdiv double 1.000000e+00, %119
  %127 = fmul double %126, %126
  %128 = fmul double %126, %127
  %129 = load double*, double** %29, align 8, !tbaa !116
  %130 = getelementptr inbounds double, double* %129, i64 %121
  %131 = load double, double* %130, align 8, !tbaa !33
  %132 = fmul double %128, %131
  %133 = fmul double %132, 4.800000e+01
  %134 = fadd double %132, -5.000000e-01
  %135 = fmul double %133, %134
  %136 = fmul double %126, %135
  %137 = load double*, double** %30, align 8, !tbaa !117
  %138 = getelementptr inbounds double, double* %137, i64 %121
  %139 = load double, double* %138, align 8, !tbaa !33
  %140 = fmul double %139, %136
  %141 = insertelement <2 x double> undef, double %140, i32 0
  %142 = insertelement <2 x double> %141, double %140, i32 1
  %143 = fmul <2 x double> %104, %142
  %144 = fadd <2 x double> %91, %143
  %145 = fmul double %109, %140
  %146 = fadd double %fiz.03, %145
  %147 = icmp slt i32 %93, %2
  br i1 %147, label %148, label %160

; <label>:148                                     ; preds = %125
  %149 = getelementptr inbounds double, double* %9, i64 %95
  %150 = load double, double* %149, align 8, !tbaa !33
  %151 = extractelement <2 x double> %143, i32 0
  %152 = fsub double %150, %151
  store double %152, double* %149, align 8, !tbaa !33
  %153 = getelementptr inbounds double, double* %9, i64 %99
  %154 = load double, double* %153, align 8, !tbaa !33
  %155 = extractelement <2 x double> %143, i32 1
  %156 = fsub double %154, %155
  store double %156, double* %153, align 8, !tbaa !33
  %157 = getelementptr inbounds double, double* %9, i64 %106
  %158 = load double, double* %157, align 8, !tbaa !33
  %159 = fsub double %158, %145
  store double %159, double* %157, align 8, !tbaa !33
  %.pre = load double, double* %138, align 8, !tbaa !33
  br label %160

; <label>:160                                     ; preds = %148, %125
  %161 = phi double [ %.pre, %148 ], [ %139, %125 ]
  %162 = select i1 %147, double 1.000000e+00, double 5.000000e-01
  %163 = fmul double %132, 4.000000e+00
  %164 = fadd double %132, -1.000000e+00
  %165 = fmul double %163, %164
  %166 = insertelement <2 x double> undef, double %162, i32 0
  %167 = insertelement <2 x double> %166, double %162, i32 1
  %168 = insertelement <2 x double> undef, double %165, i32 0
  %169 = insertelement <2 x double> %168, double %119, i32 1
  %170 = fmul <2 x double> %167, %169
  %171 = insertelement <2 x double> undef, double %161, i32 0
  %172 = insertelement <2 x double> %171, double %140, i32 1
  %173 = fmul <2 x double> %170, %172
  %174 = fadd <2 x double> %90, %173
  br label %175

; <label>:175                                     ; preds = %160, %89
  %fiz.1 = phi double [ %146, %160 ], [ %fiz.03, %89 ]
  %176 = phi <2 x double> [ %174, %160 ], [ %90, %89 ]
  %177 = phi <2 x double> [ %144, %160 ], [ %91, %89 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %66
  br i1 %exitcond, label %._crit_edge.loopexit, label %89
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_fullneighILi1EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %5 = load double*, double** %4, align 8, !tbaa !100
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %7 = load double*, double** %6, align 8, !tbaa !80
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %9 = load i32*, i32** %8, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %10 = add nsw i32 %3, -1
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %0
  %13 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %14 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #7
  store i32 %10, i32* %.omp.ub, align 4, !tbaa !1
  %15 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %16 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %17 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %18 = icmp sgt i32 %17, %10
  %19 = select i1 %18, i32 %10, i32 %17
  store i32 %19, i32* %.omp.ub, align 4, !tbaa !1
  %20 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %19
  br i1 %21, label %._crit_edge32, label %.lr.ph31

.lr.ph31:                                         ; preds = %12
  %22 = sext i32 %20 to i64
  %23 = sext i32 %19 to i64
  br label %24

; <label>:24                                      ; preds = %24, %.lr.ph31
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %24 ], [ %22, %.lr.ph31 ]
  %.omp.iv.029 = phi i32 [ %34, %24 ], [ %20, %.lr.ph31 ]
  %25 = mul nsw i32 %.omp.iv.029, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %7, i64 %26
  store double 0.000000e+00, double* %27, align 8, !tbaa !33
  %28 = add nsw i32 %25, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %7, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %25, 2
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %7, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %.omp.iv.029, 1
  %35 = icmp slt i64 %indvars.iv35, %23
  %indvars.iv.next36 = add nsw i64 %indvars.iv35, 1
  br i1 %35, label %24, label %._crit_edge32.loopexit

._crit_edge32.loopexit:                           ; preds = %24
  br label %._crit_edge32

._crit_edge32:                                    ; preds = %._crit_edge32.loopexit, %12
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  call void @llvm.lifetime.end(i64 4, i8* %16) #7
  call void @llvm.lifetime.end(i64 4, i8* %15) #7
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #7
  call void @llvm.lifetime.end(i64 4, i8* %13) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %36 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %36) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %37 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %37) #7
  store i32 %10, i32* %.omp.ub6, align 4, !tbaa !1
  %38 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %39 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %39) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %40 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %41 = icmp sgt i32 %40, %10
  %42 = select i1 %41, i32 %10, i32 %40
  store i32 %42, i32* %.omp.ub6, align 4, !tbaa !1
  %43 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = icmp sgt i32 %43, %42
  br i1 %44, label %._crit_edge26, label %.lr.ph25

.lr.ph25:                                         ; preds = %._crit_edge32
  %45 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %52 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %53 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %54 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %55 = sext i32 %43 to i64
  %56 = sext i32 %46 to i64
  %57 = sext i32 %42 to i64
  br label %58

; <label>:58                                      ; preds = %._crit_edge, %.lr.ph25
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %._crit_edge ], [ %55, %.lr.ph25 ]
  %.omp.iv2.021 = phi i32 [ %97, %._crit_edge ], [ %43, %.lr.ph25 ]
  %59 = phi <2 x double> [ %84, %._crit_edge ], [ zeroinitializer, %.lr.ph25 ]
  %60 = mul nsw i64 %56, %indvars.iv33
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = getelementptr inbounds i32, i32* %50, i64 %indvars.iv33
  %63 = load i32, i32* %62, align 4, !tbaa !1
  %64 = mul nsw i32 %.omp.iv2.021, 3
  %65 = sext i32 %64 to i64
  %66 = add nsw i32 %64, 1
  %67 = sext i32 %66 to i64
  %68 = add nsw i32 %64, 2
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double, double* %5, i64 %69
  %71 = load double, double* %70, align 8, !tbaa !33
  %72 = icmp sgt i32 %63, 0
  br i1 %72, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %58
  %73 = getelementptr inbounds double, double* %5, i64 %67
  %74 = load double, double* %73, align 8, !tbaa !33
  %75 = getelementptr inbounds double, double* %5, i64 %65
  %76 = load double, double* %75, align 8, !tbaa !33
  %77 = getelementptr inbounds i32, i32* %9, i64 %indvars.iv33
  %78 = load i32, i32* %77, align 4, !tbaa !1
  %79 = load i32, i32* %51, align 8
  %80 = mul nsw i32 %79, %78
  %81 = load double*, double** %52, align 8
  %82 = insertelement <2 x double> undef, double %76, i32 0
  %83 = insertelement <2 x double> %82, double %74, i32 1
  br label %99

._crit_edge.loopexit:                             ; preds = %166
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %58
  %fiz.0.lcssa = phi double [ 0.000000e+00, %58 ], [ %fiz.1, %._crit_edge.loopexit ]
  %84 = phi <2 x double> [ %59, %58 ], [ %167, %._crit_edge.loopexit ]
  %85 = phi <2 x double> [ zeroinitializer, %58 ], [ %168, %._crit_edge.loopexit ]
  %86 = getelementptr inbounds double, double* %7, i64 %65
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = extractelement <2 x double> %85, i32 0
  %89 = fadd double %88, %87
  store double %89, double* %86, align 8, !tbaa !33
  %90 = getelementptr inbounds double, double* %7, i64 %67
  %91 = load double, double* %90, align 8, !tbaa !33
  %92 = extractelement <2 x double> %85, i32 1
  %93 = fadd double %92, %91
  store double %93, double* %90, align 8, !tbaa !33
  %94 = getelementptr inbounds double, double* %7, i64 %69
  %95 = load double, double* %94, align 8, !tbaa !33
  %96 = fadd double %fiz.0.lcssa, %95
  store double %96, double* %94, align 8, !tbaa !33
  %97 = add nsw i32 %.omp.iv2.021, 1
  %98 = icmp slt i64 %indvars.iv33, %57
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, 1
  br i1 %98, label %58, label %._crit_edge26.loopexit

; <label>:99                                      ; preds = %166, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %166 ]
  %fiz.012 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %166 ]
  %100 = phi <2 x double> [ %59, %.lr.ph ], [ %167, %166 ]
  %101 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %168, %166 ]
  %102 = getelementptr inbounds i32, i32* %61, i64 %indvars.iv
  %103 = load i32, i32* %102, align 4, !tbaa !1
  %104 = mul nsw i32 %103, 3
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %5, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = add nsw i32 %104, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, double* %5, i64 %109
  %111 = load double, double* %110, align 8, !tbaa !33
  %112 = insertelement <2 x double> undef, double %107, i32 0
  %113 = insertelement <2 x double> %112, double %111, i32 1
  %114 = fsub <2 x double> %83, %113
  %115 = add nsw i32 %104, 2
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds double, double* %5, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !33
  %119 = fsub double %71, %118
  %120 = sext i32 %103 to i64
  %121 = getelementptr inbounds i32, i32* %9, i64 %120
  %122 = load i32, i32* %121, align 4, !tbaa !1
  %123 = extractelement <2 x double> %114, i32 0
  %124 = fmul double %123, %123
  %125 = extractelement <2 x double> %114, i32 1
  %126 = fmul double %125, %125
  %127 = fadd double %124, %126
  %128 = fmul double %119, %119
  %129 = fadd double %127, %128
  %130 = add nsw i32 %80, %122
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds double, double* %81, i64 %131
  %133 = load double, double* %132, align 8, !tbaa !33
  %134 = fcmp olt double %129, %133
  br i1 %134, label %135, label %166

; <label>:135                                     ; preds = %99
  %136 = fdiv double 1.000000e+00, %129
  %137 = fmul double %136, %136
  %138 = fmul double %136, %137
  %139 = load double*, double** %53, align 8, !tbaa !116
  %140 = getelementptr inbounds double, double* %139, i64 %131
  %141 = load double, double* %140, align 8, !tbaa !33
  %142 = fmul double %138, %141
  %143 = fmul double %142, 4.800000e+01
  %144 = fadd double %142, -5.000000e-01
  %145 = fmul double %143, %144
  %146 = fmul double %136, %145
  %147 = load double*, double** %54, align 8, !tbaa !117
  %148 = getelementptr inbounds double, double* %147, i64 %131
  %149 = load double, double* %148, align 8, !tbaa !33
  %150 = fadd double %142, -1.000000e+00
  %151 = insertelement <2 x double> undef, double %149, i32 0
  %152 = insertelement <2 x double> %151, double %150, i32 1
  %153 = insertelement <2 x double> undef, double %146, i32 0
  %154 = insertelement <2 x double> %153, double %142, i32 1
  %155 = fmul <2 x double> %152, %154
  %156 = extractelement <2 x double> %155, i32 0
  %157 = shufflevector <2 x double> %155, <2 x double> undef, <2 x i32> zeroinitializer
  %158 = fmul <2 x double> %114, %157
  %159 = fadd <2 x double> %101, %158
  %160 = fmul double %119, %156
  %161 = fadd double %fiz.012, %160
  %162 = insertelement <2 x double> undef, double %129, i32 0
  %163 = insertelement <2 x double> %162, double %149, i32 1
  %164 = fmul <2 x double> %163, %155
  %165 = fadd <2 x double> %100, %164
  br label %166

; <label>:166                                     ; preds = %135, %99
  %fiz.1 = phi double [ %161, %135 ], [ %fiz.012, %99 ]
  %167 = phi <2 x double> [ %165, %135 ], [ %100, %99 ]
  %168 = phi <2 x double> [ %159, %135 ], [ %101, %99 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %63
  br i1 %exitcond, label %._crit_edge.loopexit, label %99

._crit_edge26.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26.loopexit, %._crit_edge32
  %169 = phi <2 x double> [ zeroinitializer, %._crit_edge32 ], [ %84, %._crit_edge26.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %174

.critedge:                                        ; preds = %0
  %170 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.end(i64 4, i8* %170) #7
  %171 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %171) #7
  %172 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.end(i64 4, i8* %172) #7
  %173 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.end(i64 4, i8* %173) #7
  tail call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %.pre = bitcast i32* %.omp.is_last8 to i8*
  %.pre37 = bitcast i32* %.omp.stride7 to i8*
  %.pre39 = bitcast i32* %.omp.ub6 to i8*
  %.pre41 = bitcast i32* %.omp.lb5 to i8*
  br label %174

; <label>:174                                     ; preds = %.critedge, %._crit_edge26
  %.pre-phi42 = phi i8* [ %.pre41, %.critedge ], [ %36, %._crit_edge26 ]
  %.pre-phi40 = phi i8* [ %.pre39, %.critedge ], [ %37, %._crit_edge26 ]
  %.pre-phi38 = phi i8* [ %.pre37, %.critedge ], [ %38, %._crit_edge26 ]
  %.pre-phi = phi i8* [ %.pre, %.critedge ], [ %39, %._crit_edge26 ]
  %175 = phi <2 x double> [ zeroinitializer, %.critedge ], [ %169, %._crit_edge26 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi38) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi40) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi42) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %176 = extractelement <2 x double> %175, i32 1
  %177 = fmul double %176, 4.000000e+00
  %178 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %179 = bitcast double* %178 to i64*
  %180 = load atomic i64, i64* %179 monotonic, align 8, !tbaa !33
  br label %181

; <label>:181                                     ; preds = %181, %174
  %182 = phi i64 [ %180, %174 ], [ %187, %181 ]
  %183 = bitcast i64 %182 to double
  %184 = fadd double %177, %183
  %185 = bitcast double %184 to i64
  %186 = cmpxchg i64* %179, i64 %182, i64 %185 monotonic monotonic
  %187 = extractvalue { i64, i1 } %186, 0
  %188 = extractvalue { i64, i1 } %186, 1
  br i1 %188, label %189, label %181

; <label>:189                                     ; preds = %181
  %190 = extractelement <2 x double> %175, i32 0
  %191 = fmul double %190, 5.000000e-01
  %192 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %193 = bitcast double* %192 to i64*
  %194 = load atomic i64, i64* %193 monotonic, align 8, !tbaa !33
  br label %195

; <label>:195                                     ; preds = %195, %189
  %196 = phi i64 [ %194, %189 ], [ %201, %195 ]
  %197 = bitcast i64 %196 to double
  %198 = fadd double %191, %197
  %199 = bitcast double %198 to i64
  %200 = cmpxchg i64* %193, i64 %196, i64 %199 monotonic monotonic
  %201 = extractvalue { i64, i1 } %200, 0
  %202 = extractvalue { i64, i1 } %200, 1
  br i1 %202, label %203, label %195

; <label>:203                                     ; preds = %195
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ16compute_originalILi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  store double 0.000000e+00, double* %12, align 8, !tbaa !112
  %13 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  store double 0.000000e+00, double* %13, align 8, !tbaa !113
  %14 = icmp sgt i32 %5, 0
  br i1 %14, label %.lr.ph8.preheader, label %.preheader

.lr.ph8.preheader:                                ; preds = %0
  %15 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph8.preheader.split, label %.lr.ph8.prol.preheader

.lr.ph8.prol.preheader:                           ; preds = %.lr.ph8.preheader
  br label %.lr.ph8.prol

.lr.ph8.prol:                                     ; preds = %.lr.ph8.prol, %.lr.ph8.prol.preheader
  %indvars.iv13.prol = phi i64 [ %indvars.iv.next14.prol, %.lr.ph8.prol ], [ 0, %.lr.ph8.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph8.prol ], [ %xtraiter, %.lr.ph8.prol.preheader ]
  %16 = mul nuw nsw i64 %indvars.iv13.prol, 3
  %17 = getelementptr inbounds double, double* %9, i64 %16
  %18 = bitcast double* %17 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %18, align 8, !tbaa !33
  %19 = add nuw nsw i64 %16, 2
  %20 = getelementptr inbounds double, double* %9, i64 %19
  store double 0.000000e+00, double* %20, align 8, !tbaa !33
  %indvars.iv.next14.prol = add nuw nsw i64 %indvars.iv13.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph8.preheader.split.loopexit, label %.lr.ph8.prol, !llvm.loop !124

.lr.ph8.preheader.split.loopexit:                 ; preds = %.lr.ph8.prol
  br label %.lr.ph8.preheader.split

.lr.ph8.preheader.split:                          ; preds = %.lr.ph8.preheader.split.loopexit, %.lr.ph8.preheader
  %indvars.iv13.unr = phi i64 [ 0, %.lr.ph8.preheader ], [ %indvars.iv.next14.prol, %.lr.ph8.preheader.split.loopexit ]
  %21 = icmp ult i32 %15, 3
  br i1 %21, label %.preheader.loopexit, label %.lr.ph8.preheader.split.split

.lr.ph8.preheader.split.split:                    ; preds = %.lr.ph8.preheader.split
  br label %.lr.ph8

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph8
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph8.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %22 = icmp sgt i32 %2, 0
  br i1 %22, label %.lr.ph4, label %._crit_edge5

.lr.ph4:                                          ; preds = %.preheader
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %31 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %32 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %33 = sext i32 %24 to i64
  br label %54

.lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader.split.split
  %indvars.iv13 = phi i64 [ %indvars.iv13.unr, %.lr.ph8.preheader.split.split ], [ %indvars.iv.next14.3, %.lr.ph8 ]
  %34 = mul i64 %indvars.iv13, 3
  %35 = getelementptr inbounds double, double* %9, i64 %34
  %36 = bitcast double* %35 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %36, align 8, !tbaa !33
  %37 = add nuw nsw i64 %34, 2
  %38 = getelementptr inbounds double, double* %9, i64 %37
  store double 0.000000e+00, double* %38, align 8, !tbaa !33
  %39 = add i64 %34, 3
  %40 = getelementptr inbounds double, double* %9, i64 %39
  %41 = bitcast double* %40 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %41, align 8, !tbaa !33
  %42 = add i64 %34, 5
  %43 = getelementptr inbounds double, double* %9, i64 %42
  store double 0.000000e+00, double* %43, align 8, !tbaa !33
  %44 = add i64 %34, 6
  %45 = getelementptr inbounds double, double* %9, i64 %44
  %46 = bitcast double* %45 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %46, align 8, !tbaa !33
  %47 = add i64 %34, 8
  %48 = getelementptr inbounds double, double* %9, i64 %47
  store double 0.000000e+00, double* %48, align 8, !tbaa !33
  %49 = add i64 %34, 9
  %50 = getelementptr inbounds double, double* %9, i64 %49
  %51 = bitcast double* %50 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %51, align 8, !tbaa !33
  %52 = add i64 %34, 11
  %53 = getelementptr inbounds double, double* %9, i64 %52
  store double 0.000000e+00, double* %53, align 8, !tbaa !33
  %indvars.iv.next14.3 = add nsw i64 %indvars.iv13, 4
  %lftr.wideiv15.3 = trunc i64 %indvars.iv.next14.3 to i32
  %exitcond16.3 = icmp eq i32 %lftr.wideiv15.3, %5
  br i1 %exitcond16.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph8

._crit_edge5.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit, %.preheader
  ret void

; <label>:54                                      ; preds = %._crit_edge, %.lr.ph4
  %indvars.iv9 = phi i64 [ 0, %.lr.ph4 ], [ %indvars.iv.next10, %._crit_edge ]
  %55 = mul nsw i64 %33, %indvars.iv9
  %56 = getelementptr inbounds i32, i32* %26, i64 %55
  %57 = getelementptr inbounds i32, i32* %28, i64 %indvars.iv9
  %58 = load i32, i32* %57, align 4, !tbaa !1
  %59 = mul nuw nsw i64 %indvars.iv9, 3
  %60 = getelementptr inbounds double, double* %7, i64 %59
  %61 = bitcast double* %60 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8, !tbaa !33
  %63 = add nuw nsw i64 %59, 2
  %64 = getelementptr inbounds double, double* %7, i64 %63
  %65 = load double, double* %64, align 8, !tbaa !33
  %66 = icmp sgt i32 %58, 0
  br i1 %66, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %54
  %67 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv9
  %68 = load i32, i32* %67, align 4, !tbaa !1
  %69 = load i32, i32* %29, align 8
  %70 = mul nsw i32 %69, %68
  %71 = load double*, double** %30, align 8
  %72 = getelementptr inbounds double, double* %9, i64 %59
  %73 = getelementptr inbounds double, double* %9, i64 %63
  %74 = bitcast double* %72 to <2 x double>*
  br label %75

._crit_edge.loopexit:                             ; preds = %144
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %54
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %lftr.wideiv11 = trunc i64 %indvars.iv.next10 to i32
  %exitcond12 = icmp eq i32 %lftr.wideiv11, %2
  br i1 %exitcond12, label %._crit_edge5.loopexit, label %54

; <label>:75                                      ; preds = %144, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %144 ]
  %76 = getelementptr inbounds i32, i32* %56, i64 %indvars.iv
  %77 = load i32, i32* %76, align 4, !tbaa !1
  %78 = mul nsw i32 %77, 3
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %7, i64 %79
  %81 = load double, double* %80, align 8, !tbaa !33
  %82 = add nsw i32 %78, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %7, i64 %83
  %85 = load double, double* %84, align 8, !tbaa !33
  %86 = insertelement <2 x double> undef, double %81, i32 0
  %87 = insertelement <2 x double> %86, double %85, i32 1
  %88 = fsub <2 x double> %62, %87
  %89 = add nsw i32 %78, 2
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds double, double* %7, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !33
  %93 = fsub double %65, %92
  %94 = sext i32 %77 to i64
  %95 = getelementptr inbounds i32, i32* %11, i64 %94
  %96 = load i32, i32* %95, align 4, !tbaa !1
  %97 = extractelement <2 x double> %88, i32 0
  %98 = fmul double %97, %97
  %99 = extractelement <2 x double> %88, i32 1
  %100 = fmul double %99, %99
  %101 = fadd double %98, %100
  %102 = fmul double %93, %93
  %103 = fadd double %101, %102
  %104 = add nsw i32 %70, %96
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %71, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fcmp olt double %103, %107
  br i1 %108, label %109, label %144

; <label>:109                                     ; preds = %75
  %110 = fdiv double 1.000000e+00, %103
  %111 = fmul double %110, %110
  %112 = fmul double %110, %111
  %113 = load double*, double** %31, align 8, !tbaa !116
  %114 = getelementptr inbounds double, double* %113, i64 %105
  %115 = load double, double* %114, align 8, !tbaa !33
  %116 = fmul double %112, %115
  %117 = fmul double %116, 4.800000e+01
  %118 = fadd double %116, -5.000000e-01
  %119 = fmul double %117, %118
  %120 = fmul double %110, %119
  %121 = load double*, double** %32, align 8, !tbaa !117
  %122 = getelementptr inbounds double, double* %121, i64 %105
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fmul double %123, %120
  %125 = insertelement <2 x double> undef, double %124, i32 0
  %126 = insertelement <2 x double> %125, double %124, i32 1
  %127 = fmul <2 x double> %88, %126
  %128 = load <2 x double>, <2 x double>* %74, align 8, !tbaa !33
  %129 = fadd <2 x double> %128, %127
  store <2 x double> %129, <2 x double>* %74, align 8, !tbaa !33
  %130 = fmul double %93, %124
  %131 = load double, double* %73, align 8, !tbaa !33
  %132 = fadd double %130, %131
  store double %132, double* %73, align 8, !tbaa !33
  %133 = getelementptr inbounds double, double* %9, i64 %79
  %134 = load double, double* %133, align 8, !tbaa !33
  %135 = extractelement <2 x double> %127, i32 0
  %136 = fsub double %134, %135
  store double %136, double* %133, align 8, !tbaa !33
  %137 = getelementptr inbounds double, double* %9, i64 %83
  %138 = load double, double* %137, align 8, !tbaa !33
  %139 = extractelement <2 x double> %127, i32 1
  %140 = fsub double %138, %139
  store double %140, double* %137, align 8, !tbaa !33
  %141 = getelementptr inbounds double, double* %9, i64 %90
  %142 = load double, double* %141, align 8, !tbaa !33
  %143 = fsub double %142, %130
  store double %143, double* %141, align 8, !tbaa !33
  br label %144

; <label>:144                                     ; preds = %109, %75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %58
  br i1 %exitcond, label %._crit_edge.loopexit, label %75
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !114
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %8 = load double*, double** %7, align 8, !tbaa !100
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %10 = load double*, double** %9, align 8, !tbaa !80
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %12 = load i32*, i32** %11, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %13 = add nsw i32 %6, -1
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %._crit_edge36

._crit_edge36:                                    ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre37 = bitcast i32* %.omp.stride to i8*
  %.pre39 = bitcast i32* %.omp.ub to i8*
  %.pre41 = bitcast i32* %.omp.lb to i8*
  br label %39

; <label>:15                                      ; preds = %0
  %16 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %17 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #7
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %18 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %19 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %20 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %13
  %22 = select i1 %21, i32 %13, i32 %20
  store i32 %22, i32* %.omp.ub, align 4, !tbaa !1
  %23 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %24 = icmp sgt i32 %23, %22
  br i1 %24, label %._crit_edge30, label %.lr.ph29

.lr.ph29:                                         ; preds = %15
  %25 = sext i32 %23 to i64
  %26 = sext i32 %22 to i64
  br label %27

; <label>:27                                      ; preds = %27, %.lr.ph29
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %27 ], [ %25, %.lr.ph29 ]
  %.omp.iv.027 = phi i32 [ %37, %27 ], [ %23, %.lr.ph29 ]
  %28 = mul nsw i32 %.omp.iv.027, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %10, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %28, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %10, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %28, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %10, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add nsw i32 %.omp.iv.027, 1
  %38 = icmp slt i64 %indvars.iv33, %26
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, 1
  br i1 %38, label %27, label %._crit_edge30.loopexit

._crit_edge30.loopexit:                           ; preds = %27
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %15
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %39

; <label>:39                                      ; preds = %._crit_edge30, %._crit_edge36
  %.pre-phi42 = phi i8* [ %.pre41, %._crit_edge36 ], [ %16, %._crit_edge30 ]
  %.pre-phi40 = phi i8* [ %.pre39, %._crit_edge36 ], [ %17, %._crit_edge30 ]
  %.pre-phi38 = phi i8* [ %.pre37, %._crit_edge36 ], [ %18, %._crit_edge30 ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge36 ], [ %19, %._crit_edge30 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi38) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi40) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi42) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %40 = add nsw i32 %3, -1
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge35

._crit_edge35:                                    ; preds = %39
  %.pre43 = bitcast i32* %.omp.is_last8 to i8*
  %.pre45 = bitcast i32* %.omp.stride7 to i8*
  %.pre47 = bitcast i32* %.omp.ub6 to i8*
  %.pre49 = bitcast i32* %.omp.lb5 to i8*
  br label %214

; <label>:42                                      ; preds = %39
  %43 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #7
  store i32 %40, i32* %.omp.ub6, align 4, !tbaa !1
  %45 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %46 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %46) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %47 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %48 = icmp sgt i32 %47, %40
  %49 = select i1 %48, i32 %40, i32 %47
  store i32 %49, i32* %.omp.ub6, align 4, !tbaa !1
  %50 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %51 = icmp sgt i32 %50, %49
  br i1 %51, label %._crit_edge26, label %.lr.ph25

.lr.ph25:                                         ; preds = %42
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %54 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %56 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %58 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %59 = sext i32 %50 to i64
  %60 = sext i32 %49 to i64
  br label %61

; <label>:61                                      ; preds = %211, %.lr.ph25
  %indvars.iv31 = phi i64 [ %indvars.iv.next32, %211 ], [ %59, %.lr.ph25 ]
  %.omp.iv2.023 = phi i32 [ %212, %211 ], [ %50, %.lr.ph25 ]
  %62 = load i32, i32* %52, align 8, !tbaa !118
  %63 = trunc i64 %indvars.iv31 to i32
  %64 = mul nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = load i32*, i32** %53, align 8, !tbaa !119
  %67 = getelementptr inbounds i32, i32* %66, i64 %65
  %68 = load i32*, i32** %54, align 8, !tbaa !120
  %69 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv31
  %70 = load i32, i32* %69, align 4, !tbaa !1
  %71 = mul nsw i32 %.omp.iv2.023, 3
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %8, i64 %72
  %74 = load double, double* %73, align 8, !tbaa !33
  %75 = add nsw i32 %71, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds double, double* %8, i64 %76
  %78 = load double, double* %77, align 8, !tbaa !33
  %79 = add nsw i32 %71, 2
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds double, double* %8, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !33
  %83 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv31
  %84 = load i32, i32* %83, align 4, !tbaa !1
  %85 = icmp sgt i32 %70, 0
  br i1 %85, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %61
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fix.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fix.1, %._crit_edge.loopexit ]
  %fiy.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiy.1, %._crit_edge.loopexit ]
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %86 = getelementptr inbounds double, double* %10, i64 %72
  %87 = bitcast double* %86 to i64*
  %88 = load atomic i64, i64* %87 monotonic, align 8, !tbaa !33
  br label %179

.lr.ph:                                           ; preds = %.loopexit, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.loopexit ], [ 0, %.lr.ph.preheader ]
  %fix.020 = phi double [ %fix.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiy.019 = phi double [ %fiy.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiz.018 = phi double [ %fiz.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %89 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv
  %90 = load i32, i32* %89, align 4, !tbaa !1
  %91 = mul nsw i32 %90, 3
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double, double* %8, i64 %92
  %94 = load double, double* %93, align 8, !tbaa !33
  %95 = fsub double %74, %94
  %96 = add nsw i32 %91, 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds double, double* %8, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !33
  %100 = fsub double %78, %99
  %101 = add nsw i32 %91, 2
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %8, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !33
  %105 = fsub double %82, %104
  %106 = sext i32 %90 to i64
  %107 = getelementptr inbounds i32, i32* %12, i64 %106
  %108 = load i32, i32* %107, align 4, !tbaa !1
  %109 = fmul double %95, %95
  %110 = fmul double %100, %100
  %111 = fadd double %109, %110
  %112 = fmul double %105, %105
  %113 = fadd double %111, %112
  %114 = load i32, i32* %55, align 8, !tbaa !110
  %115 = mul nsw i32 %114, %84
  %116 = add nsw i32 %115, %108
  %117 = sext i32 %116 to i64
  %118 = load double*, double** %56, align 8, !tbaa !121
  %119 = getelementptr inbounds double, double* %118, i64 %117
  %120 = load double, double* %119, align 8, !tbaa !33
  %121 = fcmp olt double %113, %120
  br i1 %121, label %122, label %.loopexit

; <label>:122                                     ; preds = %.lr.ph
  %123 = fdiv double 1.000000e+00, %113
  %124 = fmul double %123, %123
  %125 = fmul double %123, %124
  %126 = load double*, double** %57, align 8, !tbaa !116
  %127 = getelementptr inbounds double, double* %126, i64 %117
  %128 = load double, double* %127, align 8, !tbaa !33
  %129 = fmul double %125, %128
  %130 = fmul double %129, 4.800000e+01
  %131 = fadd double %129, -5.000000e-01
  %132 = fmul double %130, %131
  %133 = fmul double %123, %132
  %134 = load double*, double** %58, align 8, !tbaa !117
  %135 = getelementptr inbounds double, double* %134, i64 %117
  %136 = load double, double* %135, align 8, !tbaa !33
  %137 = fmul double %136, %133
  %138 = fmul double %95, %137
  %139 = fmul double %100, %137
  %140 = fmul double %105, %137
  %141 = getelementptr inbounds double, double* %10, i64 %92
  %142 = bitcast double* %141 to i64*
  %143 = load atomic i64, i64* %142 monotonic, align 8, !tbaa !33
  br label %144

; <label>:144                                     ; preds = %144, %122
  %145 = phi i64 [ %143, %122 ], [ %150, %144 ]
  %146 = bitcast i64 %145 to double
  %147 = fsub double %146, %138
  %148 = bitcast double %147 to i64
  %149 = cmpxchg i64* %142, i64 %145, i64 %148 monotonic monotonic
  %150 = extractvalue { i64, i1 } %149, 0
  %151 = extractvalue { i64, i1 } %149, 1
  br i1 %151, label %152, label %144

; <label>:152                                     ; preds = %144
  %153 = fadd double %fiy.019, %139
  %154 = getelementptr inbounds double, double* %10, i64 %97
  %155 = bitcast double* %154 to i64*
  %156 = load atomic i64, i64* %155 monotonic, align 8, !tbaa !33
  br label %157

; <label>:157                                     ; preds = %157, %152
  %158 = phi i64 [ %156, %152 ], [ %163, %157 ]
  %159 = bitcast i64 %158 to double
  %160 = fsub double %159, %139
  %161 = bitcast double %160 to i64
  %162 = cmpxchg i64* %155, i64 %158, i64 %161 monotonic monotonic
  %163 = extractvalue { i64, i1 } %162, 0
  %164 = extractvalue { i64, i1 } %162, 1
  br i1 %164, label %165, label %157

; <label>:165                                     ; preds = %157
  %166 = fadd double %fix.020, %138
  %167 = getelementptr inbounds double, double* %10, i64 %102
  %168 = bitcast double* %167 to i64*
  %169 = load atomic i64, i64* %168 monotonic, align 8, !tbaa !33
  br label %170

; <label>:170                                     ; preds = %170, %165
  %171 = phi i64 [ %169, %165 ], [ %176, %170 ]
  %172 = bitcast i64 %171 to double
  %173 = fsub double %172, %140
  %174 = bitcast double %173 to i64
  %175 = cmpxchg i64* %168, i64 %171, i64 %174 monotonic monotonic
  %176 = extractvalue { i64, i1 } %175, 0
  %177 = extractvalue { i64, i1 } %175, 1
  br i1 %177, label %.loopexit.loopexit, label %170

.loopexit.loopexit:                               ; preds = %170
  %178 = fadd double %fiz.018, %140
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.lr.ph
  %fiz.1 = phi double [ %fiz.018, %.lr.ph ], [ %178, %.loopexit.loopexit ]
  %fiy.1 = phi double [ %fiy.019, %.lr.ph ], [ %153, %.loopexit.loopexit ]
  %fix.1 = phi double [ %fix.020, %.lr.ph ], [ %166, %.loopexit.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %70
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:179                                     ; preds = %179, %._crit_edge
  %180 = phi i64 [ %88, %._crit_edge ], [ %185, %179 ]
  %181 = bitcast i64 %180 to double
  %182 = fadd double %fix.0.lcssa, %181
  %183 = bitcast double %182 to i64
  %184 = cmpxchg i64* %87, i64 %180, i64 %183 monotonic monotonic
  %185 = extractvalue { i64, i1 } %184, 0
  %186 = extractvalue { i64, i1 } %184, 1
  br i1 %186, label %187, label %179

; <label>:187                                     ; preds = %179
  %188 = getelementptr inbounds double, double* %10, i64 %76
  %189 = bitcast double* %188 to i64*
  %190 = load atomic i64, i64* %189 monotonic, align 8, !tbaa !33
  br label %191

; <label>:191                                     ; preds = %191, %187
  %192 = phi i64 [ %190, %187 ], [ %197, %191 ]
  %193 = bitcast i64 %192 to double
  %194 = fadd double %fiy.0.lcssa, %193
  %195 = bitcast double %194 to i64
  %196 = cmpxchg i64* %189, i64 %192, i64 %195 monotonic monotonic
  %197 = extractvalue { i64, i1 } %196, 0
  %198 = extractvalue { i64, i1 } %196, 1
  br i1 %198, label %199, label %191

; <label>:199                                     ; preds = %191
  %200 = getelementptr inbounds double, double* %10, i64 %80
  %201 = bitcast double* %200 to i64*
  %202 = load atomic i64, i64* %201 monotonic, align 8, !tbaa !33
  br label %203

; <label>:203                                     ; preds = %203, %199
  %204 = phi i64 [ %202, %199 ], [ %209, %203 ]
  %205 = bitcast i64 %204 to double
  %206 = fadd double %fiz.0.lcssa, %205
  %207 = bitcast double %206 to i64
  %208 = cmpxchg i64* %201, i64 %204, i64 %207 monotonic monotonic
  %209 = extractvalue { i64, i1 } %208, 0
  %210 = extractvalue { i64, i1 } %208, 1
  br i1 %210, label %211, label %203

; <label>:211                                     ; preds = %203
  %212 = add nsw i32 %.omp.iv2.023, 1
  %213 = icmp slt i64 %indvars.iv31, %60
  %indvars.iv.next32 = add i64 %indvars.iv31, 1
  br i1 %213, label %61, label %._crit_edge26.loopexit

._crit_edge26.loopexit:                           ; preds = %211
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26.loopexit, %42
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %214

; <label>:214                                     ; preds = %._crit_edge26, %._crit_edge35
  %.pre-phi50 = phi i8* [ %.pre49, %._crit_edge35 ], [ %43, %._crit_edge26 ]
  %.pre-phi48 = phi i8* [ %.pre47, %._crit_edge35 ], [ %44, %._crit_edge26 ]
  %.pre-phi46 = phi i8* [ %.pre45, %._crit_edge35 ], [ %45, %._crit_edge26 ]
  %.pre-phi44 = phi i8* [ %.pre43, %._crit_edge35 ], [ %46, %._crit_edge26 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi44) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi46) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi48) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi50) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %215 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %216 = bitcast double* %215 to i64*
  %217 = load atomic i64, i64* %216 monotonic, align 8, !tbaa !33
  br label %218

; <label>:218                                     ; preds = %218, %214
  %219 = phi i64 [ %217, %214 ], [ %224, %218 ]
  %220 = bitcast i64 %219 to double
  %221 = fadd double %220, 0.000000e+00
  %222 = bitcast double %221 to i64
  %223 = cmpxchg i64* %216, i64 %219, i64 %222 monotonic monotonic
  %224 = extractvalue { i64, i1 } %223, 0
  %225 = extractvalue { i64, i1 } %223, 1
  br i1 %225, label %226, label %218

; <label>:226                                     ; preds = %218
  %227 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %228 = bitcast double* %227 to i64*
  %229 = load atomic i64, i64* %228 monotonic, align 8, !tbaa !33
  br label %230

; <label>:230                                     ; preds = %230, %226
  %231 = phi i64 [ %229, %226 ], [ %236, %230 ]
  %232 = bitcast i64 %231 to double
  %233 = fadd double %232, 0.000000e+00
  %234 = bitcast double %233 to i64
  %235 = cmpxchg i64* %228, i64 %231, i64 %234 monotonic monotonic
  %236 = extractvalue { i64, i1 } %235, 0
  %237 = extractvalue { i64, i1 } %235, 1
  br i1 %237, label %238, label %230

; <label>:238                                     ; preds = %230
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_halfneighILi0ELi1EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %.lr.ph13.preheader, label %.preheader

.lr.ph13.preheader:                               ; preds = %0
  %13 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph13.preheader.split, label %.lr.ph13.prol.preheader

.lr.ph13.prol.preheader:                          ; preds = %.lr.ph13.preheader
  br label %.lr.ph13.prol

.lr.ph13.prol:                                    ; preds = %.lr.ph13.prol, %.lr.ph13.prol.preheader
  %indvars.iv18.prol = phi i64 [ %indvars.iv.next19.prol, %.lr.ph13.prol ], [ 0, %.lr.ph13.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph13.prol ], [ %xtraiter, %.lr.ph13.prol.preheader ]
  %14 = mul nuw nsw i64 %indvars.iv18.prol, 3
  %15 = getelementptr inbounds double, double* %9, i64 %14
  %16 = bitcast double* %15 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %16, align 8, !tbaa !33
  %17 = add nuw nsw i64 %14, 2
  %18 = getelementptr inbounds double, double* %9, i64 %17
  store double 0.000000e+00, double* %18, align 8, !tbaa !33
  %indvars.iv.next19.prol = add nuw nsw i64 %indvars.iv18.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph13.preheader.split.loopexit, label %.lr.ph13.prol, !llvm.loop !125

.lr.ph13.preheader.split.loopexit:                ; preds = %.lr.ph13.prol
  br label %.lr.ph13.preheader.split

.lr.ph13.preheader.split:                         ; preds = %.lr.ph13.preheader.split.loopexit, %.lr.ph13.preheader
  %indvars.iv18.unr = phi i64 [ 0, %.lr.ph13.preheader ], [ %indvars.iv.next19.prol, %.lr.ph13.preheader.split.loopexit ]
  %19 = icmp ult i32 %13, 3
  br i1 %19, label %.preheader.loopexit, label %.lr.ph13.preheader.split.split

.lr.ph13.preheader.split.split:                   ; preds = %.lr.ph13.preheader.split
  br label %.lr.ph13

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph13
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph13.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %20 = icmp sgt i32 %2, 0
  br i1 %20, label %.lr.ph9, label %._crit_edge10

.lr.ph9:                                          ; preds = %.preheader
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %28 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %31 = sext i32 %22 to i64
  br label %58

.lr.ph13:                                         ; preds = %.lr.ph13, %.lr.ph13.preheader.split.split
  %indvars.iv18 = phi i64 [ %indvars.iv18.unr, %.lr.ph13.preheader.split.split ], [ %indvars.iv.next19.3, %.lr.ph13 ]
  %32 = mul i64 %indvars.iv18, 3
  %33 = getelementptr inbounds double, double* %9, i64 %32
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %34, align 8, !tbaa !33
  %35 = add nuw nsw i64 %32, 2
  %36 = getelementptr inbounds double, double* %9, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add i64 %32, 3
  %38 = getelementptr inbounds double, double* %9, i64 %37
  %39 = bitcast double* %38 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %39, align 8, !tbaa !33
  %40 = add i64 %32, 5
  %41 = getelementptr inbounds double, double* %9, i64 %40
  store double 0.000000e+00, double* %41, align 8, !tbaa !33
  %42 = add i64 %32, 6
  %43 = getelementptr inbounds double, double* %9, i64 %42
  %44 = bitcast double* %43 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %44, align 8, !tbaa !33
  %45 = add i64 %32, 8
  %46 = getelementptr inbounds double, double* %9, i64 %45
  store double 0.000000e+00, double* %46, align 8, !tbaa !33
  %47 = add i64 %32, 9
  %48 = getelementptr inbounds double, double* %9, i64 %47
  %49 = bitcast double* %48 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8, !tbaa !33
  %50 = add i64 %32, 11
  %51 = getelementptr inbounds double, double* %9, i64 %50
  store double 0.000000e+00, double* %51, align 8, !tbaa !33
  %indvars.iv.next19.3 = add nsw i64 %indvars.iv18, 4
  %lftr.wideiv20.3 = trunc i64 %indvars.iv.next19.3 to i32
  %exitcond21.3 = icmp eq i32 %lftr.wideiv20.3, %5
  br i1 %exitcond21.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph13

._crit_edge10.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %.preheader
  %52 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %53 = load double, double* %52, align 8, !tbaa !112
  %54 = fadd double %53, 0.000000e+00
  store double %54, double* %52, align 8, !tbaa !112
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %56 = load double, double* %55, align 8, !tbaa !113
  %57 = fadd double %56, 0.000000e+00
  store double %57, double* %55, align 8, !tbaa !113
  ret void

; <label>:58                                      ; preds = %._crit_edge, %.lr.ph9
  %indvars.iv14 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next15, %._crit_edge ]
  %59 = mul nsw i64 %31, %indvars.iv14
  %60 = getelementptr inbounds i32, i32* %24, i64 %59
  %61 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv14
  %62 = load i32, i32* %61, align 4, !tbaa !1
  %63 = mul nuw nsw i64 %indvars.iv14, 3
  %64 = getelementptr inbounds double, double* %7, i64 %63
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !tbaa !33
  %67 = add nuw nsw i64 %63, 2
  %68 = getelementptr inbounds double, double* %7, i64 %67
  %69 = load double, double* %68, align 8, !tbaa !33
  %70 = icmp sgt i32 %62, 0
  br i1 %70, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %58
  %71 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv14
  %72 = load i32, i32* %71, align 4, !tbaa !1
  %73 = load i32, i32* %27, align 8
  %74 = mul nsw i32 %73, %72
  %75 = load double*, double** %28, align 8
  br label %84

._crit_edge.loopexit:                             ; preds = %152
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %58
  %fiz.0.lcssa = phi double [ 0.000000e+00, %58 ], [ %fiz.1, %._crit_edge.loopexit ]
  %76 = phi <2 x double> [ zeroinitializer, %58 ], [ %153, %._crit_edge.loopexit ]
  %77 = getelementptr inbounds double, double* %9, i64 %63
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8, !tbaa !33
  %80 = fadd <2 x double> %76, %79
  store <2 x double> %80, <2 x double>* %78, align 8, !tbaa !33
  %81 = getelementptr inbounds double, double* %9, i64 %67
  %82 = load double, double* %81, align 8, !tbaa !33
  %83 = fadd double %fiz.0.lcssa, %82
  store double %83, double* %81, align 8, !tbaa !33
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %lftr.wideiv16 = trunc i64 %indvars.iv.next15 to i32
  %exitcond17 = icmp eq i32 %lftr.wideiv16, %2
  br i1 %exitcond17, label %._crit_edge10.loopexit, label %58

; <label>:84                                      ; preds = %152, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %152 ]
  %fiz.03 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %152 ]
  %85 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %153, %152 ]
  %86 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv
  %87 = load i32, i32* %86, align 4, !tbaa !1
  %88 = mul nsw i32 %87, 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %7, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !33
  %92 = add nsw i32 %88, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds double, double* %7, i64 %93
  %95 = load double, double* %94, align 8, !tbaa !33
  %96 = insertelement <2 x double> undef, double %91, i32 0
  %97 = insertelement <2 x double> %96, double %95, i32 1
  %98 = fsub <2 x double> %66, %97
  %99 = add nsw i32 %88, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds double, double* %7, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !33
  %103 = fsub double %69, %102
  %104 = sext i32 %87 to i64
  %105 = getelementptr inbounds i32, i32* %11, i64 %104
  %106 = load i32, i32* %105, align 4, !tbaa !1
  %107 = extractelement <2 x double> %98, i32 0
  %108 = fmul double %107, %107
  %109 = extractelement <2 x double> %98, i32 1
  %110 = fmul double %109, %109
  %111 = fadd double %108, %110
  %112 = fmul double %103, %103
  %113 = fadd double %111, %112
  %114 = add nsw i32 %74, %106
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %75, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !33
  %118 = fcmp olt double %113, %117
  br i1 %118, label %119, label %152

; <label>:119                                     ; preds = %84
  %120 = fdiv double 1.000000e+00, %113
  %121 = fmul double %120, %120
  %122 = fmul double %120, %121
  %123 = load double*, double** %29, align 8, !tbaa !116
  %124 = getelementptr inbounds double, double* %123, i64 %115
  %125 = load double, double* %124, align 8, !tbaa !33
  %126 = fmul double %122, %125
  %127 = fmul double %126, 4.800000e+01
  %128 = fadd double %126, -5.000000e-01
  %129 = fmul double %127, %128
  %130 = fmul double %120, %129
  %131 = load double*, double** %30, align 8, !tbaa !117
  %132 = getelementptr inbounds double, double* %131, i64 %115
  %133 = load double, double* %132, align 8, !tbaa !33
  %134 = fmul double %133, %130
  %135 = insertelement <2 x double> undef, double %134, i32 0
  %136 = insertelement <2 x double> %135, double %134, i32 1
  %137 = fmul <2 x double> %98, %136
  %138 = fadd <2 x double> %85, %137
  %139 = fmul double %103, %134
  %140 = fadd double %fiz.03, %139
  %141 = getelementptr inbounds double, double* %9, i64 %89
  %142 = load double, double* %141, align 8, !tbaa !33
  %143 = extractelement <2 x double> %137, i32 0
  %144 = fsub double %142, %143
  store double %144, double* %141, align 8, !tbaa !33
  %145 = getelementptr inbounds double, double* %9, i64 %93
  %146 = load double, double* %145, align 8, !tbaa !33
  %147 = extractelement <2 x double> %137, i32 1
  %148 = fsub double %146, %147
  store double %148, double* %145, align 8, !tbaa !33
  %149 = getelementptr inbounds double, double* %9, i64 %100
  %150 = load double, double* %149, align 8, !tbaa !33
  %151 = fsub double %150, %139
  store double %151, double* %149, align 8, !tbaa !33
  br label %152

; <label>:152                                     ; preds = %119, %84
  %fiz.1 = phi double [ %140, %119 ], [ %fiz.03, %84 ]
  %153 = phi <2 x double> [ %138, %119 ], [ %85, %84 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %62
  br i1 %exitcond, label %._crit_edge.loopexit, label %84
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ26compute_halfneigh_threadedILi0ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !114
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %8 = load double*, double** %7, align 8, !tbaa !100
  %9 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %10 = load double*, double** %9, align 8, !tbaa !80
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %12 = load i32*, i32** %11, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %13 = add nsw i32 %6, -1
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %._crit_edge36

._crit_edge36:                                    ; preds = %0
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre37 = bitcast i32* %.omp.stride to i8*
  %.pre39 = bitcast i32* %.omp.ub to i8*
  %.pre41 = bitcast i32* %.omp.lb to i8*
  br label %39

; <label>:15                                      ; preds = %0
  %16 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %17 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #7
  store i32 %13, i32* %.omp.ub, align 4, !tbaa !1
  %18 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %19 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %20 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %13
  %22 = select i1 %21, i32 %13, i32 %20
  store i32 %22, i32* %.omp.ub, align 4, !tbaa !1
  %23 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %24 = icmp sgt i32 %23, %22
  br i1 %24, label %._crit_edge30, label %.lr.ph29

.lr.ph29:                                         ; preds = %15
  %25 = sext i32 %23 to i64
  %26 = sext i32 %22 to i64
  br label %27

; <label>:27                                      ; preds = %27, %.lr.ph29
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %27 ], [ %25, %.lr.ph29 ]
  %.omp.iv.027 = phi i32 [ %37, %27 ], [ %23, %.lr.ph29 ]
  %28 = mul nsw i32 %.omp.iv.027, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %10, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %28, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %10, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %28, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %10, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add nsw i32 %.omp.iv.027, 1
  %38 = icmp slt i64 %indvars.iv33, %26
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, 1
  br i1 %38, label %27, label %._crit_edge30.loopexit

._crit_edge30.loopexit:                           ; preds = %27
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %15
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %39

; <label>:39                                      ; preds = %._crit_edge30, %._crit_edge36
  %.pre-phi42 = phi i8* [ %.pre41, %._crit_edge36 ], [ %16, %._crit_edge30 ]
  %.pre-phi40 = phi i8* [ %.pre39, %._crit_edge36 ], [ %17, %._crit_edge30 ]
  %.pre-phi38 = phi i8* [ %.pre37, %._crit_edge36 ], [ %18, %._crit_edge30 ]
  %.pre-phi = phi i8* [ %.pre, %._crit_edge36 ], [ %19, %._crit_edge30 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi38) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi40) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi42) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %40 = add nsw i32 %3, -1
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge35

._crit_edge35:                                    ; preds = %39
  %.pre43 = bitcast i32* %.omp.is_last8 to i8*
  %.pre45 = bitcast i32* %.omp.stride7 to i8*
  %.pre47 = bitcast i32* %.omp.ub6 to i8*
  %.pre49 = bitcast i32* %.omp.lb5 to i8*
  br label %216

; <label>:42                                      ; preds = %39
  %43 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #7
  store i32 %40, i32* %.omp.ub6, align 4, !tbaa !1
  %45 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %46 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %46) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %47 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %48 = icmp sgt i32 %47, %40
  %49 = select i1 %48, i32 %40, i32 %47
  store i32 %49, i32* %.omp.ub6, align 4, !tbaa !1
  %50 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %51 = icmp sgt i32 %50, %49
  br i1 %51, label %._crit_edge26, label %.lr.ph25

.lr.ph25:                                         ; preds = %42
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %54 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %56 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %57 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %58 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %59 = sext i32 %50 to i64
  %60 = sext i32 %49 to i64
  br label %61

; <label>:61                                      ; preds = %213, %.lr.ph25
  %indvars.iv31 = phi i64 [ %indvars.iv.next32, %213 ], [ %59, %.lr.ph25 ]
  %.omp.iv2.023 = phi i32 [ %214, %213 ], [ %50, %.lr.ph25 ]
  %62 = load i32, i32* %52, align 8, !tbaa !118
  %63 = trunc i64 %indvars.iv31 to i32
  %64 = mul nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = load i32*, i32** %53, align 8, !tbaa !119
  %67 = getelementptr inbounds i32, i32* %66, i64 %65
  %68 = load i32*, i32** %54, align 8, !tbaa !120
  %69 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv31
  %70 = load i32, i32* %69, align 4, !tbaa !1
  %71 = mul nsw i32 %.omp.iv2.023, 3
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %8, i64 %72
  %74 = load double, double* %73, align 8, !tbaa !33
  %75 = add nsw i32 %71, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds double, double* %8, i64 %76
  %78 = load double, double* %77, align 8, !tbaa !33
  %79 = add nsw i32 %71, 2
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds double, double* %8, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !33
  %83 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv31
  %84 = load i32, i32* %83, align 4, !tbaa !1
  %85 = icmp sgt i32 %70, 0
  br i1 %85, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %61
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %61
  %fix.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fix.1, %._crit_edge.loopexit ]
  %fiy.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiy.1, %._crit_edge.loopexit ]
  %fiz.0.lcssa = phi double [ 0.000000e+00, %61 ], [ %fiz.1, %._crit_edge.loopexit ]
  %86 = getelementptr inbounds double, double* %10, i64 %72
  %87 = bitcast double* %86 to i64*
  %88 = load atomic i64, i64* %87 monotonic, align 8, !tbaa !33
  br label %181

.lr.ph:                                           ; preds = %.loopexit, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.loopexit ], [ 0, %.lr.ph.preheader ]
  %fix.020 = phi double [ %fix.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiy.019 = phi double [ %fiy.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %fiz.018 = phi double [ %fiz.1, %.loopexit ], [ 0.000000e+00, %.lr.ph.preheader ]
  %89 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv
  %90 = load i32, i32* %89, align 4, !tbaa !1
  %91 = mul nsw i32 %90, 3
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double, double* %8, i64 %92
  %94 = load double, double* %93, align 8, !tbaa !33
  %95 = fsub double %74, %94
  %96 = add nsw i32 %91, 1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds double, double* %8, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !33
  %100 = fsub double %78, %99
  %101 = add nsw i32 %91, 2
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %8, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !33
  %105 = fsub double %82, %104
  %106 = sext i32 %90 to i64
  %107 = getelementptr inbounds i32, i32* %12, i64 %106
  %108 = load i32, i32* %107, align 4, !tbaa !1
  %109 = fmul double %95, %95
  %110 = fmul double %100, %100
  %111 = fadd double %109, %110
  %112 = fmul double %105, %105
  %113 = fadd double %111, %112
  %114 = load i32, i32* %55, align 8, !tbaa !110
  %115 = mul nsw i32 %114, %84
  %116 = add nsw i32 %115, %108
  %117 = sext i32 %116 to i64
  %118 = load double*, double** %56, align 8, !tbaa !121
  %119 = getelementptr inbounds double, double* %118, i64 %117
  %120 = load double, double* %119, align 8, !tbaa !33
  %121 = fcmp olt double %113, %120
  br i1 %121, label %122, label %.loopexit

; <label>:122                                     ; preds = %.lr.ph
  %123 = fdiv double 1.000000e+00, %113
  %124 = fmul double %123, %123
  %125 = fmul double %123, %124
  %126 = load double*, double** %57, align 8, !tbaa !116
  %127 = getelementptr inbounds double, double* %126, i64 %117
  %128 = load double, double* %127, align 8, !tbaa !33
  %129 = fmul double %125, %128
  %130 = fmul double %129, 4.800000e+01
  %131 = fadd double %129, -5.000000e-01
  %132 = fmul double %130, %131
  %133 = fmul double %123, %132
  %134 = load double*, double** %58, align 8, !tbaa !117
  %135 = getelementptr inbounds double, double* %134, i64 %117
  %136 = load double, double* %135, align 8, !tbaa !33
  %137 = fmul double %136, %133
  %138 = fmul double %95, %137
  %139 = fadd double %fix.020, %138
  %140 = fmul double %100, %137
  %141 = fadd double %fiy.019, %140
  %142 = fmul double %105, %137
  %143 = fadd double %fiz.018, %142
  %144 = icmp slt i32 %90, %3
  br i1 %144, label %145, label %.loopexit

; <label>:145                                     ; preds = %122
  %146 = getelementptr inbounds double, double* %10, i64 %92
  %147 = bitcast double* %146 to i64*
  %148 = load atomic i64, i64* %147 monotonic, align 8, !tbaa !33
  br label %149

; <label>:149                                     ; preds = %149, %145
  %150 = phi i64 [ %148, %145 ], [ %155, %149 ]
  %151 = bitcast i64 %150 to double
  %152 = fsub double %151, %138
  %153 = bitcast double %152 to i64
  %154 = cmpxchg i64* %147, i64 %150, i64 %153 monotonic monotonic
  %155 = extractvalue { i64, i1 } %154, 0
  %156 = extractvalue { i64, i1 } %154, 1
  br i1 %156, label %157, label %149

; <label>:157                                     ; preds = %149
  %158 = getelementptr inbounds double, double* %10, i64 %97
  %159 = bitcast double* %158 to i64*
  %160 = load atomic i64, i64* %159 monotonic, align 8, !tbaa !33
  br label %161

; <label>:161                                     ; preds = %161, %157
  %162 = phi i64 [ %160, %157 ], [ %167, %161 ]
  %163 = bitcast i64 %162 to double
  %164 = fsub double %163, %140
  %165 = bitcast double %164 to i64
  %166 = cmpxchg i64* %159, i64 %162, i64 %165 monotonic monotonic
  %167 = extractvalue { i64, i1 } %166, 0
  %168 = extractvalue { i64, i1 } %166, 1
  br i1 %168, label %169, label %161

; <label>:169                                     ; preds = %161
  %170 = getelementptr inbounds double, double* %10, i64 %102
  %171 = bitcast double* %170 to i64*
  %172 = load atomic i64, i64* %171 monotonic, align 8, !tbaa !33
  br label %173

; <label>:173                                     ; preds = %173, %169
  %174 = phi i64 [ %172, %169 ], [ %179, %173 ]
  %175 = bitcast i64 %174 to double
  %176 = fsub double %175, %142
  %177 = bitcast double %176 to i64
  %178 = cmpxchg i64* %171, i64 %174, i64 %177 monotonic monotonic
  %179 = extractvalue { i64, i1 } %178, 0
  %180 = extractvalue { i64, i1 } %178, 1
  br i1 %180, label %.loopexit.loopexit, label %173

.loopexit.loopexit:                               ; preds = %173
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %122, %.lr.ph
  %fiz.1 = phi double [ %fiz.018, %.lr.ph ], [ %143, %122 ], [ %143, %.loopexit.loopexit ]
  %fiy.1 = phi double [ %fiy.019, %.lr.ph ], [ %141, %122 ], [ %141, %.loopexit.loopexit ]
  %fix.1 = phi double [ %fix.020, %.lr.ph ], [ %139, %122 ], [ %139, %.loopexit.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %70
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:181                                     ; preds = %181, %._crit_edge
  %182 = phi i64 [ %88, %._crit_edge ], [ %187, %181 ]
  %183 = bitcast i64 %182 to double
  %184 = fadd double %fix.0.lcssa, %183
  %185 = bitcast double %184 to i64
  %186 = cmpxchg i64* %87, i64 %182, i64 %185 monotonic monotonic
  %187 = extractvalue { i64, i1 } %186, 0
  %188 = extractvalue { i64, i1 } %186, 1
  br i1 %188, label %189, label %181

; <label>:189                                     ; preds = %181
  %190 = getelementptr inbounds double, double* %10, i64 %76
  %191 = bitcast double* %190 to i64*
  %192 = load atomic i64, i64* %191 monotonic, align 8, !tbaa !33
  br label %193

; <label>:193                                     ; preds = %193, %189
  %194 = phi i64 [ %192, %189 ], [ %199, %193 ]
  %195 = bitcast i64 %194 to double
  %196 = fadd double %fiy.0.lcssa, %195
  %197 = bitcast double %196 to i64
  %198 = cmpxchg i64* %191, i64 %194, i64 %197 monotonic monotonic
  %199 = extractvalue { i64, i1 } %198, 0
  %200 = extractvalue { i64, i1 } %198, 1
  br i1 %200, label %201, label %193

; <label>:201                                     ; preds = %193
  %202 = getelementptr inbounds double, double* %10, i64 %80
  %203 = bitcast double* %202 to i64*
  %204 = load atomic i64, i64* %203 monotonic, align 8, !tbaa !33
  br label %205

; <label>:205                                     ; preds = %205, %201
  %206 = phi i64 [ %204, %201 ], [ %211, %205 ]
  %207 = bitcast i64 %206 to double
  %208 = fadd double %fiz.0.lcssa, %207
  %209 = bitcast double %208 to i64
  %210 = cmpxchg i64* %203, i64 %206, i64 %209 monotonic monotonic
  %211 = extractvalue { i64, i1 } %210, 0
  %212 = extractvalue { i64, i1 } %210, 1
  br i1 %212, label %213, label %205

; <label>:213                                     ; preds = %205
  %214 = add nsw i32 %.omp.iv2.023, 1
  %215 = icmp slt i64 %indvars.iv31, %60
  %indvars.iv.next32 = add i64 %indvars.iv31, 1
  br i1 %215, label %61, label %._crit_edge26.loopexit

._crit_edge26.loopexit:                           ; preds = %213
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26.loopexit, %42
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %216

; <label>:216                                     ; preds = %._crit_edge26, %._crit_edge35
  %.pre-phi50 = phi i8* [ %.pre49, %._crit_edge35 ], [ %43, %._crit_edge26 ]
  %.pre-phi48 = phi i8* [ %.pre47, %._crit_edge35 ], [ %44, %._crit_edge26 ]
  %.pre-phi46 = phi i8* [ %.pre45, %._crit_edge35 ], [ %45, %._crit_edge26 ]
  %.pre-phi44 = phi i8* [ %.pre43, %._crit_edge35 ], [ %46, %._crit_edge26 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi44) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi46) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi48) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi50) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %217 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %218 = bitcast double* %217 to i64*
  %219 = load atomic i64, i64* %218 monotonic, align 8, !tbaa !33
  br label %220

; <label>:220                                     ; preds = %220, %216
  %221 = phi i64 [ %219, %216 ], [ %226, %220 ]
  %222 = bitcast i64 %221 to double
  %223 = fadd double %222, 0.000000e+00
  %224 = bitcast double %223 to i64
  %225 = cmpxchg i64* %218, i64 %221, i64 %224 monotonic monotonic
  %226 = extractvalue { i64, i1 } %225, 0
  %227 = extractvalue { i64, i1 } %225, 1
  br i1 %227, label %228, label %220

; <label>:228                                     ; preds = %220
  %229 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %230 = bitcast double* %229 to i64*
  %231 = load atomic i64, i64* %230 monotonic, align 8, !tbaa !33
  br label %232

; <label>:232                                     ; preds = %232, %228
  %233 = phi i64 [ %231, %228 ], [ %238, %232 ]
  %234 = bitcast i64 %233 to double
  %235 = fadd double %234, 0.000000e+00
  %236 = bitcast double %235 to i64
  %237 = cmpxchg i64* %230, i64 %233, i64 %236 monotonic monotonic
  %238 = extractvalue { i64, i1 } %237, 0
  %239 = extractvalue { i64, i1 } %237, 1
  br i1 %239, label %240, label %232

; <label>:240                                     ; preds = %232
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_halfneighILi0ELi0EEEvR4AtomR8Neighbori(%class.ForceLJ* nocapture %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #12 comdat align 2 {
  %1 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !84
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !114
  %5 = add i32 %4, %2
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %7 = load double*, double** %6, align 8, !tbaa !100
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %9 = load double*, double** %8, align 8, !tbaa !80
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %11 = load i32*, i32** %10, align 8, !tbaa !102
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %.lr.ph13.preheader, label %.preheader

.lr.ph13.preheader:                               ; preds = %0
  %13 = add i32 %5, -1
  %xtraiter = and i32 %5, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph13.preheader.split, label %.lr.ph13.prol.preheader

.lr.ph13.prol.preheader:                          ; preds = %.lr.ph13.preheader
  br label %.lr.ph13.prol

.lr.ph13.prol:                                    ; preds = %.lr.ph13.prol, %.lr.ph13.prol.preheader
  %indvars.iv18.prol = phi i64 [ %indvars.iv.next19.prol, %.lr.ph13.prol ], [ 0, %.lr.ph13.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph13.prol ], [ %xtraiter, %.lr.ph13.prol.preheader ]
  %14 = mul nuw nsw i64 %indvars.iv18.prol, 3
  %15 = getelementptr inbounds double, double* %9, i64 %14
  %16 = bitcast double* %15 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %16, align 8, !tbaa !33
  %17 = add nuw nsw i64 %14, 2
  %18 = getelementptr inbounds double, double* %9, i64 %17
  store double 0.000000e+00, double* %18, align 8, !tbaa !33
  %indvars.iv.next19.prol = add nuw nsw i64 %indvars.iv18.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph13.preheader.split.loopexit, label %.lr.ph13.prol, !llvm.loop !126

.lr.ph13.preheader.split.loopexit:                ; preds = %.lr.ph13.prol
  br label %.lr.ph13.preheader.split

.lr.ph13.preheader.split:                         ; preds = %.lr.ph13.preheader.split.loopexit, %.lr.ph13.preheader
  %indvars.iv18.unr = phi i64 [ 0, %.lr.ph13.preheader ], [ %indvars.iv.next19.prol, %.lr.ph13.preheader.split.loopexit ]
  %19 = icmp ult i32 %13, 3
  br i1 %19, label %.preheader.loopexit, label %.lr.ph13.preheader.split.split

.lr.ph13.preheader.split.split:                   ; preds = %.lr.ph13.preheader.split
  br label %.lr.ph13

.preheader.loopexit.unr-lcssa:                    ; preds = %.lr.ph13
  br label %.preheader.loopexit

.preheader.loopexit:                              ; preds = %.preheader.loopexit.unr-lcssa, %.lr.ph13.preheader.split
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %20 = icmp sgt i32 %2, 0
  br i1 %20, label %.lr.ph9, label %._crit_edge10

.lr.ph9:                                          ; preds = %.preheader
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %28 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %29 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %30 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %31 = sext i32 %22 to i64
  br label %58

.lr.ph13:                                         ; preds = %.lr.ph13, %.lr.ph13.preheader.split.split
  %indvars.iv18 = phi i64 [ %indvars.iv18.unr, %.lr.ph13.preheader.split.split ], [ %indvars.iv.next19.3, %.lr.ph13 ]
  %32 = mul i64 %indvars.iv18, 3
  %33 = getelementptr inbounds double, double* %9, i64 %32
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %34, align 8, !tbaa !33
  %35 = add nuw nsw i64 %32, 2
  %36 = getelementptr inbounds double, double* %9, i64 %35
  store double 0.000000e+00, double* %36, align 8, !tbaa !33
  %37 = add i64 %32, 3
  %38 = getelementptr inbounds double, double* %9, i64 %37
  %39 = bitcast double* %38 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %39, align 8, !tbaa !33
  %40 = add i64 %32, 5
  %41 = getelementptr inbounds double, double* %9, i64 %40
  store double 0.000000e+00, double* %41, align 8, !tbaa !33
  %42 = add i64 %32, 6
  %43 = getelementptr inbounds double, double* %9, i64 %42
  %44 = bitcast double* %43 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %44, align 8, !tbaa !33
  %45 = add i64 %32, 8
  %46 = getelementptr inbounds double, double* %9, i64 %45
  store double 0.000000e+00, double* %46, align 8, !tbaa !33
  %47 = add i64 %32, 9
  %48 = getelementptr inbounds double, double* %9, i64 %47
  %49 = bitcast double* %48 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8, !tbaa !33
  %50 = add i64 %32, 11
  %51 = getelementptr inbounds double, double* %9, i64 %50
  store double 0.000000e+00, double* %51, align 8, !tbaa !33
  %indvars.iv.next19.3 = add nsw i64 %indvars.iv18, 4
  %lftr.wideiv20.3 = trunc i64 %indvars.iv.next19.3 to i32
  %exitcond21.3 = icmp eq i32 %lftr.wideiv20.3, %5
  br i1 %exitcond21.3, label %.preheader.loopexit.unr-lcssa, label %.lr.ph13

._crit_edge10.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %.preheader
  %52 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %53 = load double, double* %52, align 8, !tbaa !112
  %54 = fadd double %53, 0.000000e+00
  store double %54, double* %52, align 8, !tbaa !112
  %55 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %56 = load double, double* %55, align 8, !tbaa !113
  %57 = fadd double %56, 0.000000e+00
  store double %57, double* %55, align 8, !tbaa !113
  ret void

; <label>:58                                      ; preds = %._crit_edge, %.lr.ph9
  %indvars.iv14 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next15, %._crit_edge ]
  %59 = mul nsw i64 %31, %indvars.iv14
  %60 = getelementptr inbounds i32, i32* %24, i64 %59
  %61 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv14
  %62 = load i32, i32* %61, align 4, !tbaa !1
  %63 = mul nuw nsw i64 %indvars.iv14, 3
  %64 = getelementptr inbounds double, double* %7, i64 %63
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !tbaa !33
  %67 = add nuw nsw i64 %63, 2
  %68 = getelementptr inbounds double, double* %7, i64 %67
  %69 = load double, double* %68, align 8, !tbaa !33
  %70 = icmp sgt i32 %62, 0
  br i1 %70, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %58
  %71 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv14
  %72 = load i32, i32* %71, align 4, !tbaa !1
  %73 = load i32, i32* %27, align 8
  %74 = mul nsw i32 %73, %72
  %75 = load double*, double** %28, align 8
  br label %84

._crit_edge.loopexit:                             ; preds = %154
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %58
  %fiz.0.lcssa = phi double [ 0.000000e+00, %58 ], [ %fiz.1, %._crit_edge.loopexit ]
  %76 = phi <2 x double> [ zeroinitializer, %58 ], [ %155, %._crit_edge.loopexit ]
  %77 = getelementptr inbounds double, double* %9, i64 %63
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8, !tbaa !33
  %80 = fadd <2 x double> %76, %79
  store <2 x double> %80, <2 x double>* %78, align 8, !tbaa !33
  %81 = getelementptr inbounds double, double* %9, i64 %67
  %82 = load double, double* %81, align 8, !tbaa !33
  %83 = fadd double %fiz.0.lcssa, %82
  store double %83, double* %81, align 8, !tbaa !33
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %lftr.wideiv16 = trunc i64 %indvars.iv.next15 to i32
  %exitcond17 = icmp eq i32 %lftr.wideiv16, %2
  br i1 %exitcond17, label %._crit_edge10.loopexit, label %58

; <label>:84                                      ; preds = %154, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %154 ]
  %fiz.03 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %154 ]
  %85 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %155, %154 ]
  %86 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv
  %87 = load i32, i32* %86, align 4, !tbaa !1
  %88 = mul nsw i32 %87, 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %7, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !33
  %92 = add nsw i32 %88, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds double, double* %7, i64 %93
  %95 = load double, double* %94, align 8, !tbaa !33
  %96 = insertelement <2 x double> undef, double %91, i32 0
  %97 = insertelement <2 x double> %96, double %95, i32 1
  %98 = fsub <2 x double> %66, %97
  %99 = add nsw i32 %88, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds double, double* %7, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !33
  %103 = fsub double %69, %102
  %104 = sext i32 %87 to i64
  %105 = getelementptr inbounds i32, i32* %11, i64 %104
  %106 = load i32, i32* %105, align 4, !tbaa !1
  %107 = extractelement <2 x double> %98, i32 0
  %108 = fmul double %107, %107
  %109 = extractelement <2 x double> %98, i32 1
  %110 = fmul double %109, %109
  %111 = fadd double %108, %110
  %112 = fmul double %103, %103
  %113 = fadd double %111, %112
  %114 = add nsw i32 %74, %106
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %75, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !33
  %118 = fcmp olt double %113, %117
  br i1 %118, label %119, label %154

; <label>:119                                     ; preds = %84
  %120 = fdiv double 1.000000e+00, %113
  %121 = fmul double %120, %120
  %122 = fmul double %120, %121
  %123 = load double*, double** %29, align 8, !tbaa !116
  %124 = getelementptr inbounds double, double* %123, i64 %115
  %125 = load double, double* %124, align 8, !tbaa !33
  %126 = fmul double %122, %125
  %127 = fmul double %126, 4.800000e+01
  %128 = fadd double %126, -5.000000e-01
  %129 = fmul double %127, %128
  %130 = fmul double %120, %129
  %131 = load double*, double** %30, align 8, !tbaa !117
  %132 = getelementptr inbounds double, double* %131, i64 %115
  %133 = load double, double* %132, align 8, !tbaa !33
  %134 = fmul double %133, %130
  %135 = insertelement <2 x double> undef, double %134, i32 0
  %136 = insertelement <2 x double> %135, double %134, i32 1
  %137 = fmul <2 x double> %98, %136
  %138 = fadd <2 x double> %85, %137
  %139 = fmul double %103, %134
  %140 = fadd double %fiz.03, %139
  %141 = icmp slt i32 %87, %2
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %119
  %143 = getelementptr inbounds double, double* %9, i64 %89
  %144 = load double, double* %143, align 8, !tbaa !33
  %145 = extractelement <2 x double> %137, i32 0
  %146 = fsub double %144, %145
  store double %146, double* %143, align 8, !tbaa !33
  %147 = getelementptr inbounds double, double* %9, i64 %93
  %148 = load double, double* %147, align 8, !tbaa !33
  %149 = extractelement <2 x double> %137, i32 1
  %150 = fsub double %148, %149
  store double %150, double* %147, align 8, !tbaa !33
  %151 = getelementptr inbounds double, double* %9, i64 %100
  %152 = load double, double* %151, align 8, !tbaa !33
  %153 = fsub double %152, %139
  store double %153, double* %151, align 8, !tbaa !33
  br label %154

; <label>:154                                     ; preds = %142, %119, %84
  %fiz.1 = phi double [ %fiz.03, %84 ], [ %140, %142 ], [ %140, %119 ]
  %155 = phi <2 x double> [ %85, %84 ], [ %138, %142 ], [ %138, %119 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %62
  br i1 %exitcond, label %._crit_edge.loopexit, label %84
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN7ForceLJ17compute_fullneighILi0EEEvR4AtomR8Neighbori(%class.ForceLJ* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, i32 %me) #11 comdat align 2 {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @7)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !84
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %5 = load double*, double** %4, align 8, !tbaa !100
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %7 = load double*, double** %6, align 8, !tbaa !80
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %9 = load i32*, i32** %8, align 8, !tbaa !102
  tail call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  %10 = add nsw i32 %3, -1
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %.critedge

; <label>:12                                      ; preds = %0
  %13 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %14 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #7
  store i32 %10, i32* %.omp.ub, align 4, !tbaa !1
  %15 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %16 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %17 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %18 = icmp sgt i32 %17, %10
  %19 = select i1 %18, i32 %10, i32 %17
  store i32 %19, i32* %.omp.ub, align 4, !tbaa !1
  %20 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %19
  br i1 %21, label %._crit_edge24, label %.lr.ph23

.lr.ph23:                                         ; preds = %12
  %22 = sext i32 %20 to i64
  %23 = sext i32 %19 to i64
  br label %24

; <label>:24                                      ; preds = %24, %.lr.ph23
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %24 ], [ %22, %.lr.ph23 ]
  %.omp.iv.021 = phi i32 [ %34, %24 ], [ %20, %.lr.ph23 ]
  %25 = mul nsw i32 %.omp.iv.021, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %7, i64 %26
  store double 0.000000e+00, double* %27, align 8, !tbaa !33
  %28 = add nsw i32 %25, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %7, i64 %29
  store double 0.000000e+00, double* %30, align 8, !tbaa !33
  %31 = add nsw i32 %25, 2
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %7, i64 %32
  store double 0.000000e+00, double* %33, align 8, !tbaa !33
  %34 = add nsw i32 %.omp.iv.021, 1
  %35 = icmp slt i64 %indvars.iv27, %23
  %indvars.iv.next28 = add nsw i64 %indvars.iv27, 1
  br i1 %35, label %24, label %._crit_edge24.loopexit

._crit_edge24.loopexit:                           ; preds = %24
  br label %._crit_edge24

._crit_edge24:                                    ; preds = %._crit_edge24.loopexit, %12
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  call void @llvm.lifetime.end(i64 4, i8* %16) #7
  call void @llvm.lifetime.end(i64 4, i8* %15) #7
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #7
  call void @llvm.lifetime.end(i64 4, i8* %13) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %36 = bitcast i32* %.omp.lb5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %36) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  %37 = bitcast i32* %.omp.ub6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %37) #7
  store i32 %10, i32* %.omp.ub6, align 4, !tbaa !1
  %38 = bitcast i32* %.omp.stride7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  %39 = bitcast i32* %.omp.is_last8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %39) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @7, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %40 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %41 = icmp sgt i32 %40, %10
  %42 = select i1 %41, i32 %10, i32 %40
  store i32 %42, i32* %.omp.ub6, align 4, !tbaa !1
  %43 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %44 = icmp sgt i32 %43, %42
  br i1 %44, label %._crit_edge20, label %.lr.ph19

.lr.ph19:                                         ; preds = %._crit_edge24
  %45 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  %52 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %53 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %54 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %55 = sext i32 %43 to i64
  %56 = sext i32 %46 to i64
  %57 = sext i32 %42 to i64
  br label %58

; <label>:58                                      ; preds = %._crit_edge, %.lr.ph19
  %indvars.iv25 = phi i64 [ %indvars.iv.next26, %._crit_edge ], [ %55, %.lr.ph19 ]
  %.omp.iv2.017 = phi i32 [ %95, %._crit_edge ], [ %43, %.lr.ph19 ]
  %59 = mul nsw i64 %56, %indvars.iv25
  %60 = getelementptr inbounds i32, i32* %48, i64 %59
  %61 = getelementptr inbounds i32, i32* %50, i64 %indvars.iv25
  %62 = load i32, i32* %61, align 4, !tbaa !1
  %63 = mul nsw i32 %.omp.iv2.017, 3
  %64 = sext i32 %63 to i64
  %65 = add nsw i32 %63, 1
  %66 = sext i32 %65 to i64
  %67 = add nsw i32 %63, 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double, double* %5, i64 %68
  %70 = load double, double* %69, align 8, !tbaa !33
  %71 = icmp sgt i32 %62, 0
  br i1 %71, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %58
  %72 = getelementptr inbounds double, double* %5, i64 %66
  %73 = load double, double* %72, align 8, !tbaa !33
  %74 = getelementptr inbounds double, double* %5, i64 %64
  %75 = load double, double* %74, align 8, !tbaa !33
  %76 = getelementptr inbounds i32, i32* %9, i64 %indvars.iv25
  %77 = load i32, i32* %76, align 4, !tbaa !1
  %78 = load i32, i32* %51, align 8
  %79 = mul nsw i32 %78, %77
  %80 = load double*, double** %52, align 8
  %81 = insertelement <2 x double> undef, double %75, i32 0
  %82 = insertelement <2 x double> %81, double %73, i32 1
  br label %97

._crit_edge.loopexit:                             ; preds = %154
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %58
  %fiz.0.lcssa = phi double [ 0.000000e+00, %58 ], [ %fiz.1, %._crit_edge.loopexit ]
  %83 = phi <2 x double> [ zeroinitializer, %58 ], [ %155, %._crit_edge.loopexit ]
  %84 = getelementptr inbounds double, double* %7, i64 %64
  %85 = load double, double* %84, align 8, !tbaa !33
  %86 = extractelement <2 x double> %83, i32 0
  %87 = fadd double %86, %85
  store double %87, double* %84, align 8, !tbaa !33
  %88 = getelementptr inbounds double, double* %7, i64 %66
  %89 = load double, double* %88, align 8, !tbaa !33
  %90 = extractelement <2 x double> %83, i32 1
  %91 = fadd double %90, %89
  store double %91, double* %88, align 8, !tbaa !33
  %92 = getelementptr inbounds double, double* %7, i64 %68
  %93 = load double, double* %92, align 8, !tbaa !33
  %94 = fadd double %fiz.0.lcssa, %93
  store double %94, double* %92, align 8, !tbaa !33
  %95 = add nsw i32 %.omp.iv2.017, 1
  %96 = icmp slt i64 %indvars.iv25, %57
  %indvars.iv.next26 = add nsw i64 %indvars.iv25, 1
  br i1 %96, label %58, label %._crit_edge20.loopexit

; <label>:97                                      ; preds = %154, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %154 ]
  %fiz.012 = phi double [ 0.000000e+00, %.lr.ph ], [ %fiz.1, %154 ]
  %98 = phi <2 x double> [ zeroinitializer, %.lr.ph ], [ %155, %154 ]
  %99 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv
  %100 = load i32, i32* %99, align 4, !tbaa !1
  %101 = mul nsw i32 %100, 3
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %5, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !33
  %105 = add nsw i32 %101, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %5, i64 %106
  %108 = load double, double* %107, align 8, !tbaa !33
  %109 = insertelement <2 x double> undef, double %104, i32 0
  %110 = insertelement <2 x double> %109, double %108, i32 1
  %111 = fsub <2 x double> %82, %110
  %112 = add nsw i32 %101, 2
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds double, double* %5, i64 %113
  %115 = load double, double* %114, align 8, !tbaa !33
  %116 = fsub double %70, %115
  %117 = sext i32 %100 to i64
  %118 = getelementptr inbounds i32, i32* %9, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !1
  %120 = extractelement <2 x double> %111, i32 0
  %121 = fmul double %120, %120
  %122 = extractelement <2 x double> %111, i32 1
  %123 = fmul double %122, %122
  %124 = fadd double %121, %123
  %125 = fmul double %116, %116
  %126 = fadd double %124, %125
  %127 = add nsw i32 %79, %119
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds double, double* %80, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !33
  %131 = fcmp olt double %126, %130
  br i1 %131, label %132, label %154

; <label>:132                                     ; preds = %97
  %133 = fdiv double 1.000000e+00, %126
  %134 = fmul double %133, %133
  %135 = fmul double %133, %134
  %136 = load double*, double** %53, align 8, !tbaa !116
  %137 = getelementptr inbounds double, double* %136, i64 %128
  %138 = load double, double* %137, align 8, !tbaa !33
  %139 = fmul double %135, %138
  %140 = fmul double %139, 4.800000e+01
  %141 = fadd double %139, -5.000000e-01
  %142 = fmul double %140, %141
  %143 = fmul double %133, %142
  %144 = load double*, double** %54, align 8, !tbaa !117
  %145 = getelementptr inbounds double, double* %144, i64 %128
  %146 = load double, double* %145, align 8, !tbaa !33
  %147 = fmul double %146, %143
  %148 = insertelement <2 x double> undef, double %147, i32 0
  %149 = insertelement <2 x double> %148, double %147, i32 1
  %150 = fmul <2 x double> %111, %149
  %151 = fadd <2 x double> %98, %150
  %152 = fmul double %116, %147
  %153 = fadd double %fiz.012, %152
  br label %154

; <label>:154                                     ; preds = %132, %97
  %fiz.1 = phi double [ %153, %132 ], [ %fiz.012, %97 ]
  %155 = phi <2 x double> [ %151, %132 ], [ %98, %97 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %62
  br i1 %exitcond, label %._crit_edge.loopexit, label %97

._crit_edge20.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %._crit_edge20.loopexit, %._crit_edge24
  call void @__kmpc_for_static_fini(%ident_t* nonnull @7, i32 %1)
  br label %160

.critedge:                                        ; preds = %0
  %156 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.end(i64 4, i8* %156) #7
  %157 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.end(i64 4, i8* %157) #7
  %158 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #7
  %159 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.end(i64 4, i8* %159) #7
  tail call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %.pre = bitcast i32* %.omp.is_last8 to i8*
  %.pre29 = bitcast i32* %.omp.stride7 to i8*
  %.pre31 = bitcast i32* %.omp.ub6 to i8*
  %.pre33 = bitcast i32* %.omp.lb5 to i8*
  br label %160

; <label>:160                                     ; preds = %.critedge, %._crit_edge20
  %.pre-phi34 = phi i8* [ %.pre33, %.critedge ], [ %36, %._crit_edge20 ]
  %.pre-phi32 = phi i8* [ %.pre31, %.critedge ], [ %37, %._crit_edge20 ]
  %.pre-phi30 = phi i8* [ %.pre29, %.critedge ], [ %38, %._crit_edge20 ]
  %.pre-phi = phi i8* [ %.pre, %.critedge ], [ %39, %._crit_edge20 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi30) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi32) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi34) #7
  call void @__kmpc_barrier(%ident_t* nonnull @9, i32 %1)
  %161 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 3
  %162 = bitcast double* %161 to i64*
  %163 = load atomic i64, i64* %162 monotonic, align 8, !tbaa !33
  br label %164

; <label>:164                                     ; preds = %164, %160
  %165 = phi i64 [ %163, %160 ], [ %170, %164 ]
  %166 = bitcast i64 %165 to double
  %167 = fadd double %166, 0.000000e+00
  %168 = bitcast double %167 to i64
  %169 = cmpxchg i64* %162, i64 %165, i64 %168 monotonic monotonic
  %170 = extractvalue { i64, i1 } %169, 0
  %171 = extractvalue { i64, i1 } %169, 1
  br i1 %171, label %172, label %164

; <label>:172                                     ; preds = %164
  %173 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 6
  %174 = bitcast double* %173 to i64*
  %175 = load atomic i64, i64* %174 monotonic, align 8, !tbaa !33
  br label %176

; <label>:176                                     ; preds = %176, %172
  %177 = phi i64 [ %175, %172 ], [ %182, %176 ]
  %178 = bitcast i64 %177 to double
  %179 = fadd double %178, 0.000000e+00
  %180 = bitcast double %179 to i64
  %181 = cmpxchg i64* %174, i64 %177, i64 %180 monotonic monotonic
  %182 = extractvalue { i64, i1 } %181, 0
  %183 = extractvalue { i64, i1 } %181, 1
  br i1 %183, label %184, label %176

; <label>:184                                     ; preds = %176
  call void @__kmpc_barrier(%ident_t* nonnull @8, i32 %1)
  ret void
}

; Function Attrs: uwtable
define void @_ZN7ForceLJC2Ei(%class.ForceLJ* nocapture %this, i32 %ntypes_) unnamed_addr #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @_ZTV7ForceLJ, i64 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !67
  %2 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 1
  store double 0.000000e+00, double* %2, align 8, !tbaa !59
  %3 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 9
  store i32 0, i32* %3, align 8, !tbaa !42
  %4 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 11
  store i32 1, i32* %4, align 8, !tbaa !127
  %5 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 16
  store i32 0, i32* %5, align 8, !tbaa !128
  %6 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 7
  store i32 %ntypes_, i32* %6, align 8, !tbaa !110
  %7 = mul i32 %ntypes_, %ntypes_
  %8 = zext i32 %7 to i64
  %9 = shl nuw nsw i64 %8, 3
  %10 = tail call noalias i8* @_Znam(i64 %9) #18
  %11 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 2
  %12 = bitcast double** %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !121
  %13 = tail call noalias i8* @_Znam(i64 %9) #18
  %14 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 13
  %15 = bitcast double** %14 to i8**
  store i8* %13, i8** %15, align 8, !tbaa !117
  %16 = tail call noalias i8* @_Znam(i64 %9) #18
  %17 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 14
  %18 = bitcast double** %17 to i8**
  store i8* %16, i8** %18, align 8, !tbaa !116
  %19 = tail call noalias i8* @_Znam(i64 %9) #18
  %20 = getelementptr inbounds %class.ForceLJ, %class.ForceLJ* %this, i64 0, i32 0, i32 15
  %21 = bitcast double** %20 to i8**
  store i8* %19, i8** %21, align 8, !tbaa !129
  %22 = icmp eq i32 %7, 0
  %23 = bitcast i8* %10 to double*
  %24 = bitcast i8* %13 to double*
  %25 = bitcast i8* %16 to double*
  %26 = bitcast i8* %19 to double*
  br i1 %22, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %min.iters.check = icmp ult i32 %7, 16
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

scalar.ph.preheader:                              ; preds = %middle.block, %min.iters.checked, %.lr.ph
  %indvars.iv.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %n.vec, %middle.block ]
  br label %scalar.ph

min.iters.checked:                                ; preds = %.lr.ph
  %27 = and i32 %7, 15
  %n.mod.vf = zext i32 %27 to i64
  %n.vec = sub nsw i64 %8, %n.mod.vf
  %cmp.zero = icmp eq i32 %7, %27
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %28 = getelementptr inbounds double, double* %23, i64 %index
  %29 = bitcast double* %28 to <4 x double>*
  store <4 x double> zeroinitializer, <4 x double>* %29, align 8, !tbaa !33
  %30 = getelementptr double, double* %28, i64 4
  %31 = bitcast double* %30 to <4 x double>*
  store <4 x double> zeroinitializer, <4 x double>* %31, align 8, !tbaa !33
  %32 = getelementptr double, double* %28, i64 8
  %33 = bitcast double* %32 to <4 x double>*
  store <4 x double> zeroinitializer, <4 x double>* %33, align 8, !tbaa !33
  %34 = getelementptr double, double* %28, i64 12
  %35 = bitcast double* %34 to <4 x double>*
  store <4 x double> zeroinitializer, <4 x double>* %35, align 8, !tbaa !33
  %36 = getelementptr inbounds double, double* %24, i64 %index
  %37 = bitcast double* %36 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %37, align 8, !tbaa !33
  %38 = getelementptr double, double* %36, i64 4
  %39 = bitcast double* %38 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %39, align 8, !tbaa !33
  %40 = getelementptr double, double* %36, i64 8
  %41 = bitcast double* %40 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %41, align 8, !tbaa !33
  %42 = getelementptr double, double* %36, i64 12
  %43 = bitcast double* %42 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %43, align 8, !tbaa !33
  %44 = getelementptr inbounds double, double* %25, i64 %index
  %45 = bitcast double* %44 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %45, align 8, !tbaa !33
  %46 = getelementptr double, double* %44, i64 4
  %47 = bitcast double* %46 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %47, align 8, !tbaa !33
  %48 = getelementptr double, double* %44, i64 8
  %49 = bitcast double* %48 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %49, align 8, !tbaa !33
  %50 = getelementptr double, double* %44, i64 12
  %51 = bitcast double* %50 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %51, align 8, !tbaa !33
  %52 = getelementptr inbounds double, double* %26, i64 %index
  %53 = bitcast double* %52 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %53, align 8, !tbaa !33
  %54 = getelementptr double, double* %52, i64 4
  %55 = bitcast double* %54 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %55, align 8, !tbaa !33
  %56 = getelementptr double, double* %52, i64 8
  %57 = bitcast double* %56 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %57, align 8, !tbaa !33
  %58 = getelementptr double, double* %52, i64 12
  %59 = bitcast double* %58 to <4 x double>*
  store <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %59, align 8, !tbaa !33
  %index.next = add i64 %index, 16
  %60 = icmp eq i64 %index.next, %n.vec
  br i1 %60, label %middle.block, label %vector.body, !llvm.loop !130

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i32 %27, 0
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

._crit_edge.loopexit:                             ; preds = %scalar.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %0
  ret void

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %61 = getelementptr inbounds double, double* %23, i64 %indvars.iv
  store double 0.000000e+00, double* %61, align 8, !tbaa !33
  %62 = getelementptr inbounds double, double* %24, i64 %indvars.iv
  store double 1.000000e+00, double* %62, align 8, !tbaa !33
  %63 = getelementptr inbounds double, double* %25, i64 %indvars.iv
  store double 1.000000e+00, double* %63, align 8, !tbaa !33
  %64 = getelementptr inbounds double, double* %26, i64 %indvars.iv
  store double 1.000000e+00, double* %64, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %65 = icmp slt i64 %indvars.iv.next, %8
  br i1 %65, label %scalar.ph, label %._crit_edge.loopexit, !llvm.loop !131
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN8ForceEAMD2Ev(%class.ForceEAM* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN8ForceEAMD0Ev(%class.ForceEAM* %this) unnamed_addr #9 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = bitcast %class.ForceEAM* %this to i8*
  tail call void @_ZdlPv(i8* %1) #19
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM5setupEv(%class.ForceEAM* %this) unnamed_addr #11 align 2 {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 10
  %2 = load %class.ThreadData*, %class.ThreadData** %1, align 8, !tbaa !24
  %3 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %2, i64 0, i32 0
  %4 = load i32, i32* %3, align 4, !tbaa !15
  %5 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 17
  store i32 %4, i32* %5, align 4, !tbaa !133
  %6 = bitcast %class.ForceEAM* %this to void (%class.ForceEAM*, i8*)***
  %7 = load void (%class.ForceEAM*, i8*)**, void (%class.ForceEAM*, i8*)*** %6, align 8, !tbaa !67
  %8 = getelementptr inbounds void (%class.ForceEAM*, i8*)*, void (%class.ForceEAM*, i8*)** %7, i64 5
  %9 = load void (%class.ForceEAM*, i8*)*, void (%class.ForceEAM*, i8*)** %8, align 8
  tail call void %9(%class.ForceEAM* %this, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0))
  %10 = bitcast %class.ForceEAM* %this to void (%class.ForceEAM*)***
  %11 = load void (%class.ForceEAM*)**, void (%class.ForceEAM*)*** %10, align 8, !tbaa !67
  %12 = getelementptr inbounds void (%class.ForceEAM*)*, void (%class.ForceEAM*)** %11, i64 9
  %13 = load void (%class.ForceEAM*)*, void (%class.ForceEAM*)** %12, align 8
  tail call void %13(%class.ForceEAM* %this)
  tail call void @_ZN8ForceEAM12array2splineEv(%class.ForceEAM* %this)
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM12array2splineEv(%class.ForceEAM* nocapture %this) #11 align 2 {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 9
  %2 = load double, double* %1, align 8, !tbaa !134
  %3 = fdiv double 1.000000e+00, %2
  %4 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 10
  store double %3, double* %4, align 8, !tbaa !137
  %5 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 11
  %6 = load double, double* %5, align 8, !tbaa !138
  %7 = fdiv double 1.000000e+00, %6
  %8 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 12
  store double %7, double* %8, align 8, !tbaa !139
  %9 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 2
  %10 = bitcast i32* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = mul i32 %12, 7
  %14 = add i32 %13, 71
  %15 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 4
  %16 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  %17 = lshr i64 %11, 32
  %18 = trunc i64 %17 to i32
  %19 = mul i32 %18, 7
  %20 = add i32 %19, 71
  %21 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 5
  %22 = srem i32 %14, 64
  %23 = sub nsw i32 %14, %22
  store i32 %23, i32* %15, align 8, !tbaa !140
  %24 = srem i32 %20, 64
  %25 = sub nsw i32 %20, %24
  store i32 %25, i32* %21, align 4, !tbaa !141
  %26 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  %27 = load i32, i32* %26, align 8, !tbaa !110
  %28 = mul nsw i32 %27, %27
  %29 = mul nsw i32 %28, %23
  %30 = sext i32 %29 to i64
  %31 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %30, i64 8)
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  %34 = select i1 %32, i64 -1, i64 %33
  %35 = tail call noalias i8* @_Znam(i64 %34) #18
  %36 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 14
  %37 = bitcast double** %36 to i8**
  store i8* %35, i8** %37, align 8, !tbaa !142
  %38 = mul nsw i32 %28, %25
  %39 = sext i32 %38 to i64
  %40 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %39, i64 8)
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 -1, i64 %42
  %44 = tail call noalias i8* @_Znam(i64 %43) #18
  %45 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 13
  %46 = bitcast double** %45 to i8**
  store i8* %44, i8** %46, align 8, !tbaa !143
  %47 = tail call noalias i8* @_Znam(i64 %43) #18
  %48 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 15
  %49 = bitcast double** %48 to i8**
  store i8* %47, i8** %49, align 8, !tbaa !144
  %50 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 6
  %51 = load double*, double** %50, align 8, !tbaa !145
  %52 = bitcast i8* %35 to double*
  tail call void @_ZN8ForceEAM11interpolateEidPdS0_(%class.ForceEAM* undef, i32 %12, double %6, double* %51, double* %52)
  %53 = load i32, i32* %16, align 4, !tbaa !146
  %54 = load double, double* %1, align 8, !tbaa !134
  %55 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 7
  %56 = load double*, double** %55, align 8, !tbaa !147
  %57 = load double*, double** %45, align 8, !tbaa !143
  tail call void @_ZN8ForceEAM11interpolateEidPdS0_(%class.ForceEAM* undef, i32 %53, double %54, double* %56, double* %57)
  %58 = load i32, i32* %16, align 4, !tbaa !146
  %59 = load double, double* %1, align 8, !tbaa !134
  %60 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 8
  %61 = load double*, double** %60, align 8, !tbaa !148
  %62 = load double*, double** %48, align 8, !tbaa !144
  tail call void @_ZN8ForceEAM11interpolateEidPdS0_(%class.ForceEAM* undef, i32 %58, double %59, double* %61, double* %62)
  %63 = load i32, i32* %26, align 8, !tbaa !110
  %64 = mul i32 %63, %63
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %._crit_edge12, label %.preheader4.lr.ph

.preheader4.lr.ph:                                ; preds = %0
  %66 = bitcast i32* %15 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i32
  %69 = icmp sgt i32 %68, 0
  %70 = lshr i64 %67, 32
  %71 = trunc i64 %70 to i32
  %72 = icmp sgt i32 %71, 0
  br i1 %69, label %.lr.ph.us.preheader, label %.preheader4.lr.ph.split

.lr.ph.us.preheader:                              ; preds = %.preheader4.lr.ph
  br label %.lr.ph.us

._crit_edge.us.loopexit:                          ; preds = %75
  br label %._crit_edge.us

._crit_edge.us:                                   ; preds = %.preheader.us.._crit_edge.us_crit_edge, %..preheader3_crit_edge.us, %._crit_edge.us.loopexit
  %73 = add nuw nsw i32 %tt.010.us, 1
  %74 = icmp slt i32 %73, %64
  br i1 %74, label %._crit_edge.us..lr.ph.us_crit_edge, label %._crit_edge12.loopexit

._crit_edge.us..lr.ph.us_crit_edge:               ; preds = %._crit_edge.us
  %.pre = load i32, i32* %15, align 8
  br label %.lr.ph.us

; <label>:75                                      ; preds = %.lr.ph9.us, %75
  %indvars.iv31 = phi i64 [ 0, %.lr.ph9.us ], [ %indvars.iv.next32, %75 ]
  %76 = phi i32 [ %71, %.lr.ph9.us ], [ %118, %75 ]
  %77 = getelementptr inbounds double, double* %117, i64 %indvars.iv31
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8, !tbaa !33
  %80 = mul nsw i32 %76, %tt.010.us
  %81 = trunc i64 %indvars.iv31 to i32
  %82 = add nsw i32 %80, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %117, i64 %83
  %85 = bitcast double* %84 to i64*
  store i64 %79, i64* %85, align 8, !tbaa !33
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %86 = icmp slt i64 %indvars.iv.next32, %119
  br i1 %86, label %75, label %._crit_edge.us.loopexit

; <label>:87                                      ; preds = %.lr.ph7.us, %87
  %indvars.iv29 = phi i64 [ 0, %.lr.ph7.us ], [ %indvars.iv.next30, %87 ]
  %88 = phi i32 [ %71, %.lr.ph7.us ], [ %115, %87 ]
  %89 = getelementptr inbounds double, double* %114, i64 %indvars.iv29
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8, !tbaa !33
  %92 = mul nsw i32 %88, %tt.010.us
  %93 = trunc i64 %indvars.iv29 to i32
  %94 = add nsw i32 %92, %93
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %114, i64 %95
  %97 = bitcast double* %96 to i64*
  store i64 %91, i64* %97, align 8, !tbaa !33
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %98 = icmp slt i64 %indvars.iv.next30, %116
  br i1 %98, label %87, label %.preheader.us

; <label>:99                                      ; preds = %.lr.ph.us, %99
  %indvars.iv = phi i64 [ 0, %.lr.ph.us ], [ %indvars.iv.next, %99 ]
  %100 = phi i32 [ %68, %.lr.ph.us ], [ %111, %99 ]
  %101 = getelementptr inbounds double, double* %112, i64 %indvars.iv
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8, !tbaa !33
  %104 = mul nsw i32 %100, %tt.010.us
  %105 = trunc i64 %indvars.iv to i32
  %106 = add nsw i32 %104, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds double, double* %112, i64 %107
  %109 = bitcast double* %108 to i64*
  store i64 %103, i64* %109, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %110 = icmp slt i64 %indvars.iv.next, %113
  br i1 %110, label %99, label %..preheader3_crit_edge.us

.preheader.us:                                    ; preds = %87
  br i1 true, label %.lr.ph9.us, label %.preheader.us.._crit_edge.us_crit_edge

.preheader.us.._crit_edge.us_crit_edge:           ; preds = %.preheader.us
  br label %._crit_edge.us

.lr.ph.us:                                        ; preds = %._crit_edge.us..lr.ph.us_crit_edge, %.lr.ph.us.preheader
  %111 = phi i32 [ %.pre, %._crit_edge.us..lr.ph.us_crit_edge ], [ %68, %.lr.ph.us.preheader ]
  %tt.010.us = phi i32 [ %73, %._crit_edge.us..lr.ph.us_crit_edge ], [ 0, %.lr.ph.us.preheader ]
  %112 = load double*, double** %36, align 8
  %113 = sext i32 %111 to i64
  br label %99

..preheader3_crit_edge.us:                        ; preds = %99
  br i1 %72, label %.lr.ph7.us, label %._crit_edge.us

.lr.ph7.us:                                       ; preds = %..preheader3_crit_edge.us
  %114 = load double*, double** %45, align 8
  %115 = load i32, i32* %21, align 4
  %116 = sext i32 %115 to i64
  br label %87

.lr.ph9.us:                                       ; preds = %.preheader.us
  %117 = load double*, double** %48, align 8
  %118 = load i32, i32* %21, align 4
  %119 = sext i32 %118 to i64
  br label %75

.preheader4.lr.ph.split:                          ; preds = %.preheader4.lr.ph
  br i1 %72, label %.lr.ph7.us23.preheader, label %.preheader.preheader

.lr.ph7.us23.preheader:                           ; preds = %.preheader4.lr.ph.split
  br label %.lr.ph7.us23

.preheader.preheader:                             ; preds = %.preheader4.lr.ph.split
  %120 = icmp sgt i32 %64, 1
  %smax = select i1 %120, i32 %64, i32 1
  %min.iters.check = icmp ult i32 %smax, 64
  br i1 %min.iters.check, label %.preheader.preheader47, label %min.iters.checked

.preheader.preheader47:                           ; preds = %middle.block, %min.iters.checked, %.preheader.preheader
  %tt.010.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.preheader.preheader ], [ %n.vec, %middle.block ]
  br label %.preheader

min.iters.checked:                                ; preds = %.preheader.preheader
  %n.vec = and i32 %smax, -64
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %.preheader.preheader47, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %121 = add i32 %smax, -64
  %122 = lshr i32 %121, 6
  %123 = add nuw nsw i32 %122, 1
  %xtraiter = and i32 %123, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i32 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %index.next.prol = add i32 %index.prol, 64
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !149

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i32 [ 0, %vector.body.preheader ], [ %index.next.prol, %vector.body.preheader.split.loopexit ]
  %124 = icmp ult i32 %121, 448
  br i1 %124, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i32 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.7, %vector.body ]
  %index.next.7 = add i32 %index, 512
  %125 = icmp eq i32 %index.next.7, %n.vec
  br i1 %125, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !150

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %cmp.n = icmp eq i32 %smax, %n.vec
  br i1 %cmp.n, label %._crit_edge12, label %.preheader.preheader47

; <label>:126                                     ; preds = %.lr.ph9.us25, %126
  %indvars.iv35 = phi i64 [ 0, %.lr.ph9.us25 ], [ %indvars.iv.next36, %126 ]
  %127 = phi i32 [ %71, %.lr.ph9.us25 ], [ %154, %126 ]
  %128 = getelementptr inbounds double, double* %153, i64 %indvars.iv35
  %129 = bitcast double* %128 to i64*
  %130 = load i64, i64* %129, align 8, !tbaa !33
  %131 = mul nsw i32 %127, %tt.010.us14
  %132 = trunc i64 %indvars.iv35 to i32
  %133 = add nsw i32 %131, %132
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double, double* %153, i64 %134
  %136 = bitcast double* %135 to i64*
  store i64 %130, i64* %136, align 8, !tbaa !33
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %137 = icmp slt i64 %indvars.iv.next36, %155
  br i1 %137, label %126, label %._crit_edge.us26

; <label>:138                                     ; preds = %.lr.ph7.us23, %138
  %indvars.iv33 = phi i64 [ 0, %.lr.ph7.us23 ], [ %indvars.iv.next34, %138 ]
  %139 = phi i32 [ %71, %.lr.ph7.us23 ], [ %151, %138 ]
  %140 = getelementptr inbounds double, double* %150, i64 %indvars.iv33
  %141 = bitcast double* %140 to i64*
  %142 = load i64, i64* %141, align 8, !tbaa !33
  %143 = mul nsw i32 %139, %tt.010.us14
  %144 = trunc i64 %indvars.iv33 to i32
  %145 = add nsw i32 %143, %144
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds double, double* %150, i64 %146
  %148 = bitcast double* %147 to i64*
  store i64 %142, i64* %148, align 8, !tbaa !33
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %149 = icmp slt i64 %indvars.iv.next34, %152
  br i1 %149, label %138, label %.lr.ph9.us25

.lr.ph7.us23:                                     ; preds = %._crit_edge.us26, %.lr.ph7.us23.preheader
  %tt.010.us14 = phi i32 [ %156, %._crit_edge.us26 ], [ 0, %.lr.ph7.us23.preheader ]
  %150 = load double*, double** %45, align 8
  %151 = load i32, i32* %21, align 4
  %152 = sext i32 %151 to i64
  br label %138

.lr.ph9.us25:                                     ; preds = %138
  %153 = load double*, double** %48, align 8
  %154 = load i32, i32* %21, align 4
  %155 = sext i32 %154 to i64
  br label %126

._crit_edge.us26:                                 ; preds = %126
  %156 = add nuw nsw i32 %tt.010.us14, 1
  %157 = icmp slt i32 %156, %64
  br i1 %157, label %.lr.ph7.us23, label %._crit_edge12.loopexit46

._crit_edge12.loopexit:                           ; preds = %._crit_edge.us
  br label %._crit_edge12

._crit_edge12.loopexit46:                         ; preds = %._crit_edge.us26
  br label %._crit_edge12

._crit_edge12.loopexit48:                         ; preds = %.preheader
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit48, %._crit_edge12.loopexit46, %._crit_edge12.loopexit, %middle.block, %0
  ret void

.preheader:                                       ; preds = %.preheader, %.preheader.preheader47
  %tt.010 = phi i32 [ %158, %.preheader ], [ %tt.010.ph, %.preheader.preheader47 ]
  %158 = add nuw nsw i32 %tt.010, 1
  %159 = icmp slt i32 %158, %64
  br i1 %159, label %.preheader, label %._crit_edge12.loopexit48, !llvm.loop !151
}

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #14

; Function Attrs: norecurse nounwind uwtable
define void @_ZN8ForceEAM11interpolateEidPdS0_(%class.ForceEAM* nocapture readnone %this, i32 %n, double %delta, double* nocapture readonly %f, double* %spline) #12 align 2 {
  %1 = icmp slt i32 %n, 1
  br i1 %1, label %._crit_edge14, label %.lr.ph13.preheader

.lr.ph13.preheader:                               ; preds = %0
  %2 = add i32 %n, 1
  %3 = add i32 %n, -1
  %xtraiter = and i32 %n, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph13.preheader.split, label %.lr.ph13.prol.preheader

.lr.ph13.prol.preheader:                          ; preds = %.lr.ph13.preheader
  br label %.lr.ph13.prol

.lr.ph13.prol:                                    ; preds = %.lr.ph13.prol, %.lr.ph13.prol.preheader
  %indvars.iv23.prol = phi i64 [ %indvars.iv.next24.prol, %.lr.ph13.prol ], [ 1, %.lr.ph13.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph13.prol ], [ %xtraiter, %.lr.ph13.prol.preheader ]
  %4 = getelementptr inbounds double, double* %f, i64 %indvars.iv23.prol
  %5 = bitcast double* %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !33
  %7 = mul nuw nsw i64 %indvars.iv23.prol, 7
  %8 = add nuw nsw i64 %7, 6
  %9 = getelementptr inbounds double, double* %spline, i64 %8
  %10 = bitcast double* %9 to i64*
  store i64 %6, i64* %10, align 8, !tbaa !33
  %indvars.iv.next24.prol = add nuw nsw i64 %indvars.iv23.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph13.preheader.split.loopexit, label %.lr.ph13.prol, !llvm.loop !152

.lr.ph13.preheader.split.loopexit:                ; preds = %.lr.ph13.prol
  br label %.lr.ph13.preheader.split

.lr.ph13.preheader.split:                         ; preds = %.lr.ph13.preheader.split.loopexit, %.lr.ph13.preheader
  %indvars.iv23.unr = phi i64 [ 1, %.lr.ph13.preheader ], [ %indvars.iv.next24.prol, %.lr.ph13.preheader.split.loopexit ]
  %11 = icmp ult i32 %3, 3
  br i1 %11, label %._crit_edge14.loopexit, label %.lr.ph13.preheader.split.split

.lr.ph13.preheader.split.split:                   ; preds = %.lr.ph13.preheader.split
  br label %.lr.ph13

._crit_edge14.loopexit.unr-lcssa:                 ; preds = %.lr.ph13
  br label %._crit_edge14.loopexit

._crit_edge14.loopexit:                           ; preds = %._crit_edge14.loopexit.unr-lcssa, %.lr.ph13.preheader.split
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge14.loopexit, %0
  %12 = getelementptr inbounds double, double* %spline, i64 20
  %13 = load double, double* %12, align 8, !tbaa !33
  %14 = getelementptr inbounds double, double* %spline, i64 13
  %15 = load double, double* %14, align 8, !tbaa !33
  %16 = fsub double %13, %15
  %17 = getelementptr inbounds double, double* %spline, i64 12
  store double %16, double* %17, align 8, !tbaa !33
  %18 = getelementptr inbounds double, double* %spline, i64 27
  %19 = load double, double* %18, align 8, !tbaa !33
  %20 = fsub double %19, %15
  %21 = fmul double %20, 5.000000e-01
  %22 = getelementptr inbounds double, double* %spline, i64 19
  store double %21, double* %22, align 8, !tbaa !33
  %23 = mul i32 %n, 7
  %24 = add nsw i32 %23, 6
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %spline, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !33
  %28 = add nsw i32 %n, -2
  %29 = mul nsw i32 %28, 7
  %30 = add nsw i32 %29, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %spline, i64 %31
  %33 = load double, double* %32, align 8, !tbaa !33
  %34 = fsub double %27, %33
  %35 = fmul double %34, 5.000000e-01
  %36 = add i32 %23, -2
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %spline, i64 %37
  store double %35, double* %38, align 8, !tbaa !33
  %39 = add i32 %23, -1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, double* %spline, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !33
  %43 = fsub double %27, %42
  %44 = add nsw i32 %23, 5
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %spline, i64 %45
  store double %43, double* %46, align 8, !tbaa !33
  %47 = icmp slt i32 %28, 3
  br i1 %47, label %.preheader, label %.lr.ph10.preheader

.lr.ph10.preheader:                               ; preds = %._crit_edge14
  %48 = add i32 %n, -1
  br label %.lr.ph10

.lr.ph13:                                         ; preds = %.lr.ph13, %.lr.ph13.preheader.split.split
  %indvars.iv23 = phi i64 [ %indvars.iv23.unr, %.lr.ph13.preheader.split.split ], [ %indvars.iv.next24.3, %.lr.ph13 ]
  %49 = getelementptr inbounds double, double* %f, i64 %indvars.iv23
  %50 = bitcast double* %49 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !33
  %52 = mul nuw nsw i64 %indvars.iv23, 7
  %53 = add nuw nsw i64 %52, 6
  %54 = getelementptr inbounds double, double* %spline, i64 %53
  %55 = bitcast double* %54 to i64*
  store i64 %51, i64* %55, align 8, !tbaa !33
  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1
  %56 = getelementptr inbounds double, double* %f, i64 %indvars.iv.next24
  %57 = bitcast double* %56 to i64*
  %58 = load i64, i64* %57, align 8, !tbaa !33
  %59 = mul nuw nsw i64 %indvars.iv.next24, 7
  %60 = add nuw nsw i64 %59, 6
  %61 = getelementptr inbounds double, double* %spline, i64 %60
  %62 = bitcast double* %61 to i64*
  store i64 %58, i64* %62, align 8, !tbaa !33
  %indvars.iv.next24.1 = add nsw i64 %indvars.iv23, 2
  %63 = getelementptr inbounds double, double* %f, i64 %indvars.iv.next24.1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !33
  %66 = mul nuw nsw i64 %indvars.iv.next24.1, 7
  %67 = add nuw nsw i64 %66, 6
  %68 = getelementptr inbounds double, double* %spline, i64 %67
  %69 = bitcast double* %68 to i64*
  store i64 %65, i64* %69, align 8, !tbaa !33
  %indvars.iv.next24.2 = add nsw i64 %indvars.iv23, 3
  %70 = getelementptr inbounds double, double* %f, i64 %indvars.iv.next24.2
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8, !tbaa !33
  %73 = mul nuw nsw i64 %indvars.iv.next24.2, 7
  %74 = add nuw nsw i64 %73, 6
  %75 = getelementptr inbounds double, double* %spline, i64 %74
  %76 = bitcast double* %75 to i64*
  store i64 %72, i64* %76, align 8, !tbaa !33
  %indvars.iv.next24.3 = add nsw i64 %indvars.iv23, 4
  %lftr.wideiv25.3 = trunc i64 %indvars.iv.next24.3 to i32
  %exitcond26.3 = icmp eq i32 %lftr.wideiv25.3, %2
  br i1 %exitcond26.3, label %._crit_edge14.loopexit.unr-lcssa, label %.lr.ph13

.preheader.loopexit:                              ; preds = %.lr.ph10
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %._crit_edge14
  %77 = icmp sgt i32 %n, 1
  br i1 %77, label %.lr.ph6.preheader, label %._crit_edge7

.lr.ph6.preheader:                                ; preds = %.preheader
  br label %.lr.ph6

.lr.ph10:                                         ; preds = %.lr.ph10, %.lr.ph10.preheader
  %indvars.iv19 = phi i64 [ 3, %.lr.ph10.preheader ], [ %indvars.iv.next20, %.lr.ph10 ]
  %78 = trunc i64 %indvars.iv19 to i32
  %79 = mul i32 %78, 7
  %80 = add i32 %79, -8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %spline, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = add i32 %79, 20
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %spline, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = fsub double %83, %87
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %89 = mul nuw nsw i64 %indvars.iv.next20, 7
  %90 = add nuw nsw i64 %89, 6
  %91 = getelementptr inbounds double, double* %spline, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !33
  %93 = add i32 %79, -1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double, double* %spline, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !33
  %97 = fsub double %92, %96
  %98 = fmul double %97, 8.000000e+00
  %99 = fadd double %88, %98
  %100 = fdiv double %99, 1.200000e+01
  %101 = mul nuw nsw i64 %indvars.iv19, 7
  %102 = add nuw nsw i64 %101, 5
  %103 = getelementptr inbounds double, double* %spline, i64 %102
  store double %100, double* %103, align 8, !tbaa !33
  %lftr.wideiv21 = trunc i64 %indvars.iv.next20 to i32
  %exitcond22 = icmp eq i32 %lftr.wideiv21, %48
  br i1 %exitcond22, label %.preheader.loopexit, label %.lr.ph10

._crit_edge7.loopexit:                            ; preds = %.lr.ph6
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge7.loopexit, %.preheader
  %104 = add nsw i32 %23, 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %spline, i64 %105
  store double 0.000000e+00, double* %106, align 8, !tbaa !33
  %107 = add nsw i32 %23, 3
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds double, double* %spline, i64 %108
  store double 0.000000e+00, double* %109, align 8, !tbaa !33
  br i1 %1, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %._crit_edge7
  %110 = add i32 %n, 1
  %111 = insertelement <2 x double> undef, double %delta, i32 0
  %112 = insertelement <2 x double> %111, double %delta, i32 1
  br label %.lr.ph

.lr.ph6:                                          ; preds = %.lr.ph6, %.lr.ph6.preheader
  %indvars.iv15 = phi i64 [ %indvars.iv.next16, %.lr.ph6 ], [ 1, %.lr.ph6.preheader ]
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %113 = mul nuw nsw i64 %indvars.iv.next16, 7
  %114 = add nuw nsw i64 %113, 6
  %115 = getelementptr inbounds double, double* %spline, i64 %114
  %116 = load double, double* %115, align 8, !tbaa !33
  %117 = mul nuw nsw i64 %indvars.iv15, 7
  %118 = add nuw nsw i64 %117, 6
  %119 = getelementptr inbounds double, double* %spline, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !33
  %121 = fsub double %116, %120
  %122 = fmul double %121, 3.000000e+00
  %123 = add nuw nsw i64 %117, 5
  %124 = getelementptr inbounds double, double* %spline, i64 %123
  %125 = load double, double* %124, align 8, !tbaa !33
  %126 = fmul double %125, 2.000000e+00
  %127 = fsub double %122, %126
  %128 = add nuw nsw i64 %113, 5
  %129 = getelementptr inbounds double, double* %spline, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !33
  %131 = fsub double %127, %130
  %132 = add nuw nsw i64 %117, 4
  %133 = getelementptr inbounds double, double* %spline, i64 %132
  store double %131, double* %133, align 8, !tbaa !33
  %134 = fadd double %125, %130
  %135 = fmul double %121, 2.000000e+00
  %136 = fsub double %134, %135
  %137 = add nuw nsw i64 %117, 3
  %138 = getelementptr inbounds double, double* %spline, i64 %137
  store double %136, double* %138, align 8, !tbaa !33
  %lftr.wideiv17 = trunc i64 %indvars.iv.next16 to i32
  %exitcond18 = icmp eq i32 %lftr.wideiv17, %n
  br i1 %exitcond18, label %._crit_edge7.loopexit, label %.lr.ph6

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge7
  ret void

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 1, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %139 = mul nuw nsw i64 %indvars.iv, 7
  %140 = add nuw nsw i64 %139, 5
  %141 = getelementptr inbounds double, double* %spline, i64 %140
  %142 = load double, double* %141, align 8, !tbaa !33
  %143 = fdiv double %142, %delta
  %144 = add nuw nsw i64 %139, 2
  %145 = getelementptr inbounds double, double* %spline, i64 %144
  store double %143, double* %145, align 8, !tbaa !33
  %146 = add nuw nsw i64 %139, 3
  %147 = getelementptr inbounds double, double* %spline, i64 %146
  %148 = bitcast double* %147 to <2 x double>*
  %149 = load <2 x double>, <2 x double>* %148, align 8, !tbaa !33
  %150 = fmul <2 x double> %149, <double 3.000000e+00, double 2.000000e+00>
  %151 = fdiv <2 x double> %150, %112
  %152 = getelementptr inbounds double, double* %spline, i64 %139
  %153 = bitcast double* %152 to <2 x double>*
  store <2 x double> %151, <2 x double>* %153, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %110
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM7computeER4AtomR8NeighborR4Commi(%class.ForceEAM* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Comm* nocapture readonly dereferenceable(336) %comm, i32 %me) unnamed_addr #11 align 2 {
  %1 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %2 = load i32, i32* %1, align 4, !tbaa !41
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %11, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 10
  %6 = load %class.ThreadData*, %class.ThreadData** %5, align 8, !tbaa !24
  %7 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !18
  %9 = icmp sgt i32 %8, 1
  br i1 %9, label %12, label %10

; <label>:10                                      ; preds = %4
  tail call void @_ZN8ForceEAM17compute_halfneighER4AtomR8NeighborR4Commi(%class.ForceEAM* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, i32 undef)
  br label %12

; <label>:11                                      ; preds = %0
  tail call void @_ZN8ForceEAM17compute_fullneighER4AtomR8NeighborR4Commi(%class.ForceEAM* %this, %class.Atom* nonnull dereferenceable(224) %atom, %class.Neighbor* nonnull dereferenceable(240) %neighbor, %class.Comm* nonnull dereferenceable(336) %comm, i32 undef)
  br label %12

; <label>:12                                      ; preds = %11, %10, %4
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM17compute_halfneighER4AtomR8NeighborR4Commi(%class.ForceEAM* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Comm* nocapture readonly dereferenceable(336) %comm, i32 %me) #11 align 2 {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 6
  store double 0.000000e+00, double* %1, align 8, !tbaa !113
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 3
  %3 = load i32, i32* %2, align 4, !tbaa !99
  %4 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 18
  %5 = load i32, i32* %4, align 8, !tbaa !153
  %6 = icmp sgt i32 %3, %5
  br i1 %6, label %7, label %30

; <label>:7                                       ; preds = %0
  store i32 %3, i32* %4, align 8, !tbaa !153
  %8 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %9 = load double*, double** %8, align 8, !tbaa !154
  %10 = icmp eq double* %9, null
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %7
  %12 = bitcast double* %9 to i8*
  tail call void @_ZdaPv(i8* %12) #19
  br label %13

; <label>:13                                      ; preds = %11, %7
  %14 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %15 = load double*, double** %14, align 8, !tbaa !155
  %16 = icmp eq double* %15, null
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %13
  %18 = bitcast double* %15 to i8*
  tail call void @_ZdaPv(i8* %18) #19
  br label %19

; <label>:19                                      ; preds = %17, %13
  %20 = load i32, i32* %4, align 8, !tbaa !153
  %21 = sext i32 %20 to i64
  %22 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %21, i64 8)
  %23 = extractvalue { i64, i1 } %22, 1
  %24 = extractvalue { i64, i1 } %22, 0
  %25 = select i1 %23, i64 -1, i64 %24
  %26 = tail call noalias i8* @_Znam(i64 %25) #18
  %27 = bitcast double** %8 to i8**
  store i8* %26, i8** %27, align 8, !tbaa !154
  %28 = tail call noalias i8* @_Znam(i64 %25) #18
  %29 = bitcast double** %14 to i8**
  store i8* %28, i8** %29, align 8, !tbaa !155
  br label %30

; <label>:30                                      ; preds = %19, %0
  %31 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %32 = load double*, double** %31, align 8, !tbaa !100
  %33 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %34 = load double*, double** %33, align 8, !tbaa !80
  %35 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %36 = load i32*, i32** %35, align 8, !tbaa !102
  %37 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !84
  %39 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %40 = load i32, i32* %39, align 8, !tbaa !114
  %41 = add i32 %40, %38
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %.lr.ph59, label %.preheader27

.lr.ph59:                                         ; preds = %30
  %43 = sext i32 %41 to i64
  %44 = add nsw i64 %43, -1
  %xtraiter = and i64 %43, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph59.split, label %.preheader91

.preheader91:                                     ; preds = %.lr.ph59
  br label %45

; <label>:45                                      ; preds = %45, %.preheader91
  %indvars.iv85.prol = phi i64 [ %indvars.iv.next86.prol, %45 ], [ 0, %.preheader91 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %45 ], [ %xtraiter, %.preheader91 ]
  %46 = mul nuw nsw i64 %indvars.iv85.prol, 3
  %47 = getelementptr inbounds double, double* %34, i64 %46
  %48 = bitcast double* %47 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %48, align 8, !tbaa !33
  %49 = add nuw nsw i64 %46, 2
  %50 = getelementptr inbounds double, double* %34, i64 %49
  store double 0.000000e+00, double* %50, align 8, !tbaa !33
  %indvars.iv.next86.prol = add nuw nsw i64 %indvars.iv85.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph59.split.loopexit, label %45, !llvm.loop !156

.lr.ph59.split.loopexit:                          ; preds = %45
  br label %.lr.ph59.split

.lr.ph59.split:                                   ; preds = %.lr.ph59.split.loopexit, %.lr.ph59
  %indvars.iv85.unr = phi i64 [ 0, %.lr.ph59 ], [ %indvars.iv.next86.prol, %.lr.ph59.split.loopexit ]
  %51 = icmp ult i64 %44, 3
  br i1 %51, label %.preheader27.loopexit, label %.lr.ph59.split.split

.lr.ph59.split.split:                             ; preds = %.lr.ph59.split
  br label %53

.preheader27.loopexit.unr-lcssa:                  ; preds = %53
  br label %.preheader27.loopexit

.preheader27.loopexit:                            ; preds = %.preheader27.loopexit.unr-lcssa, %.lr.ph59.split
  br label %.preheader27

.preheader27:                                     ; preds = %.preheader27.loopexit, %30
  %52 = icmp sgt i32 %38, 0
  br i1 %52, label %.lr.ph54, label %._crit_edge45.thread

; <label>:53                                      ; preds = %53, %.lr.ph59.split.split
  %indvars.iv85 = phi i64 [ %indvars.iv85.unr, %.lr.ph59.split.split ], [ %indvars.iv.next86.3, %53 ]
  %54 = mul i64 %indvars.iv85, 3
  %55 = getelementptr inbounds double, double* %34, i64 %54
  %56 = bitcast double* %55 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %56, align 8, !tbaa !33
  %57 = add nuw nsw i64 %54, 2
  %58 = getelementptr inbounds double, double* %34, i64 %57
  store double 0.000000e+00, double* %58, align 8, !tbaa !33
  %59 = add i64 %54, 3
  %60 = getelementptr inbounds double, double* %34, i64 %59
  %61 = bitcast double* %60 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %61, align 8, !tbaa !33
  %62 = add i64 %54, 5
  %63 = getelementptr inbounds double, double* %34, i64 %62
  store double 0.000000e+00, double* %63, align 8, !tbaa !33
  %64 = add i64 %54, 6
  %65 = getelementptr inbounds double, double* %34, i64 %64
  %66 = bitcast double* %65 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %66, align 8, !tbaa !33
  %67 = add i64 %54, 8
  %68 = getelementptr inbounds double, double* %34, i64 %67
  store double 0.000000e+00, double* %68, align 8, !tbaa !33
  %69 = add i64 %54, 9
  %70 = getelementptr inbounds double, double* %34, i64 %69
  %71 = bitcast double* %70 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %71, align 8, !tbaa !33
  %72 = add i64 %54, 11
  %73 = getelementptr inbounds double, double* %34, i64 %72
  store double 0.000000e+00, double* %73, align 8, !tbaa !33
  %indvars.iv.next86.3 = add nsw i64 %indvars.iv85, 4
  %74 = icmp slt i64 %indvars.iv.next86.3, %43
  br i1 %74, label %53, label %.preheader27.loopexit.unr-lcssa

.lr.ph54:                                         ; preds = %.preheader27
  %75 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %76 = bitcast double** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  %78 = add i32 %38, -1
  %79 = zext i32 %78 to i64
  %80 = shl nuw nsw i64 %79, 3
  %81 = add nuw nsw i64 %80, 8
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 %81, i32 8, i1 false)
  %82 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %83 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %84 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %85 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  %86 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 2
  %87 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 10
  %88 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  %89 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 5
  %90 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 13
  br label %139

.preheader:                                       ; preds = %._crit_edge51
  br i1 true, label %.lr.ph44, label %.preheader.._crit_edge45.thread_crit_edge

.preheader.._crit_edge45.thread_crit_edge:        ; preds = %.preheader
  br label %._crit_edge45.thread

.lr.ph44:                                         ; preds = %.preheader
  %91 = load double*, double** %75, align 8
  %92 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 12
  %93 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 2
  %94 = load i32, i32* %93, align 8
  %95 = add nsw i32 %94, -1
  %96 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 4
  %97 = load i32, i32* %96, align 8
  %98 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 14
  %99 = load double*, double** %98, align 8
  %100 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %101 = load double*, double** %100, align 8
  %102 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 5
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %.lr.ph44.split.us.preheader, label %.lr.ph44.split.preheader

.lr.ph44.split.preheader:                         ; preds = %.lr.ph44
  br label %.lr.ph44.split

.lr.ph44.split.us.preheader:                      ; preds = %.lr.ph44
  br label %.lr.ph44.split.us

.lr.ph44.split.us:                                ; preds = %.lr.ph44.split.us, %.lr.ph44.split.us.preheader
  %indvars.iv65 = phi i64 [ %indvars.iv.next66, %.lr.ph44.split.us ], [ 0, %.lr.ph44.split.us.preheader ]
  %105 = getelementptr inbounds double, double* %91, i64 %indvars.iv65
  %106 = load double, double* %105, align 8, !tbaa !33
  %107 = load double, double* %92, align 8, !tbaa !139
  %108 = fmul double %106, %107
  %109 = fadd double %108, 1.000000e+00
  %110 = fptosi double %109 to i32
  %111 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv65
  %112 = load i32, i32* %111, align 4, !tbaa !1
  %113 = mul nsw i32 %112, %112
  %114 = icmp slt i32 %110, %95
  %.23.us = select i1 %114, i32 %110, i32 %95
  %115 = icmp slt i32 %.23.us, 1
  %..23.us = select i1 %115, i32 1, i32 %.23.us
  %116 = sitofp i32 %..23.us to double
  %117 = fsub double %109, %116
  %118 = fcmp olt double %117, 1.000000e+00
  %119 = select i1 %118, double %117, double 1.000000e+00
  %120 = mul nsw i32 %97, %113
  %121 = mul nsw i32 %..23.us, 7
  %122 = add nsw i32 %121, %120
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds double, double* %99, i64 %123
  %125 = load double, double* %124, align 8, !tbaa !33
  %126 = fmul double %125, %119
  %127 = add nsw i32 %122, 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds double, double* %99, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !33
  %131 = fadd double %130, %126
  %132 = fmul double %119, %131
  %133 = add nsw i32 %122, 2
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double, double* %99, i64 %134
  %136 = load double, double* %135, align 8, !tbaa !33
  %137 = fadd double %136, %132
  %138 = getelementptr inbounds double, double* %101, i64 %indvars.iv65
  store double %137, double* %138, align 8, !tbaa !33
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1
  %lftr.wideiv67 = trunc i64 %indvars.iv.next66 to i32
  %exitcond68 = icmp eq i32 %lftr.wideiv67, %38
  br i1 %exitcond68, label %._crit_edge45.loopexit, label %.lr.ph44.split.us

; <label>:139                                     ; preds = %._crit_edge51, %.lr.ph54
  %indvars.iv77 = phi i64 [ 0, %.lr.ph54 ], [ %indvars.iv.next78, %._crit_edge51 ]
  %140 = load i32, i32* %82, align 8, !tbaa !118
  %141 = trunc i64 %indvars.iv77 to i32
  %142 = mul nsw i32 %140, %141
  %143 = sext i32 %142 to i64
  %144 = load i32*, i32** %83, align 8, !tbaa !119
  %145 = getelementptr inbounds i32, i32* %144, i64 %143
  %146 = load i32*, i32** %84, align 8, !tbaa !120
  %147 = getelementptr inbounds i32, i32* %146, i64 %indvars.iv77
  %148 = load i32, i32* %147, align 4, !tbaa !1
  %149 = mul nuw nsw i64 %indvars.iv77, 3
  %150 = getelementptr inbounds double, double* %32, i64 %149
  %151 = load double, double* %150, align 8, !tbaa !33
  %152 = add nuw nsw i64 %149, 1
  %153 = getelementptr inbounds double, double* %32, i64 %152
  %154 = load double, double* %153, align 8, !tbaa !33
  %155 = add nuw nsw i64 %149, 2
  %156 = getelementptr inbounds double, double* %32, i64 %155
  %157 = load double, double* %156, align 8, !tbaa !33
  %158 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv77
  %159 = load i32, i32* %158, align 4, !tbaa !1
  %160 = icmp sgt i32 %148, 0
  br i1 %160, label %.lr.ph50.preheader, label %._crit_edge51

.lr.ph50.preheader:                               ; preds = %139
  br label %.lr.ph50

._crit_edge51.loopexit:                           ; preds = %245
  br label %._crit_edge51

._crit_edge51:                                    ; preds = %._crit_edge51.loopexit, %139
  %rhoi.0.lcssa = phi double [ 0.000000e+00, %139 ], [ %rhoi.1, %._crit_edge51.loopexit ]
  %161 = load double*, double** %75, align 8, !tbaa !154
  %162 = getelementptr inbounds double, double* %161, i64 %indvars.iv77
  %163 = load double, double* %162, align 8, !tbaa !33
  %164 = fadd double %rhoi.0.lcssa, %163
  store double %164, double* %162, align 8, !tbaa !33
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %lftr.wideiv79 = trunc i64 %indvars.iv.next78 to i32
  %exitcond80 = icmp eq i32 %lftr.wideiv79, %38
  br i1 %exitcond80, label %.preheader, label %139

.lr.ph50:                                         ; preds = %245, %.lr.ph50.preheader
  %indvars.iv73 = phi i64 [ %indvars.iv.next74, %245 ], [ 0, %.lr.ph50.preheader ]
  %rhoi.048 = phi double [ %rhoi.1, %245 ], [ 0.000000e+00, %.lr.ph50.preheader ]
  %165 = getelementptr inbounds i32, i32* %145, i64 %indvars.iv73
  %166 = load i32, i32* %165, align 4, !tbaa !1
  %167 = mul nsw i32 %166, 3
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds double, double* %32, i64 %168
  %170 = load double, double* %169, align 8, !tbaa !33
  %171 = fsub double %151, %170
  %172 = add nsw i32 %167, 1
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds double, double* %32, i64 %173
  %175 = load double, double* %174, align 8, !tbaa !33
  %176 = fsub double %154, %175
  %177 = add nsw i32 %167, 2
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds double, double* %32, i64 %178
  %180 = load double, double* %179, align 8, !tbaa !33
  %181 = fsub double %157, %180
  %182 = sext i32 %166 to i64
  %183 = getelementptr inbounds i32, i32* %36, i64 %182
  %184 = load i32, i32* %183, align 4, !tbaa !1
  %185 = fmul double %171, %171
  %186 = fmul double %176, %176
  %187 = fadd double %185, %186
  %188 = fmul double %181, %181
  %189 = fadd double %187, %188
  %190 = load i32, i32* %85, align 8, !tbaa !110
  %191 = mul nsw i32 %190, %159
  %192 = add nsw i32 %191, %184
  %193 = sext i32 %192 to i64
  %194 = load double*, double** %86, align 8, !tbaa !121
  %195 = getelementptr inbounds double, double* %194, i64 %193
  %196 = load double, double* %195, align 8, !tbaa !33
  %197 = fcmp olt double %189, %196
  br i1 %197, label %198, label %245

; <label>:198                                     ; preds = %.lr.ph50
  %199 = tail call double @sqrt(double %189) #7
  %200 = load double, double* %87, align 8, !tbaa !137
  %201 = fmul double %199, %200
  %202 = fadd double %201, 1.000000e+00
  %203 = fptosi double %202 to i32
  %204 = load i32, i32* %88, align 4, !tbaa !146
  %205 = add nsw i32 %204, -1
  %206 = icmp slt i32 %203, %205
  %. = select i1 %206, i32 %203, i32 %205
  %207 = sitofp i32 %. to double
  %208 = fsub double %202, %207
  %209 = fcmp olt double %208, 1.000000e+00
  %210 = select i1 %209, double %208, double 1.000000e+00
  %211 = load i32, i32* %89, align 4, !tbaa !141
  %212 = mul nsw i32 %211, %192
  %213 = mul nsw i32 %., 7
  %214 = add nsw i32 %213, %212
  %215 = add nsw i32 %214, 3
  %216 = sext i32 %215 to i64
  %217 = load double*, double** %90, align 8, !tbaa !143
  %218 = getelementptr inbounds double, double* %217, i64 %216
  %219 = load double, double* %218, align 8, !tbaa !33
  %220 = fmul double %219, %210
  %221 = add nsw i32 %214, 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds double, double* %217, i64 %222
  %224 = load double, double* %223, align 8, !tbaa !33
  %225 = fadd double %224, %220
  %226 = fmul double %210, %225
  %227 = add nsw i32 %214, 5
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds double, double* %217, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !33
  %231 = fadd double %230, %226
  %232 = fmul double %210, %231
  %233 = add nsw i32 %214, 6
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %217, i64 %234
  %236 = load double, double* %235, align 8, !tbaa !33
  %237 = fadd double %236, %232
  %238 = fadd double %rhoi.048, %237
  %239 = icmp slt i32 %166, %38
  br i1 %239, label %240, label %245

; <label>:240                                     ; preds = %198
  %241 = load double*, double** %75, align 8, !tbaa !154
  %242 = getelementptr inbounds double, double* %241, i64 %182
  %243 = load double, double* %242, align 8, !tbaa !33
  %244 = fadd double %237, %243
  store double %244, double* %242, align 8, !tbaa !33
  br label %245

; <label>:245                                     ; preds = %240, %198, %.lr.ph50
  %rhoi.1 = phi double [ %rhoi.048, %.lr.ph50 ], [ %238, %240 ], [ %238, %198 ]
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1
  %lftr.wideiv75 = trunc i64 %indvars.iv.next74 to i32
  %exitcond76 = icmp eq i32 %lftr.wideiv75, %148
  br i1 %exitcond76, label %._crit_edge51.loopexit, label %.lr.ph50

._crit_edge45.thread:                             ; preds = %.preheader.._crit_edge45.thread_crit_edge, %.preheader27
  tail call void @_ZN8ForceEAM11communicateER4AtomR4Comm(%class.ForceEAM* %this, %class.Atom* dereferenceable(224) undef, %class.Comm* nonnull dereferenceable(336) %comm)
  br label %._crit_edge40

._crit_edge45.loopexit:                           ; preds = %.lr.ph44.split.us
  br label %._crit_edge45

._crit_edge45.loopexit89:                         ; preds = %.lr.ph44.split
  br label %._crit_edge45

._crit_edge45:                                    ; preds = %._crit_edge45.loopexit89, %._crit_edge45.loopexit
  %evdwl.0.lcssa = phi double [ 0.000000e+00, %._crit_edge45.loopexit ], [ %303, %._crit_edge45.loopexit89 ]
  tail call void @_ZN8ForceEAM11communicateER4AtomR4Comm(%class.ForceEAM* nonnull %this, %class.Atom* dereferenceable(224) undef, %class.Comm* nonnull dereferenceable(336) %comm)
  br i1 true, label %.lr.ph39, label %._crit_edge45.._crit_edge40_crit_edge

._crit_edge45.._crit_edge40_crit_edge:            ; preds = %._crit_edge45
  br label %._crit_edge40

.lr.ph39:                                         ; preds = %._crit_edge45
  %246 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 15
  br label %305

.lr.ph44.split:                                   ; preds = %.lr.ph44.split, %.lr.ph44.split.preheader
  %indvars.iv69 = phi i64 [ %indvars.iv.next70, %.lr.ph44.split ], [ 0, %.lr.ph44.split.preheader ]
  %evdwl.043 = phi double [ %303, %.lr.ph44.split ], [ 0.000000e+00, %.lr.ph44.split.preheader ]
  %247 = getelementptr inbounds double, double* %91, i64 %indvars.iv69
  %248 = load double, double* %247, align 8, !tbaa !33
  %249 = load double, double* %92, align 8, !tbaa !139
  %250 = fmul double %248, %249
  %251 = fadd double %250, 1.000000e+00
  %252 = fptosi double %251 to i32
  %253 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv69
  %254 = load i32, i32* %253, align 4, !tbaa !1
  %255 = mul nsw i32 %254, %254
  %256 = icmp slt i32 %252, %95
  %.23 = select i1 %256, i32 %252, i32 %95
  %257 = icmp slt i32 %.23, 1
  %..23 = select i1 %257, i32 1, i32 %.23
  %258 = sitofp i32 %..23 to double
  %259 = fsub double %251, %258
  %260 = fcmp olt double %259, 1.000000e+00
  %261 = select i1 %260, double %259, double 1.000000e+00
  %262 = mul nsw i32 %97, %255
  %263 = mul nsw i32 %..23, 7
  %264 = add nsw i32 %263, %262
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds double, double* %99, i64 %265
  %267 = load double, double* %266, align 8, !tbaa !33
  %268 = fmul double %267, %261
  %269 = add nsw i32 %264, 1
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds double, double* %99, i64 %270
  %272 = load double, double* %271, align 8, !tbaa !33
  %273 = fadd double %272, %268
  %274 = fmul double %261, %273
  %275 = add nsw i32 %264, 2
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds double, double* %99, i64 %276
  %278 = load double, double* %277, align 8, !tbaa !33
  %279 = fadd double %278, %274
  %280 = getelementptr inbounds double, double* %101, i64 %indvars.iv69
  store double %279, double* %280, align 8, !tbaa !33
  %281 = add nsw i32 %264, 3
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds double, double* %99, i64 %282
  %284 = load double, double* %283, align 8, !tbaa !33
  %285 = fmul double %261, %284
  %286 = add nsw i32 %264, 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds double, double* %99, i64 %287
  %289 = load double, double* %288, align 8, !tbaa !33
  %290 = fadd double %285, %289
  %291 = fmul double %261, %290
  %292 = add nsw i32 %264, 5
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds double, double* %99, i64 %293
  %295 = load double, double* %294, align 8, !tbaa !33
  %296 = fadd double %295, %291
  %297 = fmul double %261, %296
  %298 = add nsw i32 %264, 6
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds double, double* %99, i64 %299
  %301 = load double, double* %300, align 8, !tbaa !33
  %302 = fadd double %301, %297
  %303 = fadd double %evdwl.043, %302
  %indvars.iv.next70 = add nuw nsw i64 %indvars.iv69, 1
  %lftr.wideiv71 = trunc i64 %indvars.iv.next70 to i32
  %exitcond72 = icmp eq i32 %lftr.wideiv71, %38
  br i1 %exitcond72, label %._crit_edge45.loopexit89, label %.lr.ph44.split

._crit_edge40.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge40

._crit_edge40:                                    ; preds = %._crit_edge45.._crit_edge40_crit_edge, %._crit_edge40.loopexit, %._crit_edge45.thread
  %evdwl.2.lcssa = phi double [ undef, %._crit_edge45.._crit_edge40_crit_edge ], [ 0.000000e+00, %._crit_edge45.thread ], [ %evdwl.3.lcssa, %._crit_edge40.loopexit ]
  %304 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 3
  store double %evdwl.2.lcssa, double* %304, align 8, !tbaa !112
  ret void

; <label>:305                                     ; preds = %._crit_edge, %.lr.ph39
  %indvars.iv61 = phi i64 [ 0, %.lr.ph39 ], [ %indvars.iv.next62, %._crit_edge ]
  %evdwl.237 = phi double [ %evdwl.0.lcssa, %.lr.ph39 ], [ %evdwl.3.lcssa, %._crit_edge ]
  %306 = load i32, i32* %82, align 8, !tbaa !118
  %307 = trunc i64 %indvars.iv61 to i32
  %308 = mul nsw i32 %306, %307
  %309 = sext i32 %308 to i64
  %310 = load i32*, i32** %83, align 8, !tbaa !119
  %311 = getelementptr inbounds i32, i32* %310, i64 %309
  %312 = load i32*, i32** %84, align 8, !tbaa !120
  %313 = getelementptr inbounds i32, i32* %312, i64 %indvars.iv61
  %314 = load i32, i32* %313, align 4, !tbaa !1
  %315 = mul nuw nsw i64 %indvars.iv61, 3
  %316 = getelementptr inbounds double, double* %32, i64 %315
  %317 = bitcast double* %316 to <2 x double>*
  %318 = load <2 x double>, <2 x double>* %317, align 8, !tbaa !33
  %319 = add nuw nsw i64 %315, 2
  %320 = getelementptr inbounds double, double* %32, i64 %319
  %321 = load double, double* %320, align 8, !tbaa !33
  %322 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv61
  %323 = load i32, i32* %322, align 4, !tbaa !1
  %324 = icmp sgt i32 %314, 0
  br i1 %324, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %305
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %486
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %305
  %evdwl.3.lcssa = phi double [ %evdwl.237, %305 ], [ %evdwl.5, %._crit_edge.loopexit ]
  %fz.0.lcssa = phi double [ 0.000000e+00, %305 ], [ %fz.1, %._crit_edge.loopexit ]
  %325 = phi <2 x double> [ zeroinitializer, %305 ], [ %487, %._crit_edge.loopexit ]
  %326 = getelementptr inbounds double, double* %34, i64 %315
  %327 = bitcast double* %326 to <2 x double>*
  %328 = load <2 x double>, <2 x double>* %327, align 8, !tbaa !33
  %329 = fadd <2 x double> %325, %328
  store <2 x double> %329, <2 x double>* %327, align 8, !tbaa !33
  %330 = getelementptr inbounds double, double* %34, i64 %319
  %331 = load double, double* %330, align 8, !tbaa !33
  %332 = fadd double %fz.0.lcssa, %331
  store double %332, double* %330, align 8, !tbaa !33
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1
  %lftr.wideiv63 = trunc i64 %indvars.iv.next62 to i32
  %exitcond64 = icmp eq i32 %lftr.wideiv63, %38
  br i1 %exitcond64, label %._crit_edge40.loopexit, label %305

.lr.ph:                                           ; preds = %486, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %486 ], [ 0, %.lr.ph.preheader ]
  %evdwl.332 = phi double [ %evdwl.5, %486 ], [ %evdwl.237, %.lr.ph.preheader ]
  %fz.028 = phi double [ %fz.1, %486 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %333 = phi <2 x double> [ %487, %486 ], [ zeroinitializer, %.lr.ph.preheader ]
  %334 = getelementptr inbounds i32, i32* %311, i64 %indvars.iv
  %335 = load i32, i32* %334, align 4, !tbaa !1
  %336 = mul nsw i32 %335, 3
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds double, double* %32, i64 %337
  %339 = load double, double* %338, align 8, !tbaa !33
  %340 = add nsw i32 %336, 1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds double, double* %32, i64 %341
  %343 = load double, double* %342, align 8, !tbaa !33
  %344 = insertelement <2 x double> undef, double %339, i32 0
  %345 = insertelement <2 x double> %344, double %343, i32 1
  %346 = fsub <2 x double> %318, %345
  %347 = add nsw i32 %336, 2
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds double, double* %32, i64 %348
  %350 = load double, double* %349, align 8, !tbaa !33
  %351 = fsub double %321, %350
  %352 = sext i32 %335 to i64
  %353 = getelementptr inbounds i32, i32* %36, i64 %352
  %354 = load i32, i32* %353, align 4, !tbaa !1
  %355 = extractelement <2 x double> %346, i32 0
  %356 = fmul double %355, %355
  %357 = extractelement <2 x double> %346, i32 1
  %358 = fmul double %357, %357
  %359 = fadd double %356, %358
  %360 = fmul double %351, %351
  %361 = fadd double %359, %360
  %362 = load i32, i32* %85, align 8, !tbaa !110
  %363 = mul nsw i32 %362, %323
  %364 = add nsw i32 %363, %354
  %365 = sext i32 %364 to i64
  %366 = load double*, double** %86, align 8, !tbaa !121
  %367 = getelementptr inbounds double, double* %366, i64 %365
  %368 = load double, double* %367, align 8, !tbaa !33
  %369 = fcmp olt double %361, %368
  br i1 %369, label %370, label %486

; <label>:370                                     ; preds = %.lr.ph
  %371 = tail call double @sqrt(double %361) #7
  %372 = load double, double* %87, align 8, !tbaa !137
  %373 = fmul double %371, %372
  %374 = fadd double %373, 1.000000e+00
  %375 = fptosi double %374 to i32
  %376 = load i32, i32* %88, align 4, !tbaa !146
  %377 = add nsw i32 %376, -1
  %378 = icmp slt i32 %375, %377
  %.25 = select i1 %378, i32 %375, i32 %377
  %379 = sitofp i32 %.25 to double
  %380 = fsub double %374, %379
  %381 = fcmp olt double %380, 1.000000e+00
  %382 = select i1 %381, double %380, double 1.000000e+00
  %383 = load i32, i32* %89, align 4, !tbaa !141
  %384 = mul nsw i32 %383, %364
  %385 = mul nsw i32 %.25, 7
  %386 = add nsw i32 %385, %384
  %387 = sext i32 %386 to i64
  %388 = load double*, double** %90, align 8, !tbaa !143
  %389 = getelementptr inbounds double, double* %388, i64 %387
  %390 = load double, double* %389, align 8, !tbaa !33
  %391 = fmul double %390, %382
  %392 = add nsw i32 %386, 1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds double, double* %388, i64 %393
  %395 = load double, double* %394, align 8, !tbaa !33
  %396 = fadd double %395, %391
  %397 = fmul double %382, %396
  %398 = add nsw i32 %386, 2
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds double, double* %388, i64 %399
  %401 = load double, double* %400, align 8, !tbaa !33
  %402 = fadd double %401, %397
  %403 = load double*, double** %246, align 8, !tbaa !144
  %404 = getelementptr inbounds double, double* %403, i64 %387
  %405 = load double, double* %404, align 8, !tbaa !33
  %406 = fmul double %405, %382
  %407 = getelementptr inbounds double, double* %403, i64 %393
  %408 = load double, double* %407, align 8, !tbaa !33
  %409 = fadd double %408, %406
  %410 = fmul double %382, %409
  %411 = getelementptr inbounds double, double* %403, i64 %399
  %412 = load double, double* %411, align 8, !tbaa !33
  %413 = fadd double %412, %410
  %414 = add nsw i32 %386, 3
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds double, double* %403, i64 %415
  %417 = load double, double* %416, align 8, !tbaa !33
  %418 = fmul double %382, %417
  %419 = add nsw i32 %386, 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds double, double* %403, i64 %420
  %422 = load double, double* %421, align 8, !tbaa !33
  %423 = fadd double %418, %422
  %424 = fmul double %382, %423
  %425 = add nsw i32 %386, 5
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds double, double* %403, i64 %426
  %428 = load double, double* %427, align 8, !tbaa !33
  %429 = fadd double %428, %424
  %430 = fmul double %382, %429
  %431 = add nsw i32 %386, 6
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds double, double* %403, i64 %432
  %434 = load double, double* %433, align 8, !tbaa !33
  %435 = fadd double %434, %430
  %436 = fdiv double 1.000000e+00, %371
  %437 = fmul double %436, %435
  %438 = fmul double %436, %413
  %439 = fmul double %436, %437
  %440 = fsub double %438, %439
  %441 = load double*, double** %100, align 8, !tbaa !155
  %442 = getelementptr inbounds double, double* %441, i64 %indvars.iv61
  %443 = load double, double* %442, align 8, !tbaa !33
  %444 = fmul double %402, %443
  %445 = getelementptr inbounds double, double* %441, i64 %352
  %446 = load double, double* %445, align 8, !tbaa !33
  %447 = fmul double %402, %446
  %448 = fadd double %444, %447
  %449 = fadd double %448, %440
  %450 = fmul double %436, %449
  %451 = fsub double -0.000000e+00, %450
  %452 = insertelement <2 x double> undef, double %451, i32 0
  %453 = insertelement <2 x double> %452, double %451, i32 1
  %454 = fmul <2 x double> %346, %453
  %455 = fadd <2 x double> %333, %454
  %456 = fmul double %351, %451
  %457 = fadd double %fz.028, %456
  %458 = icmp slt i32 %335, %38
  br i1 %458, label %459, label %471

; <label>:459                                     ; preds = %370
  %460 = getelementptr inbounds double, double* %34, i64 %337
  %461 = load double, double* %460, align 8, !tbaa !33
  %462 = extractelement <2 x double> %454, i32 0
  %463 = fsub double %461, %462
  store double %463, double* %460, align 8, !tbaa !33
  %464 = getelementptr inbounds double, double* %34, i64 %341
  %465 = load double, double* %464, align 8, !tbaa !33
  %466 = extractelement <2 x double> %454, i32 1
  %467 = fsub double %465, %466
  store double %467, double* %464, align 8, !tbaa !33
  %468 = getelementptr inbounds double, double* %34, i64 %348
  %469 = load double, double* %468, align 8, !tbaa !33
  %470 = fsub double %469, %456
  store double %470, double* %468, align 8, !tbaa !33
  br label %473

; <label>:471                                     ; preds = %370
  %472 = fmul double %450, -5.000000e-01
  br label %473

; <label>:473                                     ; preds = %471, %459
  %fpair.0 = phi double [ %451, %459 ], [ %472, %471 ]
  %474 = load i32, i32* %102, align 8, !tbaa !73
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %484, label %476

; <label>:476                                     ; preds = %473
  %477 = fmul double %356, %fpair.0
  %478 = fmul double %358, %fpair.0
  %479 = fadd double %477, %478
  %480 = fmul double %360, %fpair.0
  %481 = fadd double %480, %479
  %482 = load double, double* %1, align 8, !tbaa !113
  %483 = fadd double %481, %482
  store double %483, double* %1, align 8, !tbaa !113
  br label %484

; <label>:484                                     ; preds = %476, %473
  %485 = fmul double %437, 5.000000e-01
  %.pn = select i1 %458, double %437, double %485
  %evdwl.4 = fadd double %evdwl.332, %.pn
  br label %486

; <label>:486                                     ; preds = %484, %.lr.ph
  %fz.1 = phi double [ %457, %484 ], [ %fz.028, %.lr.ph ]
  %evdwl.5 = phi double [ %evdwl.4, %484 ], [ %evdwl.332, %.lr.ph ]
  %487 = phi <2 x double> [ %455, %484 ], [ %333, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %314
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #8

; Function Attrs: uwtable
define void @_ZN8ForceEAM11communicateER4AtomR4Comm(%class.ForceEAM* %this, %class.Atom* nocapture readnone dereferenceable(224) %atom, %class.Comm* nocapture readonly dereferenceable(336) %comm) #11 align 2 {
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %2) #7
  %3 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 1
  %4 = load i32, i32* %3, align 4, !tbaa !157
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %6 = bitcast %class.ForceEAM* %this to i32 (%class.ForceEAM*, i32, i32, double*, i32**)***
  %7 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 6
  %8 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 19
  %9 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 17
  %10 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 12
  %11 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 17
  %12 = bitcast %class.ForceEAM* %this to void (%class.ForceEAM*, i32, i32, double*)***
  %13 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 7
  %14 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 16
  %15 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 20
  %16 = bitcast double** %15 to i8**
  %17 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 9
  %18 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 13
  %19 = bitcast double** %8 to i8**
  %20 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 8
  br label %21

; <label>:21                                      ; preds = %55, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %55 ]
  %22 = load i32 (%class.ForceEAM*, i32, i32, double*, i32**)**, i32 (%class.ForceEAM*, i32, i32, double*, i32**)*** %6, align 8, !tbaa !67
  %23 = getelementptr inbounds i32 (%class.ForceEAM*, i32, i32, double*, i32**)*, i32 (%class.ForceEAM*, i32, i32, double*, i32**)** %22, i64 6
  %24 = load i32 (%class.ForceEAM*, i32, i32, double*, i32**)*, i32 (%class.ForceEAM*, i32, i32, double*, i32**)** %23, align 8
  %25 = load i32*, i32** %7, align 8, !tbaa !158
  %26 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv
  %27 = load i32, i32* %26, align 4, !tbaa !1
  %28 = load double*, double** %8, align 8, !tbaa !159
  %29 = load i32**, i32*** %9, align 8, !tbaa !160
  %30 = trunc i64 %indvars.iv to i32
  %31 = call i32 %24(%class.ForceEAM* %this, i32 %27, i32 %30, double* %28, i32** %29)
  %32 = load i32*, i32** %10, align 8, !tbaa !161
  %33 = getelementptr inbounds i32, i32* %32, i64 %indvars.iv
  %34 = load i32, i32* %33, align 4, !tbaa !1
  %35 = load i32, i32* %11, align 4, !tbaa !133
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %55, label %37

; <label>:37                                      ; preds = %21
  %38 = load i8*, i8** %16, align 8, !tbaa !162
  %39 = load i32*, i32** %17, align 8, !tbaa !163
  %40 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv
  %41 = load i32, i32* %40, align 4, !tbaa !1
  %42 = load i32*, i32** %18, align 8, !tbaa !164
  %43 = getelementptr inbounds i32, i32* %42, i64 %indvars.iv
  %44 = load i32, i32* %43, align 4, !tbaa !1
  %45 = call i32 @MPI_Irecv(i8* %38, i32 %41, i32 1275070475, i32 %44, i32 0, i32 1140850688, i32* nonnull %request)
  %46 = load i8*, i8** %19, align 8, !tbaa !159
  %47 = load i32*, i32** %20, align 8, !tbaa !165
  %48 = getelementptr inbounds i32, i32* %47, i64 %indvars.iv
  %49 = load i32, i32* %48, align 4, !tbaa !1
  %50 = load i32*, i32** %10, align 8, !tbaa !161
  %51 = getelementptr inbounds i32, i32* %50, i64 %indvars.iv
  %52 = load i32, i32* %51, align 4, !tbaa !1
  %53 = call i32 @MPI_Send(i8* %46, i32 %49, i32 1275070475, i32 %52, i32 0, i32 1140850688)
  %54 = call i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
  br label %55

; <label>:55                                      ; preds = %37, %21
  %buf.0.in = phi double** [ %15, %37 ], [ %8, %21 ]
  %buf.0 = load double*, double** %buf.0.in, align 8, !tbaa !5
  %56 = load void (%class.ForceEAM*, i32, i32, double*)**, void (%class.ForceEAM*, i32, i32, double*)*** %12, align 8, !tbaa !67
  %57 = getelementptr inbounds void (%class.ForceEAM*, i32, i32, double*)*, void (%class.ForceEAM*, i32, i32, double*)** %56, i64 7
  %58 = load void (%class.ForceEAM*, i32, i32, double*)*, void (%class.ForceEAM*, i32, i32, double*)** %57, align 8
  %59 = load i32*, i32** %13, align 8, !tbaa !166
  %60 = getelementptr inbounds i32, i32* %59, i64 %indvars.iv
  %61 = load i32, i32* %60, align 4, !tbaa !1
  %62 = load i32*, i32** %14, align 8, !tbaa !167
  %63 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv
  %64 = load i32, i32* %63, align 4, !tbaa !1
  call void %58(%class.ForceEAM* nonnull %this, i32 %61, i32 %64, double* %buf.0)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %65 = load i32, i32* %3, align 4, !tbaa !157
  %66 = sext i32 %65 to i64
  %67 = icmp slt i64 %indvars.iv.next, %66
  br i1 %67, label %21, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %55
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 20, i8* %2) #7
  call void @llvm.lifetime.end(i64 4, i8* %1) #7
  ret void
}

declare i32 @MPI_Irecv(i8*, i32, i32, i32, i32, i32, i32*) #2

declare i32 @MPI_Send(i8*, i32, i32, i32, i32, i32) #2

declare i32 @MPI_Wait(i32*, %class.ThreadData*) #2

; Function Attrs: uwtable
define void @_ZN8ForceEAM17compute_fullneighER4AtomR8NeighborR4Commi(%class.ForceEAM* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Comm* nocapture readonly dereferenceable(336) %comm, i32 %me) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @10)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb7 = alloca i32, align 4
  %.omp.ub8 = alloca i32, align 4
  %.omp.stride9 = alloca i32, align 4
  %.omp.is_last10 = alloca i32, align 4
  %2 = tail call i32 @__kmpc_master(%ident_t* nonnull @10, i32 %1)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %30, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 3
  store double 0.000000e+00, double* %5, align 8, !tbaa !112
  %6 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 6
  store double 0.000000e+00, double* %6, align 8, !tbaa !113
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !99
  %9 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 18
  %10 = load i32, i32* %9, align 8, !tbaa !153
  %11 = icmp sgt i32 %8, %10
  br i1 %11, label %12, label %29

; <label>:12                                      ; preds = %4
  store i32 %8, i32* %9, align 8, !tbaa !153
  %13 = sext i32 %8 to i64
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %13, i64 8)
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = invoke noalias i8* @_Znam(i64 %17) #18
          to label %19 unwind label %26

; <label>:19                                      ; preds = %12
  %20 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %21 = bitcast double** %20 to i8**
  store i8* %18, i8** %21, align 8, !tbaa !154
  %22 = invoke noalias i8* @_Znam(i64 %17) #18
          to label %23 unwind label %26

; <label>:23                                      ; preds = %19
  %24 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %25 = bitcast double** %24 to i8**
  store i8* %22, i8** %25, align 8, !tbaa !155
  br label %29

; <label>:26                                      ; preds = %19, %12
  %27 = landingpad { i8*, i32 }
          catch i8* null
  %28 = extractvalue { i8*, i32 } %27, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @10, i32 %1)
  br label %468

; <label>:29                                      ; preds = %23, %4
  tail call void @__kmpc_end_master(%ident_t* nonnull @10, i32 %1)
  br label %30

; <label>:30                                      ; preds = %29, %0
  tail call void @__kmpc_barrier(%ident_t* nonnull @11, i32 %1)
  %31 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %32 = load double*, double** %31, align 8, !tbaa !100
  %33 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 6
  %34 = load double*, double** %33, align 8, !tbaa !80
  %35 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %36 = load i32*, i32** %35, align 8, !tbaa !102
  %37 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !84
  %39 = add nsw i32 %38, -1
  %40 = icmp sgt i32 %38, 0
  br i1 %40, label %41, label %._crit_edge70

._crit_edge70:                                    ; preds = %30
  %.pre71 = bitcast i32* %.omp.is_last to i8*
  %.pre72 = bitcast i32* %.omp.stride to i8*
  %.pre74 = bitcast i32* %.omp.ub to i8*
  %.pre76 = bitcast i32* %.omp.lb to i8*
  br label %233

; <label>:41                                      ; preds = %30
  %42 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %42) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %43 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %43) #7
  store i32 %39, i32* %.omp.ub, align 4, !tbaa !1
  %44 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %44) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %45 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @10, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %46 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %47 = icmp sgt i32 %46, %39
  %48 = select i1 %47, i32 %39, i32 %46
  store i32 %48, i32* %.omp.ub, align 4, !tbaa !1
  %49 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %50 = icmp sgt i32 %49, %48
  br i1 %50, label %._crit_edge59, label %.lr.ph58

.lr.ph58:                                         ; preds = %41
  %51 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %54 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 12
  %55 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 2
  %56 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 4
  %57 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 14
  %58 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %59 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 5
  %60 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  %61 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 2
  %62 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 10
  %63 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  %64 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 5
  %65 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 13
  %66 = sext i32 %49 to i64
  br label %67

; <label>:67                                      ; preds = %228, %.lr.ph58
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %228 ], [ %66, %.lr.ph58 ]
  %evdwl.056 = phi double [ %evdwl.1, %228 ], [ 0.000000e+00, %.lr.ph58 ]
  %.omp.iv.055 = phi i32 [ %229, %228 ], [ %49, %.lr.ph58 ]
  %68 = load i32, i32* %51, align 8, !tbaa !118
  %69 = trunc i64 %indvars.iv67 to i32
  %70 = mul nsw i32 %68, %69
  %71 = sext i32 %70 to i64
  %72 = load i32*, i32** %52, align 8, !tbaa !119
  %73 = getelementptr inbounds i32, i32* %72, i64 %71
  %74 = load i32*, i32** %53, align 8, !tbaa !120
  %75 = getelementptr inbounds i32, i32* %74, i64 %indvars.iv67
  %76 = load i32, i32* %75, align 4, !tbaa !1
  %77 = mul nsw i32 %.omp.iv.055, 3
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %32, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !33
  %81 = add nsw i32 %77, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds double, double* %32, i64 %82
  %84 = load double, double* %83, align 8, !tbaa !33
  %85 = add nsw i32 %77, 2
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, double* %32, i64 %86
  %88 = load double, double* %87, align 8, !tbaa !33
  %89 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv67
  %90 = load i32, i32* %89, align 4, !tbaa !1
  %91 = icmp sgt i32 %76, 0
  br i1 %91, label %.lr.ph52.preheader, label %._crit_edge53

.lr.ph52.preheader:                               ; preds = %67
  br label %.lr.ph52

._crit_edge53.loopexit:                           ; preds = %203
  br label %._crit_edge53

._crit_edge53:                                    ; preds = %._crit_edge53.loopexit, %67
  %rhoi.0.lcssa = phi double [ 0.000000e+00, %67 ], [ %rhoi.1, %._crit_edge53.loopexit ]
  %92 = mul nsw i32 %90, %90
  %93 = load double, double* %54, align 8, !tbaa !139
  %94 = fmul double %rhoi.0.lcssa, %93
  %95 = fadd double %94, 1.000000e+00
  %96 = fptosi double %95 to i32
  %97 = load i32, i32* %55, align 8, !tbaa !168
  %98 = add nsw i32 %97, -1
  %99 = icmp slt i32 %96, %98
  %. = select i1 %99, i32 %96, i32 %98
  %100 = icmp slt i32 %., 1
  %.. = select i1 %100, i32 1, i32 %.
  %101 = sitofp i32 %.. to double
  %102 = fsub double %95, %101
  %103 = fcmp olt double %102, 1.000000e+00
  %104 = select i1 %103, double %102, double 1.000000e+00
  %105 = load i32, i32* %56, align 8, !tbaa !140
  %106 = mul nsw i32 %105, %92
  %107 = mul nsw i32 %.., 7
  %108 = add nsw i32 %107, %106
  %109 = sext i32 %108 to i64
  %110 = load double*, double** %57, align 8, !tbaa !142
  %111 = getelementptr inbounds double, double* %110, i64 %109
  %112 = load double, double* %111, align 8, !tbaa !33
  %113 = fmul double %112, %104
  %114 = add nsw i32 %108, 1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %110, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !33
  %118 = fadd double %117, %113
  %119 = fmul double %104, %118
  %120 = add nsw i32 %108, 2
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %110, i64 %121
  %123 = load double, double* %122, align 8, !tbaa !33
  %124 = fadd double %123, %119
  %125 = load double*, double** %58, align 8, !tbaa !155
  %126 = getelementptr inbounds double, double* %125, i64 %indvars.iv67
  store double %124, double* %126, align 8, !tbaa !33
  %127 = load i32, i32* %59, align 8, !tbaa !73
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %228, label %204

.lr.ph52:                                         ; preds = %203, %.lr.ph52.preheader
  %indvars.iv63 = phi i64 [ %indvars.iv.next64, %203 ], [ 0, %.lr.ph52.preheader ]
  %rhoi.050 = phi double [ %rhoi.1, %203 ], [ 0.000000e+00, %.lr.ph52.preheader ]
  %129 = getelementptr inbounds i32, i32* %73, i64 %indvars.iv63
  %130 = load i32, i32* %129, align 4, !tbaa !1
  %131 = mul nsw i32 %130, 3
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds double, double* %32, i64 %132
  %134 = load double, double* %133, align 8, !tbaa !33
  %135 = fsub double %80, %134
  %136 = add nsw i32 %131, 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds double, double* %32, i64 %137
  %139 = load double, double* %138, align 8, !tbaa !33
  %140 = fsub double %84, %139
  %141 = add nsw i32 %131, 2
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %32, i64 %142
  %144 = load double, double* %143, align 8, !tbaa !33
  %145 = fsub double %88, %144
  %146 = sext i32 %130 to i64
  %147 = getelementptr inbounds i32, i32* %36, i64 %146
  %148 = load i32, i32* %147, align 4, !tbaa !1
  %149 = fmul double %135, %135
  %150 = fmul double %140, %140
  %151 = fadd double %149, %150
  %152 = fmul double %145, %145
  %153 = fadd double %151, %152
  %154 = load i32, i32* %60, align 8, !tbaa !110
  %155 = mul nsw i32 %154, %90
  %156 = add nsw i32 %155, %148
  %157 = sext i32 %156 to i64
  %158 = load double*, double** %61, align 8, !tbaa !121
  %159 = getelementptr inbounds double, double* %158, i64 %157
  %160 = load double, double* %159, align 8, !tbaa !33
  %161 = fcmp olt double %153, %160
  br i1 %161, label %162, label %203

; <label>:162                                     ; preds = %.lr.ph52
  %163 = call double @sqrt(double %153) #7
  %164 = load double, double* %62, align 8, !tbaa !137
  %165 = fmul double %163, %164
  %166 = fadd double %165, 1.000000e+00
  %167 = fptosi double %166 to i32
  %168 = load i32, i32* %63, align 4, !tbaa !146
  %169 = add nsw i32 %168, -1
  %170 = icmp slt i32 %167, %169
  %.28 = select i1 %170, i32 %167, i32 %169
  %171 = sitofp i32 %.28 to double
  %172 = fsub double %166, %171
  %173 = fcmp olt double %172, 1.000000e+00
  %174 = select i1 %173, double %172, double 1.000000e+00
  %175 = load i32, i32* %64, align 4, !tbaa !141
  %176 = mul nsw i32 %175, %156
  %177 = mul nsw i32 %.28, 7
  %178 = add nsw i32 %177, %176
  %179 = add nsw i32 %178, 3
  %180 = sext i32 %179 to i64
  %181 = load double*, double** %65, align 8, !tbaa !143
  %182 = getelementptr inbounds double, double* %181, i64 %180
  %183 = load double, double* %182, align 8, !tbaa !33
  %184 = fmul double %183, %174
  %185 = add nsw i32 %178, 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds double, double* %181, i64 %186
  %188 = load double, double* %187, align 8, !tbaa !33
  %189 = fadd double %188, %184
  %190 = fmul double %174, %189
  %191 = add nsw i32 %178, 5
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, double* %181, i64 %192
  %194 = load double, double* %193, align 8, !tbaa !33
  %195 = fadd double %194, %190
  %196 = fmul double %174, %195
  %197 = add nsw i32 %178, 6
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds double, double* %181, i64 %198
  %200 = load double, double* %199, align 8, !tbaa !33
  %201 = fadd double %200, %196
  %202 = fadd double %rhoi.050, %201
  br label %203

; <label>:203                                     ; preds = %162, %.lr.ph52
  %rhoi.1 = phi double [ %202, %162 ], [ %rhoi.050, %.lr.ph52 ]
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %lftr.wideiv65 = trunc i64 %indvars.iv.next64 to i32
  %exitcond66 = icmp eq i32 %lftr.wideiv65, %76
  br i1 %exitcond66, label %._crit_edge53.loopexit, label %.lr.ph52

; <label>:204                                     ; preds = %._crit_edge53
  %205 = add nsw i32 %108, 3
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds double, double* %110, i64 %206
  %208 = load double, double* %207, align 8, !tbaa !33
  %209 = fmul double %104, %208
  %210 = add nsw i32 %108, 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds double, double* %110, i64 %211
  %213 = load double, double* %212, align 8, !tbaa !33
  %214 = fadd double %209, %213
  %215 = fmul double %104, %214
  %216 = add nsw i32 %108, 5
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds double, double* %110, i64 %217
  %219 = load double, double* %218, align 8, !tbaa !33
  %220 = fadd double %219, %215
  %221 = fmul double %104, %220
  %222 = add nsw i32 %108, 6
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds double, double* %110, i64 %223
  %225 = load double, double* %224, align 8, !tbaa !33
  %226 = fadd double %225, %221
  %227 = fadd double %evdwl.056, %226
  br label %228

; <label>:228                                     ; preds = %204, %._crit_edge53
  %evdwl.1 = phi double [ %227, %204 ], [ %evdwl.056, %._crit_edge53 ]
  %229 = add nsw i32 %.omp.iv.055, 1
  %230 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %231 = sext i32 %230 to i64
  %232 = icmp slt i64 %indvars.iv67, %231
  %indvars.iv.next68 = add i64 %indvars.iv67, 1
  br i1 %232, label %67, label %._crit_edge59.loopexit

._crit_edge59.loopexit:                           ; preds = %228
  br label %._crit_edge59

._crit_edge59:                                    ; preds = %._crit_edge59.loopexit, %41
  %evdwl.0.lcssa = phi double [ 0.000000e+00, %41 ], [ %evdwl.1, %._crit_edge59.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @10, i32 %1)
  br label %233

; <label>:233                                     ; preds = %._crit_edge59, %._crit_edge70
  %.pre-phi77 = phi i8* [ %.pre76, %._crit_edge70 ], [ %42, %._crit_edge59 ]
  %.pre-phi75 = phi i8* [ %.pre74, %._crit_edge70 ], [ %43, %._crit_edge59 ]
  %.pre-phi73 = phi i8* [ %.pre72, %._crit_edge70 ], [ %44, %._crit_edge59 ]
  %.pre-phi = phi i8* [ %.pre71, %._crit_edge70 ], [ %45, %._crit_edge59 ]
  %evdwl.2 = phi double [ 0.000000e+00, %._crit_edge70 ], [ %evdwl.0.lcssa, %._crit_edge59 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi73) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi75) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi77) #7
  call void @__kmpc_barrier(%ident_t* nonnull @12, i32 %1)
  %234 = call i32 @__kmpc_master(%ident_t* nonnull @10, i32 %1)
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %241, label %236

; <label>:236                                     ; preds = %233
  invoke void @_ZN8ForceEAM11communicateER4AtomR4Comm(%class.ForceEAM* %this, %class.Atom* dereferenceable(224) undef, %class.Comm* nonnull dereferenceable(336) %comm)
          to label %237 unwind label %238

; <label>:237                                     ; preds = %236
  call void @__kmpc_end_master(%ident_t* nonnull @10, i32 %1)
  br label %241

; <label>:238                                     ; preds = %236
  %239 = landingpad { i8*, i32 }
          catch i8* null
  %240 = extractvalue { i8*, i32 } %239, 0
  call void @__kmpc_end_master(%ident_t* nonnull @10, i32 %1)
  br label %468

; <label>:241                                     ; preds = %237, %233
  call void @__kmpc_barrier(%ident_t* nonnull @11, i32 %1)
  br i1 %40, label %242, label %._crit_edge69

._crit_edge69:                                    ; preds = %241
  %.pre78 = bitcast i32* %.omp.is_last10 to i8*
  %.pre80 = bitcast i32* %.omp.stride9 to i8*
  %.pre82 = bitcast i32* %.omp.ub8 to i8*
  %.pre84 = bitcast i32* %.omp.lb7 to i8*
  br label %442

; <label>:242                                     ; preds = %241
  %243 = bitcast i32* %.omp.lb7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %243) #7
  store i32 0, i32* %.omp.lb7, align 4, !tbaa !1
  %244 = bitcast i32* %.omp.ub8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %244) #7
  store i32 %39, i32* %.omp.ub8, align 4, !tbaa !1
  %245 = bitcast i32* %.omp.stride9 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %245) #7
  store i32 1, i32* %.omp.stride9, align 4, !tbaa !1
  %246 = bitcast i32* %.omp.is_last10 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %246) #7
  store i32 0, i32* %.omp.is_last10, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @10, i32 %1, i32 34, i32* nonnull %.omp.is_last10, i32* nonnull %.omp.lb7, i32* nonnull %.omp.ub8, i32* nonnull %.omp.stride9, i32 1, i32 1)
  %247 = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  %248 = icmp sgt i32 %247, %39
  %249 = select i1 %248, i32 %39, i32 %247
  store i32 %249, i32* %.omp.ub8, align 4, !tbaa !1
  %250 = load i32, i32* %.omp.lb7, align 4, !tbaa !1
  %251 = icmp sgt i32 %250, %249
  br i1 %251, label %._crit_edge46, label %.lr.ph45

.lr.ph45:                                         ; preds = %242
  %252 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 10
  %253 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 9
  %254 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %255 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  %256 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 2
  %257 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 10
  %258 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  %259 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 5
  %260 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 13
  %261 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 15
  %262 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %263 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 5
  %264 = sext i32 %250 to i64
  br label %265

; <label>:265                                     ; preds = %._crit_edge, %.lr.ph45
  %266 = phi i32 [ %293, %._crit_edge ], [ %249, %.lr.ph45 ]
  %indvars.iv61 = phi i64 [ %indvars.iv.next62, %._crit_edge ], [ %264, %.lr.ph45 ]
  %evdwl.343 = phi double [ %evdwl.4.lcssa, %._crit_edge ], [ %evdwl.2, %.lr.ph45 ]
  %t_virial.042 = phi double [ %t_virial.1.lcssa, %._crit_edge ], [ 0.000000e+00, %.lr.ph45 ]
  %.omp.iv4.041 = phi i32 [ %300, %._crit_edge ], [ %250, %.lr.ph45 ]
  %267 = load i32, i32* %252, align 8, !tbaa !118
  %268 = trunc i64 %indvars.iv61 to i32
  %269 = mul nsw i32 %267, %268
  %270 = sext i32 %269 to i64
  %271 = load i32*, i32** %253, align 8, !tbaa !119
  %272 = getelementptr inbounds i32, i32* %271, i64 %270
  %273 = load i32*, i32** %254, align 8, !tbaa !120
  %274 = getelementptr inbounds i32, i32* %273, i64 %indvars.iv61
  %275 = load i32, i32* %274, align 4, !tbaa !1
  %276 = mul nsw i32 %.omp.iv4.041, 3
  %277 = sext i32 %276 to i64
  %278 = add nsw i32 %276, 1
  %279 = sext i32 %278 to i64
  %280 = add nsw i32 %276, 2
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds double, double* %32, i64 %281
  %283 = load double, double* %282, align 8, !tbaa !33
  %284 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv61
  %285 = load i32, i32* %284, align 4, !tbaa !1
  %286 = icmp sgt i32 %275, 0
  br i1 %286, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %265
  %287 = getelementptr inbounds double, double* %32, i64 %279
  %288 = load double, double* %287, align 8, !tbaa !33
  %289 = getelementptr inbounds double, double* %32, i64 %277
  %290 = load double, double* %289, align 8, !tbaa !33
  %291 = insertelement <2 x double> undef, double %290, i32 0
  %292 = insertelement <2 x double> %291, double %288, i32 1
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %440
  %.pre = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %265
  %293 = phi i32 [ %266, %265 ], [ %.pre, %._crit_edge.loopexit ]
  %evdwl.4.lcssa = phi double [ %evdwl.343, %265 ], [ %evdwl.6, %._crit_edge.loopexit ]
  %t_virial.1.lcssa = phi double [ %t_virial.042, %265 ], [ %t_virial.3, %._crit_edge.loopexit ]
  %fz.0.lcssa = phi double [ 0.000000e+00, %265 ], [ %fz.1, %._crit_edge.loopexit ]
  %294 = phi <2 x double> [ zeroinitializer, %265 ], [ %441, %._crit_edge.loopexit ]
  %295 = getelementptr inbounds double, double* %34, i64 %277
  %296 = extractelement <2 x double> %294, i32 0
  store double %296, double* %295, align 8, !tbaa !33
  %297 = getelementptr inbounds double, double* %34, i64 %279
  %298 = extractelement <2 x double> %294, i32 1
  store double %298, double* %297, align 8, !tbaa !33
  %299 = getelementptr inbounds double, double* %34, i64 %281
  store double %fz.0.lcssa, double* %299, align 8, !tbaa !33
  %300 = add nsw i32 %.omp.iv4.041, 1
  %301 = sext i32 %293 to i64
  %302 = icmp slt i64 %indvars.iv61, %301
  %indvars.iv.next62 = add i64 %indvars.iv61, 1
  br i1 %302, label %265, label %._crit_edge46.loopexit

.lr.ph:                                           ; preds = %440, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %440 ], [ 0, %.lr.ph.preheader ]
  %evdwl.436 = phi double [ %evdwl.6, %440 ], [ %evdwl.343, %.lr.ph.preheader ]
  %t_virial.135 = phi double [ %t_virial.3, %440 ], [ %t_virial.042, %.lr.ph.preheader ]
  %fz.032 = phi double [ %fz.1, %440 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %303 = phi <2 x double> [ %441, %440 ], [ zeroinitializer, %.lr.ph.preheader ]
  %304 = getelementptr inbounds i32, i32* %272, i64 %indvars.iv
  %305 = load i32, i32* %304, align 4, !tbaa !1
  %306 = mul nsw i32 %305, 3
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds double, double* %32, i64 %307
  %309 = load double, double* %308, align 8, !tbaa !33
  %310 = add nsw i32 %306, 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds double, double* %32, i64 %311
  %313 = load double, double* %312, align 8, !tbaa !33
  %314 = insertelement <2 x double> undef, double %309, i32 0
  %315 = insertelement <2 x double> %314, double %313, i32 1
  %316 = fsub <2 x double> %292, %315
  %317 = add nsw i32 %306, 2
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds double, double* %32, i64 %318
  %320 = load double, double* %319, align 8, !tbaa !33
  %321 = fsub double %283, %320
  %322 = sext i32 %305 to i64
  %323 = getelementptr inbounds i32, i32* %36, i64 %322
  %324 = load i32, i32* %323, align 4, !tbaa !1
  %325 = extractelement <2 x double> %316, i32 0
  %326 = fmul double %325, %325
  %327 = extractelement <2 x double> %316, i32 1
  %328 = fmul double %327, %327
  %329 = fadd double %326, %328
  %330 = fmul double %321, %321
  %331 = fadd double %329, %330
  %332 = load i32, i32* %255, align 8, !tbaa !110
  %333 = mul nsw i32 %332, %285
  %334 = add nsw i32 %333, %324
  %335 = sext i32 %334 to i64
  %336 = load double*, double** %256, align 8, !tbaa !121
  %337 = getelementptr inbounds double, double* %336, i64 %335
  %338 = load double, double* %337, align 8, !tbaa !33
  %339 = fcmp olt double %331, %338
  br i1 %339, label %340, label %440

; <label>:340                                     ; preds = %.lr.ph
  %341 = call double @sqrt(double %331) #7
  %342 = load double, double* %257, align 8, !tbaa !137
  %343 = fmul double %341, %342
  %344 = fadd double %343, 1.000000e+00
  %345 = fptosi double %344 to i32
  %346 = load i32, i32* %258, align 4, !tbaa !146
  %347 = add nsw i32 %346, -1
  %348 = icmp slt i32 %345, %347
  %.30 = select i1 %348, i32 %345, i32 %347
  %349 = sitofp i32 %.30 to double
  %350 = fsub double %344, %349
  %351 = fcmp olt double %350, 1.000000e+00
  %352 = select i1 %351, double %350, double 1.000000e+00
  %353 = load i32, i32* %259, align 4, !tbaa !141
  %354 = mul nsw i32 %353, %334
  %355 = mul nsw i32 %.30, 7
  %356 = add nsw i32 %355, %354
  %357 = sext i32 %356 to i64
  %358 = load double*, double** %260, align 8, !tbaa !143
  %359 = getelementptr inbounds double, double* %358, i64 %357
  %360 = load double, double* %359, align 8, !tbaa !33
  %361 = fmul double %360, %352
  %362 = add nsw i32 %356, 1
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds double, double* %358, i64 %363
  %365 = load double, double* %364, align 8, !tbaa !33
  %366 = fadd double %365, %361
  %367 = fmul double %352, %366
  %368 = add nsw i32 %356, 2
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds double, double* %358, i64 %369
  %371 = load double, double* %370, align 8, !tbaa !33
  %372 = fadd double %371, %367
  %373 = load double*, double** %261, align 8, !tbaa !144
  %374 = getelementptr inbounds double, double* %373, i64 %357
  %375 = load double, double* %374, align 8, !tbaa !33
  %376 = fmul double %375, %352
  %377 = getelementptr inbounds double, double* %373, i64 %363
  %378 = load double, double* %377, align 8, !tbaa !33
  %379 = fadd double %378, %376
  %380 = fmul double %352, %379
  %381 = getelementptr inbounds double, double* %373, i64 %369
  %382 = load double, double* %381, align 8, !tbaa !33
  %383 = fadd double %382, %380
  %384 = add nsw i32 %356, 3
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds double, double* %373, i64 %385
  %387 = load double, double* %386, align 8, !tbaa !33
  %388 = fmul double %352, %387
  %389 = add nsw i32 %356, 4
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds double, double* %373, i64 %390
  %392 = load double, double* %391, align 8, !tbaa !33
  %393 = fadd double %388, %392
  %394 = fmul double %352, %393
  %395 = add nsw i32 %356, 5
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds double, double* %373, i64 %396
  %398 = load double, double* %397, align 8, !tbaa !33
  %399 = fadd double %398, %394
  %400 = fmul double %352, %399
  %401 = add nsw i32 %356, 6
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds double, double* %373, i64 %402
  %404 = load double, double* %403, align 8, !tbaa !33
  %405 = fadd double %404, %400
  %406 = fdiv double 1.000000e+00, %341
  %407 = fmul double %406, %405
  %408 = fmul double %406, %383
  %409 = fmul double %406, %407
  %410 = fsub double %408, %409
  %411 = load double*, double** %262, align 8, !tbaa !155
  %412 = getelementptr inbounds double, double* %411, i64 %indvars.iv61
  %413 = load double, double* %412, align 8, !tbaa !33
  %414 = fmul double %372, %413
  %415 = getelementptr inbounds double, double* %411, i64 %322
  %416 = load double, double* %415, align 8, !tbaa !33
  %417 = fmul double %372, %416
  %418 = fadd double %414, %417
  %419 = fadd double %418, %410
  %420 = fmul double %406, %419
  %421 = fsub double -0.000000e+00, %420
  %422 = insertelement <2 x double> undef, double %421, i32 0
  %423 = insertelement <2 x double> %422, double %421, i32 1
  %424 = fmul <2 x double> %316, %423
  %425 = fadd <2 x double> %303, %424
  %426 = fmul double %321, %421
  %427 = fadd double %fz.032, %426
  %428 = fmul double %420, -5.000000e-01
  %429 = load i32, i32* %263, align 8, !tbaa !73
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %440, label %431

; <label>:431                                     ; preds = %340
  %432 = fmul double %326, %428
  %433 = fmul double %328, %428
  %434 = fadd double %432, %433
  %435 = fmul double %330, %428
  %436 = fadd double %435, %434
  %437 = fadd double %t_virial.135, %436
  %438 = fmul double %407, 5.000000e-01
  %439 = fadd double %evdwl.436, %438
  br label %440

; <label>:440                                     ; preds = %431, %340, %.lr.ph
  %fz.1 = phi double [ %fz.032, %.lr.ph ], [ %427, %340 ], [ %427, %431 ]
  %t_virial.3 = phi double [ %t_virial.135, %.lr.ph ], [ %t_virial.135, %340 ], [ %437, %431 ]
  %evdwl.6 = phi double [ %evdwl.436, %.lr.ph ], [ %evdwl.436, %340 ], [ %439, %431 ]
  %441 = phi <2 x double> [ %303, %.lr.ph ], [ %425, %340 ], [ %425, %431 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %275
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge46.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge46

._crit_edge46:                                    ; preds = %._crit_edge46.loopexit, %242
  %evdwl.3.lcssa = phi double [ %evdwl.2, %242 ], [ %evdwl.4.lcssa, %._crit_edge46.loopexit ]
  %t_virial.0.lcssa = phi double [ 0.000000e+00, %242 ], [ %t_virial.1.lcssa, %._crit_edge46.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @10, i32 %1)
  br label %442

; <label>:442                                     ; preds = %._crit_edge46, %._crit_edge69
  %.pre-phi85 = phi i8* [ %.pre84, %._crit_edge69 ], [ %243, %._crit_edge46 ]
  %.pre-phi83 = phi i8* [ %.pre82, %._crit_edge69 ], [ %244, %._crit_edge46 ]
  %.pre-phi81 = phi i8* [ %.pre80, %._crit_edge69 ], [ %245, %._crit_edge46 ]
  %.pre-phi79 = phi i8* [ %.pre78, %._crit_edge69 ], [ %246, %._crit_edge46 ]
  %t_virial.4 = phi double [ 0.000000e+00, %._crit_edge69 ], [ %t_virial.0.lcssa, %._crit_edge46 ]
  %evdwl.7 = phi double [ %evdwl.2, %._crit_edge69 ], [ %evdwl.3.lcssa, %._crit_edge46 ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi79) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi81) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi83) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi85) #7
  call void @__kmpc_barrier(%ident_t* nonnull @12, i32 %1)
  %443 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 6
  %444 = bitcast double* %443 to i64*
  %445 = load atomic i64, i64* %444 monotonic, align 8, !tbaa !33
  br label %446

; <label>:446                                     ; preds = %446, %442
  %447 = phi i64 [ %445, %442 ], [ %452, %446 ]
  %448 = bitcast i64 %447 to double
  %449 = fadd double %t_virial.4, %448
  %450 = bitcast double %449 to i64
  %451 = cmpxchg i64* %444, i64 %447, i64 %450 monotonic monotonic
  %452 = extractvalue { i64, i1 } %451, 0
  %453 = extractvalue { i64, i1 } %451, 1
  br i1 %453, label %454, label %446

; <label>:454                                     ; preds = %446
  %455 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 3
  %456 = fmul double %evdwl.7, 2.000000e+00
  %457 = bitcast double* %455 to i64*
  %458 = load atomic i64, i64* %457 monotonic, align 8, !tbaa !33
  br label %459

; <label>:459                                     ; preds = %459, %454
  %460 = phi i64 [ %458, %454 ], [ %465, %459 ]
  %461 = bitcast i64 %460 to double
  %462 = fadd double %456, %461
  %463 = bitcast double %462 to i64
  %464 = cmpxchg i64* %457, i64 %460, i64 %463 monotonic monotonic
  %465 = extractvalue { i64, i1 } %464, 0
  %466 = extractvalue { i64, i1 } %464, 1
  br i1 %466, label %467, label %459

; <label>:467                                     ; preds = %459
  call void @__kmpc_barrier(%ident_t* nonnull @11, i32 %1)
  ret void

; <label>:468                                     ; preds = %238, %26
  %.0 = phi i8* [ %240, %238 ], [ %28, %26 ]
  call void @__clang_call_terminate(i8* %.0) #17
  unreachable
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM5coeffEPKc(%class.ForceEAM* %this, i8* %arg) unnamed_addr #11 align 2 {
  %1 = bitcast %class.ForceEAM* %this to void (%class.ForceEAM*, i8*)***
  %2 = load void (%class.ForceEAM*, i8*)**, void (%class.ForceEAM*, i8*)*** %1, align 8, !tbaa !67
  %3 = getelementptr inbounds void (%class.ForceEAM*, i8*)*, void (%class.ForceEAM*, i8*)** %2, i64 8
  %4 = load void (%class.ForceEAM*, i8*)*, void (%class.ForceEAM*, i8*)** %3, align 8
  tail call void %4(%class.ForceEAM* %this, i8* %arg)
  %5 = tail call i64 @strlen(i8* %arg) #16
  %6 = shl i64 %5, 32
  %sext = add i64 %6, 4294967296
  %7 = ashr exact i64 %sext, 32
  %8 = icmp slt i64 %sext, 0
  %9 = select i1 %8, i64 -1, i64 %7
  %10 = tail call noalias i8* @_Znam(i64 %9) #18
  %11 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 0
  store i8* %10, i8** %11, align 8, !tbaa !169
  %12 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 5
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !170
  %15 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 1
  %16 = bitcast double* %15 to i64*
  store i64 %14, i64* %16, align 8, !tbaa !171
  %17 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  %18 = load i32, i32* %17, align 8, !tbaa !110
  %19 = mul i32 %18, %18
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %21 = bitcast i64 %14 to double
  %22 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 2
  %23 = load double*, double** %22, align 8
  %24 = zext i32 %19 to i64
  %25 = fmul double %21, %21
  store double %25, double* %23, align 8, !tbaa !33
  %26 = icmp ugt i32 %19, 1
  br i1 %26, label %._crit_edge2.preheader, label %._crit_edge

._crit_edge2.preheader:                           ; preds = %.lr.ph
  %27 = add nuw nsw i64 %24, 3
  %28 = add nsw i64 %24, -2
  %xtraiter = and i64 %27, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %._crit_edge2.preheader.split, label %._crit_edge2.prol.preheader

._crit_edge2.prol.preheader:                      ; preds = %._crit_edge2.preheader
  br label %._crit_edge2.prol

._crit_edge2.prol:                                ; preds = %._crit_edge2.prol, %._crit_edge2.prol.preheader
  %indvars.iv.next3.prol = phi i64 [ %indvars.iv.next.prol, %._crit_edge2.prol ], [ 1, %._crit_edge2.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %._crit_edge2.prol ], [ %xtraiter, %._crit_edge2.prol.preheader ]
  %.pre.prol = load double, double* %15, align 8, !tbaa !171
  %29 = fmul double %.pre.prol, %.pre.prol
  %30 = getelementptr inbounds double, double* %23, i64 %indvars.iv.next3.prol
  store double %29, double* %30, align 8, !tbaa !33
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.next3.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %._crit_edge2.preheader.split.loopexit, label %._crit_edge2.prol, !llvm.loop !172

._crit_edge2.preheader.split.loopexit:            ; preds = %._crit_edge2.prol
  br label %._crit_edge2.preheader.split

._crit_edge2.preheader.split:                     ; preds = %._crit_edge2.preheader.split.loopexit, %._crit_edge2.preheader
  %indvars.iv.next3.unr = phi i64 [ 1, %._crit_edge2.preheader ], [ %indvars.iv.next.prol, %._crit_edge2.preheader.split.loopexit ]
  %31 = icmp ult i64 %28, 3
  br i1 %31, label %._crit_edge.loopexit, label %._crit_edge2.preheader.split.split

._crit_edge2.preheader.split.split:               ; preds = %._crit_edge2.preheader.split
  br label %._crit_edge2

._crit_edge.loopexit.unr-lcssa:                   ; preds = %._crit_edge2
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %._crit_edge2.preheader.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph, %0
  ret void

._crit_edge2:                                     ; preds = %._crit_edge2, %._crit_edge2.preheader.split.split
  %indvars.iv.next3 = phi i64 [ %indvars.iv.next3.unr, %._crit_edge2.preheader.split.split ], [ %indvars.iv.next.3, %._crit_edge2 ]
  %.pre = load double, double* %15, align 8, !tbaa !171
  %32 = fmul double %.pre, %.pre
  %33 = getelementptr inbounds double, double* %23, i64 %indvars.iv.next3
  store double %32, double* %33, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next3, 1
  %.pre.1 = load double, double* %15, align 8, !tbaa !171
  %34 = fmul double %.pre.1, %.pre.1
  %35 = getelementptr inbounds double, double* %23, i64 %indvars.iv.next
  store double %34, double* %35, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next3, 2
  %.pre.2 = load double, double* %15, align 8, !tbaa !171
  %36 = fmul double %.pre.2, %.pre.2
  %37 = getelementptr inbounds double, double* %23, i64 %indvars.iv.next.1
  store double %36, double* %37, align 8, !tbaa !33
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next3, 3
  %.pre.3 = load double, double* %15, align 8, !tbaa !171
  %38 = fmul double %.pre.3, %.pre.3
  %39 = getelementptr inbounds double, double* %23, i64 %indvars.iv.next.2
  store double %38, double* %39, align 8, !tbaa !33
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next3, 4
  %40 = icmp slt i64 %indvars.iv.next.3, %24
  br i1 %40, label %._crit_edge2, label %._crit_edge.loopexit.unr-lcssa
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #3

; Function Attrs: norecurse nounwind uwtable
define i32 @_ZN8ForceEAM9pack_commEiiPdPPi(%class.ForceEAM* nocapture readonly %this, i32 %n, i32 %iswap, double* nocapture %buf, i32** nocapture readonly %asendlist) unnamed_addr #12 align 2 {
  %1 = icmp sgt i32 %n, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = sext i32 %iswap to i64
  %3 = getelementptr inbounds i32*, i32** %asendlist, i64 %2
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %6 = load double*, double** %5, align 8
  %7 = add i32 %n, -1
  %xtraiter = and i32 %n, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %.preheader

.preheader:                                       ; preds = %.lr.ph
  br label %8

; <label>:8                                       ; preds = %8, %.preheader
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %8 ], [ 0, %.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %8 ], [ %xtraiter, %.preheader ]
  %9 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv.prol
  %10 = load i32, i32* %9, align 4, !tbaa !1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double, double* %6, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !33
  %15 = getelementptr inbounds double, double* %buf, i64 %indvars.iv.prol
  %16 = bitcast double* %15 to i64*
  store i64 %14, i64* %16, align 8, !tbaa !33
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.split.loopexit, label %8, !llvm.loop !173

.lr.ph.split.loopexit:                            ; preds = %8
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %.lr.ph.split.loopexit, %.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.prol, %.lr.ph.split.loopexit ]
  %17 = icmp ult i32 %7, 3
  br i1 %17, label %._crit_edge.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.split.split ], [ %indvars.iv.next.3, %18 ]
  %19 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv
  %20 = load i32, i32* %19, align 4, !tbaa !1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds double, double* %6, i64 %21
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !33
  %25 = getelementptr inbounds double, double* %buf, i64 %indvars.iv
  %26 = bitcast double* %25 to i64*
  store i64 %24, i64* %26, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv.next
  %28 = load i32, i32* %27, align 4, !tbaa !1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %6, i64 %29
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !33
  %33 = getelementptr inbounds double, double* %buf, i64 %indvars.iv.next
  %34 = bitcast double* %33 to i64*
  store i64 %32, i64* %34, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %35 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv.next.1
  %36 = load i32, i32* %35, align 4, !tbaa !1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %6, i64 %37
  %39 = bitcast double* %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !33
  %41 = getelementptr inbounds double, double* %buf, i64 %indvars.iv.next.1
  %42 = bitcast double* %41 to i64*
  store i64 %40, i64* %42, align 8, !tbaa !33
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %43 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv.next.2
  %44 = load i32, i32* %43, align 4, !tbaa !1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %6, i64 %45
  %47 = bitcast double* %46 to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !33
  %49 = getelementptr inbounds double, double* %buf, i64 %indvars.iv.next.2
  %50 = bitcast double* %49 to i64*
  store i64 %48, i64* %50, align 8, !tbaa !33
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %n
  br i1 %exitcond.3, label %._crit_edge.loopexit.unr-lcssa, label %18

._crit_edge.loopexit.unr-lcssa:                   ; preds = %18
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret i32 1
}

; Function Attrs: norecurse nounwind uwtable
define void @_ZN8ForceEAM11unpack_commEiiPd(%class.ForceEAM* nocapture readonly %this, i32 %n, i32 %first, double* nocapture readonly %buf) unnamed_addr #12 align 2 {
  %1 = add i32 %first, %n
  %2 = icmp sgt i32 %n, 0
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %3 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %4 = load double*, double** %3, align 8
  %5 = sext i32 %first to i64
  %6 = add i32 %first, 1
  %7 = icmp sgt i32 %1, %6
  %smax = select i1 %7, i32 %1, i32 %6
  %8 = add i32 %smax, -1
  %9 = sub i32 %8, %first
  %10 = zext i32 %9 to i64
  %11 = add nuw nsw i64 %10, 1
  %min.iters.check = icmp ult i64 %11, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %.lr.ph
  %n.vec = and i64 %11, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %scevgep = getelementptr double, double* %4, i64 %5
  %12 = add nsw i64 %5, %10
  %scevgep8 = getelementptr double, double* %4, i64 %12
  %scevgep11 = getelementptr double, double* %buf, i64 %10
  %bound0 = icmp ule double* %scevgep, %scevgep11
  %bound1 = icmp uge double* %scevgep8, %buf
  %memcheck.conflict = and i1 %bound0, %bound1
  %ind.end = add nsw i64 %5, %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end15 = add i32 %cast.crd, %first
  br i1 %memcheck.conflict, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %13 = add nsw i64 %n.vec, -4
  %14 = lshr exact i64 %13, 2
  %15 = add nuw nsw i64 %14, 1
  %xtraiter = and i64 %15, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %offset.idx.prol = add i64 %5, %index.prol
  %16 = getelementptr inbounds double, double* %buf, i64 %index.prol
  %17 = bitcast double* %16 to <2 x i64>*
  %wide.load.prol = load <2 x i64>, <2 x i64>* %17, align 8, !tbaa !33
  %18 = getelementptr double, double* %16, i64 2
  %19 = bitcast double* %18 to <2 x i64>*
  %wide.load26.prol = load <2 x i64>, <2 x i64>* %19, align 8, !tbaa !33
  %20 = getelementptr inbounds double, double* %4, i64 %offset.idx.prol
  %21 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %wide.load.prol, <2 x i64>* %21, align 8, !tbaa !33
  %22 = getelementptr double, double* %20, i64 2
  %23 = bitcast double* %22 to <2 x i64>*
  store <2 x i64> %wide.load26.prol, <2 x i64>* %23, align 8, !tbaa !33
  %index.next.prol = add i64 %index.prol, 4
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !174

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol, %vector.body.preheader.split.loopexit ]
  %24 = icmp ult i64 %13, 12
  br i1 %24, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.3, %vector.body ]
  %offset.idx = add i64 %5, %index
  %25 = getelementptr inbounds double, double* %buf, i64 %index
  %26 = bitcast double* %25 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %26, align 8, !tbaa !33
  %27 = getelementptr double, double* %25, i64 2
  %28 = bitcast double* %27 to <2 x i64>*
  %wide.load26 = load <2 x i64>, <2 x i64>* %28, align 8, !tbaa !33
  %29 = getelementptr inbounds double, double* %4, i64 %offset.idx
  %30 = bitcast double* %29 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %30, align 8, !tbaa !33
  %31 = getelementptr double, double* %29, i64 2
  %32 = bitcast double* %31 to <2 x i64>*
  store <2 x i64> %wide.load26, <2 x i64>* %32, align 8, !tbaa !33
  %index.next = add i64 %index, 4
  %offset.idx.1 = add i64 %5, %index.next
  %33 = getelementptr inbounds double, double* %buf, i64 %index.next
  %34 = bitcast double* %33 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %34, align 8, !tbaa !33
  %35 = getelementptr double, double* %33, i64 2
  %36 = bitcast double* %35 to <2 x i64>*
  %wide.load26.1 = load <2 x i64>, <2 x i64>* %36, align 8, !tbaa !33
  %37 = getelementptr inbounds double, double* %4, i64 %offset.idx.1
  %38 = bitcast double* %37 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %38, align 8, !tbaa !33
  %39 = getelementptr double, double* %37, i64 2
  %40 = bitcast double* %39 to <2 x i64>*
  store <2 x i64> %wide.load26.1, <2 x i64>* %40, align 8, !tbaa !33
  %index.next.1 = add i64 %index, 8
  %offset.idx.2 = add i64 %5, %index.next.1
  %41 = getelementptr inbounds double, double* %buf, i64 %index.next.1
  %42 = bitcast double* %41 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !33
  %43 = getelementptr double, double* %41, i64 2
  %44 = bitcast double* %43 to <2 x i64>*
  %wide.load26.2 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !33
  %45 = getelementptr inbounds double, double* %4, i64 %offset.idx.2
  %46 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %46, align 8, !tbaa !33
  %47 = getelementptr double, double* %45, i64 2
  %48 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %wide.load26.2, <2 x i64>* %48, align 8, !tbaa !33
  %index.next.2 = add i64 %index, 12
  %offset.idx.3 = add i64 %5, %index.next.2
  %49 = getelementptr inbounds double, double* %buf, i64 %index.next.2
  %50 = bitcast double* %49 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %50, align 8, !tbaa !33
  %51 = getelementptr double, double* %49, i64 2
  %52 = bitcast double* %51 to <2 x i64>*
  %wide.load26.3 = load <2 x i64>, <2 x i64>* %52, align 8, !tbaa !33
  %53 = getelementptr inbounds double, double* %4, i64 %offset.idx.3
  %54 = bitcast double* %53 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %54, align 8, !tbaa !33
  %55 = getelementptr double, double* %53, i64 2
  %56 = bitcast double* %55 to <2 x i64>*
  store <2 x i64> %wide.load26.3, <2 x i64>* %56, align 8, !tbaa !33
  %index.next.3 = add i64 %index, 16
  %57 = icmp eq i64 %index.next.3, %n.vec
  br i1 %57, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !175

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %cmp.n = icmp eq i64 %11, %n.vec
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %.lr.ph
  %indvars.iv3.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %n.vec, %middle.block ]
  %indvars.iv.ph = phi i64 [ %5, %vector.memcheck ], [ %5, %min.iters.checked ], [ %5, %.lr.ph ], [ %ind.end, %middle.block ]
  %i.02.ph = phi i32 [ %first, %vector.memcheck ], [ %first, %min.iters.checked ], [ %first, %.lr.ph ], [ %ind.end15, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %scalar.ph ], [ %indvars.iv3.ph, %scalar.ph.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %i.02 = phi i32 [ %63, %scalar.ph ], [ %i.02.ph, %scalar.ph.preheader ]
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %58 = getelementptr inbounds double, double* %buf, i64 %indvars.iv3
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8, !tbaa !33
  %61 = getelementptr inbounds double, double* %4, i64 %indvars.iv
  %62 = bitcast double* %61 to i64*
  store i64 %60, i64* %62, align 8, !tbaa !33
  %63 = add nsw i32 %i.02, 1
  %64 = icmp slt i32 %63, %1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %64, label %scalar.ph, label %._crit_edge.loopexit, !llvm.loop !176

._crit_edge.loopexit:                             ; preds = %scalar.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %0
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM9read_fileEPKc(%class.ForceEAM* %this, i8* %filename) unnamed_addr #11 align 2 {
  %line = alloca [1024 x i8], align 16
  %flag = alloca i32, align 4
  %tmp = alloca i32, align 4
  %1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1024, i8* %1) #7
  %2 = bitcast i32* %flag to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  store i32 0, i32* %flag, align 4, !tbaa !1
  %3 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 17
  %4 = load i32, i32* %3, align 4, !tbaa !133
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2.73, i64 0, i64 0))
  %8 = icmp eq %struct._IO_FILE* %7, null
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %6
  %10 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3.74, i64 0, i64 0), i8* %filename)
  store i32 1, i32* %flag, align 4, !tbaa !1
  br label %11

; <label>:11                                      ; preds = %9, %6, %0
  %fptr.0 = phi %struct._IO_FILE* [ null, %9 ], [ %7, %6 ], [ undef, %0 ]
  %12 = call i32 @MPI_Bcast(i8* %2, i32 1, i32 1275069445, i32 0, i32 1140850688)
  %13 = load i32, i32* %flag, align 4, !tbaa !1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

; <label>:15                                      ; preds = %11
  %16 = call i32 @MPI_Finalize()
  call void @exit(i32 0) #17
  unreachable

; <label>:17                                      ; preds = %11
  %18 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  %19 = load i32, i32* %3, align 4, !tbaa !133
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %._crit_edge20

._crit_edge20:                                    ; preds = %17
  %.pre21 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 6
  %.pre22 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 1
  %.pre24 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 3
  %.pre26 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 2
  %.pre28 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 4
  %.pre30 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 5
  br label %33

; <label>:21                                      ; preds = %17
  %22 = call i8* @fgets(i8* %1, i32 1024, %struct._IO_FILE* %fptr.0)
  %23 = call i8* @fgets(i8* %1, i32 1024, %struct._IO_FILE* %fptr.0)
  %24 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 6
  %25 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.75, i64 0, i64 0), i32* nonnull %tmp, double* %24) #7
  %26 = call i8* @fgets(i8* %1, i32 1024, %struct._IO_FILE* %fptr.0)
  %27 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 1
  %28 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 3
  %29 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 2
  %30 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 4
  %31 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 5
  %32 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.76, i64 0, i64 0), i32* %27, double* %28, i32* %29, double* %30, double* %31) #7
  br label %33

; <label>:33                                      ; preds = %21, %._crit_edge20
  %.pre-phi31 = phi double* [ %.pre30, %._crit_edge20 ], [ %31, %21 ]
  %.pre-phi29 = phi double* [ %.pre28, %._crit_edge20 ], [ %30, %21 ]
  %.pre-phi27 = phi i32* [ %.pre26, %._crit_edge20 ], [ %29, %21 ]
  %.pre-phi25 = phi double* [ %.pre24, %._crit_edge20 ], [ %28, %21 ]
  %.pre-phi23 = phi i32* [ %.pre22, %._crit_edge20 ], [ %27, %21 ]
  %.pre-phi = phi double* [ %.pre21, %._crit_edge20 ], [ %24, %21 ]
  %34 = bitcast double* %.pre-phi to i8*
  %35 = call i32 @MPI_Bcast(i8* %34, i32 1, i32 1275070475, i32 0, i32 1140850688)
  %36 = bitcast i32* %.pre-phi23 to i8*
  %37 = call i32 @MPI_Bcast(i8* %36, i32 1, i32 1275069445, i32 0, i32 1140850688)
  %38 = bitcast double* %.pre-phi25 to i8*
  %39 = call i32 @MPI_Bcast(i8* %38, i32 1, i32 1275070475, i32 0, i32 1140850688)
  %40 = bitcast i32* %.pre-phi27 to i8*
  %41 = call i32 @MPI_Bcast(i8* %40, i32 1, i32 1275069445, i32 0, i32 1140850688)
  %42 = bitcast double* %.pre-phi29 to i8*
  %43 = call i32 @MPI_Bcast(i8* %42, i32 1, i32 1275070475, i32 0, i32 1140850688)
  %44 = bitcast double* %.pre-phi31 to i8*
  %45 = call i32 @MPI_Bcast(i8* %44, i32 1, i32 1275070475, i32 0, i32 1140850688)
  %46 = bitcast double* %.pre-phi to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !177
  %48 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 4
  %49 = bitcast double* %48 to i64*
  store i64 %47, i64* %49, align 8, !tbaa !69
  %50 = bitcast i32* %.pre-phi23 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = trunc i64 %51 to i32
  %53 = shl i64 %51, 32
  %sext = add i64 %53, 4294967296
  %54 = ashr exact i64 %sext, 32
  %55 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %54, i64 8)
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = call noalias i8* @_Znam(i64 %58) #18
  %60 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 7
  %61 = bitcast double** %60 to i8**
  store i8* %59, i8** %61, align 8, !tbaa !178
  %62 = add i64 %51, 4294967296
  %sext32 = ashr i64 %62, 32
  %63 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %sext32, i64 8)
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = call noalias i8* @_Znam(i64 %66) #18
  %68 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 8
  %69 = bitcast double** %68 to i8**
  store i8* %67, i8** %69, align 8, !tbaa !179
  %70 = call noalias i8* @_Znam(i64 %66) #18
  %71 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 9
  %72 = bitcast double** %71 to i8**
  store i8* %70, i8** %72, align 8, !tbaa !180
  %73 = load i32, i32* %3, align 4, !tbaa !133
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %77

; <label>:75                                      ; preds = %33
  %76 = bitcast i8* %59 to double*
  call void @_ZN8ForceEAM4grabEP8_IO_FILEiPd(%class.ForceEAM* undef, %struct._IO_FILE* %fptr.0, i32 %52, double* %76)
  %.pre = load i8*, i8** %61, align 8, !tbaa !178
  %.pre19 = load i32, i32* %.pre-phi23, align 8, !tbaa !181
  br label %77

; <label>:77                                      ; preds = %75, %33
  %78 = phi i32 [ %.pre19, %75 ], [ %52, %33 ]
  %79 = phi i8* [ %.pre, %75 ], [ %59, %33 ]
  %80 = call i32 @MPI_Bcast(i8* %79, i32 %78, i32 1275070475, i32 0, i32 1140850688)
  %81 = load i32, i32* %3, align 4, !tbaa !133
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %86

; <label>:83                                      ; preds = %77
  %84 = load i32, i32* %.pre-phi27, align 4, !tbaa !182
  %85 = load double*, double** %71, align 8, !tbaa !180
  call void @_ZN8ForceEAM4grabEP8_IO_FILEiPd(%class.ForceEAM* undef, %struct._IO_FILE* %fptr.0, i32 %84, double* %85)
  br label %86

; <label>:86                                      ; preds = %83, %77
  %87 = load i8*, i8** %72, align 8, !tbaa !180
  %88 = load i32, i32* %.pre-phi27, align 4, !tbaa !182
  %89 = call i32 @MPI_Bcast(i8* %87, i32 %88, i32 1275070475, i32 0, i32 1140850688)
  %90 = load i32, i32* %3, align 4, !tbaa !133
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %95

; <label>:92                                      ; preds = %86
  %93 = load i32, i32* %.pre-phi27, align 4, !tbaa !182
  %94 = load double*, double** %68, align 8, !tbaa !179
  call void @_ZN8ForceEAM4grabEP8_IO_FILEiPd(%class.ForceEAM* undef, %struct._IO_FILE* %fptr.0, i32 %93, double* %94)
  br label %95

; <label>:95                                      ; preds = %92, %86
  %96 = load i8*, i8** %69, align 8, !tbaa !179
  %97 = load i32, i32* %.pre-phi27, align 4, !tbaa !182
  %98 = call i32 @MPI_Bcast(i8* %96, i32 %97, i32 1275070475, i32 0, i32 1140850688)
  %99 = load i64, i64* %50, align 8
  %100 = trunc i64 %99 to i32
  %101 = icmp sgt i32 %100, 0
  %102 = lshr i64 %99, 32
  %103 = trunc i64 %102 to i32
  br i1 %101, label %.lr.ph10, label %._crit_edge11

.lr.ph10:                                         ; preds = %95
  %104 = load double*, double** %60, align 8
  %sext35 = shl i64 %99, 32
  %105 = ashr exact i64 %sext35, 32
  br label %109

._crit_edge11.loopexit:                           ; preds = %109
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %95
  %106 = icmp sgt i32 %103, 0
  br i1 %106, label %.lr.ph6, label %._crit_edge

.lr.ph6:                                          ; preds = %._crit_edge11
  %107 = load double*, double** %68, align 8
  %108 = ashr i64 %99, 32
  br label %117

; <label>:109                                     ; preds = %109, %.lr.ph10
  %indvars.iv14 = phi i64 [ %105, %.lr.ph10 ], [ %indvars.iv.next15, %109 ]
  %indvars.iv.next15 = add nsw i64 %indvars.iv14, -1
  %110 = getelementptr inbounds double, double* %104, i64 %indvars.iv.next15
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8, !tbaa !33
  %113 = getelementptr inbounds double, double* %104, i64 %indvars.iv14
  %114 = bitcast double* %113 to i64*
  store i64 %112, i64* %114, align 8, !tbaa !33
  %115 = icmp sgt i64 %indvars.iv14, 1
  br i1 %115, label %109, label %._crit_edge11.loopexit

._crit_edge7:                                     ; preds = %117
  br i1 true, label %.lr.ph, label %._crit_edge7.._crit_edge_crit_edge

._crit_edge7.._crit_edge_crit_edge:               ; preds = %._crit_edge7
  br label %._crit_edge

.lr.ph:                                           ; preds = %._crit_edge7
  %116 = load double*, double** %71, align 8
  br label %126

; <label>:117                                     ; preds = %117, %.lr.ph6
  %indvars.iv12 = phi i64 [ %108, %.lr.ph6 ], [ %indvars.iv.next13, %117 ]
  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1
  %118 = getelementptr inbounds double, double* %107, i64 %indvars.iv.next13
  %119 = bitcast double* %118 to i64*
  %120 = load i64, i64* %119, align 8, !tbaa !33
  %121 = getelementptr inbounds double, double* %107, i64 %indvars.iv12
  %122 = bitcast double* %121 to i64*
  store i64 %120, i64* %122, align 8, !tbaa !33
  %123 = icmp sgt i64 %indvars.iv12, 1
  br i1 %123, label %117, label %._crit_edge7

._crit_edge.loopexit:                             ; preds = %126
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge7.._crit_edge_crit_edge, %._crit_edge.loopexit, %._crit_edge11
  %124 = load i32, i32* %3, align 4, !tbaa !133
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %133, label %135

; <label>:126                                     ; preds = %126, %.lr.ph
  %indvars.iv = phi i64 [ %108, %.lr.ph ], [ %indvars.iv.next, %126 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %127 = getelementptr inbounds double, double* %116, i64 %indvars.iv.next
  %128 = bitcast double* %127 to i64*
  %129 = load i64, i64* %128, align 8, !tbaa !33
  %130 = getelementptr inbounds double, double* %116, i64 %indvars.iv
  %131 = bitcast double* %130 to i64*
  store i64 %129, i64* %131, align 8, !tbaa !33
  %132 = icmp sgt i64 %indvars.iv, 1
  br i1 %132, label %126, label %._crit_edge.loopexit

; <label>:133                                     ; preds = %._crit_edge
  %134 = call i32 @fclose(%struct._IO_FILE* %fptr.0)
  br label %135

; <label>:135                                     ; preds = %133, %._crit_edge
  call void @llvm.lifetime.end(i64 4, i8* %18) #7
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  call void @llvm.lifetime.end(i64 1024, i8* %1) #7
  ret void
}

declare i32 @MPI_Bcast(i8*, i32, i32, i32, i32) #2

; Function Attrs: nounwind uwtable
define void @_ZN8ForceEAM4grabEP8_IO_FILEiPd(%class.ForceEAM* nocapture readnone %this, %struct._IO_FILE* nocapture %fptr, i32 %n, double* nocapture %list) #9 align 2 {
  %line = alloca [1024 x i8], align 16
  %1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1024, i8* %1) #7
  %2 = icmp sgt i32 %n, 0
  br i1 %2, label %.lr.ph4.preheader, label %._crit_edge

.lr.ph4.preheader:                                ; preds = %0
  br label %.lr.ph4

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.lr.ph4, %.loopexit.loopexit
  %i.1.lcssa = phi i32 [ %i.11, %.lr.ph4 ], [ %i.1, %.loopexit.loopexit ]
  %3 = icmp slt i32 %i.1.lcssa, %n
  br i1 %3, label %.lr.ph4, label %._crit_edge.loopexit

.lr.ph4:                                          ; preds = %.loopexit, %.lr.ph4.preheader
  %i.03 = phi i32 [ %i.1.lcssa, %.loopexit ], [ 0, %.lr.ph4.preheader ]
  %4 = call i8* @fgets(i8* %1, i32 1024, %struct._IO_FILE* %fptr)
  %5 = call i8* @strtok(i8* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.77, i64 0, i64 0)) #7
  %6 = call double @strtod(i8* nocapture nonnull %5, i8** null) #7
  %7 = sext i32 %i.03 to i64
  %8 = getelementptr inbounds double, double* %list, i64 %7
  store double %6, double* %8, align 8, !tbaa !33
  %i.11 = add i32 %i.03, 1
  %9 = call i8* @strtok(i8* null, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.77, i64 0, i64 0)) #7
  %10 = icmp eq i8* %9, null
  br i1 %10, label %.loopexit, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.lr.ph4
  %11 = sext i32 %i.11 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %11, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %12 = phi i8* [ %9, %.lr.ph.preheader ], [ %15, %.lr.ph ]
  %i.12 = phi i32 [ %i.11, %.lr.ph.preheader ], [ %i.1, %.lr.ph ]
  %13 = call double @strtod(i8* nocapture nonnull %12, i8** null) #7
  %14 = getelementptr inbounds double, double* %list, i64 %indvars.iv
  store double %13, double* %14, align 8, !tbaa !33
  %i.1 = add nsw i32 %i.12, 1
  %15 = call i8* @strtok(i8* null, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.77, i64 0, i64 0)) #7
  %16 = icmp eq i8* %15, null
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %16, label %.loopexit.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 1024, i8* %1) #7
  ret void
}

; Function Attrs: nounwind
declare double @strtod(i8* readonly, i8** nocapture) #5

; Function Attrs: uwtable
define void @_ZN8ForceEAM10file2arrayEv(%class.ForceEAM* nocapture %this) unnamed_addr #11 align 2 {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 11
  %2 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 9
  %3 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 4
  %4 = load double, double* %3, align 8, !tbaa !183
  %5 = fcmp olt double %4, 0.000000e+00
  %. = select i1 %5, double 0.000000e+00, double %4
  store double %., double* %2, align 8, !tbaa !134
  %6 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 3
  %7 = load double, double* %6, align 8, !tbaa !184
  %8 = fcmp olt double %7, 0.000000e+00
  %9 = select i1 %8, double 0.000000e+00, double %7
  store double %9, double* %1, align 8, !tbaa !138
  %10 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 2
  %11 = load i32, i32* %10, align 4, !tbaa !182
  %12 = add nsw i32 %11, -1
  %13 = sitofp i32 %12 to double
  %14 = fmul double %4, %13
  %15 = fcmp olt double %14, 0.000000e+00
  %.1 = select i1 %15, double 0.000000e+00, double %14
  %16 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 1
  %17 = bitcast i32* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = add nsw i32 %19, -1
  %21 = sitofp i32 %20 to double
  %22 = fmul double %7, %21
  %23 = fcmp olt double %22, 0.000000e+00
  %24 = select i1 %23, double 0.000000e+00, double %22
  %25 = fdiv double %.1, %.
  %26 = fadd double %25, 5.000000e-01
  %27 = fptosi double %26 to i32
  %28 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  store i32 %27, i32* %28, align 4, !tbaa !146
  %29 = fdiv double %24, %9
  %30 = fadd double %29, 5.000000e-01
  %31 = fptosi double %30 to i32
  %32 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 2
  store i32 %31, i32* %32, align 8, !tbaa !168
  %33 = add nsw i32 %31, 1
  %34 = sext i32 %33 to i64
  %35 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %34, i64 8)
  %36 = extractvalue { i64, i1 } %35, 1
  %37 = extractvalue { i64, i1 } %35, 0
  %38 = select i1 %36, i64 -1, i64 %37
  %39 = tail call noalias i8* @_Znam(i64 %38) #18
  %40 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 6
  %41 = bitcast double** %40 to i8**
  store i8* %39, i8** %41, align 8, !tbaa !145
  %42 = icmp slt i32 %31, 1
  %43 = bitcast i8* %39 to double*
  %44 = lshr i64 %18, 32
  %45 = trunc i64 %44 to i32
  br i1 %42, label %._crit_edge13, label %.lr.ph12

.lr.ph12:                                         ; preds = %0
  %46 = add nsw i32 %19, -2
  %47 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 7
  %48 = load double*, double** %47, align 8
  %49 = sext i32 %31 to i64
  br label %50

; <label>:50                                      ; preds = %._crit_edge18, %.lr.ph12
  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge18 ], [ 1, %.lr.ph12 ]
  %51 = add i64 %indvars.iv16, 4294967295
  %52 = trunc i64 %51 to i32
  %53 = sitofp i32 %52 to double
  %54 = fmul double %53, %9
  %55 = fdiv double %54, %7
  %56 = fadd double %55, 1.000000e+00
  %57 = fptosi double %56 to i32
  %58 = icmp slt i32 %57, %46
  %.2 = select i1 %58, i32 %57, i32 %46
  %59 = icmp sgt i32 %.2, 2
  %60 = select i1 %59, i32 %.2, i32 2
  %61 = sitofp i32 %60 to double
  %62 = fsub double %56, %61
  %63 = fcmp olt double %62, 2.000000e+00
  %64 = select i1 %63, double %62, double 2.000000e+00
  %65 = fmul double %64, 0xBFC5555555555555
  %66 = fadd double %64, -1.000000e+00
  %67 = fmul double %65, %66
  %68 = fadd double %64, -2.000000e+00
  %69 = fmul double %68, %67
  %70 = fmul double %64, %64
  %71 = fadd double %70, -1.000000e+00
  %72 = fmul double %71, 5.000000e-01
  %73 = fmul double %68, %72
  %74 = fmul double %64, -5.000000e-01
  %75 = fadd double %64, 1.000000e+00
  %76 = fmul double %74, %75
  %77 = fmul double %68, %76
  %78 = fmul double %64, 0x3FC5555555555555
  %79 = fmul double %78, %71
  %80 = add nsw i32 %60, -1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %48, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = fmul double %83, %69
  %85 = sext i32 %60 to i64
  %86 = getelementptr inbounds double, double* %48, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !33
  %88 = fmul double %87, %73
  %89 = fadd double %84, %88
  %90 = add nsw i32 %60, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds double, double* %48, i64 %91
  %93 = load double, double* %92, align 8, !tbaa !33
  %94 = fmul double %93, %77
  %95 = fadd double %94, %89
  %96 = add nsw i32 %60, 2
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds double, double* %48, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !33
  %100 = fmul double %99, %79
  %101 = fadd double %100, %95
  %102 = getelementptr inbounds double, double* %43, i64 %indvars.iv16
  store double %101, double* %102, align 8, !tbaa !33
  %103 = icmp slt i64 %indvars.iv16, %49
  br i1 %103, label %._crit_edge18, label %._crit_edge13.loopexit

._crit_edge18:                                    ; preds = %50
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  br label %50

._crit_edge13.loopexit:                           ; preds = %50
  br label %._crit_edge13

._crit_edge13:                                    ; preds = %._crit_edge13.loopexit, %0
  %104 = add nsw i32 %27, 1
  %105 = sext i32 %104 to i64
  %106 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %105, i64 8)
  %107 = extractvalue { i64, i1 } %106, 1
  %108 = extractvalue { i64, i1 } %106, 0
  %109 = select i1 %107, i64 -1, i64 %108
  %110 = tail call noalias i8* @_Znam(i64 %109) #18
  %111 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 7
  %112 = bitcast double** %111 to i8**
  store i8* %110, i8** %112, align 8, !tbaa !147
  %113 = icmp slt i32 %27, 1
  %114 = bitcast i8* %110 to double*
  br i1 %113, label %._crit_edge9, label %.lr.ph8

.lr.ph8:                                          ; preds = %._crit_edge13
  %115 = add nsw i32 %45, -2
  %116 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 8
  %117 = load double*, double** %116, align 8
  %118 = sext i32 %27 to i64
  br label %119

; <label>:119                                     ; preds = %119, %.lr.ph8
  %indvars.iv14 = phi i64 [ %indvars.iv.next15, %119 ], [ 1, %.lr.ph8 ]
  %120 = add i64 %indvars.iv14, 4294967295
  %121 = trunc i64 %120 to i32
  %122 = sitofp i32 %121 to double
  %123 = fmul double %122, %.
  %124 = fdiv double %123, %4
  %125 = fadd double %124, 1.000000e+00
  %126 = fptosi double %125 to i32
  %127 = icmp slt i32 %126, %115
  %.3 = select i1 %127, i32 %126, i32 %115
  %128 = icmp sgt i32 %.3, 2
  %129 = select i1 %128, i32 %.3, i32 2
  %130 = sitofp i32 %129 to double
  %131 = fsub double %125, %130
  %132 = fcmp olt double %131, 2.000000e+00
  %133 = select i1 %132, double %131, double 2.000000e+00
  %134 = fmul double %133, 0xBFC5555555555555
  %135 = fadd double %133, -1.000000e+00
  %136 = fmul double %134, %135
  %137 = fadd double %133, -2.000000e+00
  %138 = fmul double %137, %136
  %139 = fmul double %133, %133
  %140 = fadd double %139, -1.000000e+00
  %141 = fmul double %140, 5.000000e-01
  %142 = fmul double %137, %141
  %143 = fmul double %133, -5.000000e-01
  %144 = fadd double %133, 1.000000e+00
  %145 = fmul double %143, %144
  %146 = fmul double %137, %145
  %147 = fmul double %133, 0x3FC5555555555555
  %148 = fmul double %147, %140
  %149 = add nsw i32 %129, -1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds double, double* %117, i64 %150
  %152 = load double, double* %151, align 8, !tbaa !33
  %153 = fmul double %152, %138
  %154 = sext i32 %129 to i64
  %155 = getelementptr inbounds double, double* %117, i64 %154
  %156 = load double, double* %155, align 8, !tbaa !33
  %157 = fmul double %156, %142
  %158 = fadd double %153, %157
  %159 = add nsw i32 %129, 1
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds double, double* %117, i64 %160
  %162 = load double, double* %161, align 8, !tbaa !33
  %163 = fmul double %162, %146
  %164 = fadd double %163, %158
  %165 = add nsw i32 %129, 2
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds double, double* %117, i64 %166
  %168 = load double, double* %167, align 8, !tbaa !33
  %169 = fmul double %168, %148
  %170 = fadd double %169, %164
  %171 = getelementptr inbounds double, double* %114, i64 %indvars.iv14
  store double %170, double* %171, align 8, !tbaa !33
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %172 = icmp slt i64 %indvars.iv14, %118
  br i1 %172, label %119, label %._crit_edge9.loopexit

._crit_edge9.loopexit:                            ; preds = %119
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit, %._crit_edge13
  %173 = tail call noalias i8* @_Znam(i64 %109) #18
  %174 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 8
  %175 = bitcast double** %174 to i8**
  store i8* %173, i8** %175, align 8, !tbaa !148
  %176 = bitcast i8* %173 to double*
  br i1 %113, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %._crit_edge9
  %177 = add nsw i32 %45, -2
  %178 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 20, i32 9
  %179 = load double*, double** %178, align 8
  %180 = sext i32 %27 to i64
  br label %181

; <label>:181                                     ; preds = %181, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %181 ], [ 1, %.lr.ph ]
  %182 = add i64 %indvars.iv, 4294967295
  %183 = trunc i64 %182 to i32
  %184 = sitofp i32 %183 to double
  %185 = fmul double %184, %.
  %186 = fdiv double %185, %4
  %187 = fadd double %186, 1.000000e+00
  %188 = fptosi double %187 to i32
  %189 = icmp slt i32 %188, %177
  %.4 = select i1 %189, i32 %188, i32 %177
  %190 = icmp sgt i32 %.4, 2
  %191 = select i1 %190, i32 %.4, i32 2
  %192 = sitofp i32 %191 to double
  %193 = fsub double %187, %192
  %194 = fcmp olt double %193, 2.000000e+00
  %195 = select i1 %194, double %193, double 2.000000e+00
  %196 = fmul double %195, 0xBFC5555555555555
  %197 = fadd double %195, -1.000000e+00
  %198 = fmul double %196, %197
  %199 = fadd double %195, -2.000000e+00
  %200 = fmul double %199, %198
  %201 = fmul double %195, %195
  %202 = fadd double %201, -1.000000e+00
  %203 = fmul double %202, 5.000000e-01
  %204 = fmul double %199, %203
  %205 = fmul double %195, -5.000000e-01
  %206 = fadd double %195, 1.000000e+00
  %207 = fmul double %205, %206
  %208 = fmul double %199, %207
  %209 = fmul double %195, 0x3FC5555555555555
  %210 = fmul double %209, %202
  %211 = add nsw i32 %191, -1
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds double, double* %179, i64 %212
  %214 = load double, double* %213, align 8, !tbaa !33
  %215 = fmul double %214, %200
  %216 = sext i32 %191 to i64
  %217 = getelementptr inbounds double, double* %179, i64 %216
  %218 = load double, double* %217, align 8, !tbaa !33
  %219 = fmul double %218, %204
  %220 = fadd double %215, %219
  %221 = add nsw i32 %191, 1
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds double, double* %179, i64 %222
  %224 = load double, double* %223, align 8, !tbaa !33
  %225 = fmul double %224, %208
  %226 = fadd double %225, %220
  %227 = add nsw i32 %191, 2
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds double, double* %179, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !33
  %231 = fmul double %230, %210
  %232 = fadd double %231, %226
  %233 = fmul double %232, 1.438880e+01
  %234 = fmul double %232, %233
  %235 = getelementptr inbounds double, double* %176, i64 %indvars.iv
  store double %234, double* %235, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %236 = icmp slt i64 %indvars.iv, %180
  br i1 %236, label %181, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %181
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge9
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAMC2Ei(%class.ForceEAM* nocapture %this, i32 %ntypes_) unnamed_addr #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ([12 x i8*], [12 x i8*]* @_ZTV8ForceEAM, i64 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !67
  %2 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 7
  store i32 %ntypes_, i32* %2, align 8, !tbaa !110
  %3 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 1
  store double 0.000000e+00, double* %3, align 8, !tbaa !59
  %4 = mul nsw i32 %ntypes_, %ntypes_
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call noalias i8* @_Znam(i64 %6) #18
  %8 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 2
  %9 = bitcast double** %8 to i8**
  store i8* %7, i8** %9, align 8, !tbaa !121
  %10 = icmp eq i32 %4, 0
  br i1 %10, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %11 = icmp ugt i32 %4, 1
  %smax = select i1 %11, i32 %4, i32 1
  %12 = add nsw i32 %smax, -1
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 3
  %15 = add nuw nsw i64 %14, 8
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 %15, i32 8, i1 false)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %0
  %16 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 9
  store i32 0, i32* %16, align 8, !tbaa !42
  %17 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %18 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 0, i32 16
  %19 = bitcast double** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 20, i32 8, i1 false)
  store i32 1, i32* %18, align 8, !tbaa !128
  ret void
}

; Function Attrs: uwtable
define void @_ZN8ForceEAM10init_styleEv(%class.ForceEAM* %this) #11 align 2 {
  %1 = bitcast %class.ForceEAM* %this to void (%class.ForceEAM*)***
  %2 = load void (%class.ForceEAM*)**, void (%class.ForceEAM*)*** %1, align 8, !tbaa !67
  %3 = getelementptr inbounds void (%class.ForceEAM*)*, void (%class.ForceEAM*)** %2, i64 9
  %4 = load void (%class.ForceEAM*)*, void (%class.ForceEAM*)** %3, align 8
  tail call void %4(%class.ForceEAM* %this)
  tail call void @_ZN8ForceEAM12array2splineEv(%class.ForceEAM* %this)
  ret void
}

; Function Attrs: nounwind uwtable
define double @_ZN8ForceEAM6singleEiiiidddRd(%class.ForceEAM* nocapture readonly %this, i32 %i, i32 %j, i32 %itype, i32 %jtype, double %rsq, double %factor_coul, double %factor_lj, double* nocapture dereferenceable(8) %fforce) #9 align 2 {
  %1 = tail call double @sqrt(double %rsq) #7
  %2 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 10
  %3 = load double, double* %2, align 8, !tbaa !137
  %4 = fmul double %1, %3
  %5 = fadd double %4, 1.000000e+00
  %6 = fptosi double %5 to i32
  %7 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !146
  %9 = add nsw i32 %8, -1
  %10 = icmp slt i32 %6, %9
  %. = select i1 %10, i32 %6, i32 %9
  %11 = sitofp i32 %. to double
  %12 = fsub double %5, %11
  %13 = fcmp olt double %12, 1.000000e+00
  %14 = select i1 %13, double %12, double 1.000000e+00
  %15 = mul nsw i32 %., 7
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 13
  %18 = load double*, double** %17, align 8, !tbaa !143
  %19 = getelementptr inbounds double, double* %18, i64 %16
  %20 = load double, double* %19, align 8, !tbaa !33
  %21 = fmul double %20, %14
  %22 = getelementptr inbounds double, double* %19, i64 1
  %23 = load double, double* %22, align 8, !tbaa !33
  %24 = fadd double %23, %21
  %25 = fmul double %14, %24
  %26 = getelementptr inbounds double, double* %19, i64 2
  %27 = load double, double* %26, align 8, !tbaa !33
  %28 = fadd double %27, %25
  %29 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 15
  %30 = load double*, double** %29, align 8, !tbaa !144
  %31 = getelementptr inbounds double, double* %30, i64 %16
  %32 = load double, double* %31, align 8, !tbaa !33
  %33 = fmul double %32, %14
  %34 = getelementptr inbounds double, double* %31, i64 1
  %35 = load double, double* %34, align 8, !tbaa !33
  %36 = fadd double %35, %33
  %37 = fmul double %14, %36
  %38 = getelementptr inbounds double, double* %31, i64 2
  %39 = load double, double* %38, align 8, !tbaa !33
  %40 = fadd double %39, %37
  %41 = getelementptr inbounds double, double* %31, i64 3
  %42 = load double, double* %41, align 8, !tbaa !33
  %43 = fmul double %14, %42
  %44 = getelementptr inbounds double, double* %31, i64 4
  %45 = load double, double* %44, align 8, !tbaa !33
  %46 = fadd double %43, %45
  %47 = fmul double %14, %46
  %48 = getelementptr inbounds double, double* %31, i64 5
  %49 = load double, double* %48, align 8, !tbaa !33
  %50 = fadd double %49, %47
  %51 = fmul double %14, %50
  %52 = getelementptr inbounds double, double* %31, i64 6
  %53 = load double, double* %52, align 8, !tbaa !33
  %54 = fadd double %53, %51
  %55 = fdiv double 1.000000e+00, %1
  %56 = fmul double %55, %54
  %57 = fmul double %55, %40
  %58 = fmul double %55, %56
  %59 = fsub double %57, %58
  %60 = sext i32 %i to i64
  %61 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 17
  %62 = load double*, double** %61, align 8, !tbaa !155
  %63 = getelementptr inbounds double, double* %62, i64 %60
  %64 = load double, double* %63, align 8, !tbaa !33
  %65 = fmul double %28, %64
  %66 = sext i32 %j to i64
  %67 = getelementptr inbounds double, double* %62, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !33
  %69 = fmul double %28, %68
  %70 = fadd double %65, %69
  %71 = fadd double %70, %59
  %72 = fmul double %55, %71
  %73 = fsub double -0.000000e+00, %72
  store double %73, double* %fforce, align 8, !tbaa !33
  ret double %56
}

; Function Attrs: norecurse nounwind uwtable
define i32 @_ZN8ForceEAM17pack_reverse_commEiiPd(%class.ForceEAM* nocapture readonly %this, i32 %n, i32 %first, double* nocapture %buf) #12 align 2 {
  %1 = add i32 %first, %n
  %2 = icmp sgt i32 %n, 0
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %3 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %4 = load double*, double** %3, align 8
  %5 = sext i32 %first to i64
  %6 = add i32 %first, 1
  %7 = icmp sgt i32 %1, %6
  %smax = select i1 %7, i32 %1, i32 %6
  %8 = add i32 %smax, -1
  %9 = sub i32 %8, %first
  %10 = zext i32 %9 to i64
  %11 = add nuw nsw i64 %10, 1
  %min.iters.check = icmp ult i64 %11, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %.lr.ph
  %n.vec = and i64 %11, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %scevgep = getelementptr double, double* %buf, i64 %10
  %scevgep9 = getelementptr double, double* %4, i64 %5
  %12 = add nsw i64 %5, %10
  %scevgep11 = getelementptr double, double* %4, i64 %12
  %bound0 = icmp uge double* %scevgep11, %buf
  %bound1 = icmp ule double* %scevgep9, %scevgep
  %memcheck.conflict = and i1 %bound0, %bound1
  %ind.end = add nsw i64 %5, %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end15 = add i32 %cast.crd, %first
  br i1 %memcheck.conflict, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %13 = add nsw i64 %n.vec, -4
  %14 = lshr exact i64 %13, 2
  %15 = add nuw nsw i64 %14, 1
  %xtraiter = and i64 %15, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %offset.idx.prol = add i64 %5, %index.prol
  %16 = getelementptr inbounds double, double* %4, i64 %offset.idx.prol
  %17 = bitcast double* %16 to <2 x i64>*
  %wide.load.prol = load <2 x i64>, <2 x i64>* %17, align 8, !tbaa !33
  %18 = getelementptr double, double* %16, i64 2
  %19 = bitcast double* %18 to <2 x i64>*
  %wide.load26.prol = load <2 x i64>, <2 x i64>* %19, align 8, !tbaa !33
  %20 = getelementptr inbounds double, double* %buf, i64 %index.prol
  %21 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %wide.load.prol, <2 x i64>* %21, align 8, !tbaa !33
  %22 = getelementptr double, double* %20, i64 2
  %23 = bitcast double* %22 to <2 x i64>*
  store <2 x i64> %wide.load26.prol, <2 x i64>* %23, align 8, !tbaa !33
  %index.next.prol = add i64 %index.prol, 4
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !185

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol, %vector.body.preheader.split.loopexit ]
  %24 = icmp ult i64 %13, 12
  br i1 %24, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.3, %vector.body ]
  %offset.idx = add i64 %5, %index
  %25 = getelementptr inbounds double, double* %4, i64 %offset.idx
  %26 = bitcast double* %25 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %26, align 8, !tbaa !33
  %27 = getelementptr double, double* %25, i64 2
  %28 = bitcast double* %27 to <2 x i64>*
  %wide.load26 = load <2 x i64>, <2 x i64>* %28, align 8, !tbaa !33
  %29 = getelementptr inbounds double, double* %buf, i64 %index
  %30 = bitcast double* %29 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %30, align 8, !tbaa !33
  %31 = getelementptr double, double* %29, i64 2
  %32 = bitcast double* %31 to <2 x i64>*
  store <2 x i64> %wide.load26, <2 x i64>* %32, align 8, !tbaa !33
  %index.next = add i64 %index, 4
  %offset.idx.1 = add i64 %5, %index.next
  %33 = getelementptr inbounds double, double* %4, i64 %offset.idx.1
  %34 = bitcast double* %33 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %34, align 8, !tbaa !33
  %35 = getelementptr double, double* %33, i64 2
  %36 = bitcast double* %35 to <2 x i64>*
  %wide.load26.1 = load <2 x i64>, <2 x i64>* %36, align 8, !tbaa !33
  %37 = getelementptr inbounds double, double* %buf, i64 %index.next
  %38 = bitcast double* %37 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %38, align 8, !tbaa !33
  %39 = getelementptr double, double* %37, i64 2
  %40 = bitcast double* %39 to <2 x i64>*
  store <2 x i64> %wide.load26.1, <2 x i64>* %40, align 8, !tbaa !33
  %index.next.1 = add i64 %index, 8
  %offset.idx.2 = add i64 %5, %index.next.1
  %41 = getelementptr inbounds double, double* %4, i64 %offset.idx.2
  %42 = bitcast double* %41 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %42, align 8, !tbaa !33
  %43 = getelementptr double, double* %41, i64 2
  %44 = bitcast double* %43 to <2 x i64>*
  %wide.load26.2 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !33
  %45 = getelementptr inbounds double, double* %buf, i64 %index.next.1
  %46 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %46, align 8, !tbaa !33
  %47 = getelementptr double, double* %45, i64 2
  %48 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %wide.load26.2, <2 x i64>* %48, align 8, !tbaa !33
  %index.next.2 = add i64 %index, 12
  %offset.idx.3 = add i64 %5, %index.next.2
  %49 = getelementptr inbounds double, double* %4, i64 %offset.idx.3
  %50 = bitcast double* %49 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %50, align 8, !tbaa !33
  %51 = getelementptr double, double* %49, i64 2
  %52 = bitcast double* %51 to <2 x i64>*
  %wide.load26.3 = load <2 x i64>, <2 x i64>* %52, align 8, !tbaa !33
  %53 = getelementptr inbounds double, double* %buf, i64 %index.next.2
  %54 = bitcast double* %53 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %54, align 8, !tbaa !33
  %55 = getelementptr double, double* %53, i64 2
  %56 = bitcast double* %55 to <2 x i64>*
  store <2 x i64> %wide.load26.3, <2 x i64>* %56, align 8, !tbaa !33
  %index.next.3 = add i64 %index, 16
  %57 = icmp eq i64 %index.next.3, %n.vec
  br i1 %57, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !186

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %cmp.n = icmp eq i64 %11, %n.vec
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %.lr.ph
  %indvars.iv3.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %n.vec, %middle.block ]
  %indvars.iv.ph = phi i64 [ %5, %vector.memcheck ], [ %5, %min.iters.checked ], [ %5, %.lr.ph ], [ %ind.end, %middle.block ]
  %i.02.ph = phi i32 [ %first, %vector.memcheck ], [ %first, %min.iters.checked ], [ %first, %.lr.ph ], [ %ind.end15, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %scalar.ph ], [ %indvars.iv3.ph, %scalar.ph.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %i.02 = phi i32 [ %63, %scalar.ph ], [ %i.02.ph, %scalar.ph.preheader ]
  %58 = getelementptr inbounds double, double* %4, i64 %indvars.iv
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8, !tbaa !33
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %61 = getelementptr inbounds double, double* %buf, i64 %indvars.iv3
  %62 = bitcast double* %61 to i64*
  store i64 %60, i64* %62, align 8, !tbaa !33
  %63 = add nsw i32 %i.02, 1
  %64 = icmp slt i32 %63, %1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %64, label %scalar.ph, label %._crit_edge.loopexit, !llvm.loop !187

._crit_edge.loopexit:                             ; preds = %scalar.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %0
  ret i32 1
}

; Function Attrs: norecurse nounwind uwtable
define void @_ZN8ForceEAM19unpack_reverse_commEiPiPd(%class.ForceEAM* nocapture readonly %this, i32 %n, i32* nocapture readonly %list, double* nocapture readonly %buf) #12 align 2 {
  %1 = icmp sgt i32 %n, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 16
  %3 = load double*, double** %2, align 8
  %xtraiter = and i32 %n, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %4

; <label>:4                                       ; preds = %.lr.ph
  %5 = load i32, i32* %list, align 4, !tbaa !1
  %6 = load double, double* %buf, align 8, !tbaa !33
  %7 = sext i32 %5 to i64
  %8 = getelementptr inbounds double, double* %3, i64 %7
  %9 = load double, double* %8, align 8, !tbaa !33
  %10 = fadd double %6, %9
  store double %10, double* %8, align 8, !tbaa !33
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %4, %.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph ], [ 1, %4 ]
  %11 = icmp eq i32 %n, 1
  br i1 %11, label %._crit_edge.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %12

; <label>:12                                      ; preds = %12, %.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.split.split ], [ %indvars.iv.next.1, %12 ]
  %13 = getelementptr inbounds i32, i32* %list, i64 %indvars.iv
  %14 = load i32, i32* %13, align 4, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %15 = getelementptr inbounds double, double* %buf, i64 %indvars.iv
  %16 = load double, double* %15, align 8, !tbaa !33
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds double, double* %3, i64 %17
  %19 = load double, double* %18, align 8, !tbaa !33
  %20 = fadd double %16, %19
  store double %20, double* %18, align 8, !tbaa !33
  %21 = getelementptr inbounds i32, i32* %list, i64 %indvars.iv.next
  %22 = load i32, i32* %21, align 4, !tbaa !1
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %23 = getelementptr inbounds double, double* %buf, i64 %indvars.iv.next
  %24 = load double, double* %23, align 8, !tbaa !33
  %25 = sext i32 %22 to i64
  %26 = getelementptr inbounds double, double* %3, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !33
  %28 = fadd double %24, %27
  store double %28, double* %26, align 8, !tbaa !33
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %n
  br i1 %exitcond.1, label %._crit_edge.loopexit.unr-lcssa, label %12

._crit_edge.loopexit.unr-lcssa:                   ; preds = %12
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define double @_ZN8ForceEAM12memory_usageEv(%class.ForceEAM* nocapture readonly %this) #15 align 2 {
  %1 = getelementptr inbounds %class.ForceEAM, %class.ForceEAM* %this, i64 0, i32 18
  %2 = load i32, i32* %1, align 8, !tbaa !153
  %3 = shl i32 %2, 4
  %4 = sitofp i32 %3 to double
  ret double %4
}

; Function Attrs: nounwind uwtable
define void @_ZN8ForceEAM6boundsEPciRiS1_(%class.ForceEAM* nocapture readnone %this, i8* readonly %str, i32 %nmax, i32* nocapture dereferenceable(4) %nlo, i32* nocapture dereferenceable(4) %nhi) #9 align 2 {
  %1 = tail call i8* @strchr(i8* %str, i32 42) #16
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = tail call i64 @strtol(i8* nocapture nonnull %str, i8** null, i32 10) #7
  %5 = trunc i64 %4 to i32
  store i32 %5, i32* %nhi, align 4, !tbaa !1
  store i32 %5, i32* %nlo, align 4, !tbaa !1
  %.pre = load i32, i32* %nhi, align 4
  br label %25

; <label>:6                                       ; preds = %0
  %7 = tail call i64 @strlen(i8* %str) #16
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  store i32 1, i32* %nlo, align 4, !tbaa !1
  store i32 %nmax, i32* %nhi, align 4, !tbaa !1
  br label %25

; <label>:10                                      ; preds = %6
  %11 = icmp eq i8* %1, %str
  br i1 %11, label %12, label %16

; <label>:12                                      ; preds = %10
  store i32 1, i32* %nlo, align 4, !tbaa !1
  %13 = getelementptr inbounds i8, i8* %str, i64 1
  %14 = tail call i64 @strtol(i8* nocapture nonnull %13, i8** null, i32 10) #7
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %nhi, align 4, !tbaa !1
  br label %25

; <label>:16                                      ; preds = %10
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %strlenfirst = load i8, i8* %17, align 1
  %18 = icmp eq i8 %strlenfirst, 0
  %19 = tail call i64 @strtol(i8* nocapture nonnull %str, i8** null, i32 10) #7
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %nlo, align 4, !tbaa !1
  br i1 %18, label %21, label %22

; <label>:21                                      ; preds = %16
  store i32 %nmax, i32* %nhi, align 4, !tbaa !1
  br label %25

; <label>:22                                      ; preds = %16
  %23 = tail call i64 @strtol(i8* nocapture nonnull %17, i8** null, i32 10) #7
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %nhi, align 4, !tbaa !1
  br label %25

; <label>:25                                      ; preds = %22, %21, %12, %9, %3
  %26 = phi i32 [ %nmax, %9 ], [ %nmax, %21 ], [ %24, %22 ], [ %15, %12 ], [ %.pre, %3 ]
  %27 = load i32, i32* %nlo, align 4, !tbaa !1
  %28 = icmp slt i32 %27, 1
  %29 = icmp sgt i32 %26, %nmax
  %or.cond = or i1 %28, %29
  br i1 %or.cond, label %30, label %32

; <label>:30                                      ; preds = %25
  %31 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7.78, i64 0, i64 0))
  br label %32

; <label>:32                                      ; preds = %30, %25
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #3

; Function Attrs: uwtable
define void @_ZN8NeighborC2Ei(%class.Neighbor* nocapture %this, i32 %ntypes_) unnamed_addr #11 align 2 {
  %1 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 6
  store i32 0, i32* %1, align 8, !tbaa !188
  %2 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 24
  store i32 %ntypes_, i32* %2, align 4, !tbaa !189
  %3 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 7
  %4 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 10
  %5 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 20, i32 4, i1 false)
  store i32 100, i32* %4, align 8, !tbaa !118
  %6 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 23
  store i32 0, i32* %6, align 8, !tbaa !190
  %7 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 16
  %8 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 19
  %9 = bitcast i32** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i32 8, i1 false)
  store i32 8, i32* %8, align 4, !tbaa !191
  %10 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 27
  store i32* null, i32** %10, align 8, !tbaa !192
  %11 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 15
  store %class.ThreadData* null, %class.ThreadData** %11, align 8, !tbaa !28
  %12 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 11
  store i32 0, i32* %12, align 4, !tbaa !41
  %13 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 12
  store i32 1, i32* %13, align 8, !tbaa !35
  %14 = mul nsw i32 %ntypes_, %ntypes_
  %15 = zext i32 %14 to i64
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call noalias i8* @_Znam(i64 %16) #18
  %18 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 5
  %19 = bitcast double** %18 to i8**
  store i8* %17, i8** %19, align 8, !tbaa !193
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN8NeighborD2Ev(%class.Neighbor* nocapture readonly %this) unnamed_addr #9 align 2 {
  %1 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 8
  %2 = load i32*, i32** %1, align 8, !tbaa !120
  %3 = icmp eq i32* %2, null
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast i32* %2 to i8*
  tail call void @free(i8* %5) #7
  br label %6

; <label>:6                                       ; preds = %4, %0
  %7 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 9
  %8 = load i32*, i32** %7, align 8, !tbaa !119
  %9 = icmp eq i32* %8, null
  br i1 %9, label %12, label %10

; <label>:10                                      ; preds = %6
  %11 = bitcast i32* %8 to i8*
  tail call void @free(i8* %11) #7
  br label %12

; <label>:12                                      ; preds = %10, %6
  %13 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 16
  %14 = load i32*, i32** %13, align 8, !tbaa !194
  %15 = icmp eq i32* %14, null
  br i1 %15, label %18, label %16

; <label>:16                                      ; preds = %12
  %17 = bitcast i32* %14 to i8*
  tail call void @free(i8* %17) #7
  br label %18

; <label>:18                                      ; preds = %16, %12
  %19 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 17
  %20 = load i32*, i32** %19, align 8, !tbaa !195
  %21 = icmp eq i32* %20, null
  br i1 %21, label %24, label %22

; <label>:22                                      ; preds = %18
  %23 = bitcast i32* %20 to i8*
  tail call void @free(i8* %23) #7
  br label %24

; <label>:24                                      ; preds = %22, %18
  ret void
}

; Function Attrs: uwtable
define void @_ZN8Neighbor5buildER4Atom(%class.Neighbor* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @13)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %2 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 6
  %3 = load i32, i32* %2, align 8, !tbaa !188
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* %2, align 8, !tbaa !188
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %6 = load i32, i32* %5, align 4, !tbaa !84
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %8 = load i32, i32* %7, align 8, !tbaa !114
  %9 = add nsw i32 %8, %6
  %10 = tail call i32 @__kmpc_master(%ident_t* nonnull @13, i32 %1)
  %11 = icmp eq i32 %10, 0
  %.pre48 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 23
  br i1 %11, label %._crit_edge47, label %12

; <label>:12                                      ; preds = %0
  %13 = load i32, i32* %.pre48, align 8, !tbaa !190
  %14 = icmp sgt i32 %9, %13
  br i1 %14, label %15, label %40

; <label>:15                                      ; preds = %12
  store i32 %9, i32* %.pre48, align 8, !tbaa !190
  %16 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 8
  %17 = load i32*, i32** %16, align 8, !tbaa !120
  %18 = icmp eq i32* %17, null
  br i1 %18, label %21, label %19

; <label>:19                                      ; preds = %15
  %20 = bitcast i32* %17 to i8*
  tail call void @free(i8* %20) #7
  br label %21

; <label>:21                                      ; preds = %19, %15
  %22 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 9
  %23 = load i32*, i32** %22, align 8, !tbaa !119
  %24 = icmp eq i32* %23, null
  br i1 %24, label %27, label %25

; <label>:25                                      ; preds = %21
  %26 = bitcast i32* %23 to i8*
  tail call void @free(i8* %26) #7
  br label %27

; <label>:27                                      ; preds = %25, %21
  %28 = load i32, i32* %.pre48, align 8, !tbaa !190
  %29 = sext i32 %28 to i64
  %30 = shl nsw i64 %29, 2
  %31 = tail call noalias i8* @malloc(i64 %30) #7
  %32 = bitcast i32** %16 to i8**
  store i8* %31, i8** %32, align 8, !tbaa !120
  %33 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 10
  %34 = load i32, i32* %33, align 8, !tbaa !118
  %35 = mul nsw i32 %34, %28
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 2
  %38 = tail call noalias i8* @malloc(i64 %37) #7
  %39 = bitcast i32** %22 to i8**
  store i8* %38, i8** %39, align 8, !tbaa !119
  br label %40

; <label>:40                                      ; preds = %27, %12
  tail call void @__kmpc_end_master(%ident_t* nonnull @13, i32 %1)
  br label %._crit_edge47

._crit_edge47:                                    ; preds = %40, %0
  tail call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  tail call void @_ZN8Neighbor8binatomsER4Atomi(%class.Neighbor* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom, i32 -1)
  %41 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 13
  store i32 0, i32* %41, align 4, !tbaa !196
  %42 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %43 = load double*, double** %42, align 8, !tbaa !100
  %44 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 9
  %45 = load i32*, i32** %44, align 8, !tbaa !102
  %46 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 7
  %47 = load i32, i32* %46, align 8, !tbaa !72
  %48 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 40
  store i32 1, i32* %48, align 8, !tbaa !197
  tail call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  %49 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 10
  %50 = add nsw i32 %6, -1
  %51 = icmp sgt i32 %6, 0
  %52 = bitcast i32* %.omp.lb to i8*
  %53 = bitcast i32* %.omp.ub to i8*
  %54 = bitcast i32* %.omp.stride to i8*
  %55 = bitcast i32* %.omp.is_last to i8*
  %56 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 9
  %57 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 20
  %58 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 37
  %59 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 31
  %60 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 21
  %61 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 38
  %62 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 32
  %63 = bitcast i32* %62 to i64*
  %64 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 22
  %65 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 39
  %66 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 29
  %67 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 28
  %68 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 25
  %69 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 8
  %70 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 27
  %71 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 19
  %72 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 17
  %73 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 16
  %74 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 11
  %75 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 5
  %76 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 12
  %77 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 3
  %78 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 2
  %79 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 1
  %80 = bitcast i32** %56 to i8**
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %358, %._crit_edge47
  %.pr = load i32, i32* %48, align 8, !tbaa !197
  br label %81

; <label>:81                                      ; preds = %341, %thread-pre-split
  %82 = phi i32 [ %.pr, %thread-pre-split ], [ 0, %341 ]
  %83 = icmp eq i32 %82, 0
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  br i1 %83, label %359, label %84

; <label>:84                                      ; preds = %81
  %85 = load i32, i32* %49, align 8, !tbaa !118
  store i32 0, i32* %48, align 8, !tbaa !197
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  br i1 %51, label %86, label %341

; <label>:86                                      ; preds = %84
  call void @llvm.lifetime.start(i64 4, i8* %52) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %53) #7
  store i32 %50, i32* %.omp.ub, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %54) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %55) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @13, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %87 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %88 = icmp sgt i32 %87, %50
  %89 = select i1 %88, i32 %50, i32 %87
  store i32 %89, i32* %.omp.ub, align 4, !tbaa !1
  %90 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %91 = icmp sgt i32 %90, %89
  br i1 %91, label %._crit_edge33, label %.lr.ph32

.lr.ph32:                                         ; preds = %86
  %92 = load i32*, i32** %56, align 8
  %93 = load i32*, i32** %69, align 8
  %94 = sext i32 %90 to i64
  %.pre = load i32, i32* %49, align 8, !tbaa !118
  %.pre42 = load double, double* %57, align 8, !tbaa !198
  br label %95

; <label>:95                                      ; preds = %336, %.lr.ph32
  %96 = phi i32 [ %195, %336 ], [ %.pre, %.lr.ph32 ]
  %indvars.iv40 = phi i64 [ %indvars.iv.next41, %336 ], [ %94, %.lr.ph32 ]
  %new_maxneighs.030 = phi i32 [ %new_maxneighs.1, %336 ], [ %85, %.lr.ph32 ]
  %.omp.iv.028 = phi i32 [ %337, %336 ], [ %90, %.lr.ph32 ]
  %97 = trunc i64 %indvars.iv40 to i32
  %98 = mul nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %92, i64 %99
  %101 = mul nsw i32 %.omp.iv.028, 3
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %43, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !33
  %105 = add nsw i32 %101, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %43, i64 %106
  %108 = load double, double* %107, align 8, !tbaa !33
  %109 = add nsw i32 %101, 2
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds double, double* %43, i64 %110
  %112 = load double, double* %111, align 8, !tbaa !33
  %113 = getelementptr inbounds i32, i32* %45, i64 %indvars.iv40
  %114 = load i32, i32* %113, align 4, !tbaa !1
  %115 = fcmp ugt double %.pre42, %104
  br i1 %115, label %125, label %116

; <label>:116                                     ; preds = %95
  %117 = fsub double %104, %.pre42
  %118 = load double, double* %58, align 8, !tbaa !199
  %119 = fmul double %117, %118
  %120 = fptosi double %119 to i32
  %121 = load i32, i32* %79, align 4, !tbaa !47
  %122 = add nsw i32 %120, %121
  %123 = load i32, i32* %59, align 4, !tbaa !200
  %124 = sub i32 %122, %123
  br label %134

; <label>:125                                     ; preds = %95
  %126 = fcmp ult double %104, 0.000000e+00
  %127 = load double, double* %58, align 8, !tbaa !199
  %128 = fmul double %104, %127
  %129 = fptosi double %128 to i32
  %130 = load i32, i32* %59, align 4, !tbaa !200
  %131 = sub nsw i32 %129, %130
  br i1 %126, label %132, label %134

; <label>:132                                     ; preds = %125
  %133 = add nsw i32 %131, -1
  br label %134

; <label>:134                                     ; preds = %132, %125, %116
  %ix.0.i = phi i32 [ %124, %116 ], [ %133, %132 ], [ %131, %125 ]
  %135 = load double, double* %60, align 8, !tbaa !201
  %136 = fcmp ugt double %135, %108
  br i1 %136, label %149, label %137

; <label>:137                                     ; preds = %134
  %138 = fsub double %108, %135
  %139 = load double, double* %61, align 8, !tbaa !202
  %140 = fmul double %138, %139
  %141 = fptosi double %140 to i32
  %142 = load i32, i32* %78, align 8, !tbaa !48
  %143 = add nsw i32 %141, %142
  %144 = load i64, i64* %63, align 8
  %145 = trunc i64 %144 to i32
  %146 = sub i32 %143, %145
  %147 = lshr i64 %144, 32
  %148 = trunc i64 %147 to i32
  br label %161

; <label>:149                                     ; preds = %134
  %150 = fcmp ult double %108, 0.000000e+00
  %151 = load double, double* %61, align 8, !tbaa !202
  %152 = fmul double %108, %151
  %153 = fptosi double %152 to i32
  %154 = load i64, i64* %63, align 8
  %155 = trunc i64 %154 to i32
  %156 = sub nsw i32 %153, %155
  %157 = lshr i64 %154, 32
  %158 = trunc i64 %157 to i32
  br i1 %150, label %159, label %161

; <label>:159                                     ; preds = %149
  %160 = add nsw i32 %156, -1
  br label %161

; <label>:161                                     ; preds = %159, %149, %137
  %162 = phi i32 [ %148, %137 ], [ %158, %159 ], [ %158, %149 ]
  %iy.0.i = phi i32 [ %146, %137 ], [ %160, %159 ], [ %156, %149 ]
  %163 = load double, double* %64, align 8, !tbaa !203
  %164 = fcmp ugt double %163, %112
  br i1 %164, label %173, label %165

; <label>:165                                     ; preds = %161
  %166 = fsub double %112, %163
  %167 = load double, double* %65, align 8, !tbaa !204
  %168 = fmul double %166, %167
  %169 = fptosi double %168 to i32
  %170 = load i32, i32* %77, align 4, !tbaa !49
  %171 = sub i32 %170, %162
  %172 = add i32 %171, %169
  br label %_ZN8Neighbor9coord2binEddd.exit

; <label>:173                                     ; preds = %161
  %174 = fcmp ult double %112, 0.000000e+00
  %175 = load double, double* %65, align 8, !tbaa !204
  %176 = fmul double %112, %175
  %177 = fptosi double %176 to i32
  %178 = sub nsw i32 %177, %162
  br i1 %174, label %179, label %_ZN8Neighbor9coord2binEddd.exit

; <label>:179                                     ; preds = %173
  %180 = add nsw i32 %178, -1
  br label %_ZN8Neighbor9coord2binEddd.exit

_ZN8Neighbor9coord2binEddd.exit:                  ; preds = %179, %173, %165
  %iz.0.i = phi i32 [ %172, %165 ], [ %180, %179 ], [ %178, %173 ]
  %181 = load i32, i32* %66, align 4, !tbaa !205
  %182 = mul nsw i32 %181, %iz.0.i
  %183 = load i32, i32* %67, align 8, !tbaa !206
  %184 = add i32 %182, %iy.0.i
  %185 = mul i32 %184, %183
  %186 = add i32 %ix.0.i, 1
  %187 = add i32 %186, %185
  %188 = load i32, i32* %68, align 8, !tbaa !207
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %.lr.ph26, label %._crit_edge

.lr.ph26:                                         ; preds = %_ZN8Neighbor9coord2binEddd.exit
  %190 = load i32*, i32** %70, align 8
  %191 = load i32*, i32** %72, align 8
  %192 = mul nsw i32 %114, %47
  %193 = load i32*, i32** %73, align 8
  br label %197

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %_ZN8Neighbor9coord2binEddd.exit
  %n.0.lcssa = phi i32 [ 0, %_ZN8Neighbor9coord2binEddd.exit ], [ %n.7, %._crit_edge.loopexit ]
  %194 = getelementptr inbounds i32, i32* %93, i64 %indvars.iv40
  store i32 %n.0.lcssa, i32* %194, align 4, !tbaa !1
  %195 = load i32, i32* %49, align 8, !tbaa !118
  %196 = icmp slt i32 %n.0.lcssa, %195
  br i1 %196, label %336, label %334

; <label>:197                                     ; preds = %.loopexit, %.lr.ph26
  %indvars.iv38 = phi i64 [ 0, %.lr.ph26 ], [ %indvars.iv.next39, %.loopexit ]
  %n.025 = phi i32 [ 0, %.lr.ph26 ], [ %n.7, %.loopexit ]
  %198 = getelementptr inbounds i32, i32* %190, i64 %indvars.iv38
  %199 = load i32, i32* %198, align 4, !tbaa !1
  %200 = add nsw i32 %187, %199
  %201 = load i32, i32* %71, align 4, !tbaa !191
  %202 = mul nsw i32 %200, %201
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i32, i32* %191, i64 %203
  %205 = icmp eq i32 %199, 0
  %206 = sext i32 %200 to i64
  %207 = getelementptr inbounds i32, i32* %193, i64 %206
  %208 = load i32, i32* %207, align 4, !tbaa !1
  %209 = icmp sgt i32 %208, 0
  br i1 %205, label %.preheader, label %.preheader16

.preheader16:                                     ; preds = %197
  br i1 %209, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %.preheader16
  br label %.lr.ph

.preheader:                                       ; preds = %197
  br i1 %209, label %.lr.ph22.preheader, label %.loopexit

.lr.ph22.preheader:                               ; preds = %.preheader
  br label %.lr.ph22

.lr.ph22:                                         ; preds = %280, %.lr.ph22.preheader
  %210 = phi i32 [ %281, %280 ], [ %208, %.lr.ph22.preheader ]
  %indvars.iv36 = phi i64 [ %indvars.iv.next37, %280 ], [ 0, %.lr.ph22.preheader ]
  %n.121 = phi i32 [ %n.3, %280 ], [ %n.025, %.lr.ph22.preheader ]
  %211 = getelementptr inbounds i32, i32* %204, i64 %indvars.iv36
  %212 = load i32, i32* %211, align 4, !tbaa !1
  %213 = icmp eq i32 %212, %97
  br i1 %213, label %280, label %214

; <label>:214                                     ; preds = %.lr.ph22
  %215 = load i32, i32* %74, align 4, !tbaa !41
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %..thread_crit_edge46, label %217

..thread_crit_edge46:                             ; preds = %214
  %.pre49 = sext i32 %212 to i64
  br label %.thread

; <label>:217                                     ; preds = %214
  %218 = load i32, i32* %76, align 8, !tbaa !35
  %219 = icmp eq i32 %218, 0
  %220 = sext i32 %212 to i64
  %221 = icmp slt i64 %220, %indvars.iv40
  %or.cond = and i1 %221, %219
  br i1 %or.cond, label %280, label %222

; <label>:222                                     ; preds = %217
  br i1 %219, label %.thread, label %223

; <label>:223                                     ; preds = %222
  br i1 %221, label %280, label %224

; <label>:224                                     ; preds = %223
  %225 = icmp slt i32 %212, %6
  br i1 %225, label %.thread, label %226

; <label>:226                                     ; preds = %224
  %227 = mul nsw i32 %212, 3
  %228 = add nsw i32 %227, 2
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %43, i64 %229
  %231 = load double, double* %230, align 8, !tbaa !33
  %232 = fcmp olt double %231, %112
  br i1 %232, label %280, label %233

; <label>:233                                     ; preds = %226
  %234 = fcmp oeq double %231, %112
  br i1 %234, label %235, label %.thread

; <label>:235                                     ; preds = %233
  %236 = add nsw i32 %227, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds double, double* %43, i64 %237
  %239 = load double, double* %238, align 8, !tbaa !33
  %240 = fcmp olt double %239, %108
  br i1 %240, label %280, label %241

; <label>:241                                     ; preds = %235
  %242 = fcmp oeq double %239, %108
  br i1 %242, label %243, label %.thread

; <label>:243                                     ; preds = %241
  %244 = sext i32 %227 to i64
  %245 = getelementptr inbounds double, double* %43, i64 %244
  %246 = load double, double* %245, align 8, !tbaa !33
  %247 = fcmp olt double %246, %104
  br i1 %247, label %280, label %.thread

.thread:                                          ; preds = %243, %241, %233, %224, %222, %..thread_crit_edge46
  %.pre-phi50 = phi i64 [ %.pre49, %..thread_crit_edge46 ], [ %220, %224 ], [ %220, %222 ], [ %220, %243 ], [ %220, %241 ], [ %220, %233 ]
  %248 = mul nsw i32 %212, 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds double, double* %43, i64 %249
  %251 = load double, double* %250, align 8, !tbaa !33
  %252 = fsub double %104, %251
  %253 = add nsw i32 %248, 1
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double, double* %43, i64 %254
  %256 = load double, double* %255, align 8, !tbaa !33
  %257 = fsub double %108, %256
  %258 = add nsw i32 %248, 2
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds double, double* %43, i64 %259
  %261 = load double, double* %260, align 8, !tbaa !33
  %262 = fsub double %112, %261
  %263 = getelementptr inbounds i32, i32* %45, i64 %.pre-phi50
  %264 = load i32, i32* %263, align 4, !tbaa !1
  %265 = fmul double %252, %252
  %266 = fmul double %257, %257
  %267 = fadd double %265, %266
  %268 = fmul double %262, %262
  %269 = fadd double %267, %268
  %270 = add nsw i32 %264, %192
  %271 = sext i32 %270 to i64
  %272 = load double*, double** %75, align 8, !tbaa !193
  %273 = getelementptr inbounds double, double* %272, i64 %271
  %274 = load double, double* %273, align 8, !tbaa !33
  %275 = fcmp ugt double %269, %274
  br i1 %275, label %280, label %276

; <label>:276                                     ; preds = %.thread
  %277 = add nsw i32 %n.121, 1
  %278 = sext i32 %n.121 to i64
  %279 = getelementptr inbounds i32, i32* %100, i64 %278
  store i32 %212, i32* %279, align 4, !tbaa !1
  %.pre44 = load i32, i32* %207, align 4, !tbaa !1
  br label %280

; <label>:280                                     ; preds = %276, %.thread, %243, %235, %226, %223, %217, %.lr.ph22
  %281 = phi i32 [ %210, %217 ], [ %210, %243 ], [ %210, %235 ], [ %210, %226 ], [ %210, %223 ], [ %210, %.lr.ph22 ], [ %.pre44, %276 ], [ %210, %.thread ]
  %n.3 = phi i32 [ %n.121, %217 ], [ %n.121, %243 ], [ %n.121, %235 ], [ %n.121, %226 ], [ %n.121, %223 ], [ %n.121, %.lr.ph22 ], [ %277, %276 ], [ %n.121, %.thread ]
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %282 = sext i32 %281 to i64
  %283 = icmp slt i64 %indvars.iv.next37, %282
  br i1 %283, label %.lr.ph22, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %327, %.lr.ph.preheader
  %284 = phi i32 [ %328, %327 ], [ %208, %.lr.ph.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %327 ], [ 0, %.lr.ph.preheader ]
  %n.419 = phi i32 [ %n.6, %327 ], [ %n.025, %.lr.ph.preheader ]
  %285 = getelementptr inbounds i32, i32* %204, i64 %indvars.iv
  %286 = load i32, i32* %285, align 4, !tbaa !1
  %287 = load i32, i32* %74, align 4, !tbaa !41
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %._crit_edge45, label %289

._crit_edge45:                                    ; preds = %.lr.ph
  %.pre51 = sext i32 %286 to i64
  br label %294

; <label>:289                                     ; preds = %.lr.ph
  %290 = load i32, i32* %76, align 8, !tbaa !35
  %291 = icmp eq i32 %290, 0
  %292 = sext i32 %286 to i64
  %293 = icmp slt i64 %292, %indvars.iv40
  %or.cond11 = and i1 %293, %291
  br i1 %or.cond11, label %327, label %294

; <label>:294                                     ; preds = %289, %._crit_edge45
  %.pre-phi52 = phi i64 [ %.pre51, %._crit_edge45 ], [ %292, %289 ]
  %295 = mul nsw i32 %286, 3
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds double, double* %43, i64 %296
  %298 = load double, double* %297, align 8, !tbaa !33
  %299 = fsub double %104, %298
  %300 = add nsw i32 %295, 1
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds double, double* %43, i64 %301
  %303 = load double, double* %302, align 8, !tbaa !33
  %304 = fsub double %108, %303
  %305 = add nsw i32 %295, 2
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds double, double* %43, i64 %306
  %308 = load double, double* %307, align 8, !tbaa !33
  %309 = fsub double %112, %308
  %310 = getelementptr inbounds i32, i32* %45, i64 %.pre-phi52
  %311 = load i32, i32* %310, align 4, !tbaa !1
  %312 = fmul double %299, %299
  %313 = fmul double %304, %304
  %314 = fadd double %312, %313
  %315 = fmul double %309, %309
  %316 = fadd double %314, %315
  %317 = add nsw i32 %311, %192
  %318 = sext i32 %317 to i64
  %319 = load double*, double** %75, align 8, !tbaa !193
  %320 = getelementptr inbounds double, double* %319, i64 %318
  %321 = load double, double* %320, align 8, !tbaa !33
  %322 = fcmp ugt double %316, %321
  br i1 %322, label %327, label %323

; <label>:323                                     ; preds = %294
  %324 = add nsw i32 %n.419, 1
  %325 = sext i32 %n.419 to i64
  %326 = getelementptr inbounds i32, i32* %100, i64 %325
  store i32 %286, i32* %326, align 4, !tbaa !1
  %.pre43 = load i32, i32* %207, align 4, !tbaa !1
  br label %327

; <label>:327                                     ; preds = %323, %294, %289
  %328 = phi i32 [ %284, %289 ], [ %.pre43, %323 ], [ %284, %294 ]
  %n.6 = phi i32 [ %n.419, %289 ], [ %324, %323 ], [ %n.419, %294 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %329 = sext i32 %328 to i64
  %330 = icmp slt i64 %indvars.iv.next, %329
  br i1 %330, label %.lr.ph, label %.loopexit.loopexit57

.loopexit.loopexit:                               ; preds = %280
  br label %.loopexit

.loopexit.loopexit57:                             ; preds = %327
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit57, %.loopexit.loopexit, %.preheader, %.preheader16
  %n.7 = phi i32 [ %n.025, %.preheader ], [ %n.025, %.preheader16 ], [ %n.3, %.loopexit.loopexit ], [ %n.6, %.loopexit.loopexit57 ]
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %331 = load i32, i32* %68, align 8, !tbaa !207
  %332 = sext i32 %331 to i64
  %333 = icmp slt i64 %indvars.iv.next39, %332
  br i1 %333, label %197, label %._crit_edge.loopexit

; <label>:334                                     ; preds = %._crit_edge
  store i32 1, i32* %48, align 8, !tbaa !197
  %335 = icmp slt i32 %n.0.lcssa, %new_maxneighs.030
  %new_maxneighs.0.n.0 = select i1 %335, i32 %new_maxneighs.030, i32 %n.0.lcssa
  br label %336

; <label>:336                                     ; preds = %334, %._crit_edge
  %new_maxneighs.1 = phi i32 [ %new_maxneighs.030, %._crit_edge ], [ %new_maxneighs.0.n.0, %334 ]
  %337 = add nsw i32 %.omp.iv.028, 1
  %338 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %339 = sext i32 %338 to i64
  %340 = icmp slt i64 %indvars.iv40, %339
  %indvars.iv.next41 = add i64 %indvars.iv40, 1
  br i1 %340, label %95, label %._crit_edge33.loopexit

._crit_edge33.loopexit:                           ; preds = %336
  br label %._crit_edge33

._crit_edge33:                                    ; preds = %._crit_edge33.loopexit, %86
  %new_maxneighs.0.lcssa = phi i32 [ %85, %86 ], [ %new_maxneighs.1, %._crit_edge33.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @13, i32 %1)
  br label %341

; <label>:341                                     ; preds = %._crit_edge33, %84
  %new_maxneighs.2 = phi i32 [ %new_maxneighs.0.lcssa, %._crit_edge33 ], [ %85, %84 ]
  call void @llvm.lifetime.end(i64 4, i8* %55) #7
  call void @llvm.lifetime.end(i64 4, i8* %54) #7
  call void @llvm.lifetime.end(i64 4, i8* %53) #7
  call void @llvm.lifetime.end(i64 4, i8* %52) #7
  call void @__kmpc_barrier(%ident_t* nonnull @15, i32 %1)
  %342 = load i32, i32* %48, align 8, !tbaa !197
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %81, label %344

; <label>:344                                     ; preds = %341
  %345 = call i32 @__kmpc_master(%ident_t* nonnull @13, i32 %1)
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %358, label %347

; <label>:347                                     ; preds = %344
  %348 = sitofp i32 %new_maxneighs.2 to double
  %349 = fmul double %348, 1.200000e+00
  %350 = fptosi double %349 to i32
  store i32 %350, i32* %49, align 8, !tbaa !118
  %351 = load i8*, i8** %80, align 8, !tbaa !119
  call void @free(i8* %351) #7
  %352 = load i32, i32* %.pre48, align 8, !tbaa !190
  %353 = load i32, i32* %49, align 8, !tbaa !118
  %354 = mul nsw i32 %353, %352
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 2
  %357 = call noalias i8* @malloc(i64 %356) #7
  store i8* %357, i8** %80, align 8, !tbaa !119
  call void @__kmpc_end_master(%ident_t* nonnull @13, i32 %1)
  br label %358

; <label>:358                                     ; preds = %347, %344
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  br label %thread-pre-split

; <label>:359                                     ; preds = %81
  ret void
}

; Function Attrs: uwtable
define void @_ZN8Neighbor8binatomsER4Atomi(%class.Neighbor* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, i32 %count) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @13)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb5 = alloca i32, align 4
  %.omp.ub6 = alloca i32, align 4
  %.omp.stride7 = alloca i32, align 4
  %.omp.is_last8 = alloca i32, align 4
  %2 = icmp slt i32 %count, 0
  br i1 %2, label %3, label %9

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !84
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %7 = load i32, i32* %6, align 8, !tbaa !114
  %8 = add nsw i32 %7, %5
  br label %9

; <label>:9                                       ; preds = %3, %0
  %10 = phi i32 [ %8, %3 ], [ %count, %0 ]
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %12 = load double*, double** %11, align 8, !tbaa !100
  %13 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18
  %14 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 20
  %15 = bitcast %struct.Box* %13 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8, !tbaa !33
  %17 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 21
  %18 = bitcast double* %14 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %18, align 8, !tbaa !33
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !64
  %22 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 22
  %23 = bitcast double* %22 to i64*
  store i64 %21, i64* %23, align 8, !tbaa !203
  %24 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 40
  store i32 1, i32* %24, align 8, !tbaa !197
  tail call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  %25 = load i32, i32* %24, align 8, !tbaa !197
  %26 = icmp sgt i32 %25, 0
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  br i1 %26, label %.lr.ph18, label %._crit_edge19

.lr.ph18:                                         ; preds = %9
  %27 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 18
  %28 = bitcast i32* %.omp.lb to i8*
  %29 = bitcast i32* %.omp.ub to i8*
  %30 = bitcast i32* %.omp.stride to i8*
  %31 = bitcast i32* %.omp.is_last to i8*
  %32 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 16
  %33 = add nsw i32 %10, -1
  %34 = icmp sgt i32 %10, 0
  %35 = bitcast i32* %.omp.lb5 to i8*
  %36 = bitcast i32* %.omp.ub6 to i8*
  %37 = bitcast i32* %.omp.stride7 to i8*
  %38 = bitcast i32* %.omp.is_last8 to i8*
  %39 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 37
  %40 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 31
  %41 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 38
  %42 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 32
  %43 = bitcast i32* %42 to i64*
  %44 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 39
  %45 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 29
  %46 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 28
  %47 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 19
  %48 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 17
  %49 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 3
  %50 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 2
  %51 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 1
  %52 = bitcast i32** %48 to i8**
  br label %53

; <label>:53                                      ; preds = %.backedge, %.lr.ph18
  store i32 0, i32* %24, align 8, !tbaa !197
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  %54 = load i32, i32* %27, align 8, !tbaa !208
  %55 = add nsw i32 %54, -1
  %56 = icmp sgt i32 %54, 0
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %53
  call void @llvm.lifetime.start(i64 4, i8* %28) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %29) #7
  store i32 %55, i32* %.omp.ub, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %30) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %31) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @13, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %58 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %59 = icmp sgt i32 %58, %55
  %60 = select i1 %59, i32 %55, i32 %58
  store i32 %60, i32* %.omp.ub, align 4, !tbaa !1
  %61 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %62 = icmp sgt i32 %61, %60
  br i1 %62, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %57
  %63 = load i32*, i32** %32, align 8
  %64 = sext i32 %61 to i64
  br label %65

; <label>:65                                      ; preds = %65, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %65 ], [ %64, %.lr.ph ]
  %66 = getelementptr inbounds i32, i32* %63, i64 %indvars.iv
  store i32 0, i32* %66, align 4, !tbaa !1
  %67 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %68 = sext i32 %67 to i64
  %69 = icmp slt i64 %indvars.iv, %68
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %69, label %65, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %65
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %57
  call void @__kmpc_for_static_fini(%ident_t* nonnull @13, i32 %1)
  br label %70

; <label>:70                                      ; preds = %._crit_edge, %53
  call void @llvm.lifetime.end(i64 4, i8* %31) #7
  call void @llvm.lifetime.end(i64 4, i8* %30) #7
  call void @llvm.lifetime.end(i64 4, i8* %29) #7
  call void @llvm.lifetime.end(i64 4, i8* %28) #7
  call void @__kmpc_barrier(%ident_t* nonnull @15, i32 %1)
  br i1 %34, label %71, label %186

; <label>:71                                      ; preds = %70
  call void @llvm.lifetime.start(i64 4, i8* %35) #7
  store i32 0, i32* %.omp.lb5, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %36) #7
  store i32 %33, i32* %.omp.ub6, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %37) #7
  store i32 1, i32* %.omp.stride7, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %38) #7
  store i32 0, i32* %.omp.is_last8, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @13, i32 %1, i32 34, i32* nonnull %.omp.is_last8, i32* nonnull %.omp.lb5, i32* nonnull %.omp.ub6, i32* nonnull %.omp.stride7, i32 1, i32 1)
  %72 = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  %73 = icmp sgt i32 %72, %33
  %74 = select i1 %73, i32 %33, i32 %72
  store i32 %74, i32* %.omp.ub6, align 4, !tbaa !1
  %75 = load i32, i32* %.omp.lb5, align 4, !tbaa !1
  %76 = icmp sgt i32 %75, %74
  br i1 %76, label %._crit_edge16, label %.lr.ph15.preheader

.lr.ph15.preheader:                               ; preds = %71
  %77 = sext i32 %75 to i64
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %181, %.lr.ph15.preheader
  %78 = phi i32 [ %74, %.lr.ph15.preheader ], [ %182, %181 ]
  %indvars.iv20 = phi i64 [ %77, %.lr.ph15.preheader ], [ %indvars.iv.next21, %181 ]
  %.omp.iv2.013 = phi i32 [ %75, %.lr.ph15.preheader ], [ %183, %181 ]
  %79 = mul nsw i32 %.omp.iv2.013, 3
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds double, double* %12, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !33
  %83 = add nsw i32 %79, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds double, double* %12, i64 %84
  %86 = load double, double* %85, align 8, !tbaa !33
  %87 = add nsw i32 %79, 2
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds double, double* %12, i64 %88
  %90 = load double, double* %89, align 8, !tbaa !33
  %91 = load double, double* %14, align 8, !tbaa !198
  %92 = fcmp ugt double %91, %82
  br i1 %92, label %102, label %93

; <label>:93                                      ; preds = %.lr.ph15
  %94 = fsub double %82, %91
  %95 = load double, double* %39, align 8, !tbaa !199
  %96 = fmul double %94, %95
  %97 = fptosi double %96 to i32
  %98 = load i32, i32* %51, align 4, !tbaa !47
  %99 = add nsw i32 %97, %98
  %100 = load i32, i32* %40, align 4, !tbaa !200
  %101 = sub i32 %99, %100
  br label %111

; <label>:102                                     ; preds = %.lr.ph15
  %103 = fcmp ult double %82, 0.000000e+00
  %104 = load double, double* %39, align 8, !tbaa !199
  %105 = fmul double %82, %104
  %106 = fptosi double %105 to i32
  %107 = load i32, i32* %40, align 4, !tbaa !200
  %108 = sub nsw i32 %106, %107
  br i1 %103, label %109, label %111

; <label>:109                                     ; preds = %102
  %110 = add nsw i32 %108, -1
  br label %111

; <label>:111                                     ; preds = %109, %102, %93
  %ix.0.i = phi i32 [ %101, %93 ], [ %110, %109 ], [ %108, %102 ]
  %112 = load double, double* %17, align 8, !tbaa !201
  %113 = fcmp ugt double %112, %86
  br i1 %113, label %126, label %114

; <label>:114                                     ; preds = %111
  %115 = fsub double %86, %112
  %116 = load double, double* %41, align 8, !tbaa !202
  %117 = fmul double %115, %116
  %118 = fptosi double %117 to i32
  %119 = load i32, i32* %50, align 8, !tbaa !48
  %120 = add nsw i32 %118, %119
  %121 = load i64, i64* %43, align 8
  %122 = trunc i64 %121 to i32
  %123 = sub i32 %120, %122
  %124 = lshr i64 %121, 32
  %125 = trunc i64 %124 to i32
  br label %138

; <label>:126                                     ; preds = %111
  %127 = fcmp ult double %86, 0.000000e+00
  %128 = load double, double* %41, align 8, !tbaa !202
  %129 = fmul double %86, %128
  %130 = fptosi double %129 to i32
  %131 = load i64, i64* %43, align 8
  %132 = trunc i64 %131 to i32
  %133 = sub nsw i32 %130, %132
  %134 = lshr i64 %131, 32
  %135 = trunc i64 %134 to i32
  br i1 %127, label %136, label %138

; <label>:136                                     ; preds = %126
  %137 = add nsw i32 %133, -1
  br label %138

; <label>:138                                     ; preds = %136, %126, %114
  %139 = phi i32 [ %125, %114 ], [ %135, %136 ], [ %135, %126 ]
  %iy.0.i = phi i32 [ %123, %114 ], [ %137, %136 ], [ %133, %126 ]
  %140 = load double, double* %22, align 8, !tbaa !203
  %141 = fcmp ugt double %140, %90
  br i1 %141, label %150, label %142

; <label>:142                                     ; preds = %138
  %143 = fsub double %90, %140
  %144 = load double, double* %44, align 8, !tbaa !204
  %145 = fmul double %143, %144
  %146 = fptosi double %145 to i32
  %147 = load i32, i32* %49, align 4, !tbaa !49
  %148 = sub i32 %147, %139
  %149 = add i32 %148, %146
  br label %_ZN8Neighbor9coord2binEddd.exit

; <label>:150                                     ; preds = %138
  %151 = fcmp ult double %90, 0.000000e+00
  %152 = load double, double* %44, align 8, !tbaa !204
  %153 = fmul double %90, %152
  %154 = fptosi double %153 to i32
  %155 = sub nsw i32 %154, %139
  br i1 %151, label %156, label %_ZN8Neighbor9coord2binEddd.exit

; <label>:156                                     ; preds = %150
  %157 = add nsw i32 %155, -1
  br label %_ZN8Neighbor9coord2binEddd.exit

_ZN8Neighbor9coord2binEddd.exit:                  ; preds = %156, %150, %142
  %iz.0.i = phi i32 [ %149, %142 ], [ %157, %156 ], [ %155, %150 ]
  %158 = load i32, i32* %45, align 4, !tbaa !205
  %159 = mul nsw i32 %158, %iz.0.i
  %160 = load i32, i32* %46, align 8, !tbaa !206
  %161 = add i32 %159, %iy.0.i
  %162 = mul i32 %161, %160
  %163 = add i32 %ix.0.i, 1
  %164 = add i32 %163, %162
  %165 = sext i32 %164 to i64
  %166 = load i32*, i32** %32, align 8, !tbaa !194
  %167 = getelementptr inbounds i32, i32* %166, i64 %165
  %168 = load i32, i32* %167, align 4, !tbaa !1
  %169 = load i32, i32* %47, align 4, !tbaa !191
  %170 = icmp slt i32 %168, %169
  br i1 %170, label %171, label %180

; <label>:171                                     ; preds = %_ZN8Neighbor9coord2binEddd.exit
  %172 = atomicrmw add i32* %167, i32 1 seq_cst
  %173 = load i32, i32* %47, align 4, !tbaa !191
  %174 = mul nsw i32 %173, %164
  %175 = add nsw i32 %174, %172
  %176 = sext i32 %175 to i64
  %177 = load i32*, i32** %48, align 8, !tbaa !195
  %178 = getelementptr inbounds i32, i32* %177, i64 %176
  %179 = trunc i64 %indvars.iv20 to i32
  store i32 %179, i32* %178, align 4, !tbaa !1
  %.pre = load i32, i32* %.omp.ub6, align 4, !tbaa !1
  br label %181

; <label>:180                                     ; preds = %_ZN8Neighbor9coord2binEddd.exit
  store i32 1, i32* %24, align 8, !tbaa !197
  br label %181

; <label>:181                                     ; preds = %180, %171
  %182 = phi i32 [ %78, %180 ], [ %.pre, %171 ]
  %183 = add nsw i32 %.omp.iv2.013, 1
  %184 = sext i32 %182 to i64
  %185 = icmp slt i64 %indvars.iv20, %184
  %indvars.iv.next21 = add i64 %indvars.iv20, 1
  br i1 %185, label %.lr.ph15, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %181
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %71
  call void @__kmpc_for_static_fini(%ident_t* nonnull @13, i32 %1)
  br label %186

; <label>:186                                     ; preds = %._crit_edge16, %70
  call void @llvm.lifetime.end(i64 4, i8* %38) #7
  call void @llvm.lifetime.end(i64 4, i8* %37) #7
  call void @llvm.lifetime.end(i64 4, i8* %36) #7
  call void @llvm.lifetime.end(i64 4, i8* %35) #7
  call void @__kmpc_barrier(%ident_t* nonnull @15, i32 %1)
  %187 = call i32 @__kmpc_master(%ident_t* nonnull @13, i32 %1)
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %.backedge, label %189

; <label>:189                                     ; preds = %186
  %190 = load i32, i32* %24, align 8, !tbaa !197
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %201, label %192

; <label>:192                                     ; preds = %189
  %193 = load i8*, i8** %52, align 8, !tbaa !195
  call void @free(i8* %193) #7
  %194 = load i32, i32* %47, align 4, !tbaa !191
  %195 = shl nsw i32 %194, 1
  store i32 %195, i32* %47, align 4, !tbaa !191
  %196 = load i32, i32* %27, align 8, !tbaa !208
  %197 = mul nsw i32 %196, %195
  %198 = sext i32 %197 to i64
  %199 = shl nsw i64 %198, 2
  %200 = call noalias i8* @malloc(i64 %199) #7
  store i8* %200, i8** %52, align 8, !tbaa !195
  br label %201

; <label>:201                                     ; preds = %192, %189
  call void @__kmpc_end_master(%ident_t* nonnull @13, i32 %1)
  br label %.backedge

.backedge:                                        ; preds = %201, %186
  %202 = load i32, i32* %24, align 8, !tbaa !197
  %203 = icmp sgt i32 %202, 0
  call void @__kmpc_barrier(%ident_t* nonnull @14, i32 %1)
  br i1 %203, label %53, label %._crit_edge19.loopexit

._crit_edge19.loopexit:                           ; preds = %.backedge
  br label %._crit_edge19

._crit_edge19:                                    ; preds = %._crit_edge19.loopexit, %9
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @_ZN8Neighbor5setupER4Atom(%class.Neighbor* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom) #9 align 2 {
  %1 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 15
  %2 = load %class.ThreadData*, %class.ThreadData** %1, align 8, !tbaa !28
  %3 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %2, i64 0, i32 3
  %4 = load i32, i32* %3, align 4, !tbaa !18
  %5 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 24
  %6 = load i32, i32* %5, align 4, !tbaa !189
  %7 = mul i32 %6, %6
  %8 = icmp eq i32 %7, 0
  %.pre30 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 4
  br i1 %8, label %._crit_edge25, label %.lr.ph24

.lr.ph24:                                         ; preds = %0
  %9 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 5
  %10 = load double*, double** %9, align 8
  %11 = zext i32 %7 to i64
  %12 = add nsw i64 %11, -1
  %xtraiter = and i64 %11, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph24.split, label %.preheader38

.preheader38:                                     ; preds = %.lr.ph24
  br label %13

; <label>:13                                      ; preds = %13, %.preheader38
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %13 ], [ 0, %.preheader38 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %13 ], [ %xtraiter, %.preheader38 ]
  %14 = load double, double* %.pre30, align 8, !tbaa !57
  %15 = fmul double %14, %14
  %16 = getelementptr inbounds double, double* %10, i64 %indvars.iv.prol
  store double %15, double* %16, align 8, !tbaa !33
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph24.split.loopexit, label %13, !llvm.loop !209

.lr.ph24.split.loopexit:                          ; preds = %13
  br label %.lr.ph24.split

.lr.ph24.split:                                   ; preds = %.lr.ph24.split.loopexit, %.lr.ph24
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph24 ], [ %indvars.iv.next.prol, %.lr.ph24.split.loopexit ]
  %17 = icmp ult i64 %12, 3
  br i1 %17, label %._crit_edge25.loopexit, label %.lr.ph24.split.split

.lr.ph24.split.split:                             ; preds = %.lr.ph24.split
  br label %156

._crit_edge25.loopexit.unr-lcssa:                 ; preds = %156
  br label %._crit_edge25.loopexit

._crit_edge25.loopexit:                           ; preds = %._crit_edge25.loopexit.unr-lcssa, %.lr.ph24.split
  br label %._crit_edge25

._crit_edge25:                                    ; preds = %._crit_edge25.loopexit, %0
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18
  %19 = bitcast %struct.Box* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !62
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 20
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8, !tbaa !198
  %23 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !63
  %26 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 21
  %27 = bitcast double* %26 to i64*
  store i64 %25, i64* %27, align 8, !tbaa !201
  %28 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !64
  %31 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 22
  %32 = bitcast double* %31 to i64*
  store i64 %30, i64* %32, align 8, !tbaa !203
  %33 = bitcast i64 %20 to double
  %34 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !47
  %36 = sitofp i32 %35 to double
  %37 = fdiv double %33, %36
  %38 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 34
  store double %37, double* %38, align 8, !tbaa !210
  %39 = bitcast i64 %25 to double
  %40 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 2
  %41 = bitcast i32* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  %44 = sitofp i32 %43 to double
  %45 = fdiv double %39, %44
  %46 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 35
  store double %45, double* %46, align 8, !tbaa !211
  %47 = bitcast i64 %30 to double
  %48 = lshr i64 %42, 32
  %49 = trunc i64 %48 to i32
  %50 = sitofp i32 %49 to double
  %51 = fdiv double %47, %50
  %52 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 36
  store double %51, double* %52, align 8, !tbaa !212
  %53 = fdiv double 1.000000e+00, %37
  %54 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 37
  store double %53, double* %54, align 8, !tbaa !199
  %55 = fdiv double 1.000000e+00, %45
  %56 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 38
  store double %55, double* %56, align 8, !tbaa !202
  %57 = fdiv double 1.000000e+00, %51
  %58 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 39
  store double %57, double* %58, align 8, !tbaa !204
  %59 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %60 = load double, double* %59, align 8, !tbaa !86
  %61 = load double, double* %.pre30, align 8, !tbaa !57
  %62 = fsub double %60, %61
  %63 = fmul double %33, 1.000000e-06
  %64 = fsub double %62, %63
  %65 = fcmp olt double %64, 0.000000e+00
  %66 = sext i1 %65 to i32
  %67 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %68 = load double, double* %67, align 8, !tbaa !85
  %69 = fadd double %68, %61
  %70 = fadd double %69, %63
  %71 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %72 = load double, double* %71, align 8, !tbaa !88
  %73 = fsub double %72, %61
  %74 = fmul double %39, 1.000000e-06
  %75 = fsub double %73, %74
  %76 = fmul double %55, %75
  %77 = fptosi double %76 to i32
  %78 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 32
  %79 = fcmp olt double %75, 0.000000e+00
  %80 = sext i1 %79 to i32
  %storemerge7 = add nsw i32 %77, %80
  %81 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  %82 = load double, double* %81, align 8, !tbaa !87
  %83 = fadd double %82, %61
  %84 = fadd double %83, %74
  %85 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %86 = load double, double* %85, align 8, !tbaa !90
  %87 = fsub double %86, %61
  %88 = fmul double %47, 1.000000e-06
  %89 = fsub double %87, %88
  %90 = fmul double %57, %89
  %91 = fptosi double %90 to i32
  %92 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 33
  %93 = fcmp olt double %89, 0.000000e+00
  %94 = sext i1 %93 to i32
  %storemerge = add nsw i32 %91, %94
  %95 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  %96 = load double, double* %95, align 8, !tbaa !89
  %97 = fadd double %96, %61
  %98 = fadd double %97, %88
  %99 = insertelement <4 x double> undef, double %53, i32 0
  %100 = insertelement <4 x double> %99, double %55, i32 1
  %101 = insertelement <4 x double> %100, double %57, i32 2
  %102 = insertelement <4 x double> %101, double %53, i32 3
  %103 = insertelement <4 x double> undef, double %70, i32 0
  %104 = insertelement <4 x double> %103, double %84, i32 1
  %105 = insertelement <4 x double> %104, double %98, i32 2
  %106 = insertelement <4 x double> %105, double %64, i32 3
  %107 = fmul <4 x double> %102, %106
  %108 = fptosi <4 x double> %107 to <4 x i32>
  %109 = insertelement <4 x i32> <i32 2, i32 2, i32 2, i32 undef>, i32 %66, i32 3
  %110 = add <4 x i32> %109, %108
  %111 = extractelement <4 x i32> %110, i32 3
  %.neg = sub i32 1, %111
  %112 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 28
  %113 = add nsw i32 %storemerge7, -1
  store i32 %113, i32* %78, align 8, !tbaa !213
  %.neg9 = sub i32 1, %storemerge7
  %114 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 29
  %115 = add nsw i32 %storemerge, -1
  store i32 %115, i32* %92, align 4, !tbaa !214
  %.neg10 = sub i32 1, %storemerge
  %116 = insertelement <4 x i32> undef, i32 %.neg, i32 0
  %117 = insertelement <4 x i32> %116, i32 %.neg9, i32 1
  %118 = insertelement <4 x i32> %117, i32 %.neg10, i32 2
  %119 = insertelement <4 x i32> %118, i32 -1, i32 3
  %120 = add <4 x i32> %110, %119
  %121 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 30
  %122 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %122, align 8, !tbaa !1
  %123 = fmul double %61, %53
  %124 = fptosi double %123 to i32
  %125 = sitofp i32 %124 to double
  %126 = load double, double* %38, align 8, !tbaa !210
  %127 = fmul double %126, %125
  %128 = fmul double %61, 9.990000e-01
  %129 = fcmp olt double %127, %128
  %130 = zext i1 %129 to i32
  %nextx.0 = add nsw i32 %130, %124
  %131 = fmul double %61, %55
  %132 = fptosi double %131 to i32
  %133 = sitofp i32 %132 to double
  %134 = load double, double* %46, align 8, !tbaa !211
  %135 = fmul double %134, %133
  %136 = fcmp olt double %135, %128
  %137 = zext i1 %136 to i32
  %nexty.0 = add nsw i32 %137, %132
  %138 = fmul double %61, %57
  %139 = fptosi double %138 to i32
  %140 = sitofp i32 %139 to double
  %141 = load double, double* %52, align 8, !tbaa !212
  %142 = fmul double %141, %140
  %143 = fcmp olt double %142, %128
  %144 = zext i1 %143 to i32
  %nextz.0 = add nsw i32 %144, %139
  %145 = shl nsw i32 %nextz.0, 1
  %146 = or i32 %145, 1
  %147 = shl nsw i32 %nexty.0, 1
  %148 = or i32 %147, 1
  %149 = shl nsw i32 %nextx.0, 1
  %150 = or i32 %149, 1
  %151 = mul i32 %148, %150
  %152 = mul i32 %151, %146
  %153 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 27
  %154 = load i32*, i32** %153, align 8, !tbaa !192
  %155 = icmp eq i32* %154, null
  br i1 %155, label %172, label %170

; <label>:156                                     ; preds = %156, %.lr.ph24.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph24.split.split ], [ %indvars.iv.next.3, %156 ]
  %157 = load double, double* %.pre30, align 8, !tbaa !57
  %158 = fmul double %157, %157
  %159 = getelementptr inbounds double, double* %10, i64 %indvars.iv
  store double %158, double* %159, align 8, !tbaa !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %160 = load double, double* %.pre30, align 8, !tbaa !57
  %161 = fmul double %160, %160
  %162 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
  store double %161, double* %162, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %163 = load double, double* %.pre30, align 8, !tbaa !57
  %164 = fmul double %163, %163
  %165 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.1
  store double %164, double* %165, align 8, !tbaa !33
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %166 = load double, double* %.pre30, align 8, !tbaa !57
  %167 = fmul double %166, %166
  %168 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.2
  store double %167, double* %168, align 8, !tbaa !33
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %169 = icmp slt i64 %indvars.iv.next.3, %11
  br i1 %169, label %156, label %._crit_edge25.loopexit.unr-lcssa

; <label>:170                                     ; preds = %._crit_edge25
  %171 = bitcast i32* %154 to i8*
  tail call void @free(i8* %171) #7
  br label %172

; <label>:172                                     ; preds = %170, %._crit_edge25
  %173 = sext i32 %152 to i64
  %174 = shl nsw i64 %173, 2
  %175 = tail call noalias i8* @malloc(i64 %174) #7
  %176 = bitcast i32** %153 to i8**
  store i8* %175, i8** %176, align 8, !tbaa !192
  %177 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 25
  store i32 0, i32* %177, align 8, !tbaa !207
  %178 = sub nsw i32 0, %nextz.0
  %179 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 11
  %180 = load i32, i32* %179, align 4, !tbaa !41
  %181 = icmp eq i32 %180, 0
  %182 = bitcast i8* %175 to i32*
  br i1 %181, label %.preheader, label %183

; <label>:183                                     ; preds = %172
  %184 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 12
  %185 = load i32, i32* %184, align 8, !tbaa !35
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %.preheader, label %187

; <label>:187                                     ; preds = %183
  store i32 1, i32* %177, align 8, !tbaa !207
  store i32 0, i32* %182, align 4, !tbaa !1
  br label %.preheader

.preheader:                                       ; preds = %187, %183, %172
  %188 = phi i32 [ 0, %172 ], [ 0, %183 ], [ 1, %187 ]
  %k.0.ph = phi i32 [ %178, %172 ], [ %178, %183 ], [ 0, %187 ]
  %189 = icmp sgt i32 %k.0.ph, %nextz.0
  br i1 %189, label %._crit_edge21, label %.lr.ph20

.lr.ph20:                                         ; preds = %.preheader
  %190 = sub nsw i32 0, %nexty.0
  %191 = icmp slt i32 %nexty.0, %190
  %192 = sub nsw i32 0, %nextx.0
  %193 = icmp slt i32 %nextx.0, %192
  %194 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 12
  %195 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 5
  br label %196

; <label>:196                                     ; preds = %._crit_edge17, %.lr.ph20
  %197 = phi i32 [ %188, %.lr.ph20 ], [ %313, %._crit_edge17 ]
  %k.018 = phi i32 [ %k.0.ph, %.lr.ph20 ], [ %.pre-phi32, %._crit_edge17 ]
  br i1 %191, label %.._crit_edge17_crit_edge, label %.lr.ph16

.._crit_edge17_crit_edge:                         ; preds = %196
  %.pre31 = add nsw i32 %k.018, 1
  br label %._crit_edge17

.lr.ph16:                                         ; preds = %196
  %198 = icmp sgt i32 %k.018, 0
  %199 = add nsw i32 %k.018, -1
  %200 = sitofp i32 %199 to double
  %201 = icmp eq i32 %k.018, 0
  %202 = add nsw i32 %k.018, 1
  %203 = sitofp i32 %202 to double
  br label %204

; <label>:204                                     ; preds = %._crit_edge, %.lr.ph16
  %205 = phi i32 [ %197, %.lr.ph16 ], [ %311, %._crit_edge ]
  %j.013 = phi i32 [ %190, %.lr.ph16 ], [ %.pre-phi34, %._crit_edge ]
  br i1 %193, label %.._crit_edge_crit_edge, label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %204
  %.pre33 = add nsw i32 %j.013, 1
  br label %._crit_edge

.lr.ph:                                           ; preds = %204
  %206 = icmp sgt i32 %j.013, 0
  %207 = icmp eq i32 %j.013, 0
  %208 = add nsw i32 %j.013, 1
  %209 = sitofp i32 %208 to double
  br i1 %206, label %.lr.ph.split.us.preheader, label %.lr.ph.split.preheader

.lr.ph.split.preheader:                           ; preds = %.lr.ph
  %210 = load i32, i32* %194, align 8
  %211 = icmp eq i32 %210, 0
  br label %.lr.ph.split

.lr.ph.split.us.preheader:                        ; preds = %.lr.ph
  %212 = add nsw i32 %j.013, -1
  %213 = sitofp i32 %212 to double
  %214 = load double, double* %46, align 8
  %215 = fmul double %213, %214
  %216 = fmul double %215, %215
  %217 = load double*, double** %195, align 8
  %218 = load double, double* %217, align 8
  br label %.lr.ph.split.us

.lr.ph.split.us:                                  ; preds = %256, %.lr.ph.split.us.preheader
  %219 = phi i32 [ %257, %256 ], [ %205, %.lr.ph.split.us.preheader ]
  %i.011.us = phi i32 [ %258, %256 ], [ %192, %.lr.ph.split.us.preheader ]
  %220 = icmp sgt i32 %i.011.us, 0
  br i1 %220, label %228, label %221

; <label>:221                                     ; preds = %.lr.ph.split.us
  %222 = icmp eq i32 %i.011.us, 0
  br i1 %222, label %233, label %223

; <label>:223                                     ; preds = %221
  %224 = add nsw i32 %i.011.us, 1
  %225 = sitofp i32 %224 to double
  %226 = load double, double* %38, align 8, !tbaa !210
  %227 = fmul double %225, %226
  br label %233

; <label>:228                                     ; preds = %.lr.ph.split.us
  %229 = add nsw i32 %i.011.us, -1
  %230 = sitofp i32 %229 to double
  %231 = load double, double* %38, align 8, !tbaa !210
  %232 = fmul double %230, %231
  br label %233

; <label>:233                                     ; preds = %228, %223, %221
  %delx.0.i.us = phi double [ %232, %228 ], [ %227, %223 ], [ 0.000000e+00, %221 ]
  br i1 %198, label %238, label %234

; <label>:234                                     ; preds = %233
  br i1 %201, label %_ZN8Neighbor7bindistEiii.exit.us, label %235

; <label>:235                                     ; preds = %234
  %236 = load double, double* %52, align 8, !tbaa !212
  %237 = fmul double %203, %236
  br label %_ZN8Neighbor7bindistEiii.exit.us

; <label>:238                                     ; preds = %233
  %239 = load double, double* %52, align 8, !tbaa !212
  %240 = fmul double %200, %239
  br label %_ZN8Neighbor7bindistEiii.exit.us

_ZN8Neighbor7bindistEiii.exit.us:                 ; preds = %238, %235, %234
  %delz.0.i.us = phi double [ %240, %238 ], [ %237, %235 ], [ 0.000000e+00, %234 ]
  %241 = fmul double %delx.0.i.us, %delx.0.i.us
  %242 = fadd double %241, %216
  %243 = fmul double %delz.0.i.us, %delz.0.i.us
  %244 = fadd double %242, %243
  %245 = fcmp olt double %244, %218
  br i1 %245, label %246, label %256

; <label>:246                                     ; preds = %_ZN8Neighbor7bindistEiii.exit.us
  %247 = load i32, i32* %114, align 4, !tbaa !205
  %248 = mul nsw i32 %247, %k.018
  %249 = load i32, i32* %112, align 8, !tbaa !206
  %250 = add i32 %248, %j.013
  %251 = mul i32 %250, %249
  %252 = add nsw i32 %251, %i.011.us
  %253 = add nsw i32 %219, 1
  store i32 %253, i32* %177, align 8, !tbaa !207
  %254 = sext i32 %219 to i64
  %255 = getelementptr inbounds i32, i32* %182, i64 %254
  store i32 %252, i32* %255, align 4, !tbaa !1
  br label %256

; <label>:256                                     ; preds = %246, %_ZN8Neighbor7bindistEiii.exit.us
  %257 = phi i32 [ %253, %246 ], [ %219, %_ZN8Neighbor7bindistEiii.exit.us ]
  %258 = add nsw i32 %i.011.us, 1
  %259 = icmp slt i32 %i.011.us, %nextx.0
  br i1 %259, label %.lr.ph.split.us, label %._crit_edge.loopexit

.lr.ph.split:                                     ; preds = %307, %.lr.ph.split.preheader
  %260 = phi i32 [ %308, %307 ], [ %205, %.lr.ph.split.preheader ]
  %i.011 = phi i32 [ %309, %307 ], [ %192, %.lr.ph.split.preheader ]
  br i1 %211, label %263, label %261

; <label>:261                                     ; preds = %.lr.ph.split
  %or.cond = or i1 %198, %181
  %262 = icmp sgt i32 %i.011, 0
  %or.cond6 = and i1 %207, %262
  %or.cond26 = or i1 %or.cond, %or.cond6
  br i1 %or.cond26, label %263, label %307

; <label>:263                                     ; preds = %261, %.lr.ph.split
  %264 = icmp sgt i32 %i.011, 0
  br i1 %264, label %265, label %270

; <label>:265                                     ; preds = %263
  %266 = add nsw i32 %i.011, -1
  %267 = sitofp i32 %266 to double
  %268 = load double, double* %38, align 8, !tbaa !210
  %269 = fmul double %267, %268
  br label %277

; <label>:270                                     ; preds = %263
  %271 = icmp eq i32 %i.011, 0
  br i1 %271, label %277, label %272

; <label>:272                                     ; preds = %270
  %273 = add nsw i32 %i.011, 1
  %274 = sitofp i32 %273 to double
  %275 = load double, double* %38, align 8, !tbaa !210
  %276 = fmul double %274, %275
  br label %277

; <label>:277                                     ; preds = %272, %270, %265
  %delx.0.i = phi double [ %269, %265 ], [ %276, %272 ], [ 0.000000e+00, %270 ]
  br i1 %207, label %281, label %278

; <label>:278                                     ; preds = %277
  %279 = load double, double* %46, align 8, !tbaa !211
  %280 = fmul double %209, %279
  br label %281

; <label>:281                                     ; preds = %278, %277
  %dely.0.i = phi double [ %280, %278 ], [ 0.000000e+00, %277 ]
  br i1 %198, label %282, label %285

; <label>:282                                     ; preds = %281
  %283 = load double, double* %52, align 8, !tbaa !212
  %284 = fmul double %200, %283
  br label %_ZN8Neighbor7bindistEiii.exit

; <label>:285                                     ; preds = %281
  br i1 %201, label %_ZN8Neighbor7bindistEiii.exit, label %286

; <label>:286                                     ; preds = %285
  %287 = load double, double* %52, align 8, !tbaa !212
  %288 = fmul double %203, %287
  br label %_ZN8Neighbor7bindistEiii.exit

_ZN8Neighbor7bindistEiii.exit:                    ; preds = %286, %285, %282
  %delz.0.i = phi double [ %284, %282 ], [ %288, %286 ], [ 0.000000e+00, %285 ]
  %289 = fmul double %delx.0.i, %delx.0.i
  %290 = fmul double %dely.0.i, %dely.0.i
  %291 = fadd double %289, %290
  %292 = fmul double %delz.0.i, %delz.0.i
  %293 = fadd double %291, %292
  %294 = load double*, double** %195, align 8, !tbaa !193
  %295 = load double, double* %294, align 8, !tbaa !33
  %296 = fcmp olt double %293, %295
  br i1 %296, label %297, label %307

; <label>:297                                     ; preds = %_ZN8Neighbor7bindistEiii.exit
  %298 = load i32, i32* %114, align 4, !tbaa !205
  %299 = mul nsw i32 %298, %k.018
  %300 = load i32, i32* %112, align 8, !tbaa !206
  %301 = add i32 %299, %j.013
  %302 = mul i32 %301, %300
  %303 = add nsw i32 %302, %i.011
  %304 = add nsw i32 %260, 1
  store i32 %304, i32* %177, align 8, !tbaa !207
  %305 = sext i32 %260 to i64
  %306 = getelementptr inbounds i32, i32* %182, i64 %305
  store i32 %303, i32* %306, align 4, !tbaa !1
  br label %307

; <label>:307                                     ; preds = %297, %_ZN8Neighbor7bindistEiii.exit, %261
  %308 = phi i32 [ %304, %297 ], [ %260, %_ZN8Neighbor7bindistEiii.exit ], [ %260, %261 ]
  %309 = add nsw i32 %i.011, 1
  %310 = icmp slt i32 %i.011, %nextx.0
  br i1 %310, label %.lr.ph.split, label %._crit_edge.loopexit37

._crit_edge.loopexit:                             ; preds = %256
  br label %._crit_edge

._crit_edge.loopexit37:                           ; preds = %307
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit37, %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %311 = phi i32 [ %205, %.._crit_edge_crit_edge ], [ %257, %._crit_edge.loopexit ], [ %308, %._crit_edge.loopexit37 ]
  %.pre-phi34 = phi i32 [ %.pre33, %.._crit_edge_crit_edge ], [ %208, %._crit_edge.loopexit ], [ %208, %._crit_edge.loopexit37 ]
  %312 = icmp slt i32 %j.013, %nexty.0
  br i1 %312, label %204, label %._crit_edge17.loopexit

._crit_edge17.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge17

._crit_edge17:                                    ; preds = %._crit_edge17.loopexit, %.._crit_edge17_crit_edge
  %313 = phi i32 [ %197, %.._crit_edge17_crit_edge ], [ %311, %._crit_edge17.loopexit ]
  %.pre-phi32 = phi i32 [ %.pre31, %.._crit_edge17_crit_edge ], [ %202, %._crit_edge17.loopexit ]
  %314 = icmp slt i32 %k.018, %nextz.0
  br i1 %314, label %196, label %._crit_edge21.loopexit

._crit_edge21.loopexit:                           ; preds = %._crit_edge17
  br label %._crit_edge21

._crit_edge21:                                    ; preds = %._crit_edge21.loopexit, %.preheader
  %315 = bitcast i32* %112 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = trunc i64 %316 to i32
  %318 = lshr i64 %316, 32
  %319 = trunc i64 %318 to i32
  %320 = mul nsw i32 %319, %317
  %321 = load i32, i32* %121, align 8, !tbaa !215
  %322 = mul nsw i32 %320, %321
  %323 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 18
  store i32 %322, i32* %323, align 8, !tbaa !208
  %324 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 16
  %325 = load i32*, i32** %324, align 8, !tbaa !194
  %326 = icmp eq i32* %325, null
  br i1 %326, label %333, label %327

; <label>:327                                     ; preds = %._crit_edge21
  %328 = bitcast i32* %325 to i8*
  tail call void @free(i8* %328) #7
  %329 = bitcast i32* %323 to i64*
  %.pre = load i64, i64* %329, align 8
  %330 = trunc i64 %.pre to i32
  %331 = lshr i64 %.pre, 32
  %332 = trunc i64 %331 to i32
  br label %333

; <label>:333                                     ; preds = %327, %._crit_edge21
  %334 = phi i32 [ %322, %._crit_edge21 ], [ %330, %327 ]
  %335 = mul nsw i32 %334, %4
  %336 = sext i32 %335 to i64
  %337 = shl nsw i64 %336, 2
  %338 = tail call noalias i8* @malloc(i64 %337) #7
  %339 = bitcast i32** %324 to i8**
  store i8* %338, i8** %339, align 8, !tbaa !194
  %340 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 17
  %341 = load i32*, i32** %340, align 8, !tbaa !195
  %342 = icmp eq i32* %341, null
  br i1 %342, label %._crit_edge1, label %343

._crit_edge1:                                     ; preds = %333
  %.phi.trans.insert = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 19
  %.pre2 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !191
  br label %349

; <label>:343                                     ; preds = %333
  %344 = bitcast i32* %341 to i8*
  tail call void @free(i8* %344) #7
  %345 = bitcast i32* %323 to i64*
  %.pre29 = load i64, i64* %345, align 8
  %346 = trunc i64 %.pre29 to i32
  %347 = lshr i64 %.pre29, 32
  %348 = trunc i64 %347 to i32
  %.pre3 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 19
  br label %349

; <label>:349                                     ; preds = %._crit_edge1, %343
  %.pre-phi = phi i32* [ %.phi.trans.insert, %._crit_edge1 ], [ %.pre3, %343 ]
  %350 = phi i32 [ %.pre2, %._crit_edge1 ], [ %348, %343 ]
  %351 = phi i32 [ %334, %._crit_edge1 ], [ %346, %343 ]
  %352 = mul nsw i32 %351, %4
  %353 = mul nsw i32 %352, %350
  %354 = sext i32 %353 to i64
  %355 = shl nsw i64 %354, 2
  %356 = tail call noalias i8* @malloc(i64 %355) #7
  %357 = bitcast i32** %340 to i8**
  store i8* %356, i8** %357, align 8, !tbaa !195
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly uwtable
define double @_ZN8Neighbor7bindistEiii(%class.Neighbor* nocapture readonly %this, i32 %i, i32 %j, i32 %k) #15 align 2 {
  %1 = icmp sgt i32 %i, 0
  br i1 %1, label %2, label %8

; <label>:2                                       ; preds = %0
  %3 = add nsw i32 %i, -1
  %4 = sitofp i32 %3 to double
  %5 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 34
  %6 = load double, double* %5, align 8, !tbaa !210
  %7 = fmul double %4, %6
  br label %16

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %i, 0
  br i1 %9, label %16, label %10

; <label>:10                                      ; preds = %8
  %11 = add nsw i32 %i, 1
  %12 = sitofp i32 %11 to double
  %13 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 34
  %14 = load double, double* %13, align 8, !tbaa !210
  %15 = fmul double %12, %14
  br label %16

; <label>:16                                      ; preds = %10, %8, %2
  %delx.0 = phi double [ %7, %2 ], [ %15, %10 ], [ 0.000000e+00, %8 ]
  %17 = icmp sgt i32 %j, 0
  br i1 %17, label %18, label %24

; <label>:18                                      ; preds = %16
  %19 = add nsw i32 %j, -1
  %20 = sitofp i32 %19 to double
  %21 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 35
  %22 = load double, double* %21, align 8, !tbaa !211
  %23 = fmul double %20, %22
  br label %32

; <label>:24                                      ; preds = %16
  %25 = icmp eq i32 %j, 0
  br i1 %25, label %32, label %26

; <label>:26                                      ; preds = %24
  %27 = add nsw i32 %j, 1
  %28 = sitofp i32 %27 to double
  %29 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 35
  %30 = load double, double* %29, align 8, !tbaa !211
  %31 = fmul double %28, %30
  br label %32

; <label>:32                                      ; preds = %26, %24, %18
  %dely.0 = phi double [ %23, %18 ], [ %31, %26 ], [ 0.000000e+00, %24 ]
  %33 = icmp sgt i32 %k, 0
  br i1 %33, label %34, label %40

; <label>:34                                      ; preds = %32
  %35 = add nsw i32 %k, -1
  %36 = sitofp i32 %35 to double
  %37 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 36
  %38 = load double, double* %37, align 8, !tbaa !212
  %39 = fmul double %36, %38
  br label %48

; <label>:40                                      ; preds = %32
  %41 = icmp eq i32 %k, 0
  br i1 %41, label %48, label %42

; <label>:42                                      ; preds = %40
  %43 = add nsw i32 %k, 1
  %44 = sitofp i32 %43 to double
  %45 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %this, i64 0, i32 36
  %46 = load double, double* %45, align 8, !tbaa !212
  %47 = fmul double %44, %46
  br label %48

; <label>:48                                      ; preds = %42, %40, %34
  %delz.0 = phi double [ %39, %34 ], [ %47, %42 ], [ 0.000000e+00, %40 ]
  %49 = fmul double %delx.0, %delx.0
  %50 = fmul double %dely.0, %dely.0
  %51 = fadd double %49, %50
  %52 = fmul double %delz.0, %delz.0
  %53 = fadd double %51, %52
  ret double %53
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN6ThermoC2Ev(%class.Thermo* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN6ThermoD2Ev(%class.Thermo* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN6Thermo5setupEdR9IntegrateR4Atomi(%class.Thermo* nocapture %this, double %rho_in, %class.Integrate* nocapture dereferenceable(88) %integrate, %class.Atom* nocapture readonly dereferenceable(224) %atom, i32 %units) #9 align 2 {
  %1 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 16
  store double %rho_in, double* %1, align 8, !tbaa !216
  %2 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !50
  %4 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 2
  store i32 %3, i32* %4, align 8, !tbaa !217
  %5 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !61
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %0
  %9 = sdiv i32 %3, %6
  %10 = add nsw i32 %9, 2
  %phitmp = sext i32 %10 to i64
  br label %11

; <label>:11                                      ; preds = %8, %0
  %maxstat.0 = phi i64 [ %phitmp, %8 ], [ 2, %0 ]
  %12 = shl nsw i64 %maxstat.0, 2
  %13 = tail call noalias i8* @malloc(i64 %12) #7
  %14 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 3
  %15 = bitcast i32** %14 to i8**
  store i8* %13, i8** %15, align 8, !tbaa !218
  %16 = shl nsw i64 %maxstat.0, 3
  %17 = tail call noalias i8* @malloc(i64 %16) #7
  %18 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 4
  %19 = bitcast double** %18 to i8**
  store i8* %17, i8** %19, align 8, !tbaa !219
  %20 = tail call noalias i8* @malloc(i64 %16) #7
  %21 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 5
  %22 = bitcast double** %21 to i8**
  store i8* %20, i8** %22, align 8, !tbaa !220
  %23 = tail call noalias i8* @malloc(i64 %16) #7
  %24 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 6
  %25 = bitcast double** %24 to i8**
  store i8* %23, i8** %25, align 8, !tbaa !221
  switch i32 %units, label %72 [
    i32 0, label %26
    i32 1, label %47
  ]

; <label>:26                                      ; preds = %11
  %27 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 13
  store double 1.000000e+00, double* %27, align 8, !tbaa !222
  %28 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %29 = load i32, i32* %28, align 8, !tbaa !65
  %30 = mul nsw i32 %29, 3
  %31 = add nsw i32 %30, -3
  %32 = sitofp i32 %31 to double
  %33 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 14
  store double %32, double* %33, align 8, !tbaa !223
  %34 = fdiv double 1.000000e+00, %32
  %35 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 10
  store double %34, double* %35, align 8, !tbaa !224
  %36 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %37 = load double, double* %36, align 8, !tbaa !62
  %38 = fdiv double 0x3FD5555555555555, %37
  %39 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %40 = load double, double* %39, align 8, !tbaa !63
  %41 = fdiv double %38, %40
  %42 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %43 = load double, double* %42, align 8, !tbaa !64
  %44 = fdiv double %41, %43
  %45 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 12
  store double %44, double* %45, align 8, !tbaa !225
  %46 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 11
  store double 5.000000e-01, double* %46, align 8, !tbaa !226
  br label %72

; <label>:47                                      ; preds = %11
  %48 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 13
  store double 1.036427e-04, double* %48, align 8, !tbaa !222
  %49 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %50 = load i32, i32* %49, align 8, !tbaa !65
  %51 = mul nsw i32 %50, 3
  %52 = add nsw i32 %51, -3
  %53 = sitofp i32 %52 to double
  %54 = fmul double %53, 8.617343e-05
  %55 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 14
  store double %54, double* %55, align 8, !tbaa !223
  %56 = fdiv double 1.036427e-04, %54
  %57 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 10
  store double %56, double* %57, align 8, !tbaa !224
  %58 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %59 = load double, double* %58, align 8, !tbaa !62
  %60 = fdiv double 0x41204C5555555555, %59
  %61 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %62 = load double, double* %61, align 8, !tbaa !63
  %63 = fdiv double %60, %62
  %64 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %65 = load double, double* %64, align 8, !tbaa !64
  %66 = fdiv double %63, %65
  %67 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 12
  store double %66, double* %67, align 8, !tbaa !225
  %68 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 11
  store double 0x411FFFFFF12F9011, double* %68, align 8, !tbaa !226
  %69 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 1
  %70 = load double, double* %69, align 8, !tbaa !76
  %71 = fdiv double %70, 1.036427e-04
  store double %71, double* %69, align 8, !tbaa !76
  br label %72

; <label>:72                                      ; preds = %47, %26, %11
  ret void
}

; Function Attrs: uwtable
define void @_ZN6Thermo7computeEiR4AtomR8NeighborP5ForceR5TimerR4Comm(%class.Thermo* %this, i32 %iflag, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Force* nocapture readonly %force, %class.Timer* dereferenceable(24) %timer, %class.Comm* nocapture readnone dereferenceable(336) %comm) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %virial.i = alloca double, align 8
  %eng.i = alloca double, align 8
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @16)
  %2 = icmp sgt i32 %iflag, 0
  br i1 %2, label %3, label %8

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !61
  %6 = srem i32 %iflag, %5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %.thread, label %113

; <label>:8                                       ; preds = %0
  %9 = icmp eq i32 %iflag, -1
  br i1 %9, label %10, label %.thread

; <label>:10                                      ; preds = %8
  %11 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !61
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %.thread

; <label>:14                                      ; preds = %10
  %15 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 2
  %16 = load i32, i32* %15, align 8, !tbaa !217
  %17 = srem i32 %16, %12
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %113, label %.thread

.thread:                                          ; preds = %14, %10, %8, %3
  %19 = phi i1 [ true, %14 ], [ true, %10 ], [ false, %8 ], [ false, %3 ]
  %20 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 7
  %21 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 9
  %22 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 8
  %23 = bitcast double* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 24, i32 8, i1 false)
  tail call void @__kmpc_barrier(%ident_t* nonnull @17, i32 %1)
  %24 = tail call double @_ZN6Thermo11temperatureER4Atom(%class.Thermo* %this, %class.Atom* nonnull dereferenceable(224) %atom)
  %25 = tail call i32 @__kmpc_master(%ident_t* nonnull @16, i32 %1)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %113, label %27

; <label>:27                                      ; preds = %.thread
  %28 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 3
  %29 = load double, double* %28, align 8, !tbaa !112
  store double %29, double* %21, align 8, !tbaa !227
  %30 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %31 = load i32, i32* %30, align 4, !tbaa !41
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %35, label %33

; <label>:33                                      ; preds = %27
  %34 = fmul double %29, 2.000000e+00
  store double %34, double* %21, align 8, !tbaa !227
  br label %35

; <label>:35                                      ; preds = %33, %27
  %36 = phi double [ %29, %27 ], [ %34, %33 ]
  %37 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 11
  %38 = load double, double* %37, align 8, !tbaa !226
  %39 = fmul double %36, %38
  store double %39, double* %21, align 8, !tbaa !227
  %40 = bitcast double* %eng.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %40) #7
  %41 = bitcast double* %21 to i8*
  %42 = invoke i32 @MPI_Allreduce(i8* %41, i8* %40, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
          to label %43 unwind label %68

; <label>:43                                      ; preds = %35
  %44 = load double, double* %eng.i, align 8, !tbaa !33
  %45 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %46 = load i32, i32* %45, align 8, !tbaa !65
  %47 = sitofp i32 %46 to double
  %48 = fdiv double %44, %47
  call void @llvm.lifetime.end(i64 8, i8* %40) #7
  %49 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 6
  %50 = bitcast double* %49 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !113
  %52 = bitcast double* %22 to i64*
  store i64 %51, i64* %52, align 8, !tbaa !228
  %53 = bitcast double* %virial.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %53) #7
  store double 0.000000e+00, double* %virial.i, align 8, !tbaa !33
  %54 = bitcast double* %22 to i8*
  %55 = invoke i32 @MPI_Allreduce(i8* %54, i8* %53, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
          to label %56 unwind label %68

; <label>:56                                      ; preds = %43
  %57 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 14
  %58 = load double, double* %57, align 8, !tbaa !223
  %59 = fmul double %24, %58
  %60 = load double, double* %virial.i, align 8, !tbaa !33
  %61 = fadd double %59, %60
  %62 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 12
  %63 = load double, double* %62, align 8, !tbaa !225
  %64 = fmul double %61, %63
  call void @llvm.lifetime.end(i64 8, i8* %53) #7
  br i1 %19, label %65, label %71

; <label>:65                                      ; preds = %56
  %66 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 2
  %67 = load i32, i32* %66, align 8, !tbaa !217
  br label %71

; <label>:68                                      ; preds = %75, %43, %35
  %69 = landingpad { i8*, i32 }
          catch i8* null
  %70 = extractvalue { i8*, i32 } %69, 0
  call void @__kmpc_end_master(%ident_t* nonnull @16, i32 %1)
  call void @__clang_call_terminate(i8* %70) #17
  unreachable

; <label>:71                                      ; preds = %65, %56
  %istep.0 = phi i32 [ %67, %65 ], [ %iflag, %56 ]
  %72 = icmp eq i32 %iflag, 0
  %73 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 1
  br i1 %72, label %74, label %._crit_edge

._crit_edge:                                      ; preds = %71
  %.pre = load i32, i32* %73, align 4, !tbaa !229
  %phitmp = sext i32 %.pre to i64
  br label %75

; <label>:74                                      ; preds = %71
  store i32 0, i32* %73, align 4, !tbaa !229
  br label %75

; <label>:75                                      ; preds = %74, %._crit_edge
  %76 = phi i64 [ %phitmp, %._crit_edge ], [ 0, %74 ]
  %77 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 3
  %78 = load i32*, i32** %77, align 8, !tbaa !218
  %79 = getelementptr inbounds i32, i32* %78, i64 %76
  store i32 %istep.0, i32* %79, align 4, !tbaa !1
  %80 = load i32, i32* %73, align 4, !tbaa !229
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 4
  %83 = load double*, double** %82, align 8, !tbaa !219
  %84 = getelementptr inbounds double, double* %83, i64 %81
  store double %24, double* %84, align 8, !tbaa !33
  %85 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 5
  %86 = load double*, double** %85, align 8, !tbaa !220
  %87 = getelementptr inbounds double, double* %86, i64 %81
  store double %48, double* %87, align 8, !tbaa !33
  %88 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 6
  %89 = load double*, double** %88, align 8, !tbaa !221
  %90 = getelementptr inbounds double, double* %89, i64 %81
  store double %64, double* %90, align 8, !tbaa !33
  %91 = add nsw i32 %80, 1
  store i32 %91, i32* %73, align 4, !tbaa !229
  %92 = getelementptr inbounds %class.Timer, %class.Timer* %timer, i64 0, i32 0
  %93 = bitcast %class.Timer* %timer to i64**
  %94 = load i64*, i64** %93, align 8, !tbaa !74
  %95 = load i64, i64* %94, align 8, !tbaa !33
  invoke void @_ZN5Timer12barrier_stopEi(%class.Timer* nonnull %timer, i32 0)
          to label %96 unwind label %68

; <label>:96                                      ; preds = %75
  %97 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 15
  %98 = load %class.ThreadData*, %class.ThreadData** %97, align 8, !tbaa !30
  %99 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %98, i64 0, i32 0
  %100 = load i32, i32* %99, align 4, !tbaa !15
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %111

; <label>:102                                     ; preds = %96
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %104 = icmp eq i32 %istep.0, 0
  br i1 %104, label %108, label %105

; <label>:105                                     ; preds = %102
  %106 = load double*, double** %92, align 8, !tbaa !74
  %107 = load double, double* %106, align 8, !tbaa !33
  br label %108

; <label>:108                                     ; preds = %105, %102
  %109 = phi double [ %107, %105 ], [ 0.000000e+00, %102 ]
  %110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.118, i64 0, i64 0), i32 %istep.0, double %24, double %48, double %64, double %109)
  br label %111

; <label>:111                                     ; preds = %108, %96
  %112 = load i64*, i64** %93, align 8, !tbaa !74
  store i64 %95, i64* %112, align 8, !tbaa !33
  call void @__kmpc_end_master(%ident_t* nonnull @16, i32 %1)
  br label %113

; <label>:113                                     ; preds = %111, %.thread, %14, %3
  ret void
}

; Function Attrs: uwtable
define double @_ZN6Thermo11temperatureER4Atom(%class.Thermo* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @16)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %t1 = alloca double, align 8
  %2 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 7
  store double 0.000000e+00, double* %2, align 8, !tbaa !230
  tail call void @__kmpc_barrier(%ident_t* nonnull @17, i32 %1)
  %3 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 5
  %4 = load double*, double** %3, align 8, !tbaa !101
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %6 = load i32, i32* %5, align 4, !tbaa !84
  %7 = add nsw i32 %6, -1
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %._crit_edge5

._crit_edge5:                                     ; preds = %0
  %.pre6 = bitcast i32* %.omp.is_last to i8*
  %.pre7 = bitcast i32* %.omp.stride to i8*
  %.pre9 = bitcast i32* %.omp.ub to i8*
  %.pre11 = bitcast i32* %.omp.lb to i8*
  br label %45

; <label>:9                                       ; preds = %0
  %10 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  %11 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #7
  store i32 %7, i32* %.omp.ub, align 4, !tbaa !1
  %12 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  %13 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @16, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %14 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %15 = icmp sgt i32 %14, %7
  %16 = select i1 %15, i32 %7, i32 %14
  store i32 %16, i32* %.omp.ub, align 4, !tbaa !1
  %17 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %18 = icmp sgt i32 %17, %16
  br i1 %18, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %9
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 13
  %20 = load double, double* %19, align 8
  %21 = sext i32 %17 to i64
  %22 = sext i32 %16 to i64
  br label %23

; <label>:23                                      ; preds = %23, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %23 ], [ %21, %.lr.ph ]
  %t.04 = phi double [ %42, %23 ], [ 0.000000e+00, %.lr.ph ]
  %.omp.iv.03 = phi i32 [ %43, %23 ], [ %17, %.lr.ph ]
  %24 = mul nsw i32 %.omp.iv.03, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %4, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !33
  %28 = add nsw i32 %24, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %4, i64 %29
  %31 = load double, double* %30, align 8, !tbaa !33
  %32 = add nsw i32 %24, 2
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %4, i64 %33
  %35 = load double, double* %34, align 8, !tbaa !33
  %36 = fmul double %27, %27
  %37 = fmul double %31, %31
  %38 = fadd double %36, %37
  %39 = fmul double %35, %35
  %40 = fadd double %38, %39
  %41 = fmul double %20, %40
  %42 = fadd double %t.04, %41
  %43 = add nsw i32 %.omp.iv.03, 1
  %44 = icmp slt i64 %indvars.iv, %22
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %44, label %23, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %23
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %t.0.lcssa = phi double [ 0.000000e+00, %9 ], [ %42, %._crit_edge.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @16, i32 %1)
  br label %45

; <label>:45                                      ; preds = %._crit_edge, %._crit_edge5
  %.pre-phi12 = phi i8* [ %.pre11, %._crit_edge5 ], [ %10, %._crit_edge ]
  %.pre-phi10 = phi i8* [ %.pre9, %._crit_edge5 ], [ %11, %._crit_edge ]
  %.pre-phi8 = phi i8* [ %.pre7, %._crit_edge5 ], [ %12, %._crit_edge ]
  %.pre-phi = phi i8* [ %.pre6, %._crit_edge5 ], [ %13, %._crit_edge ]
  %t.1 = phi double [ 0.000000e+00, %._crit_edge5 ], [ %t.0.lcssa, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi8) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi10) #7
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi12) #7
  call void @__kmpc_barrier(%ident_t* nonnull @18, i32 %1)
  %46 = bitcast double* %2 to i64*
  %47 = load atomic i64, i64* %46 monotonic, align 8, !tbaa !33
  br label %48

; <label>:48                                      ; preds = %48, %45
  %49 = phi i64 [ %47, %45 ], [ %54, %48 ]
  %50 = bitcast i64 %49 to double
  %51 = fadd double %t.1, %50
  %52 = bitcast double %51 to i64
  %53 = cmpxchg i64* %46, i64 %49, i64 %52 monotonic monotonic
  %54 = extractvalue { i64, i1 } %53, 0
  %55 = extractvalue { i64, i1 } %53, 1
  br i1 %55, label %56, label %48

; <label>:56                                      ; preds = %48
  call void @__kmpc_barrier(%ident_t* nonnull @17, i32 %1)
  %57 = bitcast double* %t1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %57) #7
  %58 = call i32 @__kmpc_master(%ident_t* nonnull @16, i32 %1)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %67, label %60

; <label>:60                                      ; preds = %56
  %61 = bitcast double* %2 to i8*
  %62 = invoke i32 @MPI_Allreduce(i8* %61, i8* %57, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
          to label %63 unwind label %64

; <label>:63                                      ; preds = %60
  call void @__kmpc_end_master(%ident_t* nonnull @16, i32 %1)
  %.pre = load double, double* %t1, align 8, !tbaa !33
  br label %67

; <label>:64                                      ; preds = %60
  %65 = landingpad { i8*, i32 }
          catch i8* null
  %66 = extractvalue { i8*, i32 } %65, 0
  call void @__kmpc_end_master(%ident_t* nonnull @16, i32 %1)
  call void @__clang_call_terminate(i8* %66) #17
  unreachable

; <label>:67                                      ; preds = %63, %56
  %68 = phi double [ undef, %56 ], [ %.pre, %63 ]
  %69 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 10
  %70 = load double, double* %69, align 8, !tbaa !224
  %71 = fmul double %68, %70
  call void @llvm.lifetime.end(i64 8, i8* %57) #7
  ret double %71
}

; Function Attrs: uwtable
define double @_ZN6Thermo6energyER4AtomR8NeighborP5Force(%class.Thermo* %this, %class.Atom* nocapture readonly dereferenceable(224) %atom, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Force* nocapture readonly %force) #11 align 2 {
  %eng = alloca double, align 8
  %1 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 3
  %2 = load double, double* %1, align 8, !tbaa !112
  %3 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 9
  store double %2, double* %3, align 8, !tbaa !227
  %4 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !tbaa !41
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7                                       ; preds = %0
  %8 = fmul double %2, 2.000000e+00
  store double %8, double* %3, align 8, !tbaa !227
  br label %9

; <label>:9                                       ; preds = %7, %0
  %10 = phi double [ %2, %0 ], [ %8, %7 ]
  %11 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 11
  %12 = load double, double* %11, align 8, !tbaa !226
  %13 = fmul double %12, %10
  store double %13, double* %3, align 8, !tbaa !227
  %14 = bitcast double* %eng to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #7
  %15 = bitcast double* %3 to i8*
  %16 = call i32 @MPI_Allreduce(i8* %15, i8* %14, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %17 = load double, double* %eng, align 8, !tbaa !33
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %19 = load i32, i32* %18, align 8, !tbaa !65
  %20 = sitofp i32 %19 to double
  %21 = fdiv double %17, %20
  call void @llvm.lifetime.end(i64 8, i8* %14) #7
  ret double %21
}

; Function Attrs: uwtable
define double @_ZN6Thermo8pressureEdP5Force(%class.Thermo* %this, double %t, %class.Force* nocapture readonly %force) #11 align 2 {
  %virial = alloca double, align 8
  %1 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 6
  %2 = bitcast double* %1 to i64*
  %3 = load i64, i64* %2, align 8, !tbaa !113
  %4 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 8
  %5 = bitcast double* %4 to i64*
  store i64 %3, i64* %5, align 8, !tbaa !228
  %6 = bitcast double* %virial to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #7
  store double 0.000000e+00, double* %virial, align 8, !tbaa !33
  %7 = bitcast double* %4 to i8*
  %8 = call i32 @MPI_Allreduce(i8* %7, i8* %6, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %9 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 14
  %10 = load double, double* %9, align 8, !tbaa !223
  %11 = fmul double %10, %t
  %12 = load double, double* %virial, align 8, !tbaa !33
  %13 = fadd double %11, %12
  %14 = getelementptr inbounds %class.Thermo, %class.Thermo* %this, i64 0, i32 12
  %15 = load double, double* %14, align 8, !tbaa !225
  %16 = fmul double %13, %15
  call void @llvm.lifetime.end(i64 8, i8* %6) #7
  ret double %16
}

; Function Attrs: nounwind uwtable
define void @_ZN4CommC2Ev(%class.Comm* nocapture %this) unnamed_addr #9 align 2 {
  %1 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  store i32 1000, i32* %1, align 8, !tbaa !231
  %2 = tail call noalias i8* @malloc(i64 16000) #7
  %3 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %4 = bitcast double** %3 to i8**
  store i8* %2, i8** %4, align 8, !tbaa !159
  %5 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 23
  store i32 1000, i32* %5, align 4, !tbaa !232
  %6 = tail call noalias i8* @malloc(i64 8000) #7
  %7 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %8 = bitcast double** %7 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !162
  %9 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 30
  store i32 0, i32* %9, align 8, !tbaa !38
  %10 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 31
  store i32 0, i32* %10, align 4, !tbaa !39
  %11 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 41
  store i32 0, i32* %11, align 8, !tbaa !233
  %12 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 42
  store i32 0, i32* %12, align 4, !tbaa !234
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @_ZN4CommD2Ev(%class.Comm* nocapture %this) unnamed_addr #13 align 2 {
  ret void
}

; Function Attrs: uwtable
define i32 @_ZN4Comm5setupEdR4Atom(%class.Comm* %this, double %cutneigh, %class.Atom* nocapture dereferenceable(224) %atom) #11 align 2 {
  %nprocs = alloca i32, align 4
  %periods = alloca [3 x i32], align 4
  %prd = alloca [3 x double], align 16
  %myloc = alloca [3 x i32], align 4
  %cartesian = alloca i32, align 4
  %1 = bitcast i32* %nprocs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = bitcast [3 x i32]* %periods to i8*
  call void @llvm.lifetime.start(i64 12, i8* %2) #7
  %3 = bitcast [3 x double]* %prd to i8*
  call void @llvm.lifetime.start(i64 24, i8* %3) #7
  %4 = bitcast [3 x i32]* %myloc to i8*
  call void @llvm.lifetime.start(i64 12, i8* %4) #7
  %5 = bitcast i32* %cartesian to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18
  %7 = bitcast %struct.Box* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !62
  %9 = bitcast [3 x double]* %prd to i64*
  store i64 %8, i64* %9, align 16, !tbaa !33
  %10 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !63
  %13 = getelementptr inbounds [3 x double], [3 x double]* %prd, i64 0, i64 1
  %14 = bitcast double* %13 to i64*
  store i64 %12, i64* %14, align 8, !tbaa !33
  %15 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !64
  %18 = getelementptr inbounds [3 x double], [3 x double]* %prd, i64 0, i64 2
  %19 = bitcast double* %18 to i64*
  store i64 %17, i64* %19, align 16, !tbaa !33
  %20 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 0
  %21 = tail call i32 @MPI_Comm_rank(i32 1140850688, i32* %20)
  %22 = call i32 @MPI_Comm_size(i32 1140850688, i32* nonnull %nprocs)
  %23 = bitcast i64 %8 to double
  %24 = bitcast i64 %12 to double
  %25 = fmul double %23, %24
  %26 = bitcast i64 %17 to double
  %27 = fmul double %23, %26
  %28 = fmul double %24, %26
  %29 = load i32, i32* %nprocs, align 4, !tbaa !1
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %.._crit_edge43_crit_edge, label %.lr.ph42

.._crit_edge43_crit_edge:                         ; preds = %0
  %.pre62 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 0
  %.pre65 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 2
  br label %._crit_edge43

.lr.ph42:                                         ; preds = %0
  %31 = fadd double %25, %27
  %32 = fadd double %28, %31
  %33 = fmul double %32, 2.000000e+00
  %34 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 0
  %35 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 1
  %36 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 2
  br label %37

; <label>:37                                      ; preds = %.loopexit10, %.lr.ph42
  %ipx.040 = phi i32 [ 1, %.lr.ph42 ], [ %63, %.loopexit10 ]
  %bestsurf.039 = phi double [ %33, %.lr.ph42 ], [ %bestsurf.3, %.loopexit10 ]
  %38 = srem i32 %29, %ipx.040
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %.loopexit10

; <label>:40                                      ; preds = %37
  %41 = sdiv i32 %29, %ipx.040
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %.loopexit10, label %.lr.ph37

.lr.ph37:                                         ; preds = %40
  %43 = sitofp i32 %ipx.040 to double
  %44 = fdiv double %25, %43
  %45 = fdiv double %27, %43
  br label %46

; <label>:46                                      ; preds = %61, %.lr.ph37
  %ipy.035 = phi i32 [ 1, %.lr.ph37 ], [ %62, %61 ]
  %bestsurf.134 = phi double [ %bestsurf.039, %.lr.ph37 ], [ %bestsurf.2, %61 ]
  %47 = srem i32 %41, %ipy.035
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

; <label>:49                                      ; preds = %46
  %50 = sdiv i32 %41, %ipy.035
  %51 = sitofp i32 %ipy.035 to double
  %52 = fdiv double %44, %51
  %53 = sitofp i32 %50 to double
  %54 = fdiv double %45, %53
  %55 = fadd double %52, %54
  %56 = fdiv double %28, %51
  %57 = fdiv double %56, %53
  %58 = fadd double %57, %55
  %59 = fcmp olt double %58, %bestsurf.134
  br i1 %59, label %60, label %61

; <label>:60                                      ; preds = %49
  store i32 %ipx.040, i32* %34, align 8, !tbaa !1
  store i32 %ipy.035, i32* %35, align 4, !tbaa !1
  store i32 %50, i32* %36, align 8, !tbaa !1
  br label %61

; <label>:61                                      ; preds = %60, %49, %46
  %bestsurf.2 = phi double [ %58, %60 ], [ %bestsurf.134, %49 ], [ %bestsurf.134, %46 ]
  %62 = add nuw nsw i32 %ipy.035, 1
  %exitcond55 = icmp eq i32 %ipy.035, %41
  br i1 %exitcond55, label %.loopexit10.loopexit, label %46

.loopexit10.loopexit:                             ; preds = %61
  br label %.loopexit10

.loopexit10:                                      ; preds = %.loopexit10.loopexit, %40, %37
  %bestsurf.3 = phi double [ %bestsurf.039, %37 ], [ %bestsurf.039, %40 ], [ %bestsurf.2, %.loopexit10.loopexit ]
  %63 = add nuw nsw i32 %ipx.040, 1
  %64 = icmp slt i32 %ipx.040, %29
  br i1 %64, label %37, label %._crit_edge43.loopexit

._crit_edge43.loopexit:                           ; preds = %.loopexit10
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %._crit_edge43.loopexit, %.._crit_edge43_crit_edge
  %.pre-phi66 = phi i32* [ %.pre65, %.._crit_edge43_crit_edge ], [ %36, %._crit_edge43.loopexit ]
  %.pre-phi = phi i32* [ %.pre62, %.._crit_edge43_crit_edge ], [ %34, %._crit_edge43.loopexit ]
  %65 = bitcast i32* %.pre-phi to i64*
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = lshr i64 %66, 32
  %69 = trunc i64 %68 to i32
  %70 = mul nsw i32 %69, %67
  %71 = load i32, i32* %.pre-phi66, align 8, !tbaa !1
  %72 = mul nsw i32 %70, %71
  %73 = icmp eq i32 %72, %29
  br i1 %73, label %.preheader9, label %74

; <label>:74                                      ; preds = %._crit_edge43
  %75 = load i32, i32* %20, align 8, !tbaa !95
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %.loopexit

; <label>:77                                      ; preds = %74
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @str.150, i64 0, i64 0))
  br label %.loopexit

.preheader9:                                      ; preds = %._crit_edge43
  %78 = getelementptr inbounds [3 x i32], [3 x i32]* %periods, i64 0, i64 2
  store i32 1, i32* %78, align 4, !tbaa !1
  %79 = getelementptr inbounds [3 x i32], [3 x i32]* %periods, i64 0, i64 1
  store i32 1, i32* %79, align 4, !tbaa !1
  %80 = getelementptr inbounds [3 x i32], [3 x i32]* %periods, i64 0, i64 0
  store i32 1, i32* %80, align 4, !tbaa !1
  %81 = call i32 @MPI_Cart_create(i32 1140850688, i32 3, i32* %.pre-phi, i32* %80, i32 0, i32* nonnull %cartesian)
  %82 = load i32, i32* %cartesian, align 4, !tbaa !1
  %83 = getelementptr inbounds [3 x i32], [3 x i32]* %myloc, i64 0, i64 0
  %84 = call i32 @MPI_Cart_get(i32 %82, i32 3, i32* %.pre-phi, i32* %80, i32* %83)
  %85 = load i32, i32* %cartesian, align 4, !tbaa !1
  %86 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 0, i64 0
  %87 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 0, i64 1
  %88 = call i32 @MPI_Cart_shift(i32 %85, i32 0, i32 1, i32* %86, i32* %87)
  %89 = load i32, i32* %cartesian, align 4, !tbaa !1
  %90 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 1, i64 0
  %91 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 1, i64 1
  %92 = call i32 @MPI_Cart_shift(i32 %89, i32 1, i32 1, i32* %90, i32* %91)
  %93 = load i32, i32* %cartesian, align 4, !tbaa !1
  %94 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 2, i64 0
  %95 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 2, i64 1
  %96 = call i32 @MPI_Cart_shift(i32 %93, i32 2, i32 1, i32* %94, i32* %95)
  %97 = load i32, i32* %83, align 4, !tbaa !1
  %98 = load i64, i64* %65, align 8
  %99 = trunc i64 %98 to i32
  %100 = sitofp i32 %99 to double
  %101 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %102 = add nsw i32 %97, 1
  %103 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %104 = getelementptr inbounds [3 x i32], [3 x i32]* %myloc, i64 0, i64 1
  %105 = load i32, i32* %104, align 4, !tbaa !1
  %106 = lshr i64 %98, 32
  %107 = trunc i64 %106 to i32
  %108 = sitofp i32 %107 to double
  %109 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %110 = add nsw i32 %105, 1
  %111 = insertelement <4 x i32> undef, i32 %97, i32 0
  %112 = insertelement <4 x i32> %111, i32 %102, i32 1
  %113 = insertelement <4 x i32> %112, i32 %105, i32 2
  %114 = insertelement <4 x i32> %113, i32 %110, i32 3
  %115 = sitofp <4 x i32> %114 to <4 x double>
  %116 = insertelement <4 x double> undef, double %23, i32 0
  %117 = insertelement <4 x double> %116, double %23, i32 1
  %118 = insertelement <4 x double> %117, double %24, i32 2
  %119 = insertelement <4 x double> %118, double %24, i32 3
  %120 = fmul <4 x double> %115, %119
  %121 = insertelement <4 x double> undef, double %100, i32 0
  %122 = insertelement <4 x double> %121, double %100, i32 1
  %123 = insertelement <4 x double> %122, double %108, i32 2
  %124 = insertelement <4 x double> %123, double %108, i32 3
  %125 = fdiv <4 x double> %120, %124
  %126 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  %127 = bitcast double* %101 to <4 x double>*
  store <4 x double> %125, <4 x double>* %127, align 8, !tbaa !33
  %128 = getelementptr inbounds [3 x i32], [3 x i32]* %myloc, i64 0, i64 2
  %129 = load i32, i32* %128, align 4, !tbaa !1
  %130 = sitofp i32 %129 to double
  %131 = fmul double %130, %26
  %132 = load i32, i32* %.pre-phi66, align 8, !tbaa !1
  %133 = sitofp i32 %132 to double
  %134 = fdiv double %131, %133
  %135 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  store double %134, double* %135, align 8, !tbaa !90
  %136 = add nsw i32 %129, 1
  %137 = sitofp i32 %136 to double
  %138 = fmul double %26, %137
  %139 = fdiv double %138, %133
  %140 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  store double %139, double* %140, align 8, !tbaa !89
  %141 = fmul double %100, %cutneigh
  %142 = fdiv double %141, %23
  %143 = fadd double %142, 1.000000e+00
  %144 = fptosi double %143 to i32
  %145 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 0
  store i32 %144, i32* %145, align 4, !tbaa !1
  %146 = fmul double %108, %cutneigh
  %147 = fdiv double %146, %24
  %148 = fadd double %147, 1.000000e+00
  %149 = fptosi double %148 to i32
  %150 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 1
  store i32 %149, i32* %150, align 4, !tbaa !1
  %151 = fmul double %133, %cutneigh
  %152 = fdiv double %151, %26
  %153 = fadd double %152, 1.000000e+00
  %154 = fptosi double %153 to i32
  %155 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 2
  store i32 %154, i32* %155, align 4, !tbaa !1
  %156 = add i32 %149, %144
  %157 = add i32 %156, %154
  %158 = shl i32 %157, 1
  %159 = sext i32 %158 to i64
  %160 = shl nsw i64 %159, 3
  %161 = call noalias i8* @malloc(i64 %160) #7
  %162 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 27
  %163 = bitcast double** %162 to i8**
  store i8* %161, i8** %163, align 8, !tbaa !235
  %164 = call noalias i8* @malloc(i64 %160) #7
  %165 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 28
  %166 = bitcast double** %165 to i8**
  store i8* %164, i8** %166, align 8, !tbaa !236
  %167 = shl nsw i64 %159, 2
  %168 = call noalias i8* @malloc(i64 %167) #7
  %169 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 2
  %170 = bitcast i32** %169 to i8**
  store i8* %168, i8** %170, align 8, !tbaa !237
  %171 = call noalias i8* @malloc(i64 %167) #7
  %172 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 3
  %173 = bitcast i32** %172 to i8**
  store i8* %171, i8** %173, align 8, !tbaa !238
  %174 = call noalias i8* @malloc(i64 %167) #7
  %175 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 4
  %176 = bitcast i32** %175 to i8**
  store i8* %174, i8** %176, align 8, !tbaa !239
  %177 = call noalias i8* @malloc(i64 %167) #7
  %178 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 5
  %179 = bitcast i32** %178 to i8**
  store i8* %177, i8** %179, align 8, !tbaa !240
  %180 = call noalias i8* @malloc(i64 %167) #7
  %181 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 12
  %182 = bitcast i32** %181 to i8**
  store i8* %180, i8** %182, align 8, !tbaa !161
  %183 = call noalias i8* @malloc(i64 %167) #7
  %184 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 13
  %185 = bitcast i32** %184 to i8**
  store i8* %183, i8** %185, align 8, !tbaa !164
  %186 = call noalias i8* @malloc(i64 %167) #7
  %187 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 14
  %188 = bitcast i32** %187 to i8**
  store i8* %186, i8** %188, align 8, !tbaa !241
  %189 = call noalias i8* @malloc(i64 %167) #7
  %190 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 15
  %191 = bitcast i32** %190 to i8**
  store i8* %189, i8** %191, align 8, !tbaa !242
  %192 = call noalias i8* @malloc(i64 %167) #7
  %193 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 6
  %194 = bitcast i32** %193 to i8**
  store i8* %192, i8** %194, align 8, !tbaa !158
  %195 = call noalias i8* @malloc(i64 %167) #7
  %196 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 7
  %197 = bitcast i32** %196 to i8**
  store i8* %195, i8** %197, align 8, !tbaa !166
  %198 = call noalias i8* @malloc(i64 %167) #7
  %199 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 8
  %200 = bitcast i32** %199 to i8**
  store i8* %198, i8** %200, align 8, !tbaa !165
  %201 = call noalias i8* @malloc(i64 %167) #7
  %202 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 9
  %203 = bitcast i32** %202 to i8**
  store i8* %201, i8** %203, align 8, !tbaa !163
  %204 = call noalias i8* @malloc(i64 %167) #7
  %205 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 10
  %206 = bitcast i32** %205 to i8**
  store i8* %204, i8** %206, align 8, !tbaa !243
  %207 = call noalias i8* @malloc(i64 %167) #7
  %208 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 11
  %209 = bitcast i32** %208 to i8**
  store i8* %207, i8** %209, align 8, !tbaa !244
  %210 = icmp slt i32 %144, 1
  br i1 %210, label %._crit_edge30, label %.lr.ph29.preheader

.lr.ph29.preheader:                               ; preds = %.preheader9
  %211 = bitcast i8* %186 to i32*
  br label %.lr.ph29

._crit_edge30.loopexit:                           ; preds = %.lr.ph29
  %.pre56 = load i32, i32* %150, align 4, !tbaa !1
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %.preheader9
  %212 = phi i32 [ %149, %.preheader9 ], [ %.pre56, %._crit_edge30.loopexit ]
  %iswap.1.lcssa = phi i32 [ 0, %.preheader9 ], [ %225, %._crit_edge30.loopexit ]
  %213 = icmp slt i32 %212, 1
  br i1 %213, label %._crit_edge30.1, label %.lr.ph29.preheader.1

.lr.ph29:                                         ; preds = %.lr.ph29..lr.ph29_crit_edge, %.lr.ph29.preheader
  %214 = phi i32* [ %211, %.lr.ph29.preheader ], [ %.pre, %.lr.ph29..lr.ph29_crit_edge ]
  %indvars.iv50 = phi i64 [ 0, %.lr.ph29.preheader ], [ %indvars.iv.next51, %.lr.ph29..lr.ph29_crit_edge ]
  %i2.028 = phi i32 [ 1, %.lr.ph29.preheader ], [ %228, %.lr.ph29..lr.ph29_crit_edge ]
  %iswap.127 = phi i32 [ 0, %.lr.ph29.preheader ], [ %225, %.lr.ph29..lr.ph29_crit_edge ]
  %215 = load i32, i32* %cartesian, align 4, !tbaa !1
  %216 = getelementptr inbounds i32, i32* %214, i64 %indvars.iv50
  %217 = or i64 %indvars.iv50, 1
  %218 = getelementptr inbounds i32, i32* %214, i64 %217
  %219 = call i32 @MPI_Cart_shift(i32 %215, i32 0, i32 %i2.028, i32* %216, i32* %218)
  %220 = load i32, i32* %cartesian, align 4, !tbaa !1
  %221 = load i32*, i32** %190, align 8, !tbaa !242
  %222 = getelementptr inbounds i32, i32* %221, i64 %217
  %223 = getelementptr inbounds i32, i32* %221, i64 %indvars.iv50
  %224 = call i32 @MPI_Cart_shift(i32 %220, i32 0, i32 %i2.028, i32* %222, i32* %223)
  %225 = add nsw i32 %iswap.127, 2
  %226 = load i32, i32* %145, align 4, !tbaa !1
  %227 = icmp slt i32 %i2.028, %226
  br i1 %227, label %.lr.ph29..lr.ph29_crit_edge, label %._crit_edge30.loopexit

.lr.ph29..lr.ph29_crit_edge:                      ; preds = %.lr.ph29
  %indvars.iv.next51 = add i64 %indvars.iv50, 2
  %228 = add nuw nsw i32 %i2.028, 1
  %.pre = load i32*, i32** %187, align 8, !tbaa !241
  br label %.lr.ph29

.lr.ph25:                                         ; preds = %.lr.ph25.preheader77, %.lr.ph25
  %indvars.iv48 = phi i64 [ %indvars.iv.next49, %.lr.ph25 ], [ %indvars.iv48.ph, %.lr.ph25.preheader77 ]
  %229 = getelementptr inbounds i32, i32* %429, i64 %indvars.iv48
  store i32 1000, i32* %229, align 4, !tbaa !1
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %230 = icmp slt i64 %indvars.iv.next49, %159
  br i1 %230, label %.lr.ph25, label %._crit_edge26.loopexit, !llvm.loop !245

._crit_edge26.loopexit:                           ; preds = %.lr.ph25
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %middle.block, %._crit_edge26.loopexit
  %231 = call noalias i8* @malloc(i64 %160) #7
  %232 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %233 = bitcast i32*** %232 to i8**
  store i8* %231, i8** %233, align 8, !tbaa !160
  %234 = ptrtoint i8* %231 to i64
  %235 = inttoptr i64 %234 to i32**
  br i1 true, label %.lr.ph21.preheader, label %._crit_edge26.._crit_edge22_crit_edge

._crit_edge26.._crit_edge22_crit_edge:            ; preds = %._crit_edge26
  br label %._crit_edge22

.lr.ph21.preheader:                               ; preds = %._crit_edge26
  %236 = call noalias i8* @malloc(i64 4000) #7
  %237 = bitcast i8* %231 to i8**
  store i8* %236, i8** %237, align 8, !tbaa !5
  %238 = icmp sgt i32 %158, 1
  br i1 %238, label %.lr.ph21..lr.ph21_crit_edge.preheader, label %._crit_edge22

.lr.ph21..lr.ph21_crit_edge.preheader:            ; preds = %.lr.ph21.preheader
  br label %.lr.ph21..lr.ph21_crit_edge

.lr.ph21..lr.ph21_crit_edge:                      ; preds = %.lr.ph21..lr.ph21_crit_edge..lr.ph21..lr.ph21_crit_edge_crit_edge, %.lr.ph21..lr.ph21_crit_edge.preheader
  %.pre57 = phi i32** [ %.pre57.pre, %.lr.ph21..lr.ph21_crit_edge..lr.ph21..lr.ph21_crit_edge_crit_edge ], [ %235, %.lr.ph21..lr.ph21_crit_edge.preheader ]
  %indvars.iv.next4771 = phi i64 [ %indvars.iv.next47, %.lr.ph21..lr.ph21_crit_edge..lr.ph21..lr.ph21_crit_edge_crit_edge ], [ 1, %.lr.ph21..lr.ph21_crit_edge.preheader ]
  %239 = call noalias i8* @malloc(i64 4000) #7
  %240 = getelementptr inbounds i32*, i32** %.pre57, i64 %indvars.iv.next4771
  %241 = bitcast i32** %240 to i8**
  store i8* %239, i8** %241, align 8, !tbaa !5
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv.next4771, 1
  %242 = icmp slt i64 %indvars.iv.next47, %159
  br i1 %242, label %.lr.ph21..lr.ph21_crit_edge..lr.ph21..lr.ph21_crit_edge_crit_edge, label %._crit_edge22.loopexit

.lr.ph21..lr.ph21_crit_edge..lr.ph21..lr.ph21_crit_edge_crit_edge: ; preds = %.lr.ph21..lr.ph21_crit_edge
  %.pre57.pre = load i32**, i32*** %232, align 8, !tbaa !160
  br label %.lr.ph21..lr.ph21_crit_edge

._crit_edge22.loopexit:                           ; preds = %.lr.ph21..lr.ph21_crit_edge
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge26.._crit_edge22_crit_edge, %._crit_edge26.thread, %._crit_edge22.loopexit, %.lr.ph21.preheader
  %243 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 1
  store i32 0, i32* %243, align 4, !tbaa !157
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %._crit_edge22
  %244 = phi i32 [ 0, %._crit_edge22 ], [ %387, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %._crit_edge22 ], [ %indvars.iv.next, %._crit_edge ]
  %lo.018 = phi double [ undef, %._crit_edge22 ], [ %lo.1.lcssa, %._crit_edge ]
  %hi.017 = phi double [ undef, %._crit_edge22 ], [ %hi.1.lcssa, %._crit_edge ]
  %245 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 %indvars.iv
  %246 = load i32, i32* %245, align 4, !tbaa !1
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %248 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 %indvars.iv, i64 0
  %249 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 %indvars.iv, i64 1
  %250 = getelementptr inbounds [3 x i32], [3 x i32]* %myloc, i64 0, i64 %indvars.iv
  %251 = getelementptr inbounds [3 x double], [3 x double]* %prd, i64 0, i64 %indvars.iv
  %252 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 %indvars.iv
  %253 = icmp eq i64 %indvars.iv, 0
  %.pre58 = load i32*, i32** %169, align 8, !tbaa !237
  %.pre59 = load i32*, i32** %172, align 8, !tbaa !238
  %.pre60 = load i32*, i32** %175, align 8, !tbaa !239
  %.pre61 = load i32*, i32** %178, align 8, !tbaa !240
  %254 = trunc i64 %indvars.iv to i32
  br label %255

; <label>:255                                     ; preds = %375, %.lr.ph
  %256 = phi i32 [ %244, %.lr.ph ], [ %382, %375 ]
  %lo.113 = phi double [ %lo.018, %.lr.ph ], [ %lo.5, %375 ]
  %hi.112 = phi double [ %hi.017, %.lr.ph ], [ %hi.5, %375 ]
  %ineed.011 = phi i32 [ 0, %.lr.ph ], [ %383, %375 ]
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i32, i32* %.pre58, i64 %257
  store i32 0, i32* %258, align 4, !tbaa !1
  %259 = load i32, i32* %243, align 4, !tbaa !157
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %.pre59, i64 %260
  store i32 0, i32* %261, align 4, !tbaa !1
  %262 = load i32, i32* %243, align 4, !tbaa !157
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i32, i32* %.pre60, i64 %263
  store i32 0, i32* %264, align 4, !tbaa !1
  %265 = load i32, i32* %243, align 4, !tbaa !157
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i32, i32* %.pre61, i64 %266
  store i32 0, i32* %267, align 4, !tbaa !1
  %268 = and i32 %ineed.011, 1
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %322

; <label>:270                                     ; preds = %255
  %271 = load i32, i32* %248, align 8, !tbaa !1
  %272 = load i32, i32* %243, align 4, !tbaa !157
  %273 = sext i32 %272 to i64
  %274 = load i32*, i32** %181, align 8, !tbaa !161
  %275 = getelementptr inbounds i32, i32* %274, i64 %273
  store i32 %271, i32* %275, align 4, !tbaa !1
  %276 = load i32, i32* %249, align 4, !tbaa !1
  %277 = load i32, i32* %243, align 4, !tbaa !157
  %278 = sext i32 %277 to i64
  %279 = load i32*, i32** %184, align 8, !tbaa !164
  %280 = getelementptr inbounds i32, i32* %279, i64 %278
  store i32 %276, i32* %280, align 4, !tbaa !1
  %281 = load i32, i32* %250, align 4, !tbaa !1
  %282 = sdiv i32 %ineed.011, 2
  %283 = add nsw i32 %281, %282
  %284 = sitofp i32 %283 to double
  %285 = load double, double* %251, align 8, !tbaa !33
  %286 = fmul double %285, %284
  %287 = load i32, i32* %252, align 4, !tbaa !1
  %288 = sitofp i32 %287 to double
  %289 = fdiv double %286, %288
  br i1 %253, label %.thread3, label %290

; <label>:290                                     ; preds = %270
  switch i32 %254, label %295 [
    i32 1, label %.thread3
    i32 2, label %292
  ]

.thread3:                                         ; preds = %290, %270
  %.sink.in = phi double* [ %101, %270 ], [ %109, %290 ]
  %.ph = phi i1 [ false, %270 ], [ true, %290 ]
  %.sink = load double, double* %.sink.in, align 8, !tbaa !33
  %291 = fadd double %.sink, %cutneigh
  br label %295

; <label>:292                                     ; preds = %290
  %293 = load double, double* %135, align 8, !tbaa !90
  %294 = fadd double %293, %cutneigh
  br label %295

; <label>:295                                     ; preds = %292, %.thread3, %290
  %296 = phi i1 [ true, %292 ], [ false, %.thread3 ], [ false, %290 ]
  %297 = phi i1 [ false, %292 ], [ %.ph, %.thread3 ], [ false, %290 ]
  %hi.4 = phi double [ %294, %292 ], [ %291, %.thread3 ], [ %hi.112, %290 ]
  %298 = add nsw i32 %283, 1
  %299 = sitofp i32 %298 to double
  %300 = fmul double %299, %285
  %301 = fdiv double %300, %288
  %302 = fcmp olt double %hi.4, %301
  %hi.4. = select i1 %302, double %hi.4, double %301
  %303 = icmp eq i32 %281, 0
  br i1 %303, label %304, label %375

; <label>:304                                     ; preds = %295
  %305 = load i32, i32* %243, align 4, !tbaa !157
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i32, i32* %.pre58, i64 %306
  store i32 1, i32* %307, align 4, !tbaa !1
  br i1 %253, label %308, label %312

; <label>:308                                     ; preds = %304
  %309 = load i32, i32* %243, align 4, !tbaa !157
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i32, i32* %.pre59, i64 %310
  store i32 1, i32* %311, align 4, !tbaa !1
  br label %312

; <label>:312                                     ; preds = %308, %304
  br i1 %297, label %313, label %317

; <label>:313                                     ; preds = %312
  %314 = load i32, i32* %243, align 4, !tbaa !157
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %.pre60, i64 %315
  store i32 1, i32* %316, align 4, !tbaa !1
  br label %317

; <label>:317                                     ; preds = %313, %312
  br i1 %296, label %318, label %375

; <label>:318                                     ; preds = %317
  %319 = load i32, i32* %243, align 4, !tbaa !157
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds i32, i32* %.pre61, i64 %320
  store i32 1, i32* %321, align 4, !tbaa !1
  br label %375

; <label>:322                                     ; preds = %255
  %323 = load i32, i32* %249, align 4, !tbaa !1
  %324 = load i32, i32* %243, align 4, !tbaa !157
  %325 = sext i32 %324 to i64
  %326 = load i32*, i32** %181, align 8, !tbaa !161
  %327 = getelementptr inbounds i32, i32* %326, i64 %325
  store i32 %323, i32* %327, align 4, !tbaa !1
  %328 = load i32, i32* %248, align 8, !tbaa !1
  %329 = load i32, i32* %243, align 4, !tbaa !157
  %330 = sext i32 %329 to i64
  %331 = load i32*, i32** %184, align 8, !tbaa !164
  %332 = getelementptr inbounds i32, i32* %331, i64 %330
  store i32 %328, i32* %332, align 4, !tbaa !1
  %333 = load i32, i32* %250, align 4, !tbaa !1
  %334 = sdiv i32 %ineed.011, 2
  %335 = sub nsw i32 %333, %334
  %336 = add nsw i32 %335, 1
  %337 = sitofp i32 %336 to double
  %338 = load double, double* %251, align 8, !tbaa !33
  %339 = fmul double %338, %337
  %340 = load i32, i32* %252, align 4, !tbaa !1
  %341 = sitofp i32 %340 to double
  %342 = fdiv double %339, %341
  br i1 %253, label %.thread7, label %343

; <label>:343                                     ; preds = %322
  switch i32 %254, label %348 [
    i32 1, label %.thread7
    i32 2, label %345
  ]

.thread7:                                         ; preds = %343, %322
  %.sink8.in = phi double* [ %103, %322 ], [ %126, %343 ]
  %.ph6 = phi i1 [ false, %322 ], [ true, %343 ]
  %.sink8 = load double, double* %.sink8.in, align 8, !tbaa !33
  %344 = fsub double %.sink8, %cutneigh
  br label %348

; <label>:345                                     ; preds = %343
  %346 = load double, double* %140, align 8, !tbaa !89
  %347 = fsub double %346, %cutneigh
  br label %348

; <label>:348                                     ; preds = %345, %.thread7, %343
  %349 = phi i1 [ true, %345 ], [ false, %.thread7 ], [ false, %343 ]
  %350 = phi i1 [ false, %345 ], [ %.ph6, %.thread7 ], [ false, %343 ]
  %lo.4 = phi double [ %347, %345 ], [ %344, %.thread7 ], [ %lo.113, %343 ]
  %351 = sitofp i32 %335 to double
  %352 = fmul double %351, %338
  %353 = fdiv double %352, %341
  %354 = fcmp ogt double %lo.4, %353
  %lo.4. = select i1 %354, double %lo.4, double %353
  %355 = add nsw i32 %340, -1
  %356 = icmp eq i32 %333, %355
  br i1 %356, label %357, label %375

; <label>:357                                     ; preds = %348
  %358 = load i32, i32* %243, align 4, !tbaa !157
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i32, i32* %.pre58, i64 %359
  store i32 1, i32* %360, align 4, !tbaa !1
  br i1 %253, label %361, label %365

; <label>:361                                     ; preds = %357
  %362 = load i32, i32* %243, align 4, !tbaa !157
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i32, i32* %.pre59, i64 %363
  store i32 -1, i32* %364, align 4, !tbaa !1
  br label %365

; <label>:365                                     ; preds = %361, %357
  br i1 %350, label %366, label %370

; <label>:366                                     ; preds = %365
  %367 = load i32, i32* %243, align 4, !tbaa !157
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i32, i32* %.pre60, i64 %368
  store i32 -1, i32* %369, align 4, !tbaa !1
  br label %370

; <label>:370                                     ; preds = %366, %365
  br i1 %349, label %371, label %375

; <label>:371                                     ; preds = %370
  %372 = load i32, i32* %243, align 4, !tbaa !157
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i32, i32* %.pre61, i64 %373
  store i32 -1, i32* %374, align 4, !tbaa !1
  br label %375

; <label>:375                                     ; preds = %371, %370, %348, %318, %317, %295
  %hi.5 = phi double [ %hi.4., %318 ], [ %hi.4., %317 ], [ %hi.4., %295 ], [ %342, %371 ], [ %342, %370 ], [ %342, %348 ]
  %lo.5 = phi double [ %289, %318 ], [ %289, %317 ], [ %289, %295 ], [ %lo.4., %371 ], [ %lo.4., %370 ], [ %lo.4., %348 ]
  %376 = load i32, i32* %243, align 4, !tbaa !157
  %377 = sext i32 %376 to i64
  %378 = load double*, double** %162, align 8, !tbaa !235
  %379 = getelementptr inbounds double, double* %378, i64 %377
  store double %lo.5, double* %379, align 8, !tbaa !33
  %380 = load double*, double** %165, align 8, !tbaa !236
  %381 = getelementptr inbounds double, double* %380, i64 %377
  store double %hi.5, double* %381, align 8, !tbaa !33
  %382 = add nsw i32 %376, 1
  store i32 %382, i32* %243, align 4, !tbaa !157
  %383 = add nuw nsw i32 %ineed.011, 1
  %384 = load i32, i32* %245, align 4, !tbaa !1
  %385 = shl nsw i32 %384, 1
  %386 = icmp slt i32 %383, %385
  br i1 %386, label %255, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %375
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %387 = phi i32 [ %244, %.preheader ], [ %382, %._crit_edge.loopexit ]
  %lo.1.lcssa = phi double [ %lo.018, %.preheader ], [ %lo.5, %._crit_edge.loopexit ]
  %hi.1.lcssa = phi double [ %hi.017, %.preheader ], [ %hi.5, %._crit_edge.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.loopexit.loopexit, label %.preheader

.loopexit.loopexit:                               ; preds = %._crit_edge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %77, %74
  %.0 = phi i32 [ 1, %77 ], [ 1, %74 ], [ 0, %.loopexit.loopexit ]
  call void @llvm.lifetime.end(i64 4, i8* %5) #7
  call void @llvm.lifetime.end(i64 12, i8* %4) #7
  call void @llvm.lifetime.end(i64 24, i8* %3) #7
  call void @llvm.lifetime.end(i64 12, i8* %2) #7
  call void @llvm.lifetime.end(i64 4, i8* %1) #7
  ret i32 %.0

.lr.ph29.preheader.1:                             ; preds = %._crit_edge30
  %388 = sext i32 %iswap.1.lcssa to i64
  br label %.lr.ph29.1

.lr.ph29.1:                                       ; preds = %.lr.ph29.1, %.lr.ph29.preheader.1
  %indvars.iv50.1 = phi i64 [ %388, %.lr.ph29.preheader.1 ], [ %indvars.iv.next51.1, %.lr.ph29.1 ]
  %i2.028.1 = phi i32 [ 1, %.lr.ph29.preheader.1 ], [ %400, %.lr.ph29.1 ]
  %iswap.127.1 = phi i32 [ %iswap.1.lcssa, %.lr.ph29.preheader.1 ], [ %401, %.lr.ph29.1 ]
  %389 = load i32, i32* %cartesian, align 4, !tbaa !1
  %390 = load i32*, i32** %187, align 8, !tbaa !241
  %391 = getelementptr inbounds i32, i32* %390, i64 %indvars.iv50.1
  %392 = add nsw i64 %indvars.iv50.1, 1
  %393 = getelementptr inbounds i32, i32* %390, i64 %392
  %394 = call i32 @MPI_Cart_shift(i32 %389, i32 1, i32 %i2.028.1, i32* %391, i32* %393)
  %395 = load i32, i32* %cartesian, align 4, !tbaa !1
  %396 = load i32*, i32** %190, align 8, !tbaa !242
  %397 = getelementptr inbounds i32, i32* %396, i64 %392
  %398 = getelementptr inbounds i32, i32* %396, i64 %indvars.iv50.1
  %399 = call i32 @MPI_Cart_shift(i32 %395, i32 1, i32 %i2.028.1, i32* %397, i32* %398)
  %400 = add nuw nsw i32 %i2.028.1, 1
  %401 = add nsw i32 %iswap.127.1, 2
  %402 = load i32, i32* %150, align 4, !tbaa !1
  %403 = icmp slt i32 %i2.028.1, %402
  %indvars.iv.next51.1 = add i64 %indvars.iv50.1, 2
  br i1 %403, label %.lr.ph29.1, label %._crit_edge30.1.loopexit

._crit_edge30.1.loopexit:                         ; preds = %.lr.ph29.1
  br label %._crit_edge30.1

._crit_edge30.1:                                  ; preds = %._crit_edge30.1.loopexit, %._crit_edge30
  %iswap.1.lcssa.1 = phi i32 [ %iswap.1.lcssa, %._crit_edge30 ], [ %401, %._crit_edge30.1.loopexit ]
  %404 = load i32, i32* %155, align 4, !tbaa !1
  %405 = icmp slt i32 %404, 1
  br i1 %405, label %._crit_edge30.2, label %.lr.ph29.preheader.2

.lr.ph29.preheader.2:                             ; preds = %._crit_edge30.1
  %406 = sext i32 %iswap.1.lcssa.1 to i64
  br label %.lr.ph29.2

.lr.ph29.2:                                       ; preds = %.lr.ph29.2, %.lr.ph29.preheader.2
  %indvars.iv50.2 = phi i64 [ %406, %.lr.ph29.preheader.2 ], [ %indvars.iv.next51.2, %.lr.ph29.2 ]
  %i2.028.2 = phi i32 [ 1, %.lr.ph29.preheader.2 ], [ %418, %.lr.ph29.2 ]
  %407 = load i32, i32* %cartesian, align 4, !tbaa !1
  %408 = load i32*, i32** %187, align 8, !tbaa !241
  %409 = getelementptr inbounds i32, i32* %408, i64 %indvars.iv50.2
  %410 = add nsw i64 %indvars.iv50.2, 1
  %411 = getelementptr inbounds i32, i32* %408, i64 %410
  %412 = call i32 @MPI_Cart_shift(i32 %407, i32 2, i32 %i2.028.2, i32* %409, i32* %411)
  %413 = load i32, i32* %cartesian, align 4, !tbaa !1
  %414 = load i32*, i32** %190, align 8, !tbaa !242
  %415 = getelementptr inbounds i32, i32* %414, i64 %410
  %416 = getelementptr inbounds i32, i32* %414, i64 %indvars.iv50.2
  %417 = call i32 @MPI_Cart_shift(i32 %413, i32 2, i32 %i2.028.2, i32* %415, i32* %416)
  %418 = add nuw nsw i32 %i2.028.2, 1
  %419 = load i32, i32* %155, align 4, !tbaa !1
  %420 = icmp slt i32 %i2.028.2, %419
  %indvars.iv.next51.2 = add i64 %indvars.iv50.2, 2
  br i1 %420, label %.lr.ph29.2, label %._crit_edge30.2.loopexit

._crit_edge30.2.loopexit:                         ; preds = %.lr.ph29.2
  br label %._crit_edge30.2

._crit_edge30.2:                                  ; preds = %._crit_edge30.2.loopexit, %._crit_edge30.1
  %421 = call i32 @MPI_Comm_free(i32* nonnull %cartesian)
  %422 = call noalias i8* @malloc(i64 %167) #7
  %423 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 16
  %424 = bitcast i32** %423 to i8**
  store i8* %422, i8** %424, align 8, !tbaa !167
  %425 = call noalias i8* @malloc(i64 %167) #7
  %426 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 18
  %427 = bitcast i32** %426 to i8**
  store i8* %425, i8** %427, align 8, !tbaa !246
  %428 = icmp sgt i32 %157, 0
  %429 = bitcast i8* %425 to i32*
  br i1 %428, label %.lr.ph25.preheader, label %._crit_edge26.thread

.lr.ph25.preheader:                               ; preds = %._crit_edge30.2
  %430 = icmp sgt i64 %159, 1
  %smax = select i1 %430, i64 %159, i64 1
  %min.iters.check = icmp ult i64 %smax, 32
  br i1 %min.iters.check, label %.lr.ph25.preheader77, label %min.iters.checked

.lr.ph25.preheader77:                             ; preds = %middle.block, %min.iters.checked, %.lr.ph25.preheader
  %indvars.iv48.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %.lr.ph25.preheader ], [ %n.vec, %middle.block ]
  br label %.lr.ph25

min.iters.checked:                                ; preds = %.lr.ph25.preheader
  %n.vec = and i64 %smax, -32
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %.lr.ph25.preheader77, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %431 = add nsw i64 %smax, -32
  %432 = lshr i64 %431, 5
  %433 = add nuw nsw i64 %432, 1
  %xtraiter = and i64 %433, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %434 = getelementptr inbounds i32, i32* %429, i64 %index.prol
  %435 = bitcast i32* %434 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %435, align 4, !tbaa !1
  %436 = getelementptr i32, i32* %434, i64 8
  %437 = bitcast i32* %436 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %437, align 4, !tbaa !1
  %438 = getelementptr i32, i32* %434, i64 16
  %439 = bitcast i32* %438 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %439, align 4, !tbaa !1
  %440 = getelementptr i32, i32* %434, i64 24
  %441 = bitcast i32* %440 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %441, align 4, !tbaa !1
  %index.next.prol = add i64 %index.prol, 32
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !247

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol, %vector.body.preheader.split.loopexit ]
  %442 = icmp ult i64 %431, 96
  br i1 %442, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.3, %vector.body ]
  %443 = getelementptr inbounds i32, i32* %429, i64 %index
  %444 = bitcast i32* %443 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %444, align 4, !tbaa !1
  %445 = getelementptr i32, i32* %443, i64 8
  %446 = bitcast i32* %445 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %446, align 4, !tbaa !1
  %447 = getelementptr i32, i32* %443, i64 16
  %448 = bitcast i32* %447 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %448, align 4, !tbaa !1
  %449 = getelementptr i32, i32* %443, i64 24
  %450 = bitcast i32* %449 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %450, align 4, !tbaa !1
  %index.next = add i64 %index, 32
  %451 = getelementptr inbounds i32, i32* %429, i64 %index.next
  %452 = bitcast i32* %451 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %452, align 4, !tbaa !1
  %453 = getelementptr i32, i32* %451, i64 8
  %454 = bitcast i32* %453 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %454, align 4, !tbaa !1
  %455 = getelementptr i32, i32* %451, i64 16
  %456 = bitcast i32* %455 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %456, align 4, !tbaa !1
  %457 = getelementptr i32, i32* %451, i64 24
  %458 = bitcast i32* %457 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %458, align 4, !tbaa !1
  %index.next.1 = add i64 %index, 64
  %459 = getelementptr inbounds i32, i32* %429, i64 %index.next.1
  %460 = bitcast i32* %459 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %460, align 4, !tbaa !1
  %461 = getelementptr i32, i32* %459, i64 8
  %462 = bitcast i32* %461 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %462, align 4, !tbaa !1
  %463 = getelementptr i32, i32* %459, i64 16
  %464 = bitcast i32* %463 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %464, align 4, !tbaa !1
  %465 = getelementptr i32, i32* %459, i64 24
  %466 = bitcast i32* %465 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %466, align 4, !tbaa !1
  %index.next.2 = add i64 %index, 96
  %467 = getelementptr inbounds i32, i32* %429, i64 %index.next.2
  %468 = bitcast i32* %467 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %468, align 4, !tbaa !1
  %469 = getelementptr i32, i32* %467, i64 8
  %470 = bitcast i32* %469 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %470, align 4, !tbaa !1
  %471 = getelementptr i32, i32* %467, i64 16
  %472 = bitcast i32* %471 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %472, align 4, !tbaa !1
  %473 = getelementptr i32, i32* %467, i64 24
  %474 = bitcast i32* %473 to <8 x i32>*
  store <8 x i32> <i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000, i32 1000>, <8 x i32>* %474, align 4, !tbaa !1
  %index.next.3 = add i64 %index, 128
  %475 = icmp eq i64 %index.next.3, %n.vec
  br i1 %475, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !248

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %cmp.n = icmp eq i64 %smax, %n.vec
  br i1 %cmp.n, label %._crit_edge26, label %.lr.ph25.preheader77

._crit_edge26.thread:                             ; preds = %._crit_edge30.2
  %476 = call noalias i8* @malloc(i64 %160) #7
  %477 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %478 = bitcast i32*** %477 to i8**
  store i8* %476, i8** %478, align 8, !tbaa !160
  br label %._crit_edge22
}

declare i32 @MPI_Cart_create(i32, i32, i32*, i32*, i32, i32*) #2

declare i32 @MPI_Cart_get(i32, i32, i32*, i32*, i32*) #2

declare i32 @MPI_Cart_shift(i32, i32, i32, i32*, i32*) #2

declare i32 @MPI_Comm_free(i32*) #2

; Function Attrs: uwtable
define void @_ZN4Comm11communicateER4Atom(%class.Comm* nocapture readonly %this, %class.Atom* dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %pbc_flags = alloca [4 x i32], align 16
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @19)
  %2 = bitcast [4 x i32]* %pbc_flags to i8*
  call void @llvm.lifetime.start(i64 16, i8* %2) #7
  %3 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #7
  %4 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %4) #7
  %5 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 1
  %6 = load i32, i32* %5, align 4, !tbaa !157
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %8 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 2
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 0
  %10 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 3
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 1
  %12 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 2
  %14 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 5
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 3
  %16 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 6
  %17 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %18 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %19 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 12
  %20 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 0
  %21 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 7
  %22 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 16
  %23 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %24 = bitcast double** %23 to i8**
  %25 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 9
  %26 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 13
  %27 = bitcast double** %18 to i8**
  %28 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 8
  br label %29

; <label>:29                                      ; preds = %81, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %81 ]
  %30 = load i32*, i32** %8, align 8, !tbaa !237
  %31 = getelementptr inbounds i32, i32* %30, i64 %indvars.iv
  %32 = load i32, i32* %31, align 4, !tbaa !1
  store i32 %32, i32* %9, align 16, !tbaa !1
  %33 = load i32*, i32** %10, align 8, !tbaa !238
  %34 = getelementptr inbounds i32, i32* %33, i64 %indvars.iv
  %35 = load i32, i32* %34, align 4, !tbaa !1
  store i32 %35, i32* %11, align 4, !tbaa !1
  %36 = load i32*, i32** %12, align 8, !tbaa !239
  %37 = getelementptr inbounds i32, i32* %36, i64 %indvars.iv
  %38 = load i32, i32* %37, align 4, !tbaa !1
  store i32 %38, i32* %13, align 8, !tbaa !1
  %39 = load i32*, i32** %14, align 8, !tbaa !240
  %40 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv
  %41 = load i32, i32* %40, align 4, !tbaa !1
  store i32 %41, i32* %15, align 4, !tbaa !1
  %42 = load i32*, i32** %16, align 8, !tbaa !158
  %43 = getelementptr inbounds i32, i32* %42, i64 %indvars.iv
  %44 = load i32, i32* %43, align 4, !tbaa !1
  %45 = load i32**, i32*** %17, align 8, !tbaa !160
  %46 = getelementptr inbounds i32*, i32** %45, i64 %indvars.iv
  %47 = load i32*, i32** %46, align 8, !tbaa !5
  %48 = load double*, double** %18, align 8, !tbaa !159
  call void @_ZN4Atom9pack_commEiPiPdS0_(%class.Atom* nonnull %atom, i32 %44, i32* %47, double* %48, i32* %9)
  %49 = load i32*, i32** %19, align 8, !tbaa !161
  %50 = getelementptr inbounds i32, i32* %49, i64 %indvars.iv
  %51 = load i32, i32* %50, align 4, !tbaa !1
  %52 = load i32, i32* %20, align 8, !tbaa !95
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %81, label %54

; <label>:54                                      ; preds = %29
  %55 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %81, label %57

; <label>:57                                      ; preds = %54
  %58 = load i8*, i8** %24, align 8, !tbaa !162
  %59 = load i32*, i32** %25, align 8, !tbaa !163
  %60 = getelementptr inbounds i32, i32* %59, i64 %indvars.iv
  %61 = load i32, i32* %60, align 4, !tbaa !1
  %62 = load i32*, i32** %26, align 8, !tbaa !164
  %63 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv
  %64 = load i32, i32* %63, align 4, !tbaa !1
  %65 = invoke i32 @MPI_Irecv(i8* %58, i32 %61, i32 1275070475, i32 %64, i32 0, i32 1140850688, i32* nonnull %request)
          to label %66 unwind label %78

; <label>:66                                      ; preds = %57
  %67 = load i8*, i8** %27, align 8, !tbaa !159
  %68 = load i32*, i32** %28, align 8, !tbaa !165
  %69 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv
  %70 = load i32, i32* %69, align 4, !tbaa !1
  %71 = load i32*, i32** %19, align 8, !tbaa !161
  %72 = getelementptr inbounds i32, i32* %71, i64 %indvars.iv
  %73 = load i32, i32* %72, align 4, !tbaa !1
  %74 = invoke i32 @MPI_Send(i8* %67, i32 %70, i32 1275070475, i32 %73, i32 0, i32 1140850688)
          to label %75 unwind label %78

; <label>:75                                      ; preds = %66
  %76 = invoke i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
          to label %77 unwind label %78

; <label>:77                                      ; preds = %75
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %81

; <label>:78                                      ; preds = %75, %66, %57
  %79 = landingpad { i8*, i32 }
          catch i8* null
  %80 = extractvalue { i8*, i32 } %79, 0
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  call void @__clang_call_terminate(i8* %80) #17
  unreachable

; <label>:81                                      ; preds = %77, %54, %29
  %buf.0.in = phi double** [ %18, %29 ], [ %23, %54 ], [ %23, %77 ]
  %buf.0 = load double*, double** %buf.0.in, align 8, !tbaa !5
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %82 = load i32*, i32** %21, align 8, !tbaa !166
  %83 = getelementptr inbounds i32, i32* %82, i64 %indvars.iv
  %84 = load i32, i32* %83, align 4, !tbaa !1
  %85 = load i32*, i32** %22, align 8, !tbaa !167
  %86 = getelementptr inbounds i32, i32* %85, i64 %indvars.iv
  %87 = load i32, i32* %86, align 4, !tbaa !1
  call void @_ZN4Atom11unpack_commEiiPd(%class.Atom* nonnull %atom, i32 %84, i32 %87, double* %buf.0)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %88 = load i32, i32* %5, align 4, !tbaa !157
  %89 = sext i32 %88 to i64
  %90 = icmp slt i64 %indvars.iv.next, %89
  br i1 %90, label %29, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %81
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 20, i8* %4) #7
  call void @llvm.lifetime.end(i64 4, i8* %3) #7
  call void @llvm.lifetime.end(i64 16, i8* %2) #7
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Comm19reverse_communicateER4Atom(%class.Comm* nocapture readonly %this, %class.Atom* dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @19)
  %2 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %3 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %3) #7
  %4 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !157
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %7 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 7
  %8 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 16
  %9 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %10 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 12
  %11 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 0
  %12 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 6
  %13 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %14 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %15 = bitcast double** %14 to i8**
  %16 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 11
  %17 = bitcast double** %9 to i8**
  %18 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 10
  %19 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 13
  %20 = sext i32 %5 to i64
  br label %21

; <label>:21                                      ; preds = %61, %.lr.ph
  %indvars.iv = phi i64 [ %20, %.lr.ph ], [ %indvars.iv.next, %61 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %22 = load i32*, i32** %7, align 8, !tbaa !166
  %23 = getelementptr inbounds i32, i32* %22, i64 %indvars.iv.next
  %24 = load i32, i32* %23, align 4, !tbaa !1
  %25 = load i32*, i32** %8, align 8, !tbaa !167
  %26 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv.next
  %27 = load i32, i32* %26, align 4, !tbaa !1
  %28 = load double*, double** %9, align 8, !tbaa !159
  call void @_ZN4Atom12pack_reverseEiiPd(%class.Atom* nonnull %atom, i32 %24, i32 %27, double* %28)
  %29 = load i32*, i32** %10, align 8, !tbaa !161
  %30 = getelementptr inbounds i32, i32* %29, i64 %indvars.iv.next
  %31 = load i32, i32* %30, align 4, !tbaa !1
  %32 = load i32, i32* %11, align 8, !tbaa !95
  %33 = icmp eq i32 %31, %32
  br i1 %33, label %61, label %34

; <label>:34                                      ; preds = %21
  %35 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %61, label %37

; <label>:37                                      ; preds = %34
  %38 = load i8*, i8** %15, align 8, !tbaa !162
  %39 = load i32*, i32** %16, align 8, !tbaa !244
  %40 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next
  %41 = load i32, i32* %40, align 4, !tbaa !1
  %42 = load i32*, i32** %10, align 8, !tbaa !161
  %43 = getelementptr inbounds i32, i32* %42, i64 %indvars.iv.next
  %44 = load i32, i32* %43, align 4, !tbaa !1
  %45 = invoke i32 @MPI_Irecv(i8* %38, i32 %41, i32 1275070475, i32 %44, i32 0, i32 1140850688, i32* nonnull %request)
          to label %46 unwind label %58

; <label>:46                                      ; preds = %37
  %47 = load i8*, i8** %17, align 8, !tbaa !159
  %48 = load i32*, i32** %18, align 8, !tbaa !243
  %49 = getelementptr inbounds i32, i32* %48, i64 %indvars.iv.next
  %50 = load i32, i32* %49, align 4, !tbaa !1
  %51 = load i32*, i32** %19, align 8, !tbaa !164
  %52 = getelementptr inbounds i32, i32* %51, i64 %indvars.iv.next
  %53 = load i32, i32* %52, align 4, !tbaa !1
  %54 = invoke i32 @MPI_Send(i8* %47, i32 %50, i32 1275070475, i32 %53, i32 0, i32 1140850688)
          to label %55 unwind label %58

; <label>:55                                      ; preds = %46
  %56 = invoke i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
          to label %57 unwind label %58

; <label>:57                                      ; preds = %55
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %61

; <label>:58                                      ; preds = %55, %46, %37
  %59 = landingpad { i8*, i32 }
          catch i8* null
  %60 = extractvalue { i8*, i32 } %59, 0
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  call void @__clang_call_terminate(i8* %60) #17
  unreachable

; <label>:61                                      ; preds = %57, %34, %21
  %buf.0.in = phi double** [ %9, %21 ], [ %14, %34 ], [ %14, %57 ]
  %buf.0 = load double*, double** %buf.0.in, align 8, !tbaa !5
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %62 = load i32*, i32** %12, align 8, !tbaa !158
  %63 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv.next
  %64 = load i32, i32* %63, align 4, !tbaa !1
  %65 = load i32**, i32*** %13, align 8, !tbaa !160
  %66 = getelementptr inbounds i32*, i32** %65, i64 %indvars.iv.next
  %67 = load i32*, i32** %66, align 8, !tbaa !5
  call void @_ZN4Atom14unpack_reverseEiPiPd(%class.Atom* nonnull %atom, i32 %64, i32* %67, double* %buf.0)
  %68 = icmp sgt i64 %indvars.iv, 1
  br i1 %68, label %21, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %61
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 20, i8* %3) #7
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Comm8exchangeER4Atom(%class.Comm* %this, %class.Atom* dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %nsend = alloca i32, align 4
  %nrecv1 = alloca i32, align 4
  %nrecv2 = alloca i32, align 4
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @19)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb7 = alloca i32, align 4
  %.omp.ub8 = alloca i32, align 4
  %.omp.stride9 = alloca i32, align 4
  %.omp.is_last10 = alloca i32, align 4
  %.omp.lb20 = alloca i32, align 4
  %.omp.ub21 = alloca i32, align 4
  %.omp.stride22 = alloca i32, align 4
  %.omp.is_last23 = alloca i32, align 4
  %.omp.lb29 = alloca i32, align 4
  %.omp.ub30 = alloca i32, align 4
  %.omp.stride31 = alloca i32, align 4
  %.omp.is_last32 = alloca i32, align 4
  %2 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 31
  %3 = load i32, i32* %2, align 4, !tbaa !39
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  tail call void @_ZN4Comm12exchange_allER4Atom(%class.Comm* nonnull %this, %class.Atom* nonnull dereferenceable(224) %atom)
  br label %561

; <label>:6                                       ; preds = %0
  %7 = bitcast i32* %nsend to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #7
  %8 = bitcast i32* %nrecv1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #7
  %9 = bitcast i32* %nrecv2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #7
  %10 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #7
  %11 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %11) #7
  tail call void @_ZN4Atom3pbcEv(%class.Atom* nonnull %atom)
  %12 = tail call i32 @omp_get_thread_num() #7
  %13 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  %15 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %16 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %17 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 29
  %18 = bitcast i32* %.omp.lb to i8*
  %19 = bitcast i32* %.omp.ub to i8*
  %20 = bitcast i32* %.omp.stride to i8*
  %21 = bitcast i32* %.omp.is_last to i8*
  %22 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 35
  %23 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 37
  %24 = bitcast i32* %.omp.lb7 to i8*
  %25 = bitcast i32* %.omp.ub8 to i8*
  %26 = bitcast i32* %.omp.stride9 to i8*
  %27 = bitcast i32* %.omp.is_last10 to i8*
  %28 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 39
  %29 = sext i32 %12 to i64
  %30 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 40
  %31 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 38
  %32 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 43
  %33 = bitcast i32* %.omp.lb20 to i8*
  %34 = bitcast i32* %.omp.ub21 to i8*
  %35 = bitcast i32* %.omp.stride22 to i8*
  %36 = bitcast i32* %.omp.is_last23 to i8*
  %37 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %38 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 36
  %39 = bitcast i32* %.omp.lb29 to i8*
  %40 = bitcast i32* %.omp.ub30 to i8*
  %41 = bitcast i32* %.omp.stride31 to i8*
  %42 = bitcast i32* %.omp.is_last32 to i8*
  %43 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 23
  %44 = bitcast double** %37 to i8**
  %45 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %46 = bitcast double** %45 to i8**
  %47 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  %48 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 42
  %49 = bitcast i32** %28 to i8**
  %50 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 41
  %51 = bitcast i32** %22 to i8**
  %52 = bitcast i32** %38 to i8**
  %53 = bitcast i32** %23 to i8**
  %54 = bitcast i32** %30 to i8**
  %55 = bitcast i32*** %31 to i8**
  %56 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %57 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %58 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %59 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  br label %60

; <label>:60                                      ; preds = %558, %6
  %indvars.iv125 = phi i64 [ 0, %6 ], [ %indvars.iv.next126, %558 ]
  %61 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 %indvars.iv125
  %62 = load i32, i32* %61, align 4, !tbaa !1
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %558, label %64

; <label>:64                                      ; preds = %60
  store i32 0, i32* %nsend, align 4, !tbaa !1
  %65 = trunc i64 %indvars.iv125 to i32
  switch i32 %65, label %67 [
    i32 0, label %68
    i32 1, label %66
  ]

; <label>:66                                      ; preds = %64
  br label %68

; <label>:67                                      ; preds = %64
  br label %68

; <label>:68                                      ; preds = %67, %66, %64
  %hi.0.in = phi double* [ %59, %66 ], [ %14, %67 ], [ %57, %64 ]
  %lo.0.in = phi double* [ %58, %66 ], [ %13, %67 ], [ %56, %64 ]
  %lo.0 = load double, double* %lo.0.in, align 8, !tbaa !33
  %hi.0 = load double, double* %hi.0.in, align 8, !tbaa !33
  %69 = load double*, double** %15, align 8, !tbaa !100
  %70 = load i32, i32* %16, align 4, !tbaa !84
  %71 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %135, label %73

; <label>:73                                      ; preds = %68
  %74 = load i32, i32* %48, align 4, !tbaa !234
  %75 = icmp sgt i32 %70, %74
  br i1 %75, label %76, label %87

; <label>:76                                      ; preds = %73
  %77 = sext i32 %70 to i64
  %78 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %77, i64 4)
  %79 = extractvalue { i64, i1 } %78, 1
  %80 = extractvalue { i64, i1 } %78, 0
  %81 = select i1 %79, i64 -1, i64 %80
  %82 = invoke noalias i8* @_Znam(i64 %81) #18
          to label %83 unwind label %84

; <label>:83                                      ; preds = %76
  store i8* %82, i8** %49, align 8, !tbaa !249
  store i32 %70, i32* %48, align 4, !tbaa !234
  br label %87

; <label>:84                                      ; preds = %106, %104, %102, %100, %93, %76
  %85 = landingpad { i8*, i32 }
          catch i8* null
  %86 = extractvalue { i8*, i32 } %85, 0
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %565

; <label>:87                                      ; preds = %83, %73
  %88 = load i32, i32* %50, align 8, !tbaa !233
  %89 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %90 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %89, i64 0, i32 3
  %91 = load i32, i32* %90, align 4, !tbaa !18
  %92 = icmp slt i32 %88, %91
  br i1 %92, label %93, label %.loopexit

; <label>:93                                      ; preds = %87
  store i32 %91, i32* %50, align 8, !tbaa !233
  %94 = sext i32 %91 to i64
  %95 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %94, i64 4)
  %96 = extractvalue { i64, i1 } %95, 1
  %97 = extractvalue { i64, i1 } %95, 0
  %98 = select i1 %96, i64 -1, i64 %97
  %99 = invoke noalias i8* @_Znam(i64 %98) #18
          to label %100 unwind label %84

; <label>:100                                     ; preds = %93
  store i8* %99, i8** %51, align 8, !tbaa !250
  %101 = invoke noalias i8* @_Znam(i64 %98) #18
          to label %102 unwind label %84

; <label>:102                                     ; preds = %100
  store i8* %101, i8** %52, align 8, !tbaa !251
  %103 = invoke noalias i8* @_Znam(i64 %98) #18
          to label %104 unwind label %84

; <label>:104                                     ; preds = %102
  store i8* %103, i8** %53, align 8, !tbaa !252
  %105 = invoke noalias i8* @_Znam(i64 %98) #18
          to label %106 unwind label %84

; <label>:106                                     ; preds = %104
  store i8* %105, i8** %54, align 8, !tbaa !253
  %107 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %94, i64 8)
  %108 = extractvalue { i64, i1 } %107, 1
  %109 = extractvalue { i64, i1 } %107, 0
  %110 = select i1 %108, i64 -1, i64 %109
  %111 = bitcast i8* %105 to i32*
  %112 = ptrtoint i8* %105 to i64
  %113 = inttoptr i64 %112 to i32*
  %114 = invoke noalias i8* @_Znam(i64 %110) #18
          to label %115 unwind label %84

; <label>:115                                     ; preds = %106
  store i8* %114, i8** %55, align 8, !tbaa !254
  %116 = icmp sgt i32 %91, 0
  %117 = ptrtoint i8* %114 to i64
  %118 = inttoptr i64 %117 to i32**
  br i1 %116, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %115
  %.pre = load i32, i32* %47, align 8, !tbaa !231
  store i32 %.pre, i32* %111, align 4, !tbaa !1
  %119 = sext i32 %.pre to i64
  %120 = shl nsw i64 %119, 2
  %121 = call noalias i8* @malloc(i64 %120) #7
  %122 = bitcast i8* %114 to i8**
  store i8* %121, i8** %122, align 8, !tbaa !5
  %123 = icmp sgt i32 %91, 1
  br i1 %123, label %.lr.ph..lr.ph_crit_edge.preheader, label %.loopexit

.lr.ph..lr.ph_crit_edge.preheader:                ; preds = %.lr.ph.preheader
  br label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge, %.lr.ph..lr.ph_crit_edge.preheader
  %.pre128 = phi i32** [ %.pre128.pre, %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge ], [ %118, %.lr.ph..lr.ph_crit_edge.preheader ]
  %.pre127 = phi i32* [ %.pre127.pre, %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge ], [ %113, %.lr.ph..lr.ph_crit_edge.preheader ]
  %indvars.iv.next142 = phi i64 [ %indvars.iv.next, %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge ], [ 1, %.lr.ph..lr.ph_crit_edge.preheader ]
  %124 = phi i32 [ %126, %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge ], [ %.pre, %.lr.ph..lr.ph_crit_edge.preheader ]
  %125 = getelementptr inbounds i32, i32* %.pre127, i64 %indvars.iv.next142
  store i32 %124, i32* %125, align 4, !tbaa !1
  %126 = load i32, i32* %47, align 8, !tbaa !231
  %127 = sext i32 %126 to i64
  %128 = shl nsw i64 %127, 2
  %129 = call noalias i8* @malloc(i64 %128) #7
  %130 = getelementptr inbounds i32*, i32** %.pre128, i64 %indvars.iv.next142
  %131 = bitcast i32** %130 to i8**
  store i8* %129, i8** %131, align 8, !tbaa !5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next142, 1
  %132 = load i32, i32* %50, align 8, !tbaa !233
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %indvars.iv.next, %133
  br i1 %134, label %.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge, label %.loopexit.loopexit

.lr.ph..lr.ph_crit_edge..lr.ph..lr.ph_crit_edge_crit_edge: ; preds = %.lr.ph..lr.ph_crit_edge
  %.pre127.pre = load i32*, i32** %30, align 8, !tbaa !253
  %.pre128.pre = load i32**, i32*** %31, align 8, !tbaa !254
  br label %.lr.ph..lr.ph_crit_edge

.loopexit.loopexit:                               ; preds = %.lr.ph..lr.ph_crit_edge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.lr.ph.preheader, %115, %87
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %135

; <label>:135                                     ; preds = %.loopexit, %68
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  store i32 0, i32* %nsend, align 4, !tbaa !1
  %136 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %137 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %136, i64 0, i32 3
  %138 = load i32, i32* %137, align 4, !tbaa !18
  %139 = add nsw i32 %138, -1
  %140 = icmp sgt i32 %138, 0
  br i1 %140, label %141, label %156

; <label>:141                                     ; preds = %135
  call void @llvm.lifetime.start(i64 4, i8* %18) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %19) #7
  store i32 %139, i32* %.omp.ub, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %20) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %21) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %142 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %143 = icmp sgt i32 %142, %139
  %144 = select i1 %143, i32 %139, i32 %142
  store i32 %144, i32* %.omp.ub, align 4, !tbaa !1
  %145 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %146 = icmp sgt i32 %145, %144
  br i1 %146, label %._crit_edge, label %.lr.ph43

.lr.ph43:                                         ; preds = %141
  %147 = load i32*, i32** %22, align 8
  %148 = load i32*, i32** %23, align 8
  %149 = sext i32 %145 to i64
  br label %150

; <label>:150                                     ; preds = %150, %.lr.ph43
  %indvars.iv101 = phi i64 [ %indvars.iv.next102, %150 ], [ %149, %.lr.ph43 ]
  %151 = getelementptr inbounds i32, i32* %147, i64 %indvars.iv101
  store i32 0, i32* %151, align 4, !tbaa !1
  %152 = getelementptr inbounds i32, i32* %148, i64 %indvars.iv101
  store i32 0, i32* %152, align 4, !tbaa !1
  %153 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %154 = sext i32 %153 to i64
  %155 = icmp slt i64 %indvars.iv101, %154
  %indvars.iv.next102 = add i64 %indvars.iv101, 1
  br i1 %155, label %150, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %150
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %141
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %156

; <label>:156                                     ; preds = %._crit_edge, %135
  call void @llvm.lifetime.end(i64 4, i8* %21) #7
  call void @llvm.lifetime.end(i64 4, i8* %20) #7
  call void @llvm.lifetime.end(i64 4, i8* %19) #7
  call void @llvm.lifetime.end(i64 4, i8* %18) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  %157 = add nsw i32 %70, -1
  %158 = icmp sgt i32 %70, 0
  br i1 %158, label %159, label %212

; <label>:159                                     ; preds = %156
  call void @llvm.lifetime.start(i64 4, i8* %24) #7
  store i32 0, i32* %.omp.lb7, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %25) #7
  store i32 %157, i32* %.omp.ub8, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %26) #7
  store i32 1, i32* %.omp.stride9, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %27) #7
  store i32 0, i32* %.omp.is_last10, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last10, i32* nonnull %.omp.lb7, i32* nonnull %.omp.ub8, i32* nonnull %.omp.stride9, i32 1, i32 1)
  %160 = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  %161 = icmp sgt i32 %160, %157
  %162 = select i1 %161, i32 %157, i32 %160
  store i32 %162, i32* %.omp.ub8, align 4, !tbaa !1
  %163 = load i32, i32* %.omp.lb7, align 4, !tbaa !1
  %164 = icmp sgt i32 %163, %162
  br i1 %164, label %._crit_edge48, label %.lr.ph47.preheader

.lr.ph47.preheader:                               ; preds = %159
  %165 = sext i32 %163 to i64
  br label %.lr.ph47

.lr.ph47:                                         ; preds = %207, %.lr.ph47.preheader
  %indvars.iv103 = phi i64 [ %165, %.lr.ph47.preheader ], [ %indvars.iv.next104, %207 ]
  %.omp.iv4.044 = phi i32 [ %163, %.lr.ph47.preheader ], [ %208, %207 ]
  %166 = mul nsw i32 %.omp.iv4.044, 3
  %167 = add nsw i32 %166, %65
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds double, double* %69, i64 %168
  %170 = load double, double* %169, align 8, !tbaa !33
  %171 = fcmp uge double %170, %lo.0
  %172 = fcmp ult double %170, %hi.0
  %or.cond = and i1 %171, %172
  br i1 %or.cond, label %204, label %173

; <label>:173                                     ; preds = %.lr.ph47
  %174 = load i32, i32* %nsend, align 4, !tbaa !1
  %175 = load i32*, i32** %30, align 8, !tbaa !253
  %176 = getelementptr inbounds i32, i32* %175, i64 %29
  %177 = load i32, i32* %176, align 4, !tbaa !1
  %178 = icmp slt i32 %174, %177
  br i1 %178, label %193, label %179

; <label>:179                                     ; preds = %173
  %180 = add nsw i32 %174, 100
  store i32 %180, i32* %176, align 4, !tbaa !1
  %181 = load i32**, i32*** %31, align 8, !tbaa !254
  %182 = getelementptr inbounds i32*, i32** %181, i64 %29
  %183 = bitcast i32** %182 to i8**
  %184 = load i8*, i8** %183, align 8, !tbaa !5
  %185 = load i32, i32* %nsend, align 4, !tbaa !1
  %186 = add nsw i32 %185, 100
  %187 = sext i32 %186 to i64
  %188 = shl nsw i64 %187, 2
  %189 = call i8* @realloc(i8* %184, i64 %188) #7
  %190 = load i32**, i32*** %31, align 8, !tbaa !254
  %191 = getelementptr inbounds i32*, i32** %190, i64 %29
  %192 = bitcast i32** %191 to i8**
  store i8* %189, i8** %192, align 8, !tbaa !5
  %.pre129 = load i32, i32* %nsend, align 4, !tbaa !1
  br label %193

; <label>:193                                     ; preds = %179, %173
  %194 = phi i32 [ %174, %173 ], [ %.pre129, %179 ]
  %195 = add nsw i32 %194, 1
  store i32 %195, i32* %nsend, align 4, !tbaa !1
  %196 = sext i32 %194 to i64
  %197 = load i32**, i32*** %31, align 8, !tbaa !254
  %198 = getelementptr inbounds i32*, i32** %197, i64 %29
  %199 = load i32*, i32** %198, align 8, !tbaa !5
  %200 = getelementptr inbounds i32, i32* %199, i64 %196
  %201 = trunc i64 %indvars.iv103 to i32
  store i32 %201, i32* %200, align 4, !tbaa !1
  %202 = load i32*, i32** %28, align 8, !tbaa !249
  %203 = getelementptr inbounds i32, i32* %202, i64 %indvars.iv103
  store i32 0, i32* %203, align 4, !tbaa !1
  br label %207

; <label>:204                                     ; preds = %.lr.ph47
  %205 = load i32*, i32** %28, align 8, !tbaa !249
  %206 = getelementptr inbounds i32, i32* %205, i64 %indvars.iv103
  store i32 1, i32* %206, align 4, !tbaa !1
  br label %207

; <label>:207                                     ; preds = %204, %193
  %208 = add nsw i32 %.omp.iv4.044, 1
  %209 = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  %210 = sext i32 %209 to i64
  %211 = icmp slt i64 %indvars.iv103, %210
  %indvars.iv.next104 = add i64 %indvars.iv103, 1
  br i1 %211, label %.lr.ph47, label %._crit_edge48.loopexit

._crit_edge48.loopexit:                           ; preds = %207
  br label %._crit_edge48

._crit_edge48:                                    ; preds = %._crit_edge48.loopexit, %159
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %212

; <label>:212                                     ; preds = %._crit_edge48, %156
  call void @llvm.lifetime.end(i64 4, i8* %27) #7
  call void @llvm.lifetime.end(i64 4, i8* %26) #7
  call void @llvm.lifetime.end(i64 4, i8* %25) #7
  call void @llvm.lifetime.end(i64 4, i8* %24) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  %213 = load i32, i32* %nsend, align 4, !tbaa !1
  %214 = load i32*, i32** %22, align 8, !tbaa !250
  %215 = getelementptr inbounds i32, i32* %214, i64 %29
  store i32 %213, i32* %215, align 4, !tbaa !1
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %216 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %243, label %.preheader39

.preheader39:                                     ; preds = %212
  %218 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %219 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %218, i64 0, i32 3
  %220 = load i32, i32* %219, align 4, !tbaa !18
  %221 = icmp sgt i32 %220, 0
  br i1 %221, label %.lr.ph51, label %._crit_edge52

.lr.ph51:                                         ; preds = %.preheader39
  %222 = load i32*, i32** %22, align 8
  br label %226

._crit_edge52.loopexit:                           ; preds = %226
  br label %._crit_edge52

._crit_edge52:                                    ; preds = %._crit_edge52.loopexit, %.preheader39
  %total_nsend.0.lcssa = phi i32 [ 0, %.preheader39 ], [ %229, %._crit_edge52.loopexit ]
  %223 = mul nsw i32 %total_nsend.0.lcssa, 7
  %224 = load i32, i32* %47, align 8, !tbaa !231
  %225 = icmp sgt i32 %223, %224
  br i1 %225, label %233, label %242

; <label>:226                                     ; preds = %226, %.lr.ph51
  %indvars.iv105 = phi i64 [ 0, %.lr.ph51 ], [ %indvars.iv.next106, %226 ]
  %total_nsend.049 = phi i32 [ 0, %.lr.ph51 ], [ %229, %226 ]
  %227 = getelementptr inbounds i32, i32* %222, i64 %indvars.iv105
  %228 = load i32, i32* %227, align 4, !tbaa !1
  %229 = add nsw i32 %228, %total_nsend.049
  store i32 %229, i32* %227, align 4, !tbaa !1
  %indvars.iv.next106 = add nuw nsw i64 %indvars.iv105, 1
  %230 = load i32, i32* %219, align 4, !tbaa !18
  %231 = sext i32 %230 to i64
  %232 = icmp slt i64 %indvars.iv.next106, %231
  br i1 %232, label %226, label %._crit_edge52.loopexit

; <label>:233                                     ; preds = %._crit_edge52
  %234 = sitofp i32 %223 to double
  %235 = fmul double %234, 1.500000e+00
  %236 = fptosi double %235 to i32
  store i32 %236, i32* %47, align 8, !tbaa !231
  %237 = load i8*, i8** %46, align 8, !tbaa !159
  %238 = add nsw i32 %236, 100
  %239 = sext i32 %238 to i64
  %240 = shl nsw i64 %239, 3
  %241 = call i8* @realloc(i8* %237, i64 %240) #7
  store i8* %241, i8** %46, align 8, !tbaa !159
  br label %242

; <label>:242                                     ; preds = %233, %._crit_edge52
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %243

; <label>:243                                     ; preds = %242, %212
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %244 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %245 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %244, i64 0, i32 3
  %246 = load i32, i32* %245, align 4, !tbaa !18
  %247 = add nsw i32 %246, -1
  %248 = sext i32 %247 to i64
  %249 = load i32*, i32** %22, align 8, !tbaa !250
  %250 = getelementptr inbounds i32, i32* %249, i64 %248
  %251 = load i32, i32* %250, align 4, !tbaa !1
  %252 = load i32, i32* %nsend, align 4, !tbaa !1
  %253 = icmp sgt i32 %252, 0
  br i1 %253, label %.lr.ph56, label %._crit_edge57

.lr.ph56:                                         ; preds = %243
  %254 = load i32**, i32*** %31, align 8
  %255 = getelementptr inbounds i32*, i32** %254, i64 %29
  %256 = load i32*, i32** %255, align 8
  %257 = sub nsw i32 %70, %251
  %258 = sext i32 %252 to i64
  %min.iters.check = icmp ult i32 %252, 16
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

scalar.ph.preheader:                              ; preds = %middle.block, %min.iters.checked, %.lr.ph56
  %indvars.iv107.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %.lr.ph56 ], [ %n.vec, %middle.block ]
  %nholes.053.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.lr.ph56 ], [ %319, %middle.block ]
  br label %scalar.ph

min.iters.checked:                                ; preds = %.lr.ph56
  %n.vec = and i64 %258, -16
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %min.iters.checked
  %broadcast.splatinsert152 = insertelement <4 x i32> undef, i32 %257, i32 0
  %broadcast.splat153 = shufflevector <4 x i32> %broadcast.splatinsert152, <4 x i32> undef, <4 x i32> zeroinitializer
  %259 = add nsw i64 %258, -16
  %260 = lshr i64 %259, 4
  %261 = and i64 %260, 1
  %lcmp.mod = icmp eq i64 %261, 0
  br i1 %lcmp.mod, label %vector.body.prol, label %vector.ph.split

vector.body.prol:                                 ; preds = %vector.ph
  %262 = bitcast i32* %256 to <4 x i32>*
  %wide.load.prol = load <4 x i32>, <4 x i32>* %262, align 4, !tbaa !1
  %263 = getelementptr i32, i32* %256, i64 4
  %264 = bitcast i32* %263 to <4 x i32>*
  %wide.load149.prol = load <4 x i32>, <4 x i32>* %264, align 4, !tbaa !1
  %265 = getelementptr i32, i32* %256, i64 8
  %266 = bitcast i32* %265 to <4 x i32>*
  %wide.load150.prol = load <4 x i32>, <4 x i32>* %266, align 4, !tbaa !1
  %267 = getelementptr i32, i32* %256, i64 12
  %268 = bitcast i32* %267 to <4 x i32>*
  %wide.load151.prol = load <4 x i32>, <4 x i32>* %268, align 4, !tbaa !1
  %269 = icmp slt <4 x i32> %wide.load.prol, %broadcast.splat153
  %270 = icmp slt <4 x i32> %wide.load149.prol, %broadcast.splat153
  %271 = icmp slt <4 x i32> %wide.load150.prol, %broadcast.splat153
  %272 = icmp slt <4 x i32> %wide.load151.prol, %broadcast.splat153
  %273 = zext <4 x i1> %269 to <4 x i32>
  %274 = zext <4 x i1> %270 to <4 x i32>
  %275 = zext <4 x i1> %271 to <4 x i32>
  %276 = zext <4 x i1> %272 to <4 x i32>
  br label %vector.ph.split

vector.ph.split:                                  ; preds = %vector.body.prol, %vector.ph
  %.lcssa164.unr = phi <4 x i32> [ undef, %vector.ph ], [ %276, %vector.body.prol ]
  %.lcssa163.unr = phi <4 x i32> [ undef, %vector.ph ], [ %275, %vector.body.prol ]
  %.lcssa162.unr = phi <4 x i32> [ undef, %vector.ph ], [ %274, %vector.body.prol ]
  %.lcssa161.unr = phi <4 x i32> [ undef, %vector.ph ], [ %273, %vector.body.prol ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ 16, %vector.body.prol ]
  %vec.phi.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %273, %vector.body.prol ]
  %vec.phi146.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %274, %vector.body.prol ]
  %vec.phi147.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %275, %vector.body.prol ]
  %vec.phi148.unr = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %276, %vector.body.prol ]
  %277 = icmp eq i64 %260, 0
  br i1 %277, label %middle.block, label %vector.ph.split.split

vector.ph.split.split:                            ; preds = %vector.ph.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.split.split
  %index = phi i64 [ %index.unr, %vector.ph.split.split ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <4 x i32> [ %vec.phi.unr, %vector.ph.split.split ], [ %314, %vector.body ]
  %vec.phi146 = phi <4 x i32> [ %vec.phi146.unr, %vector.ph.split.split ], [ %315, %vector.body ]
  %vec.phi147 = phi <4 x i32> [ %vec.phi147.unr, %vector.ph.split.split ], [ %316, %vector.body ]
  %vec.phi148 = phi <4 x i32> [ %vec.phi148.unr, %vector.ph.split.split ], [ %317, %vector.body ]
  %278 = getelementptr inbounds i32, i32* %256, i64 %index
  %279 = bitcast i32* %278 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %279, align 4, !tbaa !1
  %280 = getelementptr i32, i32* %278, i64 4
  %281 = bitcast i32* %280 to <4 x i32>*
  %wide.load149 = load <4 x i32>, <4 x i32>* %281, align 4, !tbaa !1
  %282 = getelementptr i32, i32* %278, i64 8
  %283 = bitcast i32* %282 to <4 x i32>*
  %wide.load150 = load <4 x i32>, <4 x i32>* %283, align 4, !tbaa !1
  %284 = getelementptr i32, i32* %278, i64 12
  %285 = bitcast i32* %284 to <4 x i32>*
  %wide.load151 = load <4 x i32>, <4 x i32>* %285, align 4, !tbaa !1
  %286 = icmp slt <4 x i32> %wide.load, %broadcast.splat153
  %287 = icmp slt <4 x i32> %wide.load149, %broadcast.splat153
  %288 = icmp slt <4 x i32> %wide.load150, %broadcast.splat153
  %289 = icmp slt <4 x i32> %wide.load151, %broadcast.splat153
  %290 = zext <4 x i1> %286 to <4 x i32>
  %291 = zext <4 x i1> %287 to <4 x i32>
  %292 = zext <4 x i1> %288 to <4 x i32>
  %293 = zext <4 x i1> %289 to <4 x i32>
  %294 = add nsw <4 x i32> %290, %vec.phi
  %295 = add nsw <4 x i32> %291, %vec.phi146
  %296 = add nsw <4 x i32> %292, %vec.phi147
  %297 = add nsw <4 x i32> %293, %vec.phi148
  %index.next = add i64 %index, 16
  %298 = getelementptr inbounds i32, i32* %256, i64 %index.next
  %299 = bitcast i32* %298 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %299, align 4, !tbaa !1
  %300 = getelementptr i32, i32* %298, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  %wide.load149.1 = load <4 x i32>, <4 x i32>* %301, align 4, !tbaa !1
  %302 = getelementptr i32, i32* %298, i64 8
  %303 = bitcast i32* %302 to <4 x i32>*
  %wide.load150.1 = load <4 x i32>, <4 x i32>* %303, align 4, !tbaa !1
  %304 = getelementptr i32, i32* %298, i64 12
  %305 = bitcast i32* %304 to <4 x i32>*
  %wide.load151.1 = load <4 x i32>, <4 x i32>* %305, align 4, !tbaa !1
  %306 = icmp slt <4 x i32> %wide.load.1, %broadcast.splat153
  %307 = icmp slt <4 x i32> %wide.load149.1, %broadcast.splat153
  %308 = icmp slt <4 x i32> %wide.load150.1, %broadcast.splat153
  %309 = icmp slt <4 x i32> %wide.load151.1, %broadcast.splat153
  %310 = zext <4 x i1> %306 to <4 x i32>
  %311 = zext <4 x i1> %307 to <4 x i32>
  %312 = zext <4 x i1> %308 to <4 x i32>
  %313 = zext <4 x i1> %309 to <4 x i32>
  %314 = add nsw <4 x i32> %310, %294
  %315 = add nsw <4 x i32> %311, %295
  %316 = add nsw <4 x i32> %312, %296
  %317 = add nsw <4 x i32> %313, %297
  %index.next.1 = add i64 %index, 32
  %318 = icmp eq i64 %index.next.1, %n.vec
  br i1 %318, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !255

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.ph.split
  %.lcssa164 = phi <4 x i32> [ %.lcssa164.unr, %vector.ph.split ], [ %317, %middle.block.unr-lcssa ]
  %.lcssa163 = phi <4 x i32> [ %.lcssa163.unr, %vector.ph.split ], [ %316, %middle.block.unr-lcssa ]
  %.lcssa162 = phi <4 x i32> [ %.lcssa162.unr, %vector.ph.split ], [ %315, %middle.block.unr-lcssa ]
  %.lcssa161 = phi <4 x i32> [ %.lcssa161.unr, %vector.ph.split ], [ %314, %middle.block.unr-lcssa ]
  %bin.rdx = add <4 x i32> %.lcssa162, %.lcssa161
  %bin.rdx156 = add <4 x i32> %.lcssa163, %bin.rdx
  %bin.rdx157 = add <4 x i32> %.lcssa164, %bin.rdx156
  %rdx.shuf = shufflevector <4 x i32> %bin.rdx157, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = add <4 x i32> %bin.rdx157, %rdx.shuf
  %rdx.shuf159 = shufflevector <4 x i32> %bin.rdx158, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = add <4 x i32> %bin.rdx158, %rdx.shuf159
  %319 = extractelement <4 x i32> %bin.rdx160, i32 0
  %cmp.n = icmp eq i64 %258, %n.vec
  br i1 %cmp.n, label %._crit_edge57, label %scalar.ph.preheader

._crit_edge57.loopexit:                           ; preds = %scalar.ph
  br label %._crit_edge57

._crit_edge57:                                    ; preds = %._crit_edge57.loopexit, %middle.block, %243
  %nholes.0.lcssa = phi i32 [ 0, %243 ], [ %319, %middle.block ], [ %.nholes.0, %._crit_edge57.loopexit ]
  %320 = load i32*, i32** %23, align 8, !tbaa !252
  %321 = getelementptr inbounds i32, i32* %320, i64 %29
  store i32 %nholes.0.lcssa, i32* %321, align 4, !tbaa !1
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %322 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %341, label %.preheader38

.preheader38:                                     ; preds = %._crit_edge57
  %324 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %325 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %324, i64 0, i32 3
  %326 = load i32, i32* %325, align 4, !tbaa !18
  %327 = icmp sgt i32 %326, 0
  br i1 %327, label %.lr.ph61, label %._crit_edge62

.lr.ph61:                                         ; preds = %.preheader38
  %328 = load i32*, i32** %23, align 8
  br label %334

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv107 = phi i64 [ %indvars.iv.next108, %scalar.ph ], [ %indvars.iv107.ph, %scalar.ph.preheader ]
  %nholes.053 = phi i32 [ %.nholes.0, %scalar.ph ], [ %nholes.053.ph, %scalar.ph.preheader ]
  %329 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv107
  %330 = load i32, i32* %329, align 4, !tbaa !1
  %331 = icmp slt i32 %330, %257
  %332 = zext i1 %331 to i32
  %.nholes.0 = add nsw i32 %332, %nholes.053
  %indvars.iv.next108 = add nuw nsw i64 %indvars.iv107, 1
  %333 = icmp slt i64 %indvars.iv.next108, %258
  br i1 %333, label %scalar.ph, label %._crit_edge57.loopexit, !llvm.loop !256

._crit_edge62.loopexit:                           ; preds = %334
  br label %._crit_edge62

._crit_edge62:                                    ; preds = %._crit_edge62.loopexit, %.preheader38
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %341

; <label>:334                                     ; preds = %334, %.lr.ph61
  %indvars.iv109 = phi i64 [ 0, %.lr.ph61 ], [ %indvars.iv.next110, %334 ]
  %total_nholes.059 = phi i32 [ 0, %.lr.ph61 ], [ %337, %334 ]
  %335 = getelementptr inbounds i32, i32* %328, i64 %indvars.iv109
  %336 = load i32, i32* %335, align 4, !tbaa !1
  %337 = add nsw i32 %336, %total_nholes.059
  store i32 %337, i32* %335, align 4, !tbaa !1
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %338 = load i32, i32* %325, align 4, !tbaa !18
  %339 = sext i32 %338 to i64
  %340 = icmp slt i64 %indvars.iv.next110, %339
  br i1 %340, label %334, label %._crit_edge62.loopexit

; <label>:341                                     ; preds = %._crit_edge62, %._crit_edge57
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %342 = load i32*, i32** %23, align 8, !tbaa !252
  %343 = getelementptr inbounds i32, i32* %342, i64 %29
  %344 = load i32, i32* %343, align 4, !tbaa !1
  %345 = icmp sgt i32 %344, 0
  br i1 %345, label %.lr.ph66, label %.preheader37

.lr.ph66:                                         ; preds = %341
  %346 = load i32*, i32** %28, align 8
  br label %350

.preheader37.loopexit:                            ; preds = %350
  br label %.preheader37

.preheader37:                                     ; preds = %.preheader37.loopexit, %341
  %j.0.lcssa = phi i32 [ %70, %341 ], [ %351, %.preheader37.loopexit ]
  %347 = load i32, i32* %nsend, align 4, !tbaa !1
  %348 = icmp sgt i32 %347, 0
  br i1 %348, label %.lr.ph70, label %._crit_edge71

.lr.ph70:                                         ; preds = %.preheader37
  %349 = sub nsw i32 %70, %251
  br label %360

; <label>:350                                     ; preds = %350, %.lr.ph66
  %holes.064 = phi i32 [ 0, %.lr.ph66 ], [ %holes.0., %350 ]
  %j.063 = phi i32 [ %70, %.lr.ph66 ], [ %351, %350 ]
  %351 = add nsw i32 %j.063, -1
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i32, i32* %346, i64 %352
  %354 = load i32, i32* %353, align 4, !tbaa !1
  %not. = icmp ne i32 %354, 0
  %355 = zext i1 %not. to i32
  %holes.0. = add nsw i32 %355, %holes.064
  %356 = icmp slt i32 %holes.0., %344
  br i1 %356, label %350, label %.preheader37.loopexit

._crit_edge71.loopexit:                           ; preds = %393
  br label %._crit_edge71

._crit_edge71:                                    ; preds = %._crit_edge71.loopexit, %.preheader37
  %.lcssa40 = phi i32 [ %347, %.preheader37 ], [ %394, %._crit_edge71.loopexit ]
  %357 = mul nsw i32 %.lcssa40, 7
  store i32 %357, i32* %nsend, align 4, !tbaa !1
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %358 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %478, label %397

; <label>:360                                     ; preds = %393, %.lr.ph70
  %indvars.iv115 = phi i64 [ 0, %.lr.ph70 ], [ %indvars.iv.next116, %393 ]
  %361 = phi i32 [ %347, %.lr.ph70 ], [ %394, %393 ]
  %j.168 = phi i32 [ %j.0.lcssa, %.lr.ph70 ], [ %j.3, %393 ]
  %362 = load i32**, i32*** %31, align 8, !tbaa !254
  %363 = getelementptr inbounds i32*, i32** %362, i64 %29
  %364 = load i32*, i32** %363, align 8, !tbaa !5
  %365 = getelementptr inbounds i32, i32* %364, i64 %indvars.iv115
  %366 = load i32, i32* %365, align 4, !tbaa !1
  %367 = load i32*, i32** %22, align 8, !tbaa !250
  %368 = getelementptr inbounds i32, i32* %367, i64 %29
  %369 = load i32, i32* %368, align 4, !tbaa !1
  %370 = trunc i64 %indvars.iv115 to i32
  %371 = sub i32 %370, %361
  %372 = add i32 %371, %369
  %373 = mul nsw i32 %372, 7
  %374 = sext i32 %373 to i64
  %375 = load double*, double** %45, align 8, !tbaa !159
  %376 = getelementptr inbounds double, double* %375, i64 %374
  %377 = call i32 @_ZN4Atom13pack_exchangeEiPd(%class.Atom* nonnull %atom, i32 %366, double* %376)
  %378 = load i32**, i32*** %31, align 8, !tbaa !254
  %379 = getelementptr inbounds i32*, i32** %378, i64 %29
  %380 = load i32*, i32** %379, align 8, !tbaa !5
  %381 = getelementptr inbounds i32, i32* %380, i64 %indvars.iv115
  %382 = load i32, i32* %381, align 4, !tbaa !1
  %383 = icmp slt i32 %382, %349
  br i1 %383, label %.preheader, label %393

.preheader:                                       ; preds = %360
  %384 = load i32*, i32** %28, align 8
  %385 = sext i32 %j.168 to i64
  br label %386

; <label>:386                                     ; preds = %386, %.preheader
  %indvars.iv113 = phi i64 [ %385, %.preheader ], [ %indvars.iv.next114, %386 ]
  %j.2 = phi i32 [ %j.168, %.preheader ], [ %390, %386 ]
  %387 = getelementptr inbounds i32, i32* %384, i64 %indvars.iv113
  %388 = load i32, i32* %387, align 4, !tbaa !1
  %389 = icmp eq i32 %388, 0
  %390 = add nsw i32 %j.2, 1
  %indvars.iv.next114 = add i64 %indvars.iv113, 1
  br i1 %389, label %386, label %391

; <label>:391                                     ; preds = %386
  %392 = trunc i64 %indvars.iv113 to i32
  call void @_ZN4Atom4copyEii(%class.Atom* nonnull %atom, i32 %392, i32 %382)
  br label %393

; <label>:393                                     ; preds = %391, %360
  %j.3 = phi i32 [ %390, %391 ], [ %j.168, %360 ]
  %indvars.iv.next116 = add nuw nsw i64 %indvars.iv115, 1
  %394 = load i32, i32* %nsend, align 4, !tbaa !1
  %395 = sext i32 %394 to i64
  %396 = icmp slt i64 %indvars.iv.next116, %395
  br i1 %396, label %360, label %._crit_edge71.loopexit

; <label>:397                                     ; preds = %._crit_edge71
  %398 = sub nsw i32 %70, %251
  store i32 %398, i32* %16, align 4, !tbaa !84
  %399 = mul nsw i32 %251, 7
  store i32 %399, i32* %nsend, align 4, !tbaa !1
  %400 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 %indvars.iv125, i64 0
  %401 = load i32, i32* %400, align 8, !tbaa !1
  %402 = invoke i32 @MPI_Send(i8* nonnull %7, i32 1, i32 1275069445, i32 %401, i32 0, i32 1140850688)
          to label %403 unwind label %420

; <label>:403                                     ; preds = %397
  %404 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 24, i64 %indvars.iv125, i64 1
  %405 = load i32, i32* %404, align 4, !tbaa !1
  %406 = invoke i32 @MPI_Recv(i8* %8, i32 1, i32 1275069445, i32 %405, i32 0, i32 1140850688, %class.ThreadData* nonnull %status)
          to label %407 unwind label %420

; <label>:407                                     ; preds = %403
  %408 = load i32, i32* %nrecv1, align 4, !tbaa !1
  %409 = load i32, i32* %61, align 4, !tbaa !1
  %410 = icmp sgt i32 %409, 2
  br i1 %410, label %411, label %423

; <label>:411                                     ; preds = %407
  %412 = load i32, i32* %404, align 4, !tbaa !1
  %413 = invoke i32 @MPI_Send(i8* nonnull %7, i32 1, i32 1275069445, i32 %412, i32 0, i32 1140850688)
          to label %414 unwind label %420

; <label>:414                                     ; preds = %411
  %415 = load i32, i32* %400, align 8, !tbaa !1
  %416 = invoke i32 @MPI_Recv(i8* %9, i32 1, i32 1275069445, i32 %415, i32 0, i32 1140850688, %class.ThreadData* nonnull %status)
          to label %417 unwind label %420

; <label>:417                                     ; preds = %414
  %418 = load i32, i32* %nrecv2, align 4, !tbaa !1
  %419 = add nsw i32 %418, %408
  br label %423

; <label>:420                                     ; preds = %464, %459, %450, %445, %440, %435, %414, %411, %403, %397
  %421 = landingpad { i8*, i32 }
          catch i8* null
  %422 = extractvalue { i8*, i32 } %421, 0
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %565

; <label>:423                                     ; preds = %417, %407
  %nrecv.0 = phi i32 [ %419, %417 ], [ %408, %407 ]
  %424 = load i32, i32* %43, align 4, !tbaa !232
  %425 = icmp sgt i32 %nrecv.0, %424
  br i1 %425, label %426, label %._crit_edge130

._crit_edge130:                                   ; preds = %423
  %.pre131 = load i8*, i8** %44, align 8, !tbaa !162
  br label %435

; <label>:426                                     ; preds = %423
  %427 = sitofp i32 %nrecv.0 to double
  %428 = fmul double %427, 1.500000e+00
  %429 = fptosi double %428 to i32
  store i32 %429, i32* %43, align 4, !tbaa !232
  %430 = load i8*, i8** %44, align 8, !tbaa !162
  call void @free(i8* %430) #7
  %431 = load i32, i32* %43, align 4, !tbaa !232
  %432 = sext i32 %431 to i64
  %433 = shl nsw i64 %432, 3
  %434 = call noalias i8* @malloc(i64 %433) #7
  store i8* %434, i8** %44, align 8, !tbaa !162
  br label %435

; <label>:435                                     ; preds = %426, %._crit_edge130
  %436 = phi i8* [ %.pre131, %._crit_edge130 ], [ %434, %426 ]
  %437 = load i32, i32* %nrecv1, align 4, !tbaa !1
  %438 = load i32, i32* %404, align 4, !tbaa !1
  %439 = invoke i32 @MPI_Irecv(i8* %436, i32 %437, i32 1275070475, i32 %438, i32 0, i32 1140850688, i32* nonnull %request)
          to label %440 unwind label %420

; <label>:440                                     ; preds = %435
  %441 = load i8*, i8** %46, align 8, !tbaa !159
  %442 = load i32, i32* %nsend, align 4, !tbaa !1
  %443 = load i32, i32* %400, align 8, !tbaa !1
  %444 = invoke i32 @MPI_Send(i8* %441, i32 %442, i32 1275070475, i32 %443, i32 0, i32 1140850688)
          to label %445 unwind label %420

; <label>:445                                     ; preds = %440
  %446 = invoke i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
          to label %447 unwind label %420

; <label>:447                                     ; preds = %445
  %448 = load i32, i32* %61, align 4, !tbaa !1
  %449 = icmp sgt i32 %448, 2
  br i1 %449, label %450, label %466

; <label>:450                                     ; preds = %447
  %451 = load i32, i32* %nrecv1, align 4, !tbaa !1
  %452 = sext i32 %451 to i64
  %453 = load double*, double** %37, align 8, !tbaa !162
  %454 = getelementptr inbounds double, double* %453, i64 %452
  %455 = bitcast double* %454 to i8*
  %456 = load i32, i32* %nrecv2, align 4, !tbaa !1
  %457 = load i32, i32* %400, align 8, !tbaa !1
  %458 = invoke i32 @MPI_Irecv(i8* %455, i32 %456, i32 1275070475, i32 %457, i32 0, i32 1140850688, i32* nonnull %request)
          to label %459 unwind label %420

; <label>:459                                     ; preds = %450
  %460 = load i8*, i8** %46, align 8, !tbaa !159
  %461 = load i32, i32* %nsend, align 4, !tbaa !1
  %462 = load i32, i32* %404, align 4, !tbaa !1
  %463 = invoke i32 @MPI_Send(i8* %460, i32 %461, i32 1275070475, i32 %462, i32 0, i32 1140850688)
          to label %464 unwind label %420

; <label>:464                                     ; preds = %459
  %465 = invoke i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
          to label %466 unwind label %420

; <label>:466                                     ; preds = %464, %447
  %467 = sdiv i32 %nrecv.0, 7
  store i32 %467, i32* %32, align 8, !tbaa !257
  %468 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %469 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %468, i64 0, i32 3
  %470 = load i32, i32* %469, align 4, !tbaa !18
  %471 = icmp sgt i32 %470, 0
  br i1 %471, label %.lr.ph75, label %._crit_edge76

.lr.ph75:                                         ; preds = %466
  %472 = load i32*, i32** %38, align 8
  br label %473

._crit_edge76.loopexit:                           ; preds = %473
  br label %._crit_edge76

._crit_edge76:                                    ; preds = %._crit_edge76.loopexit, %466
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %478

; <label>:473                                     ; preds = %473, %.lr.ph75
  %indvars.iv117 = phi i64 [ 0, %.lr.ph75 ], [ %indvars.iv.next118, %473 ]
  %474 = getelementptr inbounds i32, i32* %472, i64 %indvars.iv117
  store i32 0, i32* %474, align 4, !tbaa !1
  %indvars.iv.next118 = add nuw nsw i64 %indvars.iv117, 1
  %475 = load i32, i32* %469, align 4, !tbaa !18
  %476 = sext i32 %475 to i64
  %477 = icmp slt i64 %indvars.iv.next118, %476
  br i1 %477, label %473, label %._crit_edge76.loopexit

; <label>:478                                     ; preds = %._crit_edge76, %._crit_edge71
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %479 = load i32, i32* %32, align 8, !tbaa !257
  %480 = add nsw i32 %479, -1
  %481 = icmp sgt i32 %479, 0
  br i1 %481, label %482, label %502

; <label>:482                                     ; preds = %478
  call void @llvm.lifetime.start(i64 4, i8* %33) #7
  store i32 0, i32* %.omp.lb20, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %34) #7
  store i32 %480, i32* %.omp.ub21, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %35) #7
  store i32 1, i32* %.omp.stride22, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %36) #7
  store i32 0, i32* %.omp.is_last23, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last23, i32* nonnull %.omp.lb20, i32* nonnull %.omp.ub21, i32* nonnull %.omp.stride22, i32 1, i32 1)
  %483 = load i32, i32* %.omp.ub21, align 4, !tbaa !1
  %484 = icmp sgt i32 %483, %480
  %485 = select i1 %484, i32 %480, i32 %483
  store i32 %485, i32* %.omp.ub21, align 4, !tbaa !1
  %486 = load i32, i32* %.omp.lb20, align 4, !tbaa !1
  %487 = icmp sgt i32 %486, %485
  br i1 %487, label %._crit_edge81, label %.lr.ph80

.lr.ph80:                                         ; preds = %482
  %488 = load double*, double** %37, align 8
  %489 = sext i32 %486 to i64
  %490 = sext i32 %485 to i64
  br label %491

; <label>:491                                     ; preds = %491, %.lr.ph80
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %491 ], [ %489, %.lr.ph80 ]
  %nrecv.178 = phi i32 [ %nrecv.2, %491 ], [ 0, %.lr.ph80 ]
  %.omp.iv17.077 = phi i32 [ %500, %491 ], [ %486, %.lr.ph80 ]
  %492 = mul nsw i32 %.omp.iv17.077, 7
  %493 = add nsw i32 %492, %65
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds double, double* %488, i64 %494
  %496 = load double, double* %495, align 8, !tbaa !33
  %497 = fcmp oge double %496, %lo.0
  %498 = fcmp olt double %496, %hi.0
  %or.cond34 = and i1 %497, %498
  %499 = zext i1 %or.cond34 to i32
  %nrecv.2 = add nsw i32 %499, %nrecv.178
  %500 = add nsw i32 %.omp.iv17.077, 1
  %501 = icmp slt i64 %indvars.iv119, %490
  %indvars.iv.next120 = add nsw i64 %indvars.iv119, 1
  br i1 %501, label %491, label %._crit_edge81.loopexit

._crit_edge81.loopexit:                           ; preds = %491
  br label %._crit_edge81

._crit_edge81:                                    ; preds = %._crit_edge81.loopexit, %482
  %nrecv.1.lcssa = phi i32 [ 0, %482 ], [ %nrecv.2, %._crit_edge81.loopexit ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %502

; <label>:502                                     ; preds = %._crit_edge81, %478
  %nrecv.3 = phi i32 [ %nrecv.1.lcssa, %._crit_edge81 ], [ 0, %478 ]
  call void @llvm.lifetime.end(i64 4, i8* %36) #7
  call void @llvm.lifetime.end(i64 4, i8* %35) #7
  call void @llvm.lifetime.end(i64 4, i8* %34) #7
  call void @llvm.lifetime.end(i64 4, i8* %33) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  %503 = load i32*, i32** %38, align 8, !tbaa !251
  %504 = getelementptr inbounds i32, i32* %503, i64 %29
  store i32 %nrecv.3, i32* %504, align 4, !tbaa !1
  %505 = load i32, i32* %16, align 4, !tbaa !84
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %506 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %522, label %.preheader36

.preheader36:                                     ; preds = %502
  %508 = load %class.ThreadData*, %class.ThreadData** %17, align 8, !tbaa !22
  %509 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %508, i64 0, i32 3
  %510 = load i32, i32* %509, align 4, !tbaa !18
  %511 = icmp sgt i32 %510, 0
  br i1 %511, label %.lr.ph85, label %._crit_edge86

.lr.ph85:                                         ; preds = %.preheader36
  %512 = load i32*, i32** %38, align 8
  br label %515

._crit_edge86.loopexit:                           ; preds = %515
  br label %._crit_edge86

._crit_edge86:                                    ; preds = %._crit_edge86.loopexit, %.preheader36
  %total_nrecv.0.lcssa = phi i32 [ 0, %.preheader36 ], [ %518, %._crit_edge86.loopexit ]
  %513 = load i32, i32* %16, align 4, !tbaa !84
  %514 = add nsw i32 %513, %total_nrecv.0.lcssa
  store i32 %514, i32* %16, align 4, !tbaa !84
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %522

; <label>:515                                     ; preds = %515, %.lr.ph85
  %indvars.iv121 = phi i64 [ 0, %.lr.ph85 ], [ %indvars.iv.next122, %515 ]
  %total_nrecv.083 = phi i32 [ 0, %.lr.ph85 ], [ %518, %515 ]
  %516 = getelementptr inbounds i32, i32* %512, i64 %indvars.iv121
  %517 = load i32, i32* %516, align 4, !tbaa !1
  %518 = add nsw i32 %517, %total_nrecv.083
  store i32 %518, i32* %516, align 4, !tbaa !1
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %519 = load i32, i32* %509, align 4, !tbaa !18
  %520 = sext i32 %519 to i64
  %521 = icmp slt i64 %indvars.iv.next122, %520
  br i1 %521, label %515, label %._crit_edge86.loopexit

; <label>:522                                     ; preds = %._crit_edge86, %502
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %523 = load i32, i32* %32, align 8, !tbaa !257
  %524 = add nsw i32 %523, -1
  %525 = icmp sgt i32 %523, 0
  br i1 %525, label %526, label %557

; <label>:526                                     ; preds = %522
  %527 = load i32*, i32** %38, align 8, !tbaa !251
  %528 = getelementptr inbounds i32, i32* %527, i64 %29
  %529 = load i32, i32* %528, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %39) #7
  store i32 0, i32* %.omp.lb29, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %40) #7
  store i32 %524, i32* %.omp.ub30, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %41) #7
  store i32 1, i32* %.omp.stride31, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %42) #7
  store i32 0, i32* %.omp.is_last32, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last32, i32* nonnull %.omp.lb29, i32* nonnull %.omp.ub30, i32* nonnull %.omp.stride31, i32 1, i32 1)
  %530 = load i32, i32* %.omp.ub30, align 4, !tbaa !1
  %531 = icmp sgt i32 %530, %524
  %532 = select i1 %531, i32 %524, i32 %530
  store i32 %532, i32* %.omp.ub30, align 4, !tbaa !1
  %533 = load i32, i32* %.omp.lb29, align 4, !tbaa !1
  %534 = icmp sgt i32 %533, %532
  br i1 %534, label %._crit_edge92, label %.lr.ph91.preheader

.lr.ph91.preheader:                               ; preds = %526
  %535 = sub i32 %505, %nrecv.3
  %536 = add i32 %535, %529
  %537 = sext i32 %533 to i64
  br label %.lr.ph91

.lr.ph91:                                         ; preds = %552, %.lr.ph91.preheader
  %538 = phi i32 [ %532, %.lr.ph91.preheader ], [ %553, %552 ]
  %indvars.iv123 = phi i64 [ %537, %.lr.ph91.preheader ], [ %indvars.iv.next124, %552 ]
  %.omp.iv26.089 = phi i32 [ %533, %.lr.ph91.preheader ], [ %554, %552 ]
  %copyinpos.088 = phi i32 [ %536, %.lr.ph91.preheader ], [ %copyinpos.1, %552 ]
  %539 = mul nsw i32 %.omp.iv26.089, 7
  %540 = add nsw i32 %539, %65
  %541 = sext i32 %540 to i64
  %542 = load double*, double** %37, align 8, !tbaa !162
  %543 = getelementptr inbounds double, double* %542, i64 %541
  %544 = load double, double* %543, align 8, !tbaa !33
  %545 = fcmp oge double %544, %lo.0
  %546 = fcmp olt double %544, %hi.0
  %or.cond35 = and i1 %545, %546
  br i1 %or.cond35, label %547, label %552

; <label>:547                                     ; preds = %.lr.ph91
  %548 = sext i32 %539 to i64
  %549 = getelementptr inbounds double, double* %542, i64 %548
  %550 = invoke i32 @_ZN4Atom15unpack_exchangeEiPd(%class.Atom* nonnull %atom, i32 %copyinpos.088, double* %549)
          to label %._crit_edge132 unwind label %562

._crit_edge132:                                   ; preds = %547
  %551 = add nsw i32 %copyinpos.088, 1
  %.pre133 = load i32, i32* %.omp.ub30, align 4, !tbaa !1
  br label %552

; <label>:552                                     ; preds = %._crit_edge132, %.lr.ph91
  %553 = phi i32 [ %.pre133, %._crit_edge132 ], [ %538, %.lr.ph91 ]
  %copyinpos.1 = phi i32 [ %551, %._crit_edge132 ], [ %copyinpos.088, %.lr.ph91 ]
  %554 = add nsw i32 %.omp.iv26.089, 1
  %555 = sext i32 %553 to i64
  %556 = icmp slt i64 %indvars.iv123, %555
  %indvars.iv.next124 = add i64 %indvars.iv123, 1
  br i1 %556, label %.lr.ph91, label %._crit_edge92.loopexit

._crit_edge92.loopexit:                           ; preds = %552
  br label %._crit_edge92

._crit_edge92:                                    ; preds = %._crit_edge92.loopexit, %526
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %557

; <label>:557                                     ; preds = %._crit_edge92, %522
  call void @llvm.lifetime.end(i64 4, i8* %42) #7
  call void @llvm.lifetime.end(i64 4, i8* %41) #7
  call void @llvm.lifetime.end(i64 4, i8* %40) #7
  call void @llvm.lifetime.end(i64 4, i8* %39) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  br label %558

; <label>:558                                     ; preds = %557, %60
  %indvars.iv.next126 = add nuw nsw i64 %indvars.iv125, 1
  %559 = icmp slt i64 %indvars.iv.next126, 3
  br i1 %559, label %60, label %560

; <label>:560                                     ; preds = %558
  call void @llvm.lifetime.end(i64 20, i8* %11) #7
  call void @llvm.lifetime.end(i64 4, i8* %10) #7
  call void @llvm.lifetime.end(i64 4, i8* %9) #7
  call void @llvm.lifetime.end(i64 4, i8* %8) #7
  call void @llvm.lifetime.end(i64 4, i8* %7) #7
  br label %561

; <label>:561                                     ; preds = %560, %5
  ret void

; <label>:562                                     ; preds = %547
  %563 = landingpad { i8*, i32 }
          catch i8* null
  %564 = extractvalue { i8*, i32 } %563, 0
  call void @__clang_call_terminate(i8* %564) #17
  unreachable

; <label>:565                                     ; preds = %420, %84
  %.0 = phi i8* [ %422, %420 ], [ %86, %84 ]
  call void @__clang_call_terminate(i8* %.0) #17
  unreachable
}

; Function Attrs: uwtable
define void @_ZN4Comm12exchange_allER4Atom(%class.Comm* nocapture %this, %class.Atom* dereferenceable(224) %atom) #11 align 2 {
  %nsend = alloca i32, align 4
  %nrecv = alloca i32, align 4
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = bitcast i32* %nsend to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = bitcast i32* %nrecv to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %3 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #7
  %4 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %4) #7
  tail call void @_ZN4Atom3pbcEv(%class.Atom* nonnull %atom)
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %6 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %9 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 14
  %10 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 15
  %11 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 23
  %12 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %13 = bitcast double** %12 to i8**
  %14 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %15 = bitcast double** %14 to i8**
  %16 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  %17 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %20 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  br label %21

; <label>:21                                      ; preds = %.loopexit, %0
  %indvars.iv39 = phi i64 [ 0, %0 ], [ %indvars.iv.next40, %.loopexit ]
  %iswap.026 = phi i32 [ 0, %0 ], [ %iswap.2, %.loopexit ]
  %22 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 25, i64 %indvars.iv39
  %23 = load i32, i32* %22, align 4, !tbaa !1
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %30

; <label>:25                                      ; preds = %21
  %26 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 %indvars.iv39
  %27 = load i32, i32* %26, align 4, !tbaa !1
  %28 = shl i32 %27, 1
  %29 = add nsw i32 %28, %iswap.026
  br label %.loopexit

; <label>:30                                      ; preds = %21
  store i32 0, i32* %nsend, align 4, !tbaa !1
  %31 = trunc i64 %indvars.iv39 to i32
  switch i32 %31, label %33 [
    i32 0, label %34
    i32 1, label %32
  ]

; <label>:32                                      ; preds = %30
  br label %34

; <label>:33                                      ; preds = %30
  br label %34

; <label>:34                                      ; preds = %33, %32, %30
  %lo.0.in = phi double* [ %19, %32 ], [ %5, %33 ], [ %17, %30 ]
  %hi.0.in = phi double* [ %20, %32 ], [ %6, %33 ], [ %18, %30 ]
  %hi.0 = load double, double* %hi.0.in, align 8, !tbaa !33
  %lo.0 = load double, double* %lo.0.in, align 8, !tbaa !33
  %35 = load double*, double** %7, align 8, !tbaa !100
  %36 = load i32, i32* %8, align 4, !tbaa !84
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %.lr.ph.preheader, label %.outer2._crit_edge

.lr.ph.preheader:                                 ; preds = %34
  br label %.lr.ph

.lr.ph:                                           ; preds = %.outer2, %.lr.ph.preheader
  %i.0.ph8 = phi i32 [ %48, %.outer2 ], [ 0, %.lr.ph.preheader ]
  %nlocal.0.ph7 = phi i32 [ %69, %.outer2 ], [ %36, %.lr.ph.preheader ]
  %38 = sext i32 %i.0.ph8 to i64
  br label %39

; <label>:39                                      ; preds = %71, %.lr.ph
  %indvars.iv = phi i64 [ %38, %.lr.ph ], [ %indvars.iv.next, %71 ]
  %i.05 = phi i32 [ %i.0.ph8, %.lr.ph ], [ %72, %71 ]
  %40 = mul nsw i32 %i.05, 3
  %41 = add nsw i32 %40, %31
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double* %35, i64 %42
  %44 = load double, double* %43, align 8, !tbaa !33
  %45 = fcmp uge double %44, %lo.0
  %46 = fcmp ult double %44, %hi.0
  %or.cond = and i1 %45, %46
  br i1 %or.cond, label %71, label %47

; <label>:47                                      ; preds = %39
  %48 = trunc i64 %indvars.iv to i32
  %49 = load i32, i32* %nsend, align 4, !tbaa !1
  %50 = load i32, i32* %16, align 8, !tbaa !231
  %51 = icmp sgt i32 %49, %50
  br i1 %51, label %52, label %..outer2_crit_edge

..outer2_crit_edge:                               ; preds = %47
  %.pre41 = load double*, double** %14, align 8, !tbaa !159
  br label %.outer2

; <label>:52                                      ; preds = %47
  %53 = sitofp i32 %49 to double
  %54 = fmul double %53, 1.500000e+00
  %55 = fptosi double %54 to i32
  store i32 %55, i32* %16, align 8, !tbaa !231
  %56 = load i8*, i8** %15, align 8, !tbaa !159
  %57 = add nsw i32 %55, 100
  %58 = sext i32 %57 to i64
  %59 = shl nsw i64 %58, 3
  %60 = call i8* @realloc(i8* %56, i64 %59) #7
  store i8* %60, i8** %15, align 8, !tbaa !159
  %.pre = load i32, i32* %nsend, align 4, !tbaa !1
  %61 = bitcast i8* %60 to double*
  br label %.outer2

.outer2:                                          ; preds = %52, %..outer2_crit_edge
  %62 = phi double* [ %61, %52 ], [ %.pre41, %..outer2_crit_edge ]
  %63 = phi i32 [ %.pre, %52 ], [ %49, %..outer2_crit_edge ]
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds double, double* %62, i64 %64
  %66 = call i32 @_ZN4Atom13pack_exchangeEiPd(%class.Atom* nonnull %atom, i32 %48, double* %65)
  %67 = load i32, i32* %nsend, align 4, !tbaa !1
  %68 = add nsw i32 %67, %66
  store i32 %68, i32* %nsend, align 4, !tbaa !1
  %69 = add nsw i32 %nlocal.0.ph7, -1
  call void @_ZN4Atom4copyEii(%class.Atom* nonnull %atom, i32 %69, i32 %48)
  %70 = icmp slt i32 %48, %69
  br i1 %70, label %.lr.ph, label %.outer2._crit_edge.loopexit66

; <label>:71                                      ; preds = %39
  %72 = add nsw i32 %i.05, 1
  %73 = icmp slt i32 %72, %nlocal.0.ph7
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %73, label %39, label %.outer2._crit_edge.loopexit

.outer2._crit_edge.loopexit:                      ; preds = %71
  br label %.outer2._crit_edge

.outer2._crit_edge.loopexit66:                    ; preds = %.outer2
  br label %.outer2._crit_edge

.outer2._crit_edge:                               ; preds = %.outer2._crit_edge.loopexit66, %.outer2._crit_edge.loopexit, %34
  %nlocal.0.ph.lcssa = phi i32 [ %36, %34 ], [ %nlocal.0.ph7, %.outer2._crit_edge.loopexit ], [ %69, %.outer2._crit_edge.loopexit66 ]
  store i32 %nlocal.0.ph.lcssa, i32* %8, align 4, !tbaa !84
  %74 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 %indvars.iv39
  %75 = load i32, i32* %74, align 4, !tbaa !1
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %.lr.ph21.preheader, label %.loopexit

.lr.ph21.preheader:                               ; preds = %.outer2._crit_edge
  %77 = sext i32 %iswap.026 to i64
  br label %.lr.ph21

.lr.ph21:                                         ; preds = %141, %.lr.ph21.preheader
  %78 = phi i32 [ %75, %.lr.ph21.preheader ], [ %142, %141 ]
  %indvars.iv37 = phi i64 [ %77, %.lr.ph21.preheader ], [ %indvars.iv.next38, %141 ]
  %ineed.019 = phi i32 [ 0, %.lr.ph21.preheader ], [ %144, %141 ]
  %iswap.118 = phi i32 [ %iswap.026, %.lr.ph21.preheader ], [ %143, %141 ]
  %79 = load i32, i32* %22, align 4, !tbaa !1
  %80 = add nsw i32 %79, -1
  %81 = icmp slt i32 %ineed.019, %80
  br i1 %81, label %82, label %141

; <label>:82                                      ; preds = %.lr.ph21
  %83 = load i32*, i32** %9, align 8, !tbaa !241
  %84 = getelementptr inbounds i32, i32* %83, i64 %indvars.iv37
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = call i32 @MPI_Send(i8* %1, i32 1, i32 1275069445, i32 %85, i32 0, i32 1140850688)
  %87 = load i32*, i32** %10, align 8, !tbaa !242
  %88 = getelementptr inbounds i32, i32* %87, i64 %indvars.iv37
  %89 = load i32, i32* %88, align 4, !tbaa !1
  %90 = call i32 @MPI_Recv(i8* %2, i32 1, i32 1275069445, i32 %89, i32 0, i32 1140850688, %class.ThreadData* nonnull %status)
  %91 = load i32, i32* %nrecv, align 4, !tbaa !1
  %92 = load i32, i32* %11, align 4, !tbaa !232
  %93 = icmp sgt i32 %91, %92
  br i1 %93, label %94, label %._crit_edge

._crit_edge:                                      ; preds = %82
  %.pre42 = load i8*, i8** %13, align 8, !tbaa !162
  br label %103

; <label>:94                                      ; preds = %82
  %95 = sitofp i32 %91 to double
  %96 = fmul double %95, 1.500000e+00
  %97 = fptosi double %96 to i32
  store i32 %97, i32* %11, align 4, !tbaa !232
  %98 = load i8*, i8** %13, align 8, !tbaa !162
  call void @free(i8* %98) #7
  %99 = load i32, i32* %11, align 4, !tbaa !232
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 3
  %102 = call noalias i8* @malloc(i64 %101) #7
  store i8* %102, i8** %13, align 8, !tbaa !162
  %.pre43 = load i32, i32* %nrecv, align 4, !tbaa !1
  br label %103

; <label>:103                                     ; preds = %94, %._crit_edge
  %104 = phi i32 [ %91, %._crit_edge ], [ %.pre43, %94 ]
  %105 = phi i8* [ %.pre42, %._crit_edge ], [ %102, %94 ]
  %106 = load i32*, i32** %10, align 8, !tbaa !242
  %107 = getelementptr inbounds i32, i32* %106, i64 %indvars.iv37
  %108 = load i32, i32* %107, align 4, !tbaa !1
  %109 = call i32 @MPI_Irecv(i8* %105, i32 %104, i32 1275070475, i32 %108, i32 0, i32 1140850688, i32* nonnull %request)
  %110 = load i8*, i8** %15, align 8, !tbaa !159
  %111 = load i32, i32* %nsend, align 4, !tbaa !1
  %112 = load i32*, i32** %9, align 8, !tbaa !241
  %113 = getelementptr inbounds i32, i32* %112, i64 %indvars.iv37
  %114 = load i32, i32* %113, align 4, !tbaa !1
  %115 = call i32 @MPI_Send(i8* %110, i32 %111, i32 1275070475, i32 %114, i32 0, i32 1140850688)
  %116 = call i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
  %117 = load i32, i32* %8, align 4, !tbaa !84
  %118 = load i32, i32* %nrecv, align 4, !tbaa !1
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %.lr.ph11.preheader, label %.outer._crit_edge

.lr.ph11.preheader:                               ; preds = %103
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.outer, %.lr.ph11.preheader
  %120 = phi i32 [ %133, %.outer ], [ %118, %.lr.ph11.preheader ]
  %m.0.ph16 = phi i32 [ %132, %.outer ], [ 0, %.lr.ph11.preheader ]
  %n.0.ph15 = phi i32 [ %128, %.outer ], [ %117, %.lr.ph11.preheader ]
  %.pre1 = load double*, double** %12, align 8, !tbaa !162
  br label %121

; <label>:121                                     ; preds = %135, %.lr.ph11
  %m.010 = phi i32 [ %m.0.ph16, %.lr.ph11 ], [ %139, %135 ]
  %122 = add nsw i32 %m.010, %31
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds double, double* %.pre1, i64 %123
  %125 = load double, double* %124, align 8, !tbaa !33
  %126 = fcmp oge double %125, %lo.0
  %127 = fcmp olt double %125, %hi.0
  %or.cond1 = and i1 %126, %127
  br i1 %or.cond1, label %.outer, label %135

.outer:                                           ; preds = %121
  %128 = add nsw i32 %n.0.ph15, 1
  %129 = sext i32 %m.010 to i64
  %130 = getelementptr inbounds double, double* %.pre1, i64 %129
  %131 = call i32 @_ZN4Atom15unpack_exchangeEiPd(%class.Atom* nonnull %atom, i32 %n.0.ph15, double* %130)
  %132 = add nsw i32 %131, %m.010
  %133 = load i32, i32* %nrecv, align 4, !tbaa !1
  %134 = icmp slt i32 %132, %133
  br i1 %134, label %.lr.ph11, label %.outer._crit_edge.loopexit65

; <label>:135                                     ; preds = %121
  %136 = sext i32 %m.010 to i64
  %137 = getelementptr inbounds double, double* %.pre1, i64 %136
  %138 = call i32 @_ZN4Atom13skip_exchangeEPd(%class.Atom* nonnull %atom, double* %137)
  %139 = add nsw i32 %138, %m.010
  %140 = icmp slt i32 %139, %120
  br i1 %140, label %121, label %.outer._crit_edge.loopexit

.outer._crit_edge.loopexit:                       ; preds = %135
  br label %.outer._crit_edge

.outer._crit_edge.loopexit65:                     ; preds = %.outer
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit65, %.outer._crit_edge.loopexit, %103
  %n.0.ph.lcssa = phi i32 [ %117, %103 ], [ %n.0.ph15, %.outer._crit_edge.loopexit ], [ %128, %.outer._crit_edge.loopexit65 ]
  store i32 %n.0.ph.lcssa, i32* %8, align 4, !tbaa !84
  %.pre44 = load i32, i32* %74, align 4, !tbaa !1
  br label %141

; <label>:141                                     ; preds = %.outer._crit_edge, %.lr.ph21
  %142 = phi i32 [ %.pre44, %.outer._crit_edge ], [ %78, %.lr.ph21 ]
  %143 = add nsw i32 %iswap.118, 1
  %144 = add nuw nsw i32 %ineed.019, 1
  %145 = shl nsw i32 %142, 1
  %146 = icmp slt i32 %144, %145
  %indvars.iv.next38 = add i64 %indvars.iv37, 1
  br i1 %146, label %.lr.ph21, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %141
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.outer2._crit_edge, %25
  %iswap.2 = phi i32 [ %29, %25 ], [ %iswap.026, %.outer2._crit_edge ], [ %143, %.loopexit.loopexit ]
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %exitcond = icmp eq i64 %indvars.iv.next40, 3
  br i1 %exitcond, label %147, label %21

; <label>:147                                     ; preds = %.loopexit
  call void @llvm.lifetime.end(i64 20, i8* %4) #7
  call void @llvm.lifetime.end(i64 4, i8* %3) #7
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  call void @llvm.lifetime.end(i64 4, i8* %1) #7
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) #5

declare i32 @MPI_Recv(i8*, i32, i32, i32, i32, i32, %class.ThreadData*) #2

; Function Attrs: nounwind
declare i32 @omp_get_thread_num() #5

; Function Attrs: nounwind uwtable
define void @_ZN4Comm8growsendEi(%class.Comm* nocapture %this, i32 %n) #9 align 2 {
  %1 = sitofp i32 %n to double
  %2 = fmul double %1, 1.500000e+00
  %3 = fptosi double %2 to i32
  %4 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  store i32 %3, i32* %4, align 8, !tbaa !231
  %5 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %6 = bitcast double** %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !159
  %8 = add nsw i32 %3, 100
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = tail call i8* @realloc(i8* %7, i64 %10) #7
  store i8* %11, i8** %6, align 8, !tbaa !159
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN4Comm8growrecvEi(%class.Comm* nocapture %this, i32 %n) #9 align 2 {
  %1 = sitofp i32 %n to double
  %2 = fmul double %1, 1.500000e+00
  %3 = fptosi double %2 to i32
  %4 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 23
  store i32 %3, i32* %4, align 4, !tbaa !232
  %5 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %6 = bitcast double** %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !162
  tail call void @free(i8* %7) #7
  %8 = load i32, i32* %4, align 4, !tbaa !232
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 3
  %11 = tail call noalias i8* @malloc(i64 %10) #7
  store i8* %11, i8** %6, align 8, !tbaa !162
  ret void
}

; Function Attrs: uwtable
define void @_ZN4Comm7bordersER4Atom(%class.Comm* %this, %class.Atom* dereferenceable(224) %atom) #11 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %nsend = alloca i32, align 4
  %nrecv = alloca i32, align 4
  %pbc_flags = alloca [4 x i32], align 16
  %request = alloca i32, align 4
  %status = alloca %class.ThreadData, align 4
  %1 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @19)
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.omp.lb7 = alloca i32, align 4
  %.omp.ub8 = alloca i32, align 4
  %.omp.stride9 = alloca i32, align 4
  %.omp.is_last10 = alloca i32, align 4
  %.omp.lb16 = alloca i32, align 4
  %.omp.ub17 = alloca i32, align 4
  %.omp.stride18 = alloca i32, align 4
  %.omp.is_last19 = alloca i32, align 4
  %2 = bitcast i32* %nsend to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %3 = bitcast i32* %nrecv to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #7
  %4 = bitcast [4 x i32]* %pbc_flags to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #7
  %5 = bitcast i32* %request to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  %6 = bitcast %class.ThreadData* %status to i8*
  call void @llvm.lifetime.start(i64 20, i8* %6) #7
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  store i32 0, i32* %7, align 8, !tbaa !114
  %8 = tail call i32 @omp_get_thread_num() #7
  %9 = tail call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %10 = icmp eq i32 %9, 0
  %.pre102 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  br i1 %10, label %..preheader24_crit_edge, label %11

..preheader24_crit_edge:                          ; preds = %0
  %.pre103 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 29
  br label %.preheader24

; <label>:11                                      ; preds = %0
  %12 = load i32, i32* %.pre102, align 4, !tbaa !84
  %13 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 42
  %14 = load i32, i32* %13, align 4, !tbaa !234
  %15 = icmp sgt i32 %12, %14
  br i1 %15, label %16, label %29

; <label>:16                                      ; preds = %11
  %17 = sext i32 %12 to i64
  %18 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %17, i64 4)
  %19 = extractvalue { i64, i1 } %18, 1
  %20 = extractvalue { i64, i1 } %18, 0
  %21 = select i1 %19, i64 -1, i64 %20
  %22 = invoke noalias i8* @_Znam(i64 %21) #18
          to label %23 unwind label %26

; <label>:23                                      ; preds = %16
  %24 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 39
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8, !tbaa !249
  store i32 %12, i32* %13, align 4, !tbaa !234
  br label %29

; <label>:26                                      ; preds = %56, %52, %48, %44, %37, %16
  %27 = landingpad { i8*, i32 }
          catch i8* null
  %28 = extractvalue { i8*, i32 } %27, 0
  tail call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %569

; <label>:29                                      ; preds = %23, %11
  %30 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 41
  %31 = load i32, i32* %30, align 8, !tbaa !233
  %32 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 29
  %33 = load %class.ThreadData*, %class.ThreadData** %32, align 8, !tbaa !22
  %34 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %33, i64 0, i32 3
  %35 = load i32, i32* %34, align 4, !tbaa !18
  %36 = icmp slt i32 %31, %35
  br i1 %36, label %37, label %.loopexit

; <label>:37                                      ; preds = %29
  store i32 %35, i32* %30, align 8, !tbaa !233
  %38 = sext i32 %35 to i64
  %39 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %38, i64 4)
  %40 = extractvalue { i64, i1 } %39, 1
  %41 = extractvalue { i64, i1 } %39, 0
  %42 = select i1 %40, i64 -1, i64 %41
  %43 = invoke noalias i8* @_Znam(i64 %42) #18
          to label %44 unwind label %26

; <label>:44                                      ; preds = %37
  %45 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 35
  %46 = bitcast i32** %45 to i8**
  store i8* %43, i8** %46, align 8, !tbaa !250
  %47 = invoke noalias i8* @_Znam(i64 %42) #18
          to label %48 unwind label %26

; <label>:48                                      ; preds = %44
  %49 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 36
  %50 = bitcast i32** %49 to i8**
  store i8* %47, i8** %50, align 8, !tbaa !251
  %51 = invoke noalias i8* @_Znam(i64 %42) #18
          to label %52 unwind label %26

; <label>:52                                      ; preds = %48
  %53 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 37
  %54 = bitcast i32** %53 to i8**
  store i8* %51, i8** %54, align 8, !tbaa !252
  %55 = invoke noalias i8* @_Znam(i64 %42) #18
          to label %56 unwind label %26

; <label>:56                                      ; preds = %52
  %57 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 40
  %58 = bitcast i32** %57 to i8**
  store i8* %55, i8** %58, align 8, !tbaa !253
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %38, i64 8)
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = bitcast i8* %55 to i32*
  %64 = ptrtoint i8* %55 to i64
  %65 = inttoptr i64 %64 to i32*
  %66 = invoke noalias i8* @_Znam(i64 %62) #18
          to label %67 unwind label %26

; <label>:67                                      ; preds = %56
  %68 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 38
  %69 = bitcast i32*** %68 to i8**
  store i8* %66, i8** %69, align 8, !tbaa !254
  %70 = icmp sgt i32 %35, 0
  %71 = ptrtoint i8* %66 to i64
  %72 = inttoptr i64 %71 to i32**
  br i1 %70, label %.lr.ph68, label %.loopexit

.lr.ph68:                                         ; preds = %67
  %73 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  %.pre = load i32, i32* %73, align 8, !tbaa !231
  store i32 %.pre, i32* %63, align 4, !tbaa !1
  %74 = sext i32 %.pre to i64
  %75 = shl nsw i64 %74, 2
  %76 = tail call noalias i8* @malloc(i64 %75) #7
  %77 = bitcast i8* %66 to i8**
  store i8* %76, i8** %77, align 8, !tbaa !5
  %78 = icmp sgt i32 %35, 1
  br i1 %78, label %._crit_edge89.preheader, label %.loopexit

._crit_edge89.preheader:                          ; preds = %.lr.ph68
  br label %._crit_edge89

._crit_edge89:                                    ; preds = %._crit_edge89.._crit_edge89_crit_edge, %._crit_edge89.preheader
  %.pre91 = phi i32** [ %.pre91.pre, %._crit_edge89.._crit_edge89_crit_edge ], [ %72, %._crit_edge89.preheader ]
  %.pre90 = phi i32* [ %.pre90.pre, %._crit_edge89.._crit_edge89_crit_edge ], [ %65, %._crit_edge89.preheader ]
  %indvars.iv.next88113 = phi i64 [ %indvars.iv.next88, %._crit_edge89.._crit_edge89_crit_edge ], [ 1, %._crit_edge89.preheader ]
  %79 = phi i32 [ %81, %._crit_edge89.._crit_edge89_crit_edge ], [ %.pre, %._crit_edge89.preheader ]
  %80 = getelementptr inbounds i32, i32* %.pre90, i64 %indvars.iv.next88113
  store i32 %79, i32* %80, align 4, !tbaa !1
  %81 = load i32, i32* %73, align 8, !tbaa !231
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 2
  %84 = tail call noalias i8* @malloc(i64 %83) #7
  %85 = getelementptr inbounds i32*, i32** %.pre91, i64 %indvars.iv.next88113
  %86 = bitcast i32** %85 to i8**
  store i8* %84, i8** %86, align 8, !tbaa !5
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv.next88113, 1
  %87 = load i32, i32* %30, align 8, !tbaa !233
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %indvars.iv.next88, %88
  br i1 %89, label %._crit_edge89.._crit_edge89_crit_edge, label %.loopexit.loopexit

._crit_edge89.._crit_edge89_crit_edge:            ; preds = %._crit_edge89
  %.pre90.pre = load i32*, i32** %57, align 8, !tbaa !253
  %.pre91.pre = load i32**, i32*** %68, align 8, !tbaa !254
  br label %._crit_edge89

.loopexit.loopexit:                               ; preds = %._crit_edge89
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.lr.ph68, %67, %29
  tail call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %.preheader24

.preheader24:                                     ; preds = %.loopexit, %..preheader24_crit_edge
  %.pre-phi104 = phi %class.ThreadData** [ %.pre103, %..preheader24_crit_edge ], [ %32, %.loopexit ]
  %90 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 27
  %91 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 28
  %92 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 2
  %93 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 0
  %94 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 3
  %95 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 1
  %96 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 4
  %97 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 2
  %98 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 5
  %99 = getelementptr inbounds [4 x i32], [4 x i32]* %pbc_flags, i64 0, i64 3
  %100 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %101 = bitcast i32* %.omp.lb to i8*
  %102 = bitcast i32* %.omp.ub to i8*
  %103 = bitcast i32* %.omp.stride to i8*
  %104 = bitcast i32* %.omp.is_last to i8*
  %105 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 35
  %106 = bitcast i32* %.omp.lb7 to i8*
  %107 = bitcast i32* %.omp.ub8 to i8*
  %108 = bitcast i32* %.omp.stride9 to i8*
  %109 = bitcast i32* %.omp.is_last10 to i8*
  %110 = sext i32 %8 to i64
  %111 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 40
  %112 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 38
  %113 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 43
  %114 = bitcast i32* %.omp.lb16 to i8*
  %115 = bitcast i32* %.omp.ub17 to i8*
  %116 = bitcast i32* %.omp.stride18 to i8*
  %117 = bitcast i32* %.omp.is_last19 to i8*
  %118 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 21
  %119 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 6
  %120 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 7
  %121 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 14
  %122 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 8
  %123 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 9
  %124 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 15
  %125 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 10
  %126 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 11
  %127 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 16
  %128 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 12
  %129 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 0
  %130 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 19
  %131 = bitcast double** %130 to i64*
  %132 = bitcast double** %118 to i64*
  %133 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 13
  %134 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 16
  %135 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 23
  %136 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 20
  %137 = bitcast double** %136 to i8**
  %138 = bitcast double** %130 to i8**
  %139 = bitcast double** %136 to i64*
  %140 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %141 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 18
  %142 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 22
  br label %.preheader23

.preheader23:                                     ; preds = %._crit_edge59, %.preheader24
  %indvars.iv85 = phi i64 [ 0, %.preheader24 ], [ %indvars.iv.next86, %._crit_edge59 ]
  %iswap.065 = phi i32 [ 0, %.preheader24 ], [ %iswap.1.lcssa, %._crit_edge59 ]
  %nfirst.062 = phi i32 [ undef, %.preheader24 ], [ %nfirst.1.lcssa, %._crit_edge59 ]
  %143 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 26, i64 %indvars.iv85
  %144 = load i32, i32* %143, align 4, !tbaa !1
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %.lr.ph58.preheader, label %._crit_edge59

.lr.ph58.preheader:                               ; preds = %.preheader23
  %146 = sext i32 %iswap.065 to i64
  %147 = trunc i64 %indvars.iv85 to i32
  br label %.lr.ph58

.preheader:                                       ; preds = %._crit_edge59
  %148 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 1
  %149 = load i32, i32* %148, align 4, !tbaa !157
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %151 = load i32*, i32** %125, align 8
  %152 = load i32*, i32** %126, align 8
  %153 = sext i32 %149 to i64
  %min.iters.check = icmp ult i32 %149, 8
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

scalar.ph.preheader:                              ; preds = %middle.block, %min.iters.checked, %.lr.ph
  %indvars.iv.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %n.vec, %middle.block ]
  %max2.031.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %206, %middle.block ]
  %max1.030.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.lr.ph ], [ %205, %middle.block ]
  br label %scalar.ph

min.iters.checked:                                ; preds = %.lr.ph
  %n.vec = and i64 %153, -8
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %154 = add nsw i64 %153, -8
  %155 = lshr i64 %154, 3
  %156 = and i64 %155, 1
  %lcmp.mod = icmp eq i64 %156, 0
  br i1 %lcmp.mod, label %vector.body.prol, label %vector.body.preheader.split

vector.body.prol:                                 ; preds = %vector.body.preheader
  %157 = bitcast i32* %151 to <4 x i32>*
  %wide.load.prol = load <4 x i32>, <4 x i32>* %157, align 4, !tbaa !1
  %158 = getelementptr i32, i32* %151, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  %wide.load118.prol = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !1
  %160 = icmp slt <4 x i32> %wide.load.prol, zeroinitializer
  %161 = icmp slt <4 x i32> %wide.load118.prol, zeroinitializer
  %162 = select <4 x i1> %160, <4 x i32> zeroinitializer, <4 x i32> %wide.load.prol
  %163 = select <4 x i1> %161, <4 x i32> zeroinitializer, <4 x i32> %wide.load118.prol
  %164 = bitcast i32* %152 to <4 x i32>*
  %wide.load119.prol = load <4 x i32>, <4 x i32>* %164, align 4, !tbaa !1
  %165 = getelementptr i32, i32* %152, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %wide.load120.prol = load <4 x i32>, <4 x i32>* %166, align 4, !tbaa !1
  %167 = icmp slt <4 x i32> %wide.load119.prol, zeroinitializer
  %168 = icmp slt <4 x i32> %wide.load120.prol, zeroinitializer
  %169 = select <4 x i1> %167, <4 x i32> zeroinitializer, <4 x i32> %wide.load119.prol
  %170 = select <4 x i1> %168, <4 x i32> zeroinitializer, <4 x i32> %wide.load120.prol
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.prol, %vector.body.preheader
  %.lcssa140.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %170, %vector.body.prol ]
  %.lcssa139.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %169, %vector.body.prol ]
  %.lcssa138.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %163, %vector.body.prol ]
  %.lcssa137.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %162, %vector.body.prol ]
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 8, %vector.body.prol ]
  %vec.phi.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %169, %vector.body.prol ]
  %vec.phi115.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %170, %vector.body.prol ]
  %vec.phi116.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %162, %vector.body.prol ]
  %vec.phi117.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %163, %vector.body.prol ]
  %171 = icmp eq i64 %155, 0
  br i1 %171, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <4 x i32> [ %vec.phi.unr, %vector.body.preheader.split.split ], [ %202, %vector.body ]
  %vec.phi115 = phi <4 x i32> [ %vec.phi115.unr, %vector.body.preheader.split.split ], [ %203, %vector.body ]
  %vec.phi116 = phi <4 x i32> [ %vec.phi116.unr, %vector.body.preheader.split.split ], [ %194, %vector.body ]
  %vec.phi117 = phi <4 x i32> [ %vec.phi117.unr, %vector.body.preheader.split.split ], [ %195, %vector.body ]
  %172 = getelementptr inbounds i32, i32* %151, i64 %index
  %173 = bitcast i32* %172 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !1
  %174 = getelementptr i32, i32* %172, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  %wide.load118 = load <4 x i32>, <4 x i32>* %175, align 4, !tbaa !1
  %176 = icmp sgt <4 x i32> %vec.phi116, %wide.load
  %177 = icmp sgt <4 x i32> %vec.phi117, %wide.load118
  %178 = select <4 x i1> %176, <4 x i32> %vec.phi116, <4 x i32> %wide.load
  %179 = select <4 x i1> %177, <4 x i32> %vec.phi117, <4 x i32> %wide.load118
  %180 = getelementptr inbounds i32, i32* %152, i64 %index
  %181 = bitcast i32* %180 to <4 x i32>*
  %wide.load119 = load <4 x i32>, <4 x i32>* %181, align 4, !tbaa !1
  %182 = getelementptr i32, i32* %180, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %wide.load120 = load <4 x i32>, <4 x i32>* %183, align 4, !tbaa !1
  %184 = icmp sgt <4 x i32> %vec.phi, %wide.load119
  %185 = icmp sgt <4 x i32> %vec.phi115, %wide.load120
  %186 = select <4 x i1> %184, <4 x i32> %vec.phi, <4 x i32> %wide.load119
  %187 = select <4 x i1> %185, <4 x i32> %vec.phi115, <4 x i32> %wide.load120
  %index.next = add i64 %index, 8
  %188 = getelementptr inbounds i32, i32* %151, i64 %index.next
  %189 = bitcast i32* %188 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %189, align 4, !tbaa !1
  %190 = getelementptr i32, i32* %188, i64 4
  %191 = bitcast i32* %190 to <4 x i32>*
  %wide.load118.1 = load <4 x i32>, <4 x i32>* %191, align 4, !tbaa !1
  %192 = icmp sgt <4 x i32> %178, %wide.load.1
  %193 = icmp sgt <4 x i32> %179, %wide.load118.1
  %194 = select <4 x i1> %192, <4 x i32> %178, <4 x i32> %wide.load.1
  %195 = select <4 x i1> %193, <4 x i32> %179, <4 x i32> %wide.load118.1
  %196 = getelementptr inbounds i32, i32* %152, i64 %index.next
  %197 = bitcast i32* %196 to <4 x i32>*
  %wide.load119.1 = load <4 x i32>, <4 x i32>* %197, align 4, !tbaa !1
  %198 = getelementptr i32, i32* %196, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  %wide.load120.1 = load <4 x i32>, <4 x i32>* %199, align 4, !tbaa !1
  %200 = icmp sgt <4 x i32> %186, %wide.load119.1
  %201 = icmp sgt <4 x i32> %187, %wide.load120.1
  %202 = select <4 x i1> %200, <4 x i32> %186, <4 x i32> %wide.load119.1
  %203 = select <4 x i1> %201, <4 x i32> %187, <4 x i32> %wide.load120.1
  %index.next.1 = add i64 %index, 16
  %204 = icmp eq i64 %index.next.1, %n.vec
  br i1 %204, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !258

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %.lcssa140 = phi <4 x i32> [ %.lcssa140.unr, %vector.body.preheader.split ], [ %203, %middle.block.unr-lcssa ]
  %.lcssa139 = phi <4 x i32> [ %.lcssa139.unr, %vector.body.preheader.split ], [ %202, %middle.block.unr-lcssa ]
  %.lcssa138 = phi <4 x i32> [ %.lcssa138.unr, %vector.body.preheader.split ], [ %195, %middle.block.unr-lcssa ]
  %.lcssa137 = phi <4 x i32> [ %.lcssa137.unr, %vector.body.preheader.split ], [ %194, %middle.block.unr-lcssa ]
  %rdx.minmax.cmp128 = icmp sgt <4 x i32> %.lcssa137, %.lcssa138
  %rdx.minmax.select129 = select <4 x i1> %rdx.minmax.cmp128, <4 x i32> %.lcssa137, <4 x i32> %.lcssa138
  %rdx.shuf130 = shufflevector <4 x i32> %rdx.minmax.select129, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp131 = icmp sgt <4 x i32> %rdx.minmax.select129, %rdx.shuf130
  %rdx.minmax.select132 = select <4 x i1> %rdx.minmax.cmp131, <4 x i32> %rdx.minmax.select129, <4 x i32> %rdx.shuf130
  %rdx.shuf133 = shufflevector <4 x i32> %rdx.minmax.select132, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp134 = icmp sgt <4 x i32> %rdx.minmax.select132, %rdx.shuf133
  %rdx.minmax.cmp134.elt = extractelement <4 x i1> %rdx.minmax.cmp134, i32 0
  %rdx.minmax.select132.elt = extractelement <4 x i32> %rdx.minmax.select132, i32 0
  %rdx.shuf133.elt = extractelement <4 x i32> %rdx.minmax.select132, i32 1
  %205 = select i1 %rdx.minmax.cmp134.elt, i32 %rdx.minmax.select132.elt, i32 %rdx.shuf133.elt
  %rdx.minmax.cmp = icmp sgt <4 x i32> %.lcssa139, %.lcssa140
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i32> %.lcssa139, <4 x i32> %.lcssa140
  %rdx.shuf = shufflevector <4 x i32> %rdx.minmax.select, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp123 = icmp sgt <4 x i32> %rdx.minmax.select, %rdx.shuf
  %rdx.minmax.select124 = select <4 x i1> %rdx.minmax.cmp123, <4 x i32> %rdx.minmax.select, <4 x i32> %rdx.shuf
  %rdx.shuf125 = shufflevector <4 x i32> %rdx.minmax.select124, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp126 = icmp sgt <4 x i32> %rdx.minmax.select124, %rdx.shuf125
  %rdx.minmax.cmp126.elt = extractelement <4 x i1> %rdx.minmax.cmp126, i32 0
  %rdx.minmax.select124.elt = extractelement <4 x i32> %rdx.minmax.select124, i32 0
  %rdx.shuf125.elt = extractelement <4 x i32> %rdx.minmax.select124, i32 1
  %206 = select i1 %rdx.minmax.cmp126.elt, i32 %rdx.minmax.select124.elt, i32 %rdx.shuf125.elt
  %cmp.n = icmp eq i64 %153, %n.vec
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

.lr.ph58:                                         ; preds = %523, %.lr.ph58.preheader
  %indvars.iv83 = phi i64 [ %146, %.lr.ph58.preheader ], [ %indvars.iv.next84, %523 ]
  %iswap.157 = phi i32 [ %iswap.065, %.lr.ph58.preheader ], [ %524, %523 ]
  %ineed.056 = phi i32 [ 0, %.lr.ph58.preheader ], [ %525, %523 ]
  %nfirst.155 = phi i32 [ %nfirst.062, %.lr.ph58.preheader ], [ %nfirst.2, %523 ]
  %nlast.054 = phi i32 [ 0, %.lr.ph58.preheader ], [ %nlast.1, %523 ]
  %207 = load double*, double** %90, align 8, !tbaa !235
  %208 = getelementptr inbounds double, double* %207, i64 %indvars.iv83
  %209 = load double, double* %208, align 8, !tbaa !33
  %210 = load double*, double** %91, align 8, !tbaa !236
  %211 = getelementptr inbounds double, double* %210, i64 %indvars.iv83
  %212 = load double, double* %211, align 8, !tbaa !33
  %213 = load i32*, i32** %92, align 8, !tbaa !237
  %214 = getelementptr inbounds i32, i32* %213, i64 %indvars.iv83
  %215 = load i32, i32* %214, align 4, !tbaa !1
  store i32 %215, i32* %93, align 16, !tbaa !1
  %216 = load i32*, i32** %94, align 8, !tbaa !238
  %217 = getelementptr inbounds i32, i32* %216, i64 %indvars.iv83
  %218 = load i32, i32* %217, align 4, !tbaa !1
  store i32 %218, i32* %95, align 4, !tbaa !1
  %219 = load i32*, i32** %96, align 8, !tbaa !239
  %220 = getelementptr inbounds i32, i32* %219, i64 %indvars.iv83
  %221 = load i32, i32* %220, align 4, !tbaa !1
  store i32 %221, i32* %97, align 8, !tbaa !1
  %222 = load i32*, i32** %98, align 8, !tbaa !240
  %223 = getelementptr inbounds i32, i32* %222, i64 %indvars.iv83
  %224 = load i32, i32* %223, align 4, !tbaa !1
  store i32 %224, i32* %99, align 4, !tbaa !1
  %225 = load double*, double** %100, align 8, !tbaa !100
  %226 = and i32 %ineed.056, 1
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %232

; <label>:228                                     ; preds = %.lr.ph58
  %229 = load i32, i32* %.pre102, align 4, !tbaa !84
  %230 = load i32, i32* %7, align 8, !tbaa !114
  %231 = add nsw i32 %230, %229
  br label %232

; <label>:232                                     ; preds = %228, %.lr.ph58
  %nlast.1 = phi i32 [ %231, %228 ], [ %nlast.054, %.lr.ph58 ]
  %nfirst.2 = phi i32 [ %nlast.054, %228 ], [ %nfirst.155, %.lr.ph58 ]
  %233 = load %class.ThreadData*, %class.ThreadData** %.pre-phi104, align 8, !tbaa !22
  %234 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %233, i64 0, i32 3
  %235 = load i32, i32* %234, align 4, !tbaa !18
  %236 = add nsw i32 %235, -1
  %237 = icmp sgt i32 %235, 0
  br i1 %237, label %238, label %251

; <label>:238                                     ; preds = %232
  call void @llvm.lifetime.start(i64 4, i8* %101) #7
  store i32 0, i32* %.omp.lb, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %102) #7
  store i32 %236, i32* %.omp.ub, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %103) #7
  store i32 1, i32* %.omp.stride, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %104) #7
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1)
  %239 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %240 = icmp sgt i32 %239, %236
  %241 = select i1 %240, i32 %236, i32 %239
  store i32 %241, i32* %.omp.ub, align 4, !tbaa !1
  %242 = load i32, i32* %.omp.lb, align 4, !tbaa !1
  %243 = icmp sgt i32 %242, %241
  br i1 %243, label %._crit_edge36, label %.lr.ph35

.lr.ph35:                                         ; preds = %238
  %244 = load i32*, i32** %105, align 8
  %245 = sext i32 %242 to i64
  br label %246

; <label>:246                                     ; preds = %246, %.lr.ph35
  %indvars.iv73 = phi i64 [ %indvars.iv.next74, %246 ], [ %245, %.lr.ph35 ]
  %247 = getelementptr inbounds i32, i32* %244, i64 %indvars.iv73
  store i32 0, i32* %247, align 4, !tbaa !1
  %248 = load i32, i32* %.omp.ub, align 4, !tbaa !1
  %249 = sext i32 %248 to i64
  %250 = icmp slt i64 %indvars.iv73, %249
  %indvars.iv.next74 = add i64 %indvars.iv73, 1
  br i1 %250, label %246, label %._crit_edge36.loopexit

._crit_edge36.loopexit:                           ; preds = %246
  br label %._crit_edge36

._crit_edge36:                                    ; preds = %._crit_edge36.loopexit, %238
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %251

; <label>:251                                     ; preds = %._crit_edge36, %232
  call void @llvm.lifetime.end(i64 4, i8* %104) #7
  call void @llvm.lifetime.end(i64 4, i8* %103) #7
  call void @llvm.lifetime.end(i64 4, i8* %102) #7
  call void @llvm.lifetime.end(i64 4, i8* %101) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  store i32 0, i32* %nsend, align 4, !tbaa !1
  %252 = sub nsw i32 %nlast.1, %nfirst.2
  %253 = add nsw i32 %252, -1
  %254 = icmp sgt i32 %nlast.1, %nfirst.2
  br i1 %254, label %255, label %304

; <label>:255                                     ; preds = %251
  call void @llvm.lifetime.start(i64 4, i8* %106) #7
  store i32 0, i32* %.omp.lb7, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %107) #7
  store i32 %253, i32* %.omp.ub8, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %108) #7
  store i32 1, i32* %.omp.stride9, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %109) #7
  store i32 0, i32* %.omp.is_last10, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last10, i32* nonnull %.omp.lb7, i32* nonnull %.omp.ub8, i32* nonnull %.omp.stride9, i32 1, i32 1)
  %256 = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  %257 = icmp sgt i32 %256, %253
  %258 = select i1 %257, i32 %253, i32 %256
  store i32 %258, i32* %.omp.ub8, align 4, !tbaa !1
  %259 = load i32, i32* %.omp.lb7, align 4, !tbaa !1
  %260 = icmp sgt i32 %259, %258
  br i1 %260, label %._crit_edge40, label %.lr.ph39.preheader

.lr.ph39.preheader:                               ; preds = %255
  %261 = sext i32 %259 to i64
  br label %.lr.ph39

.lr.ph39:                                         ; preds = %299, %.lr.ph39.preheader
  %262 = phi i32 [ %258, %.lr.ph39.preheader ], [ %300, %299 ]
  %indvars.iv75 = phi i64 [ %261, %.lr.ph39.preheader ], [ %indvars.iv.next76, %299 ]
  %.omp.iv4.037 = phi i32 [ %259, %.lr.ph39.preheader ], [ %301, %299 ]
  %263 = add nsw i32 %.omp.iv4.037, %nfirst.2
  %264 = mul nsw i32 %263, 3
  %265 = add nsw i32 %264, %147
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds double, double* %225, i64 %266
  %268 = load double, double* %267, align 8, !tbaa !33
  %269 = fcmp ult double %268, %209
  %270 = fcmp ugt double %268, %212
  %or.cond = or i1 %269, %270
  br i1 %or.cond, label %299, label %271

; <label>:271                                     ; preds = %.lr.ph39
  %272 = load i32, i32* %nsend, align 4, !tbaa !1
  %273 = load i32*, i32** %111, align 8, !tbaa !253
  %274 = getelementptr inbounds i32, i32* %273, i64 %110
  %275 = load i32, i32* %274, align 4, !tbaa !1
  %276 = icmp slt i32 %272, %275
  br i1 %276, label %291, label %277

; <label>:277                                     ; preds = %271
  %278 = add nsw i32 %272, 100
  store i32 %278, i32* %274, align 4, !tbaa !1
  %279 = load i32**, i32*** %112, align 8, !tbaa !254
  %280 = getelementptr inbounds i32*, i32** %279, i64 %110
  %281 = bitcast i32** %280 to i8**
  %282 = load i8*, i8** %281, align 8, !tbaa !5
  %283 = load i32, i32* %nsend, align 4, !tbaa !1
  %284 = add nsw i32 %283, 100
  %285 = sext i32 %284 to i64
  %286 = shl nsw i64 %285, 2
  %287 = call i8* @realloc(i8* %282, i64 %286) #7
  %288 = load i32**, i32*** %112, align 8, !tbaa !254
  %289 = getelementptr inbounds i32*, i32** %288, i64 %110
  %290 = bitcast i32** %289 to i8**
  store i8* %287, i8** %290, align 8, !tbaa !5
  %.pre92 = load i32, i32* %nsend, align 4, !tbaa !1
  br label %291

; <label>:291                                     ; preds = %277, %271
  %292 = phi i32 [ %272, %271 ], [ %.pre92, %277 ]
  %293 = add nsw i32 %292, 1
  store i32 %293, i32* %nsend, align 4, !tbaa !1
  %294 = sext i32 %292 to i64
  %295 = load i32**, i32*** %112, align 8, !tbaa !254
  %296 = getelementptr inbounds i32*, i32** %295, i64 %110
  %297 = load i32*, i32** %296, align 8, !tbaa !5
  %298 = getelementptr inbounds i32, i32* %297, i64 %294
  store i32 %263, i32* %298, align 4, !tbaa !1
  %.pre93 = load i32, i32* %.omp.ub8, align 4, !tbaa !1
  br label %299

; <label>:299                                     ; preds = %291, %.lr.ph39
  %300 = phi i32 [ %262, %.lr.ph39 ], [ %.pre93, %291 ]
  %301 = add nsw i32 %.omp.iv4.037, 1
  %302 = sext i32 %300 to i64
  %303 = icmp slt i64 %indvars.iv75, %302
  %indvars.iv.next76 = add i64 %indvars.iv75, 1
  br i1 %303, label %.lr.ph39, label %._crit_edge40.loopexit

._crit_edge40.loopexit:                           ; preds = %299
  br label %._crit_edge40

._crit_edge40:                                    ; preds = %._crit_edge40.loopexit, %255
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %304

; <label>:304                                     ; preds = %._crit_edge40, %251
  call void @llvm.lifetime.end(i64 4, i8* %109) #7
  call void @llvm.lifetime.end(i64 4, i8* %108) #7
  call void @llvm.lifetime.end(i64 4, i8* %107) #7
  call void @llvm.lifetime.end(i64 4, i8* %106) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  %305 = load i32, i32* %nsend, align 4, !tbaa !1
  %306 = load i32*, i32** %105, align 8, !tbaa !250
  %307 = getelementptr inbounds i32, i32* %306, i64 %110
  store i32 %305, i32* %307, align 4, !tbaa !1
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %308 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %354, label %.preheader22

.preheader22:                                     ; preds = %304
  %310 = load %class.ThreadData*, %class.ThreadData** %.pre-phi104, align 8, !tbaa !22
  %311 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %310, i64 0, i32 3
  %312 = load i32, i32* %311, align 4, !tbaa !18
  %313 = icmp sgt i32 %312, 0
  br i1 %313, label %.lr.ph43, label %._crit_edge44

.lr.ph43:                                         ; preds = %.preheader22
  %314 = load i32*, i32** %105, align 8
  br label %319

._crit_edge44.loopexit:                           ; preds = %319
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %._crit_edge44.loopexit, %.preheader22
  %total_nsend.0.lcssa = phi i32 [ 0, %.preheader22 ], [ %322, %._crit_edge44.loopexit ]
  %315 = load i32*, i32** %141, align 8, !tbaa !246
  %316 = getelementptr inbounds i32, i32* %315, i64 %indvars.iv83
  %317 = load i32, i32* %316, align 4, !tbaa !1
  %318 = icmp sgt i32 %total_nsend.0.lcssa, %317
  br i1 %318, label %326, label %340

; <label>:319                                     ; preds = %319, %.lr.ph43
  %indvars.iv77 = phi i64 [ 0, %.lr.ph43 ], [ %indvars.iv.next78, %319 ]
  %total_nsend.041 = phi i32 [ 0, %.lr.ph43 ], [ %322, %319 ]
  %320 = getelementptr inbounds i32, i32* %314, i64 %indvars.iv77
  %321 = load i32, i32* %320, align 4, !tbaa !1
  %322 = add nsw i32 %321, %total_nsend.041
  store i32 %322, i32* %320, align 4, !tbaa !1
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %323 = load i32, i32* %311, align 4, !tbaa !18
  %324 = sext i32 %323 to i64
  %325 = icmp slt i64 %indvars.iv.next78, %324
  br i1 %325, label %319, label %._crit_edge44.loopexit

; <label>:326                                     ; preds = %._crit_edge44
  %327 = sitofp i32 %total_nsend.0.lcssa to double
  %328 = fmul double %327, 1.500000e+00
  %329 = fptosi double %328 to i32
  store i32 %329, i32* %316, align 4, !tbaa !1
  %330 = load i32**, i32*** %140, align 8, !tbaa !160
  %331 = getelementptr inbounds i32*, i32** %330, i64 %indvars.iv83
  %332 = bitcast i32** %331 to i8**
  %333 = load i8*, i8** %332, align 8, !tbaa !5
  %334 = sext i32 %329 to i64
  %335 = shl nsw i64 %334, 2
  %336 = call i8* @realloc(i8* %333, i64 %335) #7
  %337 = load i32**, i32*** %140, align 8, !tbaa !160
  %338 = getelementptr inbounds i32*, i32** %337, i64 %indvars.iv83
  %339 = bitcast i32** %338 to i8**
  store i8* %336, i8** %339, align 8, !tbaa !5
  br label %340

; <label>:340                                     ; preds = %326, %._crit_edge44
  %341 = shl nsw i32 %total_nsend.0.lcssa, 2
  %342 = load i32, i32* %142, align 8, !tbaa !231
  %343 = icmp sgt i32 %341, %342
  br i1 %343, label %344, label %353

; <label>:344                                     ; preds = %340
  %345 = sitofp i32 %341 to double
  %346 = fmul double %345, 1.500000e+00
  %347 = fptosi double %346 to i32
  store i32 %347, i32* %142, align 8, !tbaa !231
  %348 = load i8*, i8** %138, align 8, !tbaa !159
  %349 = add nsw i32 %347, 100
  %350 = sext i32 %349 to i64
  %351 = shl nsw i64 %350, 3
  %352 = call i8* @realloc(i8* %348, i64 %351) #7
  store i8* %352, i8** %138, align 8, !tbaa !159
  br label %353

; <label>:353                                     ; preds = %344, %340
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %354

; <label>:354                                     ; preds = %353, %304
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %355 = load i32, i32* %nsend, align 4, !tbaa !1
  %356 = icmp sgt i32 %355, 0
  br i1 %356, label %.lr.ph48.preheader, label %._crit_edge49

.lr.ph48.preheader:                               ; preds = %354
  %.pre94 = load i32**, i32*** %112, align 8, !tbaa !254
  %.phi.trans.insert = getelementptr inbounds i32*, i32** %.pre94, i64 %110
  %.pre95 = load i32*, i32** %.phi.trans.insert, align 8, !tbaa !5
  br label %.lr.ph48

._crit_edge49.loopexit:                           ; preds = %.lr.ph48
  br label %._crit_edge49

._crit_edge49:                                    ; preds = %._crit_edge49.loopexit, %354
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %357 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %458, label %393

.lr.ph48:                                         ; preds = %.lr.ph48, %.lr.ph48.preheader
  %359 = phi i32* [ %.pre95, %.lr.ph48.preheader ], [ %376, %.lr.ph48 ]
  %indvars.iv79 = phi i64 [ 0, %.lr.ph48.preheader ], [ %indvars.iv.next80, %.lr.ph48 ]
  %360 = phi i32 [ %355, %.lr.ph48.preheader ], [ %390, %.lr.ph48 ]
  %361 = getelementptr inbounds i32, i32* %359, i64 %indvars.iv79
  %362 = load i32, i32* %361, align 4, !tbaa !1
  %363 = load i32*, i32** %105, align 8, !tbaa !250
  %364 = getelementptr inbounds i32, i32* %363, i64 %110
  %365 = load i32, i32* %364, align 4, !tbaa !1
  %366 = trunc i64 %indvars.iv79 to i32
  %367 = sub i32 %366, %360
  %368 = add i32 %367, %365
  %369 = shl nsw i32 %368, 2
  %370 = sext i32 %369 to i64
  %371 = load double*, double** %130, align 8, !tbaa !159
  %372 = getelementptr inbounds double, double* %371, i64 %370
  %373 = call i32 @_ZN4Atom11pack_borderEiPdPi(%class.Atom* nonnull %atom, i32 %362, double* %372, i32* %93)
  %374 = load i32**, i32*** %112, align 8, !tbaa !254
  %375 = getelementptr inbounds i32*, i32** %374, i64 %110
  %376 = load i32*, i32** %375, align 8, !tbaa !5
  %377 = getelementptr inbounds i32, i32* %376, i64 %indvars.iv79
  %378 = load i32, i32* %377, align 4, !tbaa !1
  %379 = load i32*, i32** %105, align 8, !tbaa !250
  %380 = getelementptr inbounds i32, i32* %379, i64 %110
  %381 = load i32, i32* %380, align 4, !tbaa !1
  %382 = add nsw i32 %381, %366
  %383 = load i32, i32* %nsend, align 4, !tbaa !1
  %384 = sub i32 %382, %383
  %385 = sext i32 %384 to i64
  %386 = load i32**, i32*** %140, align 8, !tbaa !160
  %387 = getelementptr inbounds i32*, i32** %386, i64 %indvars.iv83
  %388 = load i32*, i32** %387, align 8, !tbaa !5
  %389 = getelementptr inbounds i32, i32* %388, i64 %385
  store i32 %378, i32* %389, align 4, !tbaa !1
  %indvars.iv.next80 = add nuw nsw i64 %indvars.iv79, 1
  %390 = load i32, i32* %nsend, align 4, !tbaa !1
  %391 = sext i32 %390 to i64
  %392 = icmp slt i64 %indvars.iv.next80, %391
  br i1 %392, label %.lr.ph48, label %._crit_edge49.loopexit

; <label>:393                                     ; preds = %._crit_edge49
  %394 = load %class.ThreadData*, %class.ThreadData** %.pre-phi104, align 8, !tbaa !22
  %395 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %394, i64 0, i32 3
  %396 = load i32, i32* %395, align 4, !tbaa !18
  %397 = add nsw i32 %396, -1
  %398 = sext i32 %397 to i64
  %399 = load i32*, i32** %105, align 8, !tbaa !250
  %400 = getelementptr inbounds i32, i32* %399, i64 %398
  %401 = load i32, i32* %400, align 4, !tbaa !1
  store i32 %401, i32* %nsend, align 4, !tbaa !1
  %402 = load i32*, i32** %128, align 8, !tbaa !161
  %403 = getelementptr inbounds i32, i32* %402, i64 %indvars.iv83
  %404 = load i32, i32* %403, align 4, !tbaa !1
  %405 = load i32, i32* %129, align 8, !tbaa !95
  %406 = icmp eq i32 %404, %405
  br i1 %406, label %454, label %407

; <label>:407                                     ; preds = %393
  %408 = invoke i32 @MPI_Send(i8* nonnull %2, i32 1, i32 1275069445, i32 %404, i32 0, i32 1140850688)
          to label %409 unwind label %429

; <label>:409                                     ; preds = %407
  %410 = load i32*, i32** %133, align 8, !tbaa !164
  %411 = getelementptr inbounds i32, i32* %410, i64 %indvars.iv83
  %412 = load i32, i32* %411, align 4, !tbaa !1
  %413 = invoke i32 @MPI_Recv(i8* %3, i32 1, i32 1275069445, i32 %412, i32 0, i32 1140850688, %class.ThreadData* nonnull %status)
          to label %414 unwind label %429

; <label>:414                                     ; preds = %409
  %415 = load i32, i32* %nrecv, align 4, !tbaa !1
  %416 = load i32, i32* %134, align 8, !tbaa !98
  %417 = mul nsw i32 %416, %415
  %418 = load i32, i32* %135, align 4, !tbaa !232
  %419 = icmp sgt i32 %417, %418
  br i1 %419, label %420, label %._crit_edge96

._crit_edge96:                                    ; preds = %414
  %.pre97 = load i8*, i8** %137, align 8, !tbaa !162
  br label %432

; <label>:420                                     ; preds = %414
  %421 = sitofp i32 %417 to double
  %422 = fmul double %421, 1.500000e+00
  %423 = fptosi double %422 to i32
  store i32 %423, i32* %135, align 4, !tbaa !232
  %424 = load i8*, i8** %137, align 8, !tbaa !162
  call void @free(i8* %424) #7
  %425 = load i32, i32* %135, align 4, !tbaa !232
  %426 = sext i32 %425 to i64
  %427 = shl nsw i64 %426, 3
  %428 = call noalias i8* @malloc(i64 %427) #7
  store i8* %428, i8** %137, align 8, !tbaa !162
  %.pre98 = load i32, i32* %nrecv, align 4, !tbaa !1
  %.pre99 = load i32, i32* %134, align 8, !tbaa !98
  br label %432

; <label>:429                                     ; preds = %450, %441, %432, %409, %407
  %430 = landingpad { i8*, i32 }
          catch i8* null
  %431 = extractvalue { i8*, i32 } %430, 0
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %569

; <label>:432                                     ; preds = %420, %._crit_edge96
  %433 = phi i32 [ %416, %._crit_edge96 ], [ %.pre99, %420 ]
  %434 = phi i32 [ %415, %._crit_edge96 ], [ %.pre98, %420 ]
  %435 = phi i8* [ %.pre97, %._crit_edge96 ], [ %428, %420 ]
  %436 = mul nsw i32 %433, %434
  %437 = load i32*, i32** %133, align 8, !tbaa !164
  %438 = getelementptr inbounds i32, i32* %437, i64 %indvars.iv83
  %439 = load i32, i32* %438, align 4, !tbaa !1
  %440 = invoke i32 @MPI_Irecv(i8* %435, i32 %436, i32 1275070475, i32 %439, i32 0, i32 1140850688, i32* nonnull %request)
          to label %441 unwind label %429

; <label>:441                                     ; preds = %432
  %442 = load i8*, i8** %138, align 8, !tbaa !159
  %443 = load i32, i32* %nsend, align 4, !tbaa !1
  %444 = load i32, i32* %134, align 8, !tbaa !98
  %445 = mul nsw i32 %444, %443
  %446 = load i32*, i32** %128, align 8, !tbaa !161
  %447 = getelementptr inbounds i32, i32* %446, i64 %indvars.iv83
  %448 = load i32, i32* %447, align 4, !tbaa !1
  %449 = invoke i32 @MPI_Send(i8* %442, i32 %445, i32 1275070475, i32 %448, i32 0, i32 1140850688)
          to label %450 unwind label %429

; <label>:450                                     ; preds = %441
  %451 = invoke i32 @MPI_Wait(i32* nonnull %request, %class.ThreadData* nonnull %status)
          to label %452 unwind label %429

; <label>:452                                     ; preds = %450
  %453 = load i64, i64* %139, align 8, !tbaa !162
  store i64 %453, i64* %132, align 8, !tbaa !259
  %.pre100 = load i32, i32* %nrecv, align 4, !tbaa !1
  br label %456

; <label>:454                                     ; preds = %393
  store i32 %401, i32* %nrecv, align 4, !tbaa !1
  %455 = load i64, i64* %131, align 8, !tbaa !159
  store i64 %455, i64* %132, align 8, !tbaa !259
  br label %456

; <label>:456                                     ; preds = %454, %452
  %457 = phi i32 [ %401, %454 ], [ %.pre100, %452 ]
  store i32 %457, i32* %113, align 8, !tbaa !257
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %458

; <label>:458                                     ; preds = %456, %._crit_edge49
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %459 = load i32, i32* %.pre102, align 4, !tbaa !84
  %460 = load i32, i32* %7, align 8, !tbaa !114
  %461 = add nsw i32 %460, %459
  %462 = load i32, i32* %113, align 8, !tbaa !257
  store i32 %462, i32* %nrecv, align 4, !tbaa !1
  %463 = add nsw i32 %462, -1
  %464 = icmp sgt i32 %462, 0
  br i1 %464, label %465, label %485

; <label>:465                                     ; preds = %458
  call void @llvm.lifetime.start(i64 4, i8* %114) #7
  store i32 0, i32* %.omp.lb16, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %115) #7
  store i32 %463, i32* %.omp.ub17, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %116) #7
  store i32 1, i32* %.omp.stride18, align 4, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %117) #7
  store i32 0, i32* %.omp.is_last19, align 4, !tbaa !1
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @19, i32 %1, i32 34, i32* nonnull %.omp.is_last19, i32* nonnull %.omp.lb16, i32* nonnull %.omp.ub17, i32* nonnull %.omp.stride18, i32 1, i32 1)
  %466 = load i32, i32* %.omp.ub17, align 4, !tbaa !1
  %467 = icmp sgt i32 %466, %463
  %468 = select i1 %467, i32 %463, i32 %466
  store i32 %468, i32* %.omp.ub17, align 4, !tbaa !1
  %469 = load i32, i32* %.omp.lb16, align 4, !tbaa !1
  %470 = icmp sgt i32 %469, %468
  br i1 %470, label %._crit_edge53, label %.lr.ph52.preheader

.lr.ph52.preheader:                               ; preds = %465
  %471 = sext i32 %469 to i64
  %472 = zext i32 %461 to i64
  br label %.lr.ph52

.lr.ph52:                                         ; preds = %481, %.lr.ph52.preheader
  %indvars.iv81 = phi i64 [ %471, %.lr.ph52.preheader ], [ %indvars.iv.next82, %481 ]
  %473 = add i64 %472, %indvars.iv81
  %474 = trunc i64 %indvars.iv81 to i32
  %475 = shl nsw i32 %474, 2
  %476 = sext i32 %475 to i64
  %477 = load double*, double** %118, align 8, !tbaa !259
  %478 = getelementptr inbounds double, double* %477, i64 %476
  %479 = trunc i64 %473 to i32
  %480 = invoke i32 @_ZN4Atom13unpack_borderEiPd(%class.Atom* nonnull %atom, i32 %479, double* %478)
          to label %481 unwind label %566

; <label>:481                                     ; preds = %.lr.ph52
  %482 = load i32, i32* %.omp.ub17, align 4, !tbaa !1
  %483 = sext i32 %482 to i64
  %484 = icmp slt i64 %indvars.iv81, %483
  %indvars.iv.next82 = add i64 %indvars.iv81, 1
  br i1 %484, label %.lr.ph52, label %._crit_edge53.loopexit

._crit_edge53.loopexit:                           ; preds = %481
  br label %._crit_edge53

._crit_edge53:                                    ; preds = %._crit_edge53.loopexit, %465
  call void @__kmpc_for_static_fini(%ident_t* nonnull @19, i32 %1)
  br label %485

; <label>:485                                     ; preds = %._crit_edge53, %458
  call void @llvm.lifetime.end(i64 4, i8* %117) #7
  call void @llvm.lifetime.end(i64 4, i8* %116) #7
  call void @llvm.lifetime.end(i64 4, i8* %115) #7
  call void @llvm.lifetime.end(i64 4, i8* %114) #7
  call void @__kmpc_barrier(%ident_t* nonnull @21, i32 %1)
  %486 = call i32 @__kmpc_master(%ident_t* nonnull @19, i32 %1)
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %523, label %488

; <label>:488                                     ; preds = %485
  %489 = load i32, i32* %nsend, align 4, !tbaa !1
  %490 = load i32*, i32** %119, align 8, !tbaa !158
  %491 = getelementptr inbounds i32, i32* %490, i64 %indvars.iv83
  store i32 %489, i32* %491, align 4, !tbaa !1
  %492 = load i32, i32* %nrecv, align 4, !tbaa !1
  %493 = load i32*, i32** %120, align 8, !tbaa !166
  %494 = getelementptr inbounds i32, i32* %493, i64 %indvars.iv83
  store i32 %492, i32* %494, align 4, !tbaa !1
  %495 = load i32, i32* %nsend, align 4, !tbaa !1
  %496 = load i32, i32* %121, align 8, !tbaa !96
  %497 = mul nsw i32 %496, %495
  %498 = load i32*, i32** %122, align 8, !tbaa !165
  %499 = getelementptr inbounds i32, i32* %498, i64 %indvars.iv83
  store i32 %497, i32* %499, align 4, !tbaa !1
  %500 = load i32, i32* %nrecv, align 4, !tbaa !1
  %501 = load i32, i32* %121, align 8, !tbaa !96
  %502 = mul nsw i32 %501, %500
  %503 = load i32*, i32** %123, align 8, !tbaa !163
  %504 = getelementptr inbounds i32, i32* %503, i64 %indvars.iv83
  store i32 %502, i32* %504, align 4, !tbaa !1
  %505 = load i32, i32* %nrecv, align 4, !tbaa !1
  %506 = load i32, i32* %124, align 4, !tbaa !97
  %507 = mul nsw i32 %506, %505
  %508 = load i32*, i32** %125, align 8, !tbaa !243
  %509 = getelementptr inbounds i32, i32* %508, i64 %indvars.iv83
  store i32 %507, i32* %509, align 4, !tbaa !1
  %510 = load i32, i32* %nsend, align 4, !tbaa !1
  %511 = load i32, i32* %124, align 4, !tbaa !97
  %512 = mul nsw i32 %511, %510
  %513 = load i32*, i32** %126, align 8, !tbaa !244
  %514 = getelementptr inbounds i32, i32* %513, i64 %indvars.iv83
  store i32 %512, i32* %514, align 4, !tbaa !1
  %515 = load i32, i32* %.pre102, align 4, !tbaa !84
  %516 = load i32, i32* %7, align 8, !tbaa !114
  %517 = add nsw i32 %516, %515
  %518 = load i32*, i32** %127, align 8, !tbaa !167
  %519 = getelementptr inbounds i32, i32* %518, i64 %indvars.iv83
  store i32 %517, i32* %519, align 4, !tbaa !1
  %520 = load i32, i32* %nrecv, align 4, !tbaa !1
  %521 = load i32, i32* %7, align 8, !tbaa !114
  %522 = add nsw i32 %521, %520
  store i32 %522, i32* %7, align 8, !tbaa !114
  call void @__kmpc_end_master(%ident_t* nonnull @19, i32 %1)
  br label %523

; <label>:523                                     ; preds = %488, %485
  call void @__kmpc_barrier(%ident_t* nonnull @20, i32 %1)
  %524 = add nsw i32 %iswap.157, 1
  %525 = add nuw nsw i32 %ineed.056, 1
  %526 = load i32, i32* %143, align 4, !tbaa !1
  %527 = shl nsw i32 %526, 1
  %528 = icmp slt i32 %525, %527
  %indvars.iv.next84 = add i64 %indvars.iv83, 1
  br i1 %528, label %.lr.ph58, label %._crit_edge59.loopexit

._crit_edge59.loopexit:                           ; preds = %523
  br label %._crit_edge59

._crit_edge59:                                    ; preds = %._crit_edge59.loopexit, %.preheader23
  %iswap.1.lcssa = phi i32 [ %iswap.065, %.preheader23 ], [ %524, %._crit_edge59.loopexit ]
  %nfirst.1.lcssa = phi i32 [ %nfirst.062, %.preheader23 ], [ %nfirst.2, %._crit_edge59.loopexit ]
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 1
  %529 = icmp slt i64 %indvars.iv.next86, 3
  br i1 %529, label %.preheader23, label %.preheader

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %max2.031 = phi i32 [ %536, %scalar.ph ], [ %max2.031.ph, %scalar.ph.preheader ]
  %max1.030 = phi i32 [ %max1.0., %scalar.ph ], [ %max1.030.ph, %scalar.ph.preheader ]
  %530 = getelementptr inbounds i32, i32* %151, i64 %indvars.iv
  %531 = load i32, i32* %530, align 4, !tbaa !1
  %532 = icmp sgt i32 %max1.030, %531
  %max1.0. = select i1 %532, i32 %max1.030, i32 %531
  %533 = getelementptr inbounds i32, i32* %152, i64 %indvars.iv
  %534 = load i32, i32* %533, align 4, !tbaa !1
  %535 = icmp sgt i32 %max2.031, %534
  %536 = select i1 %535, i32 %max2.031, i32 %534
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %537 = icmp slt i64 %indvars.iv.next, %153
  br i1 %537, label %scalar.ph, label %._crit_edge.loopexit, !llvm.loop !260

._crit_edge.loopexit:                             ; preds = %scalar.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %.preheader
  %max2.0.lcssa = phi i32 [ 0, %.preheader ], [ %206, %middle.block ], [ %536, %._crit_edge.loopexit ]
  %max1.0.lcssa = phi i32 [ 0, %.preheader ], [ %205, %middle.block ], [ %max1.0., %._crit_edge.loopexit ]
  %538 = bitcast i32* %142 to i64*
  %539 = load i64, i64* %538, align 8
  %540 = trunc i64 %539 to i32
  %541 = icmp sgt i32 %max1.0.lcssa, %540
  %542 = lshr i64 %539, 32
  %543 = trunc i64 %542 to i32
  br i1 %541, label %544, label %553

; <label>:544                                     ; preds = %._crit_edge
  %545 = sitofp i32 %max1.0.lcssa to double
  %546 = fmul double %545, 1.500000e+00
  %547 = fptosi double %546 to i32
  store i32 %547, i32* %142, align 8, !tbaa !231
  %548 = load i8*, i8** %138, align 8, !tbaa !159
  %549 = add nsw i32 %547, 100
  %550 = sext i32 %549 to i64
  %551 = shl nsw i64 %550, 3
  %552 = call i8* @realloc(i8* %548, i64 %551) #7
  store i8* %552, i8** %138, align 8, !tbaa !159
  %.pre101 = load i32, i32* %135, align 4, !tbaa !232
  br label %553

; <label>:553                                     ; preds = %544, %._crit_edge
  %554 = phi i32 [ %.pre101, %544 ], [ %543, %._crit_edge ]
  %555 = icmp sgt i32 %max2.0.lcssa, %554
  br i1 %555, label %556, label %565

; <label>:556                                     ; preds = %553
  %557 = sitofp i32 %max2.0.lcssa to double
  %558 = fmul double %557, 1.500000e+00
  %559 = fptosi double %558 to i32
  store i32 %559, i32* %135, align 4, !tbaa !232
  %560 = load i8*, i8** %137, align 8, !tbaa !162
  call void @free(i8* %560) #7
  %561 = load i32, i32* %135, align 4, !tbaa !232
  %562 = sext i32 %561 to i64
  %563 = shl nsw i64 %562, 3
  %564 = call noalias i8* @malloc(i64 %563) #7
  store i8* %564, i8** %137, align 8, !tbaa !162
  br label %565

; <label>:565                                     ; preds = %556, %553
  call void @llvm.lifetime.end(i64 20, i8* %6) #7
  call void @llvm.lifetime.end(i64 4, i8* %5) #7
  call void @llvm.lifetime.end(i64 16, i8* %4) #7
  call void @llvm.lifetime.end(i64 4, i8* %3) #7
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  ret void

; <label>:566                                     ; preds = %.lr.ph52
  %567 = landingpad { i8*, i32 }
          catch i8* null
  %568 = extractvalue { i8*, i32 } %567, 0
  call void @__clang_call_terminate(i8* %568) #17
  unreachable

; <label>:569                                     ; preds = %429, %26
  %.0 = phi i8* [ %431, %429 ], [ %28, %26 ]
  call void @__clang_call_terminate(i8* %.0) #17
  unreachable
}

; Function Attrs: nounwind uwtable
define void @_ZN4Comm8growlistEii(%class.Comm* nocapture readonly %this, i32 %iswap, i32 %n) #9 align 2 {
  %1 = sitofp i32 %n to double
  %2 = fmul double %1, 1.500000e+00
  %3 = fptosi double %2 to i32
  %4 = sext i32 %iswap to i64
  %5 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 18
  %6 = load i32*, i32** %5, align 8, !tbaa !246
  %7 = getelementptr inbounds i32, i32* %6, i64 %4
  store i32 %3, i32* %7, align 4, !tbaa !1
  %8 = getelementptr inbounds %class.Comm, %class.Comm* %this, i64 0, i32 17
  %9 = load i32**, i32*** %8, align 8, !tbaa !160
  %10 = getelementptr inbounds i32*, i32** %9, i64 %4
  %11 = bitcast i32** %10 to i8**
  %12 = load i8*, i8** %11, align 8, !tbaa !5
  %13 = sext i32 %3 to i64
  %14 = shl nsw i64 %13, 2
  %15 = tail call i8* @realloc(i8* %12, i64 %14) #7
  %16 = load i32**, i32*** %8, align 8, !tbaa !160
  %17 = getelementptr inbounds i32*, i32** %16, i64 %4
  %18 = bitcast i32** %17 to i8**
  store i8* %15, i8** %18, align 8, !tbaa !5
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN5TimerC2Ev(%class.Timer* nocapture %this) unnamed_addr #9 align 2 {
  %1 = tail call noalias i8* @malloc(i64 40) #7
  %2 = bitcast %class.Timer* %this to i8**
  store i8* %1, i8** %2, align 8, !tbaa !74
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 40, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @_ZN5TimerD2Ev(%class.Timer* nocapture readonly %this) unnamed_addr #9 align 2 {
  %1 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 0
  %2 = load double*, double** %1, align 8, !tbaa !74
  %3 = icmp eq double* %2, null
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = bitcast double* %2 to i8*
  tail call void @free(i8* %5) #7
  br label %6

; <label>:6                                       ; preds = %4, %0
  ret void
}

; Function Attrs: uwtable
define void @_ZN5Timer5stampEv(%class.Timer* nocapture %this) #11 align 2 {
  %1 = tail call double @MPI_Wtime()
  %2 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 1
  store double %1, double* %2, align 8, !tbaa !261
  ret void
}

declare double @MPI_Wtime() #2

; Function Attrs: uwtable
define void @_ZN5Timer5stampEi(%class.Timer* nocapture %this, i32 %which) #11 align 2 {
  %1 = tail call double @MPI_Wtime()
  %2 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 1
  %3 = load double, double* %2, align 8, !tbaa !261
  %4 = fsub double %1, %3
  %5 = sext i32 %which to i64
  %6 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 0
  %7 = load double*, double** %6, align 8, !tbaa !74
  %8 = getelementptr inbounds double, double* %7, i64 %5
  %9 = load double, double* %8, align 8, !tbaa !33
  %10 = fadd double %4, %9
  store double %10, double* %8, align 8, !tbaa !33
  store double %1, double* %2, align 8, !tbaa !261
  ret void
}

; Function Attrs: uwtable
define void @_ZN5Timer17stamp_extra_startEv(%class.Timer* nocapture %this) #11 align 2 {
  %1 = tail call double @MPI_Wtime()
  %2 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 2
  store double %1, double* %2, align 8, !tbaa !262
  ret void
}

; Function Attrs: uwtable
define void @_ZN5Timer16stamp_extra_stopEi(%class.Timer* nocapture %this, i32 %which) #11 align 2 {
  %1 = tail call double @MPI_Wtime()
  %2 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 2
  %3 = load double, double* %2, align 8, !tbaa !262
  %4 = fsub double %1, %3
  %5 = sext i32 %which to i64
  %6 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 0
  %7 = load double*, double** %6, align 8, !tbaa !74
  %8 = getelementptr inbounds double, double* %7, i64 %5
  %9 = load double, double* %8, align 8, !tbaa !33
  %10 = fadd double %4, %9
  store double %10, double* %8, align 8, !tbaa !33
  store double %1, double* %2, align 8, !tbaa !262
  ret void
}

; Function Attrs: uwtable
define void @_ZN5Timer13barrier_startEi(%class.Timer* nocapture readonly %this, i32 %which) #11 align 2 {
  %1 = tail call i32 @MPI_Barrier(i32 1140850688)
  %2 = tail call double @MPI_Wtime()
  %3 = sext i32 %which to i64
  %4 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 0
  %5 = load double*, double** %4, align 8, !tbaa !74
  %6 = getelementptr inbounds double, double* %5, i64 %3
  store double %2, double* %6, align 8, !tbaa !33
  ret void
}

; Function Attrs: uwtable
define void @_ZN5Timer12barrier_stopEi(%class.Timer* nocapture readonly %this, i32 %which) #11 align 2 {
  %1 = tail call i32 @MPI_Barrier(i32 1140850688)
  %2 = tail call double @MPI_Wtime()
  %3 = sext i32 %which to i64
  %4 = getelementptr inbounds %class.Timer, %class.Timer* %this, i64 0, i32 0
  %5 = load double*, double** %4, align 8, !tbaa !74
  %6 = getelementptr inbounds double, double* %5, i64 %3
  %7 = load double, double* %6, align 8, !tbaa !33
  %8 = fsub double %2, %7
  store double %8, double* %6, align 8, !tbaa !33
  ret void
}

; Function Attrs: uwtable
define void @_Z6outputR2InR4AtomP5ForceR8NeighborR4CommR6ThermoR9IntegrateR5Timeri(%struct.In* nocapture readonly dereferenceable(112) %in, %class.Atom* dereferenceable(224) %atom, %class.Force* nocapture readonly %force, %class.Neighbor* nocapture readonly dereferenceable(240) %neighbor, %class.Comm* nocapture readonly dereferenceable(336) %comm, %class.Thermo* nocapture readonly dereferenceable(128) %thermo, %class.Integrate* nocapture readonly dereferenceable(88) %integrate, %class.Timer* nocapture readonly dereferenceable(24) %timer, i32 %screen_yaml) #11 {
  %me = alloca i32, align 4
  %nprocs = alloca i32, align 4
  %histo = alloca [10 x i32], align 16
  %tmp = alloca double, align 8
  %ave = alloca double, align 8
  %max = alloca double, align 8
  %min = alloca double, align 8
  %total = alloca double, align 8
  %natoms = alloca i32, align 4
  %nlost = alloca i32, align 4
  %nlostall = alloca i32, align 4
  %general_time = alloca i64, align 8
  %filename = alloca [256 x i8], align 16
  %time_total = alloca double, align 8
  %time_force = alloca double, align 8
  %time_neigh = alloca double, align 8
  %time_comm = alloca double, align 8
  %time_other = alloca double, align 8
  %1 = bitcast i32* %me to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = bitcast i32* %nprocs to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %3 = bitcast [10 x i32]* %histo to i8*
  call void @llvm.lifetime.start(i64 40, i8* %3) #7
  %4 = bitcast double* %tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #7
  %5 = bitcast double* %ave to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #7
  %6 = bitcast double* %max to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #7
  %7 = bitcast double* %min to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #7
  %8 = bitcast double* %total to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #7
  %9 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %me)
  %10 = call i32 @MPI_Comm_size(i32 1140850688, i32* nonnull %nprocs)
  call void @_ZN4Atom3pbcEv(%class.Atom* nonnull %atom)
  %11 = bitcast i32* %natoms to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #7
  %12 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %13 = bitcast i32* %12 to i8*
  %14 = call i32 @MPI_Allreduce(i8* %13, i8* %11, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
  %15 = bitcast i32* %nlost to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #7
  store i32 0, i32* %nlost, align 4, !tbaa !1
  %16 = load i32, i32* %12, align 4, !tbaa !84
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %.lr.ph166, label %._crit_edge167

.lr.ph166:                                        ; preds = %0
  %18 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 4
  %19 = load double*, double** %18, align 8
  %20 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %22 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %23 = sext i32 %16 to i64
  br label %24

; <label>:24                                      ; preds = %51, %.lr.ph166
  %25 = phi i32 [ 0, %.lr.ph166 ], [ %52, %51 ]
  %indvars.iv231 = phi i64 [ 0, %.lr.ph166 ], [ %indvars.iv.next232, %51 ]
  %26 = mul nuw nsw i64 %indvars.iv231, 3
  %27 = getelementptr inbounds double, double* %19, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !33
  %29 = fcmp olt double %28, 0.000000e+00
  br i1 %29, label %49, label %30

; <label>:30                                      ; preds = %24
  %31 = load double, double* %20, align 8, !tbaa !62
  %32 = fcmp ult double %28, %31
  br i1 %32, label %33, label %49

; <label>:33                                      ; preds = %30
  %34 = add nuw nsw i64 %26, 1
  %35 = getelementptr inbounds double, double* %19, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !33
  %37 = fcmp olt double %36, 0.000000e+00
  br i1 %37, label %49, label %38

; <label>:38                                      ; preds = %33
  %39 = load double, double* %21, align 8, !tbaa !63
  %40 = fcmp ult double %36, %39
  br i1 %40, label %41, label %49

; <label>:41                                      ; preds = %38
  %42 = add nuw nsw i64 %26, 2
  %43 = getelementptr inbounds double, double* %19, i64 %42
  %44 = load double, double* %43, align 8, !tbaa !33
  %45 = fcmp olt double %44, 0.000000e+00
  br i1 %45, label %49, label %46

; <label>:46                                      ; preds = %41
  %47 = load double, double* %22, align 8, !tbaa !64
  %48 = fcmp ult double %44, %47
  br i1 %48, label %51, label %49

; <label>:49                                      ; preds = %46, %41, %38, %33, %30, %24
  %50 = add nsw i32 %25, 1
  store i32 %50, i32* %nlost, align 4, !tbaa !1
  br label %51

; <label>:51                                      ; preds = %49, %46
  %52 = phi i32 [ %25, %46 ], [ %50, %49 ]
  %indvars.iv.next232 = add nuw nsw i64 %indvars.iv231, 1
  %53 = icmp slt i64 %indvars.iv.next232, %23
  br i1 %53, label %24, label %._crit_edge167.loopexit

._crit_edge167.loopexit:                          ; preds = %51
  br label %._crit_edge167

._crit_edge167:                                   ; preds = %._crit_edge167.loopexit, %0
  %54 = bitcast i32* %nlostall to i8*
  call void @llvm.lifetime.start(i64 4, i8* %54) #7
  %55 = call i32 @MPI_Allreduce(i8* %15, i8* %54, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
  %56 = load i32, i32* %natoms, align 4, !tbaa !1
  %57 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %58 = load i32, i32* %57, align 8, !tbaa !65
  %59 = icmp ne i32 %56, %58
  %60 = load i32, i32* %nlostall, align 4
  %61 = icmp sgt i32 %60, 0
  %or.cond = or i1 %59, %61
  br i1 %or.cond, label %62, label %69

; <label>:62                                      ; preds = %._crit_edge167
  %63 = load i32, i32* %me, align 4, !tbaa !1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %.thread

; <label>:65                                      ; preds = %62
  %66 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.182, i64 0, i64 0), i32 %60, i32 %56, i32 %58)
  %.pr = load i32, i32* %me, align 4, !tbaa !1
  %67 = icmp eq i32 %.pr, 0
  br i1 %67, label %68, label %.thread

; <label>:68                                      ; preds = %65
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @str.183, i64 0, i64 0))
  br label %.thread

; <label>:69                                      ; preds = %._crit_edge167
  %70 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 4
  %71 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 1
  %72 = load double, double* %71, align 8, !tbaa !59
  %73 = call double @pow(double %72, double 9.000000e+00) #7
  %74 = load double, double* %71, align 8, !tbaa !59
  %75 = call double @pow(double %74, double 3.000000e+00) #7
  %76 = load double, double* %71, align 8, !tbaa !59
  %77 = call double @pow(double %76, double 9.000000e+00) #7
  %78 = load double, double* %71, align 8, !tbaa !59
  %79 = call double @pow(double %78, double 3.000000e+00) #7
  %80 = load i32, i32* %me, align 4, !tbaa !1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %.thread102

; <label>:82                                      ; preds = %69
  %83 = bitcast i64* %general_time to i8*
  call void @llvm.lifetime.start(i64 8, i8* %83) #7
  %84 = call i64 @time(i64* null) #7
  store i64 %84, i64* %general_time, align 8, !tbaa !263
  %85 = call %struct.tm* @localtime(i64* nonnull %general_time) #7
  %86 = bitcast %struct.tm* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = trunc i64 %87 to i32
  %89 = lshr i64 %87, 32
  %90 = trunc i64 %89 to i32
  %91 = getelementptr inbounds %struct.tm, %struct.tm* %85, i64 0, i32 2
  %92 = bitcast i32* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = trunc i64 %93 to i32
  %95 = lshr i64 %93, 32
  %96 = trunc i64 %95 to i32
  %97 = getelementptr inbounds %struct.tm, %struct.tm* %85, i64 0, i32 4
  %98 = bitcast i32* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = trunc i64 %99 to i32
  %101 = lshr i64 %99, 32
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds [256 x i8], [256 x i8]* %filename, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %103) #7
  %104 = add nsw i32 %102, 1900
  %105 = add nsw i32 %100, 1
  %106 = call i32 (i8*, i8*, ...) @sprintf(i8* %103, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2.184, i64 0, i64 0), i32 %104, i32 %105, i32 %96, i32 %94, i32 %90, i32 %88) #7
  %107 = call %struct._IO_FILE* @fopen(i8* %103, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.185, i64 0, i64 0))
  %108 = icmp ne i32 %screen_yaml, 0
  br i1 %108, label %109, label %._crit_edge245

._crit_edge245:                                   ; preds = %82
  %.pre246 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 15
  %.pre247 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 9
  %.pre249 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %.pre251 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 7
  %.pre253 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %.pre255 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %.pre257 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %.pre261 = bitcast %struct.In* %in to i64*
  %.pre265 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %.pre267 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  %.pre269 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 13
  %.pre271 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 15
  %.pre273 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 4
  %.pre275 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %.pre277 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  %.pre279 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  %.pre281 = bitcast i32* %.pre279 to i64*
  %.pre285 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 0
  %.pre287 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 10
  %.pre289 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 0
  %.pre291 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 0
  %.pre293 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  %.pre295 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 8
  %.pre297 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 31
  br label %231

; <label>:109                                     ; preds = %82
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %111 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4.186, i64 0, i64 0), i64 20, i64 1, %struct._IO_FILE* %110)
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %113 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5.187, i64 0, i64 0), i64 45, i64 1, %struct._IO_FILE* %112)
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %115 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 15
  %116 = load %class.ThreadData*, %class.ThreadData** %115, align 8, !tbaa !28
  %117 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %116, i64 0, i32 1
  %118 = load i32, i32* %117, align 4, !tbaa !16
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6.188, i64 0, i64 0), i32 %118)
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %121 = load %class.ThreadData*, %class.ThreadData** %115, align 8, !tbaa !28
  %122 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %121, i64 0, i32 4
  %123 = load i32, i32* %122, align 4, !tbaa !13
  %124 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7.189, i64 0, i64 0), i32 %123)
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %126 = load %class.ThreadData*, %class.ThreadData** %115, align 8, !tbaa !28
  %127 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %126, i64 0, i32 3
  %128 = load i32, i32* %127, align 4, !tbaa !18
  %129 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %125, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.190, i64 0, i64 0), i32 %128)
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %131 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 9
  %132 = load i8*, i8** %131, align 8, !tbaa !7
  %133 = icmp eq i8* %132, null
  %. = select i1 %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.191, i64 0, i64 0), i8* %132
  %134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %130, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.192, i64 0, i64 0), i8* %.)
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %136 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 5
  %137 = load i32, i32* %136, align 8, !tbaa !11
  %138 = icmp eq i32 %137, 0
  %139 = select i1 %138, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.193, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.194, i64 0, i64 0)
  %140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11.195, i64 0, i64 0), i8* %139)
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %142 = load i32, i32* %57, align 8, !tbaa !65
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14.196, i64 0, i64 0), i32 %142)
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %145 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 7
  %146 = load i32, i32* %145, align 8, !tbaa !72
  %147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15.197, i64 0, i64 0), i32 %146)
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %149 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %150 = load double, double* %149, align 8, !tbaa !62
  %151 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %152 = load double, double* %151, align 8, !tbaa !63
  %153 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %154 = load double, double* %153, align 8, !tbaa !64
  %155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16.198, i64 0, i64 0), double %150, double %152, double %154)
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %157 = bitcast %struct.In* %in to i64*
  %158 = load i64, i64* %157, align 8
  %159 = trunc i64 %158 to i32
  %160 = lshr i64 %158, 32
  %161 = trunc i64 %160 to i32
  %162 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 2
  %163 = load i32, i32* %162, align 8, !tbaa !46
  %164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %156, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17.199, i64 0, i64 0), i32 %159, i32 %161, i32 %163)
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %166 = load double, double* %70, align 8, !tbaa !66
  %167 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %165, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18.200, i64 0, i64 0), double %166)
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %169 = getelementptr inbounds %struct.In, %struct.In* %in, i64 0, i32 6
  %170 = load i32, i32* %169, align 4, !tbaa !12
  %171 = icmp eq i32 %170, 0
  %172 = select i1 %171, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.193, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.201, i64 0, i64 0)
  %173 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %168, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.202, i64 0, i64 0), i8* %172)
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %175 = load double, double* %71, align 8, !tbaa !59
  %176 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21.203, i64 0, i64 0), double %175)
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %178 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 13
  %179 = load double*, double** %178, align 8, !tbaa !117
  %180 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 15
  %181 = load double*, double** %180, align 8, !tbaa !129
  %182 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.22.204, i64 0, i64 0), double* %179, double* %181)
  %183 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %184 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 4
  %185 = load double, double* %184, align 8, !tbaa !57
  %186 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %183, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23.205, i64 0, i64 0), double %185)
  %187 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %188 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 11
  %189 = load i32, i32* %188, align 4, !tbaa !41
  %190 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %187, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24.206, i64 0, i64 0), i32 %189)
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %192 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  %193 = load i32, i32* %192, align 4, !tbaa !47
  %194 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  %195 = bitcast i32* %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = trunc i64 %196 to i32
  %198 = lshr i64 %196, 32
  %199 = trunc i64 %198 to i32
  %200 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %191, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25.207, i64 0, i64 0), i32 %193, i32 %197, i32 %199)
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %202 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 0
  %203 = load i32, i32* %202, align 8, !tbaa !55
  %204 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %201, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26.208, i64 0, i64 0), i32 %203)
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %206 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 10
  %207 = load i32, i32* %206, align 8, !tbaa !54
  %208 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %205, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27.209, i64 0, i64 0), i32 %207)
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %210 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 0
  %211 = load double, double* %210, align 8, !tbaa !52
  %212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.28.210, i64 0, i64 0), double %211)
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %214 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 0
  %215 = load i32, i32* %214, align 8, !tbaa !61
  %216 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %213, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29.211, i64 0, i64 0), i32 %215)
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %218 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 12
  %219 = load i32, i32* %218, align 8, !tbaa !35
  %220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %217, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30.212, i64 0, i64 0), i32 %219)
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %222 = getelementptr inbounds %class.Force, %class.Force* %force, i64 0, i32 8
  %223 = load i32, i32* %222, align 4, !tbaa !40
  %224 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %221, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.213, i64 0, i64 0), i32 %223)
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %226 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 31
  %227 = load i32, i32* %226, align 4, !tbaa !39
  %228 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32.214, i64 0, i64 0), i32 %227)
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %230 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %229, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.33.215, i64 0, i64 0), i32 8)
  br label %231

; <label>:231                                     ; preds = %109, %._crit_edge245
  %.pre-phi298 = phi i32* [ %.pre297, %._crit_edge245 ], [ %226, %109 ]
  %.pre-phi296 = phi i32* [ %.pre295, %._crit_edge245 ], [ %222, %109 ]
  %.pre-phi294 = phi i32* [ %.pre293, %._crit_edge245 ], [ %218, %109 ]
  %.pre-phi292 = phi i32* [ %.pre291, %._crit_edge245 ], [ %214, %109 ]
  %.pre-phi290 = phi double* [ %.pre289, %._crit_edge245 ], [ %210, %109 ]
  %.pre-phi288 = phi i32* [ %.pre287, %._crit_edge245 ], [ %206, %109 ]
  %.pre-phi286 = phi i32* [ %.pre285, %._crit_edge245 ], [ %202, %109 ]
  %.pre-phi282 = phi i64* [ %.pre281, %._crit_edge245 ], [ %195, %109 ]
  %.pre-phi278 = phi i32* [ %.pre277, %._crit_edge245 ], [ %192, %109 ]
  %.pre-phi276 = phi i32* [ %.pre275, %._crit_edge245 ], [ %188, %109 ]
  %.pre-phi274 = phi double* [ %.pre273, %._crit_edge245 ], [ %184, %109 ]
  %.pre-phi272 = phi double** [ %.pre271, %._crit_edge245 ], [ %180, %109 ]
  %.pre-phi270 = phi double** [ %.pre269, %._crit_edge245 ], [ %178, %109 ]
  %.pre-phi268 = phi i32* [ %.pre267, %._crit_edge245 ], [ %169, %109 ]
  %.pre-phi266 = phi i32* [ %.pre265, %._crit_edge245 ], [ %162, %109 ]
  %.pre-phi262 = phi i64* [ %.pre261, %._crit_edge245 ], [ %157, %109 ]
  %.pre-phi258 = phi double* [ %.pre257, %._crit_edge245 ], [ %153, %109 ]
  %.pre-phi256 = phi double* [ %.pre255, %._crit_edge245 ], [ %151, %109 ]
  %.pre-phi254 = phi double* [ %.pre253, %._crit_edge245 ], [ %149, %109 ]
  %.pre-phi252 = phi i32* [ %.pre251, %._crit_edge245 ], [ %145, %109 ]
  %.pre-phi250 = phi i32* [ %.pre249, %._crit_edge245 ], [ %136, %109 ]
  %.pre-phi248 = phi i8** [ %.pre247, %._crit_edge245 ], [ %131, %109 ]
  %.pre-phi = phi %class.ThreadData** [ %.pre246, %._crit_edge245 ], [ %115, %109 ]
  %232 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4.186, i64 0, i64 0), i64 20, i64 1, %struct._IO_FILE* %107)
  %233 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5.187, i64 0, i64 0), i64 45, i64 1, %struct._IO_FILE* %107)
  %234 = load %class.ThreadData*, %class.ThreadData** %.pre-phi, align 8, !tbaa !28
  %235 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %234, i64 0, i32 1
  %236 = load i32, i32* %235, align 4, !tbaa !16
  %237 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6.188, i64 0, i64 0), i32 %236)
  %238 = load %class.ThreadData*, %class.ThreadData** %.pre-phi, align 8, !tbaa !28
  %239 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %238, i64 0, i32 4
  %240 = load i32, i32* %239, align 4, !tbaa !13
  %241 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7.189, i64 0, i64 0), i32 %240)
  %242 = load %class.ThreadData*, %class.ThreadData** %.pre-phi, align 8, !tbaa !28
  %243 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %242, i64 0, i32 3
  %244 = load i32, i32* %243, align 4, !tbaa !18
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.190, i64 0, i64 0), i32 %244)
  %246 = load i8*, i8** %.pre-phi248, align 8, !tbaa !7
  %247 = icmp eq i8* %246, null
  %.65 = select i1 %247, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.191, i64 0, i64 0), i8* %246
  %248 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.192, i64 0, i64 0), i8* %.65)
  %249 = load i32, i32* %.pre-phi250, align 8, !tbaa !11
  %250 = icmp eq i32 %249, 0
  %251 = select i1 %250, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.193, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.194, i64 0, i64 0)
  %252 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11.195, i64 0, i64 0), i8* %251)
  %253 = load i32, i32* %57, align 8, !tbaa !65
  %254 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14.196, i64 0, i64 0), i32 %253)
  %255 = load i32, i32* %.pre-phi252, align 8, !tbaa !72
  %256 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15.197, i64 0, i64 0), i32 %255)
  %257 = load double, double* %.pre-phi254, align 8, !tbaa !62
  %258 = load double, double* %.pre-phi256, align 8, !tbaa !63
  %259 = load double, double* %.pre-phi258, align 8, !tbaa !64
  %260 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16.198, i64 0, i64 0), double %257, double %258, double %259)
  %261 = load i64, i64* %.pre-phi262, align 8
  %262 = trunc i64 %261 to i32
  %263 = lshr i64 %261, 32
  %264 = trunc i64 %263 to i32
  %265 = load i32, i32* %.pre-phi266, align 8, !tbaa !46
  %266 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17.199, i64 0, i64 0), i32 %262, i32 %264, i32 %265)
  %267 = load double, double* %70, align 8, !tbaa !66
  %268 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18.200, i64 0, i64 0), double %267)
  %269 = load i32, i32* %.pre-phi268, align 4, !tbaa !12
  %270 = icmp eq i32 %269, 0
  %271 = select i1 %270, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.193, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.201, i64 0, i64 0)
  %272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.202, i64 0, i64 0), i8* %271)
  %273 = load double, double* %71, align 8, !tbaa !59
  %274 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21.203, i64 0, i64 0), double %273)
  %275 = load double*, double** %.pre-phi270, align 8, !tbaa !117
  %276 = load double*, double** %.pre-phi272, align 8, !tbaa !129
  %277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.22.204, i64 0, i64 0), double* %275, double* %276)
  %278 = load double, double* %.pre-phi274, align 8, !tbaa !57
  %279 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23.205, i64 0, i64 0), double %278)
  %280 = load i32, i32* %.pre-phi276, align 4, !tbaa !41
  %281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24.206, i64 0, i64 0), i32 %280)
  %282 = load i32, i32* %.pre-phi278, align 4, !tbaa !47
  %283 = load i64, i64* %.pre-phi282, align 8
  %284 = trunc i64 %283 to i32
  %285 = lshr i64 %283, 32
  %286 = trunc i64 %285 to i32
  %287 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25.207, i64 0, i64 0), i32 %282, i32 %284, i32 %286)
  %288 = load i32, i32* %.pre-phi286, align 8, !tbaa !55
  %289 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26.208, i64 0, i64 0), i32 %288)
  %290 = load i32, i32* %.pre-phi288, align 8, !tbaa !54
  %291 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27.209, i64 0, i64 0), i32 %290)
  %292 = load double, double* %.pre-phi290, align 8, !tbaa !52
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.28.210, i64 0, i64 0), double %292)
  %294 = load i32, i32* %.pre-phi292, align 8, !tbaa !61
  %295 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29.211, i64 0, i64 0), i32 %294)
  %296 = load i32, i32* %.pre-phi294, align 8, !tbaa !35
  %297 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30.212, i64 0, i64 0), i32 %296)
  %298 = load i32, i32* %.pre-phi296, align 4, !tbaa !40
  %299 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.213, i64 0, i64 0), i32 %298)
  %300 = load i32, i32* %.pre-phi298, align 4, !tbaa !39
  %301 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32.214, i64 0, i64 0), i32 %300)
  %302 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.33.215, i64 0, i64 0), i32 8)
  br i1 %108, label %303, label %306

; <label>:303                                     ; preds = %231
  %304 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %305 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34.216, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %304)
  br label %306

; <label>:306                                     ; preds = %303, %231
  %307 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34.216, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %107)
  %308 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 1
  %309 = load i32, i32* %308, align 4, !tbaa !229
  %310 = icmp sgt i32 %309, 0
  br i1 %310, label %.lr.ph162, label %._crit_edge163

.lr.ph162:                                        ; preds = %306
  %311 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 4
  %312 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 5
  %313 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 3
  %314 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 6
  br i1 %108, label %.lr.ph162.split.us.preheader, label %.lr.ph162.split.preheader

.lr.ph162.split.preheader:                        ; preds = %.lr.ph162
  br label %.lr.ph162.split

.lr.ph162.split.us.preheader:                     ; preds = %.lr.ph162
  br label %.lr.ph162.split.us

.lr.ph162.split.us:                               ; preds = %.lr.ph162.split.us, %.lr.ph162.split.us.preheader
  %indvars.iv227 = phi i64 [ %indvars.iv.next228, %.lr.ph162.split.us ], [ 0, %.lr.ph162.split.us.preheader ]
  %315 = load double*, double** %311, align 8, !tbaa !219
  %316 = getelementptr inbounds double, double* %315, i64 %indvars.iv227
  %317 = load double, double* %316, align 8, !tbaa !33
  %318 = fmul double %317, 1.500000e+00
  %319 = load double*, double** %312, align 8, !tbaa !220
  %320 = getelementptr inbounds double, double* %319, i64 %indvars.iv227
  %321 = load double, double* %320, align 8, !tbaa !33
  %322 = fadd double %318, %321
  %323 = load double, double* %315, align 8, !tbaa !33
  %324 = fmul double %323, 1.500000e+00
  %325 = load double, double* %319, align 8, !tbaa !33
  %326 = fadd double %324, %325
  %327 = fdiv double %322, %326
  %328 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %329 = load i32*, i32** %313, align 8, !tbaa !218
  %330 = getelementptr inbounds i32, i32* %329, i64 %indvars.iv227
  %331 = load i32, i32* %330, align 4, !tbaa !1
  %332 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %328, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.35.217, i64 0, i64 0), i32 %331)
  %333 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %334 = load double*, double** %311, align 8, !tbaa !219
  %335 = getelementptr inbounds double, double* %334, i64 %indvars.iv227
  %336 = load double, double* %335, align 8, !tbaa !33
  %337 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %333, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i64 0, i64 0), double %336)
  %338 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %339 = load double*, double** %312, align 8, !tbaa !220
  %340 = getelementptr inbounds double, double* %339, i64 %indvars.iv227
  %341 = load double, double* %340, align 8, !tbaa !33
  %342 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %338, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i64 0, i64 0), double %341)
  %343 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %344 = load double*, double** %314, align 8, !tbaa !221
  %345 = getelementptr inbounds double, double* %344, i64 %indvars.iv227
  %346 = load double, double* %345, align 8, !tbaa !33
  %347 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %343, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0), double %346)
  %348 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %349 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %348, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39, i64 0, i64 0), double %327)
  %350 = load i32*, i32** %313, align 8, !tbaa !218
  %351 = getelementptr inbounds i32, i32* %350, i64 %indvars.iv227
  %352 = load i32, i32* %351, align 4, !tbaa !1
  %353 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.35.217, i64 0, i64 0), i32 %352)
  %354 = load double*, double** %311, align 8, !tbaa !219
  %355 = getelementptr inbounds double, double* %354, i64 %indvars.iv227
  %356 = load double, double* %355, align 8, !tbaa !33
  %357 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i64 0, i64 0), double %356)
  %358 = load double*, double** %312, align 8, !tbaa !220
  %359 = getelementptr inbounds double, double* %358, i64 %indvars.iv227
  %360 = load double, double* %359, align 8, !tbaa !33
  %361 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i64 0, i64 0), double %360)
  %362 = load double*, double** %314, align 8, !tbaa !221
  %363 = getelementptr inbounds double, double* %362, i64 %indvars.iv227
  %364 = load double, double* %363, align 8, !tbaa !33
  %365 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0), double %364)
  %366 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39, i64 0, i64 0), double %327)
  %indvars.iv.next228 = add nuw nsw i64 %indvars.iv227, 1
  %367 = load i32, i32* %308, align 4, !tbaa !229
  %368 = sext i32 %367 to i64
  %369 = icmp slt i64 %indvars.iv.next228, %368
  br i1 %369, label %.lr.ph162.split.us, label %._crit_edge163.loopexit

.lr.ph162.split:                                  ; preds = %.lr.ph162.split, %.lr.ph162.split.preheader
  %indvars.iv229 = phi i64 [ %indvars.iv.next230, %.lr.ph162.split ], [ 0, %.lr.ph162.split.preheader ]
  %370 = load double*, double** %311, align 8, !tbaa !219
  %371 = getelementptr inbounds double, double* %370, i64 %indvars.iv229
  %372 = load double, double* %371, align 8, !tbaa !33
  %373 = fmul double %372, 1.500000e+00
  %374 = load double*, double** %312, align 8, !tbaa !220
  %375 = getelementptr inbounds double, double* %374, i64 %indvars.iv229
  %376 = load double, double* %375, align 8, !tbaa !33
  %377 = fadd double %373, %376
  %378 = load double, double* %370, align 8, !tbaa !33
  %379 = fmul double %378, 1.500000e+00
  %380 = load double, double* %374, align 8, !tbaa !33
  %381 = fadd double %379, %380
  %382 = fdiv double %377, %381
  %383 = load i32*, i32** %313, align 8, !tbaa !218
  %384 = getelementptr inbounds i32, i32* %383, i64 %indvars.iv229
  %385 = load i32, i32* %384, align 4, !tbaa !1
  %386 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.35.217, i64 0, i64 0), i32 %385)
  %387 = load double*, double** %311, align 8, !tbaa !219
  %388 = getelementptr inbounds double, double* %387, i64 %indvars.iv229
  %389 = load double, double* %388, align 8, !tbaa !33
  %390 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i64 0, i64 0), double %389)
  %391 = load double*, double** %312, align 8, !tbaa !220
  %392 = getelementptr inbounds double, double* %391, i64 %indvars.iv229
  %393 = load double, double* %392, align 8, !tbaa !33
  %394 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i64 0, i64 0), double %393)
  %395 = load double*, double** %314, align 8, !tbaa !221
  %396 = getelementptr inbounds double, double* %395, i64 %indvars.iv229
  %397 = load double, double* %396, align 8, !tbaa !33
  %398 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0), double %397)
  %399 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39, i64 0, i64 0), double %382)
  %indvars.iv.next230 = add nuw nsw i64 %indvars.iv229, 1
  %400 = load i32, i32* %308, align 4, !tbaa !229
  %401 = sext i32 %400 to i64
  %402 = icmp slt i64 %indvars.iv.next230, %401
  br i1 %402, label %.lr.ph162.split, label %._crit_edge163.loopexit503

._crit_edge163.loopexit:                          ; preds = %.lr.ph162.split.us
  br label %._crit_edge163

._crit_edge163.loopexit503:                       ; preds = %.lr.ph162.split
  br label %._crit_edge163

._crit_edge163:                                   ; preds = %._crit_edge163.loopexit503, %._crit_edge163.loopexit, %306
  call void @llvm.lifetime.end(i64 256, i8* %103) #7
  call void @llvm.lifetime.end(i64 8, i8* %83) #7
  %.pr101 = load i32, i32* %me, align 4, !tbaa !1
  %403 = icmp eq i32 %.pr101, 0
  br i1 %403, label %404, label %.thread102

; <label>:404                                     ; preds = %._crit_edge163
  %405 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %406 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %405)
  %407 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %107)
  br label %.thread102

.thread102:                                       ; preds = %404, %._crit_edge163, %69
  %fp.0103 = phi %struct._IO_FILE* [ %107, %404 ], [ %107, %._crit_edge163 ], [ undef, %69 ]
  %408 = bitcast double* %time_total to i8*
  call void @llvm.lifetime.start(i64 8, i8* %408) #7
  %409 = getelementptr inbounds %class.Timer, %class.Timer* %timer, i64 0, i32 0
  %410 = bitcast %class.Timer* %timer to i64**
  %411 = load i64*, i64** %410, align 8, !tbaa !74
  %412 = load i64, i64* %411, align 8, !tbaa !33
  %413 = bitcast double* %time_total to i64*
  store i64 %412, i64* %413, align 8, !tbaa !33
  %414 = call i32 @MPI_Allreduce(i8* %408, i8* %4, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %415 = load double, double* %tmp, align 8, !tbaa !33
  %416 = load i32, i32* %nprocs, align 4, !tbaa !1
  %417 = sitofp i32 %416 to double
  %418 = fdiv double %415, %417
  store double %418, double* %time_total, align 8, !tbaa !33
  %419 = load double, double* %71, align 8, !tbaa !59
  %420 = call double @pow(double %419, double 3.000000e+00) #7
  %421 = getelementptr inbounds %class.Integrate, %class.Integrate* %integrate, i64 0, i32 2
  %422 = load i32, i32* %me, align 4, !tbaa !1
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %488

; <label>:424                                     ; preds = %.thread102
  %425 = icmp eq i32 %screen_yaml, 0
  br i1 %425, label %._crit_edge244, label %426

._crit_edge244:                                   ; preds = %424
  %.pre299 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 15
  br label %460

; <label>:426                                     ; preds = %424
  %427 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %428 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %427)
  %429 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %430 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i64 0, i64 0), i64 9, i64 1, %struct._IO_FILE* %429)
  %431 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %432 = load double, double* %time_total, align 8, !tbaa !33
  %433 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %431, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i64 0, i64 0), double %432)
  %434 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %435 = load i32, i32* %natoms, align 4, !tbaa !1
  %436 = load i32, i32* %421, align 8, !tbaa !50
  %437 = mul nsw i32 %436, %435
  %438 = sitofp i32 %437 to double
  %439 = load double, double* %time_total, align 8, !tbaa !33
  %440 = fdiv double %438, %439
  %441 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %434, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.44, i64 0, i64 0), double %440)
  %442 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %443 = load i32, i32* %natoms, align 4, !tbaa !1
  %444 = load i32, i32* %421, align 8, !tbaa !50
  %445 = mul nsw i32 %444, %443
  %446 = sitofp i32 %445 to double
  %447 = load double, double* %time_total, align 8, !tbaa !33
  %448 = fdiv double %446, %447
  %449 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 15
  %450 = load %class.ThreadData*, %class.ThreadData** %449, align 8, !tbaa !28
  %451 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %450, i64 0, i32 1
  %452 = load i32, i32* %451, align 4, !tbaa !16
  %453 = sitofp i32 %452 to double
  %454 = fdiv double %448, %453
  %455 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %450, i64 0, i32 3
  %456 = load i32, i32* %455, align 4, !tbaa !18
  %457 = sitofp i32 %456 to double
  %458 = fdiv double %454, %457
  %459 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %442, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.45, i64 0, i64 0), double %458)
  br label %460

; <label>:460                                     ; preds = %426, %._crit_edge244
  %.pre-phi300 = phi %class.ThreadData** [ %.pre299, %._crit_edge244 ], [ %449, %426 ]
  %461 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %fp.0103)
  %462 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i64 0, i64 0), i64 9, i64 1, %struct._IO_FILE* %fp.0103)
  %463 = load double, double* %time_total, align 8, !tbaa !33
  %464 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i64 0, i64 0), double %463)
  %465 = load i32, i32* %natoms, align 4, !tbaa !1
  %466 = load i32, i32* %421, align 8, !tbaa !50
  %467 = mul nsw i32 %466, %465
  %468 = sitofp i32 %467 to double
  %469 = load double, double* %time_total, align 8, !tbaa !33
  %470 = fdiv double %468, %469
  %471 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.44, i64 0, i64 0), double %470)
  %472 = load i32, i32* %natoms, align 4, !tbaa !1
  %473 = load i32, i32* %421, align 8, !tbaa !50
  %474 = mul nsw i32 %473, %472
  %475 = sitofp i32 %474 to double
  %476 = load double, double* %time_total, align 8, !tbaa !33
  %477 = fdiv double %475, %476
  %478 = load %class.ThreadData*, %class.ThreadData** %.pre-phi300, align 8, !tbaa !28
  %479 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %478, i64 0, i32 1
  %480 = load i32, i32* %479, align 4, !tbaa !16
  %481 = sitofp i32 %480 to double
  %482 = fdiv double %477, %481
  %483 = getelementptr inbounds %class.ThreadData, %class.ThreadData* %478, i64 0, i32 3
  %484 = load i32, i32* %483, align 4, !tbaa !18
  %485 = sitofp i32 %484 to double
  %486 = fdiv double %482, %485
  %487 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.45, i64 0, i64 0), double %486)
  br label %488

; <label>:488                                     ; preds = %460, %.thread102
  %489 = load double, double* %time_total, align 8, !tbaa !33
  %490 = fcmp oeq double %489, 0.000000e+00
  br i1 %490, label %491, label %492

; <label>:491                                     ; preds = %488
  store double 1.000000e+00, double* %time_total, align 8, !tbaa !33
  br label %492

; <label>:492                                     ; preds = %491, %488
  %493 = bitcast double* %time_force to i8*
  call void @llvm.lifetime.start(i64 8, i8* %493) #7
  %494 = load double*, double** %409, align 8, !tbaa !74
  %495 = getelementptr inbounds double, double* %494, i64 2
  %496 = bitcast double* %495 to i64*
  %497 = load i64, i64* %496, align 8, !tbaa !33
  %498 = bitcast double* %time_force to i64*
  store i64 %497, i64* %498, align 8, !tbaa !33
  %499 = call i32 @MPI_Allreduce(i8* %493, i8* nonnull %4, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %500 = load i32, i32* %nprocs, align 4, !tbaa !1
  %501 = sitofp i32 %500 to double
  %502 = load double, double* %tmp, align 8, !tbaa !33
  %503 = fdiv double %502, %501
  store double %503, double* %tmp, align 8, !tbaa !33
  %504 = load i32, i32* %me, align 4, !tbaa !1
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %514

; <label>:506                                     ; preds = %492
  %507 = icmp eq i32 %screen_yaml, 0
  br i1 %507, label %511, label %508

; <label>:508                                     ; preds = %506
  %509 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %509, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46.218, i64 0, i64 0), double %503)
  %.pre = load double, double* %tmp, align 8, !tbaa !33
  br label %511

; <label>:511                                     ; preds = %508, %506
  %512 = phi double [ %503, %506 ], [ %.pre, %508 ]
  %513 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46.218, i64 0, i64 0), double %512)
  br label %514

; <label>:514                                     ; preds = %511, %492
  %515 = bitcast double* %time_neigh to i8*
  call void @llvm.lifetime.start(i64 8, i8* %515) #7
  %516 = load double*, double** %409, align 8, !tbaa !74
  %517 = getelementptr inbounds double, double* %516, i64 3
  %518 = bitcast double* %517 to i64*
  %519 = load i64, i64* %518, align 8, !tbaa !33
  %520 = bitcast double* %time_neigh to i64*
  store i64 %519, i64* %520, align 8, !tbaa !33
  %521 = call i32 @MPI_Allreduce(i8* %515, i8* nonnull %4, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %522 = load i32, i32* %nprocs, align 4, !tbaa !1
  %523 = sitofp i32 %522 to double
  %524 = load double, double* %tmp, align 8, !tbaa !33
  %525 = fdiv double %524, %523
  store double %525, double* %tmp, align 8, !tbaa !33
  %526 = load i32, i32* %me, align 4, !tbaa !1
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %528, label %536

; <label>:528                                     ; preds = %514
  %529 = icmp eq i32 %screen_yaml, 0
  br i1 %529, label %533, label %530

; <label>:530                                     ; preds = %528
  %531 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %532 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %531, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0), double %525)
  %.pre239 = load double, double* %tmp, align 8, !tbaa !33
  br label %533

; <label>:533                                     ; preds = %530, %528
  %534 = phi double [ %525, %528 ], [ %.pre239, %530 ]
  %535 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0), double %534)
  br label %536

; <label>:536                                     ; preds = %533, %514
  %537 = bitcast double* %time_comm to i8*
  call void @llvm.lifetime.start(i64 8, i8* %537) #7
  %538 = load double*, double** %409, align 8, !tbaa !74
  %539 = getelementptr inbounds double, double* %538, i64 1
  %540 = bitcast double* %539 to i64*
  %541 = load i64, i64* %540, align 8, !tbaa !33
  %542 = bitcast double* %time_comm to i64*
  store i64 %541, i64* %542, align 8, !tbaa !33
  %543 = call i32 @MPI_Allreduce(i8* %537, i8* nonnull %4, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %544 = load i32, i32* %nprocs, align 4, !tbaa !1
  %545 = sitofp i32 %544 to double
  %546 = load double, double* %tmp, align 8, !tbaa !33
  %547 = fdiv double %546, %545
  store double %547, double* %tmp, align 8, !tbaa !33
  %548 = load i32, i32* %me, align 4, !tbaa !1
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %550, label %558

; <label>:550                                     ; preds = %536
  %551 = icmp eq i32 %screen_yaml, 0
  br i1 %551, label %555, label %552

; <label>:552                                     ; preds = %550
  %553 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %554 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %553, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0), double %547)
  %.pre240 = load double, double* %tmp, align 8, !tbaa !33
  br label %555

; <label>:555                                     ; preds = %552, %550
  %556 = phi double [ %547, %550 ], [ %.pre240, %552 ]
  %557 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0), double %556)
  br label %558

; <label>:558                                     ; preds = %555, %536
  %559 = bitcast double* %time_other to i8*
  call void @llvm.lifetime.start(i64 8, i8* %559) #7
  %560 = load double, double* %time_total, align 8, !tbaa !33
  %561 = load double, double* %time_force, align 8, !tbaa !33
  %562 = load double, double* %time_neigh, align 8, !tbaa !33
  %563 = fadd double %561, %562
  %564 = load double, double* %time_comm, align 8, !tbaa !33
  %565 = fadd double %563, %564
  %566 = fsub double %560, %565
  store double %566, double* %time_other, align 8, !tbaa !33
  %567 = call i32 @MPI_Allreduce(i8* %559, i8* nonnull %4, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %568 = load i32, i32* %nprocs, align 4, !tbaa !1
  %569 = sitofp i32 %568 to double
  %570 = load double, double* %tmp, align 8, !tbaa !33
  %571 = fdiv double %570, %569
  store double %571, double* %tmp, align 8, !tbaa !33
  %572 = load i32, i32* %me, align 4, !tbaa !1
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %.thread119

; <label>:574                                     ; preds = %558
  %575 = icmp eq i32 %screen_yaml, 0
  br i1 %575, label %579, label %576

; <label>:576                                     ; preds = %574
  %577 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %578 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %577, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.49, i64 0, i64 0), double %571)
  %.pre241 = load double, double* %tmp, align 8, !tbaa !33
  br label %579

; <label>:579                                     ; preds = %576, %574
  %580 = phi double [ %.pre241, %576 ], [ %571, %574 ]
  %581 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.49, i64 0, i64 0), double %580)
  %.pr118 = load i32, i32* %me, align 4, !tbaa !1
  %582 = icmp eq i32 %.pr118, 0
  br i1 %582, label %583, label %.thread119

; <label>:583                                     ; preds = %579
  br i1 %575, label %586, label %584

; <label>:584                                     ; preds = %583
  %585 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc61 = call i32 @fputc(i32 10, %struct._IO_FILE* %585)
  br label %586

; <label>:586                                     ; preds = %584, %583
  %fputc64 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %.thread119

.thread119:                                       ; preds = %586, %579, %558
  %587 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 0
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %time_force, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %588 = load i32, i32* %me, align 4, !tbaa !1
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %590, label %669

; <label>:590                                     ; preds = %.thread119
  %591 = icmp eq i32 %screen_yaml, 0
  br i1 %591, label %._crit_edge243, label %592

._crit_edge243:                                   ; preds = %590
  %.pre301 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre303 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre305 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre307 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre309 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre311 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre313 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre315 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre317 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %642

; <label>:592                                     ; preds = %590
  %593 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %594 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.51.219, i64 0, i64 0), i64 21, i64 1, %struct._IO_FILE* %593)
  %595 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %596 = load double, double* %ave, align 8, !tbaa !33
  %597 = load double, double* %max, align 8, !tbaa !33
  %598 = load double, double* %min, align 8, !tbaa !33
  %599 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %595, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0), double %596, double %597, double %598)
  %600 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %601 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %600)
  %602 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %603 = load i32, i32* %587, align 16, !tbaa !1
  %604 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %602, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %603)
  %605 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %606 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %607 = load i32, i32* %606, align 4, !tbaa !1
  %608 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %605, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %607)
  %609 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %610 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %611 = load i32, i32* %610, align 8, !tbaa !1
  %612 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %609, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %611)
  %613 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %614 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %615 = load i32, i32* %614, align 4, !tbaa !1
  %616 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %613, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %615)
  %617 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %618 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %619 = load i32, i32* %618, align 16, !tbaa !1
  %620 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %617, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %619)
  %621 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %622 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %623 = load i32, i32* %622, align 4, !tbaa !1
  %624 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %621, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %623)
  %625 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %626 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %627 = load i32, i32* %626, align 8, !tbaa !1
  %628 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %625, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %627)
  %629 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %630 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %631 = load i32, i32* %630, align 4, !tbaa !1
  %632 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %629, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %631)
  %633 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %634 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %635 = load i32, i32* %634, align 16, !tbaa !1
  %636 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %633, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %635)
  %637 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %638 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %639 = load i32, i32* %638, align 4, !tbaa !1
  %640 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %637, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %639)
  %641 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc55 = call i32 @fputc(i32 10, %struct._IO_FILE* %641)
  br label %642

; <label>:642                                     ; preds = %592, %._crit_edge243
  %.pre-phi318 = phi i32* [ %.pre317, %._crit_edge243 ], [ %638, %592 ]
  %.pre-phi316 = phi i32* [ %.pre315, %._crit_edge243 ], [ %634, %592 ]
  %.pre-phi314 = phi i32* [ %.pre313, %._crit_edge243 ], [ %630, %592 ]
  %.pre-phi312 = phi i32* [ %.pre311, %._crit_edge243 ], [ %626, %592 ]
  %.pre-phi310 = phi i32* [ %.pre309, %._crit_edge243 ], [ %622, %592 ]
  %.pre-phi308 = phi i32* [ %.pre307, %._crit_edge243 ], [ %618, %592 ]
  %.pre-phi306 = phi i32* [ %.pre305, %._crit_edge243 ], [ %614, %592 ]
  %.pre-phi304 = phi i32* [ %.pre303, %._crit_edge243 ], [ %610, %592 ]
  %.pre-phi302 = phi i32* [ %.pre301, %._crit_edge243 ], [ %606, %592 ]
  %643 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.51.219, i64 0, i64 0), i64 21, i64 1, %struct._IO_FILE* %fp.0103)
  %644 = load double, double* %ave, align 8, !tbaa !33
  %645 = load double, double* %max, align 8, !tbaa !33
  %646 = load double, double* %min, align 8, !tbaa !33
  %647 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0), double %644, double %645, double %646)
  %648 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %649 = load i32, i32* %587, align 16, !tbaa !1
  %650 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %649)
  %651 = load i32, i32* %.pre-phi302, align 4, !tbaa !1
  %652 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %651)
  %653 = load i32, i32* %.pre-phi304, align 4, !tbaa !1
  %654 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %653)
  %655 = load i32, i32* %.pre-phi306, align 4, !tbaa !1
  %656 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %655)
  %657 = load i32, i32* %.pre-phi308, align 4, !tbaa !1
  %658 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %657)
  %659 = load i32, i32* %.pre-phi310, align 4, !tbaa !1
  %660 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %659)
  %661 = load i32, i32* %.pre-phi312, align 4, !tbaa !1
  %662 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %661)
  %663 = load i32, i32* %.pre-phi314, align 4, !tbaa !1
  %664 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %663)
  %665 = load i32, i32* %.pre-phi316, align 4, !tbaa !1
  %666 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %665)
  %667 = load i32, i32* %.pre-phi318, align 4, !tbaa !1
  %668 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %667)
  %fputc58 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %669

; <label>:669                                     ; preds = %642, %.thread119
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %time_neigh, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %670 = load i32, i32* %me, align 4, !tbaa !1
  %671 = icmp eq i32 %670, 0
  br i1 %671, label %672, label %748

; <label>:672                                     ; preds = %669
  %673 = icmp eq i32 %screen_yaml, 0
  br i1 %673, label %._crit_edge242, label %674

._crit_edge242:                                   ; preds = %672
  %.pre319 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre321 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre323 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre325 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre327 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre329 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre331 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre333 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre335 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %722

; <label>:674                                     ; preds = %672
  %675 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %676 = load double, double* %ave, align 8, !tbaa !33
  %677 = load double, double* %max, align 8, !tbaa !33
  %678 = load double, double* %min, align 8, !tbaa !33
  %679 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %675, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.55, i64 0, i64 0), double %676, double %677, double %678)
  %680 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %681 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %680)
  %682 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %683 = load i32, i32* %587, align 16, !tbaa !1
  %684 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %682, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %683)
  %685 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %686 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %687 = load i32, i32* %686, align 4, !tbaa !1
  %688 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %685, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %687)
  %689 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %690 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %691 = load i32, i32* %690, align 8, !tbaa !1
  %692 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %689, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %691)
  %693 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %694 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %695 = load i32, i32* %694, align 4, !tbaa !1
  %696 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %693, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %695)
  %697 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %698 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %699 = load i32, i32* %698, align 16, !tbaa !1
  %700 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %697, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %699)
  %701 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %702 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %703 = load i32, i32* %702, align 4, !tbaa !1
  %704 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %701, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %703)
  %705 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %706 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %707 = load i32, i32* %706, align 8, !tbaa !1
  %708 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %705, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %707)
  %709 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %710 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %711 = load i32, i32* %710, align 4, !tbaa !1
  %712 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %709, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %711)
  %713 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %714 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %715 = load i32, i32* %714, align 16, !tbaa !1
  %716 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %713, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %715)
  %717 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %718 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %719 = load i32, i32* %718, align 4, !tbaa !1
  %720 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %717, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %719)
  %721 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc49 = call i32 @fputc(i32 10, %struct._IO_FILE* %721)
  br label %722

; <label>:722                                     ; preds = %674, %._crit_edge242
  %.pre-phi336 = phi i32* [ %.pre335, %._crit_edge242 ], [ %718, %674 ]
  %.pre-phi334 = phi i32* [ %.pre333, %._crit_edge242 ], [ %714, %674 ]
  %.pre-phi332 = phi i32* [ %.pre331, %._crit_edge242 ], [ %710, %674 ]
  %.pre-phi330 = phi i32* [ %.pre329, %._crit_edge242 ], [ %706, %674 ]
  %.pre-phi328 = phi i32* [ %.pre327, %._crit_edge242 ], [ %702, %674 ]
  %.pre-phi326 = phi i32* [ %.pre325, %._crit_edge242 ], [ %698, %674 ]
  %.pre-phi324 = phi i32* [ %.pre323, %._crit_edge242 ], [ %694, %674 ]
  %.pre-phi322 = phi i32* [ %.pre321, %._crit_edge242 ], [ %690, %674 ]
  %.pre-phi320 = phi i32* [ %.pre319, %._crit_edge242 ], [ %686, %674 ]
  %723 = load double, double* %ave, align 8, !tbaa !33
  %724 = load double, double* %max, align 8, !tbaa !33
  %725 = load double, double* %min, align 8, !tbaa !33
  %726 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.55, i64 0, i64 0), double %723, double %724, double %725)
  %727 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %728 = load i32, i32* %587, align 16, !tbaa !1
  %729 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %728)
  %730 = load i32, i32* %.pre-phi320, align 4, !tbaa !1
  %731 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %730)
  %732 = load i32, i32* %.pre-phi322, align 4, !tbaa !1
  %733 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %732)
  %734 = load i32, i32* %.pre-phi324, align 4, !tbaa !1
  %735 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %734)
  %736 = load i32, i32* %.pre-phi326, align 4, !tbaa !1
  %737 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %736)
  %738 = load i32, i32* %.pre-phi328, align 4, !tbaa !1
  %739 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %738)
  %740 = load i32, i32* %.pre-phi330, align 4, !tbaa !1
  %741 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %740)
  %742 = load i32, i32* %.pre-phi332, align 4, !tbaa !1
  %743 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %742)
  %744 = load i32, i32* %.pre-phi334, align 4, !tbaa !1
  %745 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %744)
  %746 = load i32, i32* %.pre-phi336, align 4, !tbaa !1
  %747 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %746)
  %fputc52 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %748

; <label>:748                                     ; preds = %722, %669
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %time_comm, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %749 = load i32, i32* %me, align 4, !tbaa !1
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %751, label %825

; <label>:751                                     ; preds = %748
  %752 = icmp eq i32 %screen_yaml, 0
  br i1 %752, label %..critedge68_crit_edge, label %.critedge

..critedge68_crit_edge:                           ; preds = %751
  %.pre337 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre339 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre341 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre343 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre345 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre347 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre349 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre351 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre353 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge68

.critedge:                                        ; preds = %751
  %753 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %754 = load double, double* %ave, align 8, !tbaa !33
  %755 = load double, double* %max, align 8, !tbaa !33
  %756 = load double, double* %min, align 8, !tbaa !33
  %757 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %753, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.56, i64 0, i64 0), double %754, double %755, double %756)
  %758 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %759 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %758)
  %760 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %761 = load i32, i32* %587, align 16, !tbaa !1
  %762 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %760, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %761)
  %763 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %764 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %765 = load i32, i32* %764, align 4, !tbaa !1
  %766 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %763, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %765)
  %767 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %768 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %769 = load i32, i32* %768, align 8, !tbaa !1
  %770 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %767, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %769)
  %771 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %772 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %773 = load i32, i32* %772, align 4, !tbaa !1
  %774 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %771, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %773)
  %775 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %776 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %777 = load i32, i32* %776, align 16, !tbaa !1
  %778 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %775, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %777)
  %779 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %780 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %781 = load i32, i32* %780, align 4, !tbaa !1
  %782 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %779, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %781)
  %783 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %784 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %785 = load i32, i32* %784, align 8, !tbaa !1
  %786 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %783, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %785)
  %787 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %788 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %789 = load i32, i32* %788, align 4, !tbaa !1
  %790 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %787, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %789)
  %791 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %792 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %793 = load i32, i32* %792, align 16, !tbaa !1
  %794 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %791, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %793)
  %795 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %796 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %797 = load i32, i32* %796, align 4, !tbaa !1
  %798 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %795, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %797)
  %799 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc46 = call i32 @fputc(i32 10, %struct._IO_FILE* %799)
  br label %.critedge68

.critedge68:                                      ; preds = %.critedge, %..critedge68_crit_edge
  %.pre-phi354 = phi i32* [ %.pre353, %..critedge68_crit_edge ], [ %796, %.critedge ]
  %.pre-phi352 = phi i32* [ %.pre351, %..critedge68_crit_edge ], [ %792, %.critedge ]
  %.pre-phi350 = phi i32* [ %.pre349, %..critedge68_crit_edge ], [ %788, %.critedge ]
  %.pre-phi348 = phi i32* [ %.pre347, %..critedge68_crit_edge ], [ %784, %.critedge ]
  %.pre-phi346 = phi i32* [ %.pre345, %..critedge68_crit_edge ], [ %780, %.critedge ]
  %.pre-phi344 = phi i32* [ %.pre343, %..critedge68_crit_edge ], [ %776, %.critedge ]
  %.pre-phi342 = phi i32* [ %.pre341, %..critedge68_crit_edge ], [ %772, %.critedge ]
  %.pre-phi340 = phi i32* [ %.pre339, %..critedge68_crit_edge ], [ %768, %.critedge ]
  %.pre-phi338 = phi i32* [ %.pre337, %..critedge68_crit_edge ], [ %764, %.critedge ]
  %800 = load double, double* %ave, align 8, !tbaa !33
  %801 = load double, double* %max, align 8, !tbaa !33
  %802 = load double, double* %min, align 8, !tbaa !33
  %803 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.56, i64 0, i64 0), double %800, double %801, double %802)
  %804 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %805 = load i32, i32* %587, align 16, !tbaa !1
  %806 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %805)
  %807 = load i32, i32* %.pre-phi338, align 4, !tbaa !1
  %808 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %807)
  %809 = load i32, i32* %.pre-phi340, align 4, !tbaa !1
  %810 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %809)
  %811 = load i32, i32* %.pre-phi342, align 4, !tbaa !1
  %812 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %811)
  %813 = load i32, i32* %.pre-phi344, align 4, !tbaa !1
  %814 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %813)
  %815 = load i32, i32* %.pre-phi346, align 4, !tbaa !1
  %816 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %815)
  %817 = load i32, i32* %.pre-phi348, align 4, !tbaa !1
  %818 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %817)
  %819 = load i32, i32* %.pre-phi350, align 4, !tbaa !1
  %820 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %819)
  %821 = load i32, i32* %.pre-phi352, align 4, !tbaa !1
  %822 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %821)
  %823 = load i32, i32* %.pre-phi354, align 4, !tbaa !1
  %824 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %823)
  %fputc43 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %825

; <label>:825                                     ; preds = %.critedge68, %748
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %time_other, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %826 = load i32, i32* %me, align 4, !tbaa !1
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %828, label %.thread122

; <label>:828                                     ; preds = %825
  %829 = icmp eq i32 %screen_yaml, 0
  br i1 %829, label %..critedge74_crit_edge, label %.critedge71

..critedge74_crit_edge:                           ; preds = %828
  %.pre355 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre357 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre359 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre361 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre363 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre365 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre367 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre369 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre371 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge74

.critedge71:                                      ; preds = %828
  %830 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %831 = load double, double* %ave, align 8, !tbaa !33
  %832 = load double, double* %max, align 8, !tbaa !33
  %833 = load double, double* %min, align 8, !tbaa !33
  %834 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %830, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i64 0, i64 0), double %831, double %832, double %833)
  %835 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %836 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %835)
  %837 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %838 = load i32, i32* %587, align 16, !tbaa !1
  %839 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %837, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %838)
  %840 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %841 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %842 = load i32, i32* %841, align 4, !tbaa !1
  %843 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %840, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %842)
  %844 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %845 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %846 = load i32, i32* %845, align 8, !tbaa !1
  %847 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %844, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %846)
  %848 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %849 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %850 = load i32, i32* %849, align 4, !tbaa !1
  %851 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %848, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %850)
  %852 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %853 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %854 = load i32, i32* %853, align 16, !tbaa !1
  %855 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %852, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %854)
  %856 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %857 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %858 = load i32, i32* %857, align 4, !tbaa !1
  %859 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %856, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %858)
  %860 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %861 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %862 = load i32, i32* %861, align 8, !tbaa !1
  %863 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %860, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %862)
  %864 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %865 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %866 = load i32, i32* %865, align 4, !tbaa !1
  %867 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %864, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %866)
  %868 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %869 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %870 = load i32, i32* %869, align 16, !tbaa !1
  %871 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %868, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %870)
  %872 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %873 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %874 = load i32, i32* %873, align 4, !tbaa !1
  %875 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %872, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %874)
  %876 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc40 = call i32 @fputc(i32 10, %struct._IO_FILE* %876)
  br label %.critedge74

.critedge74:                                      ; preds = %.critedge71, %..critedge74_crit_edge
  %.pre-phi372 = phi i32* [ %.pre371, %..critedge74_crit_edge ], [ %873, %.critedge71 ]
  %.pre-phi370 = phi i32* [ %.pre369, %..critedge74_crit_edge ], [ %869, %.critedge71 ]
  %.pre-phi368 = phi i32* [ %.pre367, %..critedge74_crit_edge ], [ %865, %.critedge71 ]
  %.pre-phi366 = phi i32* [ %.pre365, %..critedge74_crit_edge ], [ %861, %.critedge71 ]
  %.pre-phi364 = phi i32* [ %.pre363, %..critedge74_crit_edge ], [ %857, %.critedge71 ]
  %.pre-phi362 = phi i32* [ %.pre361, %..critedge74_crit_edge ], [ %853, %.critedge71 ]
  %.pre-phi360 = phi i32* [ %.pre359, %..critedge74_crit_edge ], [ %849, %.critedge71 ]
  %.pre-phi358 = phi i32* [ %.pre357, %..critedge74_crit_edge ], [ %845, %.critedge71 ]
  %.pre-phi356 = phi i32* [ %.pre355, %..critedge74_crit_edge ], [ %841, %.critedge71 ]
  %877 = load double, double* %ave, align 8, !tbaa !33
  %878 = load double, double* %max, align 8, !tbaa !33
  %879 = load double, double* %min, align 8, !tbaa !33
  %880 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i64 0, i64 0), double %877, double %878, double %879)
  %881 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %882 = load i32, i32* %587, align 16, !tbaa !1
  %883 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %882)
  %884 = load i32, i32* %.pre-phi356, align 4, !tbaa !1
  %885 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %884)
  %886 = load i32, i32* %.pre-phi358, align 4, !tbaa !1
  %887 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %886)
  %888 = load i32, i32* %.pre-phi360, align 4, !tbaa !1
  %889 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %888)
  %890 = load i32, i32* %.pre-phi362, align 4, !tbaa !1
  %891 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %890)
  %892 = load i32, i32* %.pre-phi364, align 4, !tbaa !1
  %893 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %892)
  %894 = load i32, i32* %.pre-phi366, align 4, !tbaa !1
  %895 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %894)
  %896 = load i32, i32* %.pre-phi368, align 4, !tbaa !1
  %897 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %896)
  %898 = load i32, i32* %.pre-phi370, align 4, !tbaa !1
  %899 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %898)
  %900 = load i32, i32* %.pre-phi372, align 4, !tbaa !1
  %901 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %900)
  %fputc37 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  %.pr121 = load i32, i32* %me, align 4, !tbaa !1
  %902 = icmp eq i32 %.pr121, 0
  br i1 %902, label %903, label %.thread122

; <label>:903                                     ; preds = %.critedge74
  %904 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc31 = call i32 @fputc(i32 10, %struct._IO_FILE* %904)
  %fputc34 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %.thread122

.thread122:                                       ; preds = %903, %.critedge74, %825
  %905 = load i32, i32* %12, align 4, !tbaa !84
  %906 = sitofp i32 %905 to double
  store double %906, double* %tmp, align 8, !tbaa !33
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %tmp, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %907 = load i32, i32* %me, align 4, !tbaa !1
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %909, label %983

; <label>:909                                     ; preds = %.thread122
  %910 = icmp eq i32 %screen_yaml, 0
  br i1 %910, label %..critedge80_crit_edge, label %.critedge77

..critedge80_crit_edge:                           ; preds = %909
  %.pre373 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre375 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre377 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre379 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre381 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre383 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre385 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre387 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre389 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge80

.critedge77:                                      ; preds = %909
  %911 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %912 = load double, double* %ave, align 8, !tbaa !33
  %913 = load double, double* %max, align 8, !tbaa !33
  %914 = load double, double* %min, align 8, !tbaa !33
  %915 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %911, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.58, i64 0, i64 0), double %912, double %913, double %914)
  %916 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %917 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %916)
  %918 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %919 = load i32, i32* %587, align 16, !tbaa !1
  %920 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %918, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %919)
  %921 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %922 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %923 = load i32, i32* %922, align 4, !tbaa !1
  %924 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %921, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %923)
  %925 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %926 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %927 = load i32, i32* %926, align 8, !tbaa !1
  %928 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %925, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %927)
  %929 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %930 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %931 = load i32, i32* %930, align 4, !tbaa !1
  %932 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %929, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %931)
  %933 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %934 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %935 = load i32, i32* %934, align 16, !tbaa !1
  %936 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %933, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %935)
  %937 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %938 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %939 = load i32, i32* %938, align 4, !tbaa !1
  %940 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %937, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %939)
  %941 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %942 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %943 = load i32, i32* %942, align 8, !tbaa !1
  %944 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %941, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %943)
  %945 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %946 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %947 = load i32, i32* %946, align 4, !tbaa !1
  %948 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %945, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %947)
  %949 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %950 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %951 = load i32, i32* %950, align 16, !tbaa !1
  %952 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %949, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %951)
  %953 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %954 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %955 = load i32, i32* %954, align 4, !tbaa !1
  %956 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %953, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %955)
  %957 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc28 = call i32 @fputc(i32 10, %struct._IO_FILE* %957)
  br label %.critedge80

.critedge80:                                      ; preds = %.critedge77, %..critedge80_crit_edge
  %.pre-phi390 = phi i32* [ %.pre389, %..critedge80_crit_edge ], [ %954, %.critedge77 ]
  %.pre-phi388 = phi i32* [ %.pre387, %..critedge80_crit_edge ], [ %950, %.critedge77 ]
  %.pre-phi386 = phi i32* [ %.pre385, %..critedge80_crit_edge ], [ %946, %.critedge77 ]
  %.pre-phi384 = phi i32* [ %.pre383, %..critedge80_crit_edge ], [ %942, %.critedge77 ]
  %.pre-phi382 = phi i32* [ %.pre381, %..critedge80_crit_edge ], [ %938, %.critedge77 ]
  %.pre-phi380 = phi i32* [ %.pre379, %..critedge80_crit_edge ], [ %934, %.critedge77 ]
  %.pre-phi378 = phi i32* [ %.pre377, %..critedge80_crit_edge ], [ %930, %.critedge77 ]
  %.pre-phi376 = phi i32* [ %.pre375, %..critedge80_crit_edge ], [ %926, %.critedge77 ]
  %.pre-phi374 = phi i32* [ %.pre373, %..critedge80_crit_edge ], [ %922, %.critedge77 ]
  %958 = load double, double* %ave, align 8, !tbaa !33
  %959 = load double, double* %max, align 8, !tbaa !33
  %960 = load double, double* %min, align 8, !tbaa !33
  %961 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.58, i64 0, i64 0), double %958, double %959, double %960)
  %962 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %963 = load i32, i32* %587, align 16, !tbaa !1
  %964 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %963)
  %965 = load i32, i32* %.pre-phi374, align 4, !tbaa !1
  %966 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %965)
  %967 = load i32, i32* %.pre-phi376, align 4, !tbaa !1
  %968 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %967)
  %969 = load i32, i32* %.pre-phi378, align 4, !tbaa !1
  %970 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %969)
  %971 = load i32, i32* %.pre-phi380, align 4, !tbaa !1
  %972 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %971)
  %973 = load i32, i32* %.pre-phi382, align 4, !tbaa !1
  %974 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %973)
  %975 = load i32, i32* %.pre-phi384, align 4, !tbaa !1
  %976 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %975)
  %977 = load i32, i32* %.pre-phi386, align 4, !tbaa !1
  %978 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %977)
  %979 = load i32, i32* %.pre-phi388, align 4, !tbaa !1
  %980 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %979)
  %981 = load i32, i32* %.pre-phi390, align 4, !tbaa !1
  %982 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %981)
  %fputc25 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %983

; <label>:983                                     ; preds = %.critedge80, %.thread122
  %984 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 2
  %985 = load i32, i32* %984, align 8, !tbaa !114
  %986 = sitofp i32 %985 to double
  store double %986, double* %tmp, align 8, !tbaa !33
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %tmp, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %987 = load i32, i32* %me, align 4, !tbaa !1
  %988 = icmp eq i32 %987, 0
  br i1 %988, label %989, label %.preheader129

; <label>:989                                     ; preds = %983
  %990 = icmp eq i32 %screen_yaml, 0
  br i1 %990, label %..critedge86_crit_edge, label %.critedge83

..critedge86_crit_edge:                           ; preds = %989
  %.pre391 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre393 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre395 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre397 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre399 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre401 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre403 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre405 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre407 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge86

.critedge83:                                      ; preds = %989
  %991 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %992 = load double, double* %ave, align 8, !tbaa !33
  %993 = load double, double* %max, align 8, !tbaa !33
  %994 = load double, double* %min, align 8, !tbaa !33
  %995 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %991, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.59, i64 0, i64 0), double %992, double %993, double %994)
  %996 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %997 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %996)
  %998 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %999 = load i32, i32* %587, align 16, !tbaa !1
  %1000 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %998, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %999)
  %1001 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1002 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %1003 = load i32, i32* %1002, align 4, !tbaa !1
  %1004 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1001, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1003)
  %1005 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1006 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %1007 = load i32, i32* %1006, align 8, !tbaa !1
  %1008 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1005, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1007)
  %1009 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1010 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %1011 = load i32, i32* %1010, align 4, !tbaa !1
  %1012 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1009, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1011)
  %1013 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1014 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %1015 = load i32, i32* %1014, align 16, !tbaa !1
  %1016 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1013, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1015)
  %1017 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1018 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %1019 = load i32, i32* %1018, align 4, !tbaa !1
  %1020 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1017, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1019)
  %1021 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1022 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %1023 = load i32, i32* %1022, align 8, !tbaa !1
  %1024 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1021, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1023)
  %1025 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1026 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %1027 = load i32, i32* %1026, align 4, !tbaa !1
  %1028 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1025, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1027)
  %1029 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1030 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %1031 = load i32, i32* %1030, align 16, !tbaa !1
  %1032 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1029, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1031)
  %1033 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1034 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %1035 = load i32, i32* %1034, align 4, !tbaa !1
  %1036 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1033, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1035)
  %1037 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc22 = call i32 @fputc(i32 10, %struct._IO_FILE* %1037)
  br label %.critedge86

.critedge86:                                      ; preds = %.critedge83, %..critedge86_crit_edge
  %.pre-phi408 = phi i32* [ %.pre407, %..critedge86_crit_edge ], [ %1034, %.critedge83 ]
  %.pre-phi406 = phi i32* [ %.pre405, %..critedge86_crit_edge ], [ %1030, %.critedge83 ]
  %.pre-phi404 = phi i32* [ %.pre403, %..critedge86_crit_edge ], [ %1026, %.critedge83 ]
  %.pre-phi402 = phi i32* [ %.pre401, %..critedge86_crit_edge ], [ %1022, %.critedge83 ]
  %.pre-phi400 = phi i32* [ %.pre399, %..critedge86_crit_edge ], [ %1018, %.critedge83 ]
  %.pre-phi398 = phi i32* [ %.pre397, %..critedge86_crit_edge ], [ %1014, %.critedge83 ]
  %.pre-phi396 = phi i32* [ %.pre395, %..critedge86_crit_edge ], [ %1010, %.critedge83 ]
  %.pre-phi394 = phi i32* [ %.pre393, %..critedge86_crit_edge ], [ %1006, %.critedge83 ]
  %.pre-phi392 = phi i32* [ %.pre391, %..critedge86_crit_edge ], [ %1002, %.critedge83 ]
  %1038 = load double, double* %ave, align 8, !tbaa !33
  %1039 = load double, double* %max, align 8, !tbaa !33
  %1040 = load double, double* %min, align 8, !tbaa !33
  %1041 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.59, i64 0, i64 0), double %1038, double %1039, double %1040)
  %1042 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %1043 = load i32, i32* %587, align 16, !tbaa !1
  %1044 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1043)
  %1045 = load i32, i32* %.pre-phi392, align 4, !tbaa !1
  %1046 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1045)
  %1047 = load i32, i32* %.pre-phi394, align 4, !tbaa !1
  %1048 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1047)
  %1049 = load i32, i32* %.pre-phi396, align 4, !tbaa !1
  %1050 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1049)
  %1051 = load i32, i32* %.pre-phi398, align 4, !tbaa !1
  %1052 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1051)
  %1053 = load i32, i32* %.pre-phi400, align 4, !tbaa !1
  %1054 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1053)
  %1055 = load i32, i32* %.pre-phi402, align 4, !tbaa !1
  %1056 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1055)
  %1057 = load i32, i32* %.pre-phi404, align 4, !tbaa !1
  %1058 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1057)
  %1059 = load i32, i32* %.pre-phi406, align 4, !tbaa !1
  %1060 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1059)
  %1061 = load i32, i32* %.pre-phi408, align 4, !tbaa !1
  %1062 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1061)
  %fputc19 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %.preheader129

.preheader129:                                    ; preds = %.critedge86, %983
  %1063 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 1
  %1064 = load i32, i32* %1063, align 4, !tbaa !157
  %1065 = icmp sgt i32 %1064, 0
  br i1 %1065, label %.lr.ph145, label %._crit_edge146

.lr.ph145:                                        ; preds = %.preheader129
  %1066 = getelementptr inbounds %class.Comm, %class.Comm* %comm, i64 0, i32 6
  %1067 = load i32*, i32** %1066, align 8
  %1068 = sext i32 %1064 to i64
  %min.iters.check = icmp ult i32 %1064, 16
  br i1 %min.iters.check, label %scalar.ph.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %.lr.ph145
  %n.vec = and i64 %1068, -16
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %scalar.ph.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %1069 = add nsw i64 %1068, -16
  %1070 = lshr i64 %1069, 4
  %1071 = and i64 %1070, 1
  %lcmp.mod515 = icmp eq i64 %1071, 0
  br i1 %lcmp.mod515, label %vector.body.prol, label %vector.body.preheader.split

vector.body.prol:                                 ; preds = %vector.body.preheader
  %1072 = bitcast i32* %1067 to <4 x i32>*
  %wide.load.prol = load <4 x i32>, <4 x i32>* %1072, align 4, !tbaa !1
  %1073 = getelementptr i32, i32* %1067, i64 4
  %1074 = bitcast i32* %1073 to <4 x i32>*
  %wide.load456.prol = load <4 x i32>, <4 x i32>* %1074, align 4, !tbaa !1
  %1075 = getelementptr i32, i32* %1067, i64 8
  %1076 = bitcast i32* %1075 to <4 x i32>*
  %wide.load457.prol = load <4 x i32>, <4 x i32>* %1076, align 4, !tbaa !1
  %1077 = getelementptr i32, i32* %1067, i64 12
  %1078 = bitcast i32* %1077 to <4 x i32>*
  %wide.load458.prol = load <4 x i32>, <4 x i32>* %1078, align 4, !tbaa !1
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.prol, %vector.body.preheader
  %.lcssa513.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %wide.load458.prol, %vector.body.prol ]
  %.lcssa512.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %wide.load457.prol, %vector.body.prol ]
  %.lcssa511.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %wide.load456.prol, %vector.body.prol ]
  %.lcssa510.unr = phi <4 x i32> [ undef, %vector.body.preheader ], [ %wide.load.prol, %vector.body.prol ]
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 16, %vector.body.prol ]
  %vec.phi.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %wide.load.prol, %vector.body.prol ]
  %vec.phi453.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %wide.load456.prol, %vector.body.prol ]
  %vec.phi454.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %wide.load457.prol, %vector.body.prol ]
  %vec.phi455.unr = phi <4 x i32> [ zeroinitializer, %vector.body.preheader ], [ %wide.load458.prol, %vector.body.prol ]
  %1079 = icmp eq i64 %1070, 0
  br i1 %1079, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <4 x i32> [ %vec.phi.unr, %vector.body.preheader.split.split ], [ %1100, %vector.body ]
  %vec.phi453 = phi <4 x i32> [ %vec.phi453.unr, %vector.body.preheader.split.split ], [ %1101, %vector.body ]
  %vec.phi454 = phi <4 x i32> [ %vec.phi454.unr, %vector.body.preheader.split.split ], [ %1102, %vector.body ]
  %vec.phi455 = phi <4 x i32> [ %vec.phi455.unr, %vector.body.preheader.split.split ], [ %1103, %vector.body ]
  %1080 = getelementptr inbounds i32, i32* %1067, i64 %index
  %1081 = bitcast i32* %1080 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %1081, align 4, !tbaa !1
  %1082 = getelementptr i32, i32* %1080, i64 4
  %1083 = bitcast i32* %1082 to <4 x i32>*
  %wide.load456 = load <4 x i32>, <4 x i32>* %1083, align 4, !tbaa !1
  %1084 = getelementptr i32, i32* %1080, i64 8
  %1085 = bitcast i32* %1084 to <4 x i32>*
  %wide.load457 = load <4 x i32>, <4 x i32>* %1085, align 4, !tbaa !1
  %1086 = getelementptr i32, i32* %1080, i64 12
  %1087 = bitcast i32* %1086 to <4 x i32>*
  %wide.load458 = load <4 x i32>, <4 x i32>* %1087, align 4, !tbaa !1
  %1088 = add nsw <4 x i32> %wide.load, %vec.phi
  %1089 = add nsw <4 x i32> %wide.load456, %vec.phi453
  %1090 = add nsw <4 x i32> %wide.load457, %vec.phi454
  %1091 = add nsw <4 x i32> %wide.load458, %vec.phi455
  %index.next = add i64 %index, 16
  %1092 = getelementptr inbounds i32, i32* %1067, i64 %index.next
  %1093 = bitcast i32* %1092 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %1093, align 4, !tbaa !1
  %1094 = getelementptr i32, i32* %1092, i64 4
  %1095 = bitcast i32* %1094 to <4 x i32>*
  %wide.load456.1 = load <4 x i32>, <4 x i32>* %1095, align 4, !tbaa !1
  %1096 = getelementptr i32, i32* %1092, i64 8
  %1097 = bitcast i32* %1096 to <4 x i32>*
  %wide.load457.1 = load <4 x i32>, <4 x i32>* %1097, align 4, !tbaa !1
  %1098 = getelementptr i32, i32* %1092, i64 12
  %1099 = bitcast i32* %1098 to <4 x i32>*
  %wide.load458.1 = load <4 x i32>, <4 x i32>* %1099, align 4, !tbaa !1
  %1100 = add nsw <4 x i32> %wide.load.1, %1088
  %1101 = add nsw <4 x i32> %wide.load456.1, %1089
  %1102 = add nsw <4 x i32> %wide.load457.1, %1090
  %1103 = add nsw <4 x i32> %wide.load458.1, %1091
  %index.next.1 = add i64 %index, 32
  %1104 = icmp eq i64 %index.next.1, %n.vec
  br i1 %1104, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !265

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.preheader.split
  %.lcssa513 = phi <4 x i32> [ %.lcssa513.unr, %vector.body.preheader.split ], [ %1103, %middle.block.unr-lcssa ]
  %.lcssa512 = phi <4 x i32> [ %.lcssa512.unr, %vector.body.preheader.split ], [ %1102, %middle.block.unr-lcssa ]
  %.lcssa511 = phi <4 x i32> [ %.lcssa511.unr, %vector.body.preheader.split ], [ %1101, %middle.block.unr-lcssa ]
  %.lcssa510 = phi <4 x i32> [ %.lcssa510.unr, %vector.body.preheader.split ], [ %1100, %middle.block.unr-lcssa ]
  %bin.rdx = add <4 x i32> %.lcssa511, %.lcssa510
  %bin.rdx461 = add <4 x i32> %.lcssa512, %bin.rdx
  %bin.rdx462 = add <4 x i32> %.lcssa513, %bin.rdx461
  %rdx.shuf = shufflevector <4 x i32> %bin.rdx462, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx463 = add <4 x i32> %bin.rdx462, %rdx.shuf
  %rdx.shuf464 = shufflevector <4 x i32> %bin.rdx463, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx465 = add <4 x i32> %bin.rdx463, %rdx.shuf464
  %1105 = extractelement <4 x i32> %bin.rdx465, i32 0
  %cmp.n = icmp eq i64 %1068, %n.vec
  br i1 %cmp.n, label %._crit_edge146.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %min.iters.checked, %.lr.ph145
  %indvars.iv189.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %.lr.ph145 ], [ %n.vec, %middle.block ]
  %n.0143.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.lr.ph145 ], [ %1105, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph, %scalar.ph.preheader
  %indvars.iv189 = phi i64 [ %indvars.iv.next190, %scalar.ph ], [ %indvars.iv189.ph, %scalar.ph.preheader ]
  %n.0143 = phi i32 [ %1108, %scalar.ph ], [ %n.0143.ph, %scalar.ph.preheader ]
  %1106 = getelementptr inbounds i32, i32* %1067, i64 %indvars.iv189
  %1107 = load i32, i32* %1106, align 4, !tbaa !1
  %1108 = add nsw i32 %1107, %n.0143
  %indvars.iv.next190 = add nuw nsw i64 %indvars.iv189, 1
  %1109 = icmp slt i64 %indvars.iv.next190, %1068
  br i1 %1109, label %scalar.ph, label %._crit_edge146.loopexit.loopexit, !llvm.loop !266

._crit_edge146.loopexit.loopexit:                 ; preds = %scalar.ph
  br label %._crit_edge146.loopexit

._crit_edge146.loopexit:                          ; preds = %._crit_edge146.loopexit.loopexit, %middle.block
  %.lcssa449 = phi i32 [ %1105, %middle.block ], [ %1108, %._crit_edge146.loopexit.loopexit ]
  %phitmp = sitofp i32 %.lcssa449 to double
  br label %._crit_edge146

._crit_edge146:                                   ; preds = %._crit_edge146.loopexit, %.preheader129
  %n.0.lcssa = phi double [ 0.000000e+00, %.preheader129 ], [ %phitmp, %._crit_edge146.loopexit ]
  store double %n.0.lcssa, double* %tmp, align 8, !tbaa !33
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %tmp, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %1110 = load i32, i32* %me, align 4, !tbaa !1
  %1111 = icmp eq i32 %1110, 0
  br i1 %1111, label %1112, label %.preheader

; <label>:1112                                    ; preds = %._crit_edge146
  %1113 = icmp eq i32 %screen_yaml, 0
  br i1 %1113, label %..critedge92_crit_edge, label %.critedge89

..critedge92_crit_edge:                           ; preds = %1112
  %.pre409 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre411 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre413 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre415 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre417 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre419 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre421 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre423 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre425 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge92

.critedge89:                                      ; preds = %1112
  %1114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1115 = load double, double* %ave, align 8, !tbaa !33
  %1116 = load double, double* %max, align 8, !tbaa !33
  %1117 = load double, double* %min, align 8, !tbaa !33
  %1118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1114, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.60, i64 0, i64 0), double %1115, double %1116, double %1117)
  %1119 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1120 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %1119)
  %1121 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1122 = load i32, i32* %587, align 16, !tbaa !1
  %1123 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1121, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1122)
  %1124 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1125 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %1126 = load i32, i32* %1125, align 4, !tbaa !1
  %1127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1124, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1126)
  %1128 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1129 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %1130 = load i32, i32* %1129, align 8, !tbaa !1
  %1131 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1128, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1130)
  %1132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1133 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %1134 = load i32, i32* %1133, align 4, !tbaa !1
  %1135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1132, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1134)
  %1136 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1137 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %1138 = load i32, i32* %1137, align 16, !tbaa !1
  %1139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1136, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1138)
  %1140 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1141 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %1142 = load i32, i32* %1141, align 4, !tbaa !1
  %1143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1140, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1142)
  %1144 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1145 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %1146 = load i32, i32* %1145, align 8, !tbaa !1
  %1147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1144, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1146)
  %1148 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1149 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %1150 = load i32, i32* %1149, align 4, !tbaa !1
  %1151 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1148, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1150)
  %1152 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1153 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %1154 = load i32, i32* %1153, align 16, !tbaa !1
  %1155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1152, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1154)
  %1156 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1157 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %1158 = load i32, i32* %1157, align 4, !tbaa !1
  %1159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1156, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1158)
  %1160 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc16 = call i32 @fputc(i32 10, %struct._IO_FILE* %1160)
  br label %.critedge92

.critedge92:                                      ; preds = %.critedge89, %..critedge92_crit_edge
  %.pre-phi426 = phi i32* [ %.pre425, %..critedge92_crit_edge ], [ %1157, %.critedge89 ]
  %.pre-phi424 = phi i32* [ %.pre423, %..critedge92_crit_edge ], [ %1153, %.critedge89 ]
  %.pre-phi422 = phi i32* [ %.pre421, %..critedge92_crit_edge ], [ %1149, %.critedge89 ]
  %.pre-phi420 = phi i32* [ %.pre419, %..critedge92_crit_edge ], [ %1145, %.critedge89 ]
  %.pre-phi418 = phi i32* [ %.pre417, %..critedge92_crit_edge ], [ %1141, %.critedge89 ]
  %.pre-phi416 = phi i32* [ %.pre415, %..critedge92_crit_edge ], [ %1137, %.critedge89 ]
  %.pre-phi414 = phi i32* [ %.pre413, %..critedge92_crit_edge ], [ %1133, %.critedge89 ]
  %.pre-phi412 = phi i32* [ %.pre411, %..critedge92_crit_edge ], [ %1129, %.critedge89 ]
  %.pre-phi410 = phi i32* [ %.pre409, %..critedge92_crit_edge ], [ %1125, %.critedge89 ]
  %1161 = load double, double* %ave, align 8, !tbaa !33
  %1162 = load double, double* %max, align 8, !tbaa !33
  %1163 = load double, double* %min, align 8, !tbaa !33
  %1164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.60, i64 0, i64 0), double %1161, double %1162, double %1163)
  %1165 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %1166 = load i32, i32* %587, align 16, !tbaa !1
  %1167 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1166)
  %1168 = load i32, i32* %.pre-phi410, align 4, !tbaa !1
  %1169 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1168)
  %1170 = load i32, i32* %.pre-phi412, align 4, !tbaa !1
  %1171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1170)
  %1172 = load i32, i32* %.pre-phi414, align 4, !tbaa !1
  %1173 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1172)
  %1174 = load i32, i32* %.pre-phi416, align 4, !tbaa !1
  %1175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1174)
  %1176 = load i32, i32* %.pre-phi418, align 4, !tbaa !1
  %1177 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1176)
  %1178 = load i32, i32* %.pre-phi420, align 4, !tbaa !1
  %1179 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1178)
  %1180 = load i32, i32* %.pre-phi422, align 4, !tbaa !1
  %1181 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1180)
  %1182 = load i32, i32* %.pre-phi424, align 4, !tbaa !1
  %1183 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1182)
  %1184 = load i32, i32* %.pre-phi426, align 4, !tbaa !1
  %1185 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1184)
  %fputc13 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %.preheader

.preheader:                                       ; preds = %.critedge92, %._crit_edge146
  %1186 = load i32, i32* %12, align 4, !tbaa !84
  %1187 = icmp sgt i32 %1186, 0
  br i1 %1187, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %1188 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 8
  %1189 = load i32*, i32** %1188, align 8
  %1190 = sext i32 %1186 to i64
  %min.iters.check469 = icmp ult i32 %1186, 16
  br i1 %min.iters.check469, label %scalar.ph468.preheader, label %min.iters.checked470

min.iters.checked470:                             ; preds = %.lr.ph
  %n.vec472 = and i64 %1190, -16
  %cmp.zero473 = icmp eq i64 %n.vec472, 0
  br i1 %cmp.zero473, label %scalar.ph468.preheader, label %vector.body466.preheader

vector.body466.preheader:                         ; preds = %min.iters.checked470
  %1191 = add nsw i64 %1190, -16
  %1192 = lshr i64 %1191, 4
  %1193 = and i64 %1192, 1
  %lcmp.mod = icmp eq i64 %1193, 0
  br i1 %lcmp.mod, label %vector.body466.prol, label %vector.body466.preheader.split

vector.body466.prol:                              ; preds = %vector.body466.preheader
  %1194 = bitcast i32* %1189 to <4 x i32>*
  %wide.load489.prol = load <4 x i32>, <4 x i32>* %1194, align 4, !tbaa !1
  %1195 = getelementptr i32, i32* %1189, i64 4
  %1196 = bitcast i32* %1195 to <4 x i32>*
  %wide.load490.prol = load <4 x i32>, <4 x i32>* %1196, align 4, !tbaa !1
  %1197 = getelementptr i32, i32* %1189, i64 8
  %1198 = bitcast i32* %1197 to <4 x i32>*
  %wide.load491.prol = load <4 x i32>, <4 x i32>* %1198, align 4, !tbaa !1
  %1199 = getelementptr i32, i32* %1189, i64 12
  %1200 = bitcast i32* %1199 to <4 x i32>*
  %wide.load492.prol = load <4 x i32>, <4 x i32>* %1200, align 4, !tbaa !1
  br label %vector.body466.preheader.split

vector.body466.preheader.split:                   ; preds = %vector.body466.prol, %vector.body466.preheader
  %.lcssa508.unr = phi <4 x i32> [ undef, %vector.body466.preheader ], [ %wide.load492.prol, %vector.body466.prol ]
  %.lcssa507.unr = phi <4 x i32> [ undef, %vector.body466.preheader ], [ %wide.load491.prol, %vector.body466.prol ]
  %.lcssa506.unr = phi <4 x i32> [ undef, %vector.body466.preheader ], [ %wide.load490.prol, %vector.body466.prol ]
  %.lcssa505.unr = phi <4 x i32> [ undef, %vector.body466.preheader ], [ %wide.load489.prol, %vector.body466.prol ]
  %index475.unr = phi i64 [ 0, %vector.body466.preheader ], [ 16, %vector.body466.prol ]
  %vec.phi485.unr = phi <4 x i32> [ zeroinitializer, %vector.body466.preheader ], [ %wide.load489.prol, %vector.body466.prol ]
  %vec.phi486.unr = phi <4 x i32> [ zeroinitializer, %vector.body466.preheader ], [ %wide.load490.prol, %vector.body466.prol ]
  %vec.phi487.unr = phi <4 x i32> [ zeroinitializer, %vector.body466.preheader ], [ %wide.load491.prol, %vector.body466.prol ]
  %vec.phi488.unr = phi <4 x i32> [ zeroinitializer, %vector.body466.preheader ], [ %wide.load492.prol, %vector.body466.prol ]
  %1201 = icmp eq i64 %1192, 0
  br i1 %1201, label %middle.block467, label %vector.body466.preheader.split.split

vector.body466.preheader.split.split:             ; preds = %vector.body466.preheader.split
  br label %vector.body466

vector.body466:                                   ; preds = %vector.body466, %vector.body466.preheader.split.split
  %index475 = phi i64 [ %index475.unr, %vector.body466.preheader.split.split ], [ %index.next476.1, %vector.body466 ]
  %vec.phi485 = phi <4 x i32> [ %vec.phi485.unr, %vector.body466.preheader.split.split ], [ %1222, %vector.body466 ]
  %vec.phi486 = phi <4 x i32> [ %vec.phi486.unr, %vector.body466.preheader.split.split ], [ %1223, %vector.body466 ]
  %vec.phi487 = phi <4 x i32> [ %vec.phi487.unr, %vector.body466.preheader.split.split ], [ %1224, %vector.body466 ]
  %vec.phi488 = phi <4 x i32> [ %vec.phi488.unr, %vector.body466.preheader.split.split ], [ %1225, %vector.body466 ]
  %1202 = getelementptr inbounds i32, i32* %1189, i64 %index475
  %1203 = bitcast i32* %1202 to <4 x i32>*
  %wide.load489 = load <4 x i32>, <4 x i32>* %1203, align 4, !tbaa !1
  %1204 = getelementptr i32, i32* %1202, i64 4
  %1205 = bitcast i32* %1204 to <4 x i32>*
  %wide.load490 = load <4 x i32>, <4 x i32>* %1205, align 4, !tbaa !1
  %1206 = getelementptr i32, i32* %1202, i64 8
  %1207 = bitcast i32* %1206 to <4 x i32>*
  %wide.load491 = load <4 x i32>, <4 x i32>* %1207, align 4, !tbaa !1
  %1208 = getelementptr i32, i32* %1202, i64 12
  %1209 = bitcast i32* %1208 to <4 x i32>*
  %wide.load492 = load <4 x i32>, <4 x i32>* %1209, align 4, !tbaa !1
  %1210 = add nsw <4 x i32> %wide.load489, %vec.phi485
  %1211 = add nsw <4 x i32> %wide.load490, %vec.phi486
  %1212 = add nsw <4 x i32> %wide.load491, %vec.phi487
  %1213 = add nsw <4 x i32> %wide.load492, %vec.phi488
  %index.next476 = add i64 %index475, 16
  %1214 = getelementptr inbounds i32, i32* %1189, i64 %index.next476
  %1215 = bitcast i32* %1214 to <4 x i32>*
  %wide.load489.1 = load <4 x i32>, <4 x i32>* %1215, align 4, !tbaa !1
  %1216 = getelementptr i32, i32* %1214, i64 4
  %1217 = bitcast i32* %1216 to <4 x i32>*
  %wide.load490.1 = load <4 x i32>, <4 x i32>* %1217, align 4, !tbaa !1
  %1218 = getelementptr i32, i32* %1214, i64 8
  %1219 = bitcast i32* %1218 to <4 x i32>*
  %wide.load491.1 = load <4 x i32>, <4 x i32>* %1219, align 4, !tbaa !1
  %1220 = getelementptr i32, i32* %1214, i64 12
  %1221 = bitcast i32* %1220 to <4 x i32>*
  %wide.load492.1 = load <4 x i32>, <4 x i32>* %1221, align 4, !tbaa !1
  %1222 = add nsw <4 x i32> %wide.load489.1, %1210
  %1223 = add nsw <4 x i32> %wide.load490.1, %1211
  %1224 = add nsw <4 x i32> %wide.load491.1, %1212
  %1225 = add nsw <4 x i32> %wide.load492.1, %1213
  %index.next476.1 = add i64 %index475, 32
  %1226 = icmp eq i64 %index.next476.1, %n.vec472
  br i1 %1226, label %middle.block467.unr-lcssa, label %vector.body466, !llvm.loop !267

middle.block467.unr-lcssa:                        ; preds = %vector.body466
  br label %middle.block467

middle.block467:                                  ; preds = %middle.block467.unr-lcssa, %vector.body466.preheader.split
  %.lcssa508 = phi <4 x i32> [ %.lcssa508.unr, %vector.body466.preheader.split ], [ %1225, %middle.block467.unr-lcssa ]
  %.lcssa507 = phi <4 x i32> [ %.lcssa507.unr, %vector.body466.preheader.split ], [ %1224, %middle.block467.unr-lcssa ]
  %.lcssa506 = phi <4 x i32> [ %.lcssa506.unr, %vector.body466.preheader.split ], [ %1223, %middle.block467.unr-lcssa ]
  %.lcssa505 = phi <4 x i32> [ %.lcssa505.unr, %vector.body466.preheader.split ], [ %1222, %middle.block467.unr-lcssa ]
  %bin.rdx495 = add <4 x i32> %.lcssa506, %.lcssa505
  %bin.rdx496 = add <4 x i32> %.lcssa507, %bin.rdx495
  %bin.rdx497 = add <4 x i32> %.lcssa508, %bin.rdx496
  %rdx.shuf498 = shufflevector <4 x i32> %bin.rdx497, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx499 = add <4 x i32> %bin.rdx497, %rdx.shuf498
  %rdx.shuf500 = shufflevector <4 x i32> %bin.rdx499, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx501 = add <4 x i32> %bin.rdx499, %rdx.shuf500
  %1227 = extractelement <4 x i32> %bin.rdx501, i32 0
  %cmp.n478 = icmp eq i64 %1190, %n.vec472
  br i1 %cmp.n478, label %._crit_edge.loopexit, label %scalar.ph468.preheader

scalar.ph468.preheader:                           ; preds = %middle.block467, %min.iters.checked470, %.lr.ph
  %indvars.iv181.ph = phi i64 [ 0, %min.iters.checked470 ], [ 0, %.lr.ph ], [ %n.vec472, %middle.block467 ]
  %n.1139.ph = phi i32 [ 0, %min.iters.checked470 ], [ 0, %.lr.ph ], [ %1227, %middle.block467 ]
  br label %scalar.ph468

scalar.ph468:                                     ; preds = %scalar.ph468, %scalar.ph468.preheader
  %indvars.iv181 = phi i64 [ %indvars.iv.next182, %scalar.ph468 ], [ %indvars.iv181.ph, %scalar.ph468.preheader ]
  %n.1139 = phi i32 [ %1230, %scalar.ph468 ], [ %n.1139.ph, %scalar.ph468.preheader ]
  %1228 = getelementptr inbounds i32, i32* %1189, i64 %indvars.iv181
  %1229 = load i32, i32* %1228, align 4, !tbaa !1
  %1230 = add nsw i32 %1229, %n.1139
  %indvars.iv.next182 = add nuw nsw i64 %indvars.iv181, 1
  %1231 = icmp slt i64 %indvars.iv.next182, %1190
  br i1 %1231, label %scalar.ph468, label %._crit_edge.loopexit.loopexit, !llvm.loop !268

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph468
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block467
  %.lcssa = phi i32 [ %1227, %middle.block467 ], [ %1230, %._crit_edge.loopexit.loopexit ]
  %phitmp445 = sitofp i32 %.lcssa to double
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %n.1.lcssa = phi double [ 0.000000e+00, %.preheader ], [ %phitmp445, %._crit_edge.loopexit ]
  store double %n.1.lcssa, double* %tmp, align 8, !tbaa !33
  call void @_Z5statsiPdS_S_S_iPi(i32 1, double* nonnull %tmp, double* nonnull %ave, double* nonnull %max, double* nonnull %min, i32 10, i32* %587)
  %1232 = load i32, i32* %me, align 4, !tbaa !1
  %1233 = icmp eq i32 %1232, 0
  br i1 %1233, label %1234, label %1308

; <label>:1234                                    ; preds = %._crit_edge
  %1235 = icmp eq i32 %screen_yaml, 0
  br i1 %1235, label %..critedge98_crit_edge, label %.critedge95

..critedge98_crit_edge:                           ; preds = %1234
  %.pre427 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %.pre429 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %.pre431 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %.pre433 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %.pre435 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %.pre437 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %.pre439 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %.pre441 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %.pre443 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  br label %.critedge98

.critedge95:                                      ; preds = %1234
  %1236 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1237 = load double, double* %ave, align 8, !tbaa !33
  %1238 = load double, double* %max, align 8, !tbaa !33
  %1239 = load double, double* %min, align 8, !tbaa !33
  %1240 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1236, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.61, i64 0, i64 0), double %1237, double %1238, double %1239)
  %1241 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1242 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %1241)
  %1243 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1244 = load i32, i32* %587, align 16, !tbaa !1
  %1245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1243, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1244)
  %1246 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1247 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 1
  %1248 = load i32, i32* %1247, align 4, !tbaa !1
  %1249 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1246, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1248)
  %1250 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1251 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 2
  %1252 = load i32, i32* %1251, align 8, !tbaa !1
  %1253 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1250, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1252)
  %1254 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1255 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 3
  %1256 = load i32, i32* %1255, align 4, !tbaa !1
  %1257 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1254, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1256)
  %1258 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1259 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 4
  %1260 = load i32, i32* %1259, align 16, !tbaa !1
  %1261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1258, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1260)
  %1262 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1263 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 5
  %1264 = load i32, i32* %1263, align 4, !tbaa !1
  %1265 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1262, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1264)
  %1266 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1267 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 6
  %1268 = load i32, i32* %1267, align 8, !tbaa !1
  %1269 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1266, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1268)
  %1270 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1271 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 7
  %1272 = load i32, i32* %1271, align 4, !tbaa !1
  %1273 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1270, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1272)
  %1274 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1275 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 8
  %1276 = load i32, i32* %1275, align 16, !tbaa !1
  %1277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1274, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1276)
  %1278 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1279 = getelementptr inbounds [10 x i32], [10 x i32]* %histo, i64 0, i64 9
  %1280 = load i32, i32* %1279, align 4, !tbaa !1
  %1281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1278, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1280)
  %1282 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc10 = call i32 @fputc(i32 10, %struct._IO_FILE* %1282)
  br label %.critedge98

.critedge98:                                      ; preds = %.critedge95, %..critedge98_crit_edge
  %.pre-phi444 = phi i32* [ %.pre443, %..critedge98_crit_edge ], [ %1279, %.critedge95 ]
  %.pre-phi442 = phi i32* [ %.pre441, %..critedge98_crit_edge ], [ %1275, %.critedge95 ]
  %.pre-phi440 = phi i32* [ %.pre439, %..critedge98_crit_edge ], [ %1271, %.critedge95 ]
  %.pre-phi438 = phi i32* [ %.pre437, %..critedge98_crit_edge ], [ %1267, %.critedge95 ]
  %.pre-phi436 = phi i32* [ %.pre435, %..critedge98_crit_edge ], [ %1263, %.critedge95 ]
  %.pre-phi434 = phi i32* [ %.pre433, %..critedge98_crit_edge ], [ %1259, %.critedge95 ]
  %.pre-phi432 = phi i32* [ %.pre431, %..critedge98_crit_edge ], [ %1255, %.critedge95 ]
  %.pre-phi430 = phi i32* [ %.pre429, %..critedge98_crit_edge ], [ %1251, %.critedge95 ]
  %.pre-phi428 = phi i32* [ %.pre427, %..critedge98_crit_edge ], [ %1247, %.critedge95 ]
  %1283 = load double, double* %ave, align 8, !tbaa !33
  %1284 = load double, double* %max, align 8, !tbaa !33
  %1285 = load double, double* %min, align 8, !tbaa !33
  %1286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.61, i64 0, i64 0), double %1283, double %1284, double %1285)
  %1287 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %fp.0103)
  %1288 = load i32, i32* %587, align 16, !tbaa !1
  %1289 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1288)
  %1290 = load i32, i32* %.pre-phi428, align 4, !tbaa !1
  %1291 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1290)
  %1292 = load i32, i32* %.pre-phi430, align 4, !tbaa !1
  %1293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1292)
  %1294 = load i32, i32* %.pre-phi432, align 4, !tbaa !1
  %1295 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1294)
  %1296 = load i32, i32* %.pre-phi434, align 4, !tbaa !1
  %1297 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1296)
  %1298 = load i32, i32* %.pre-phi436, align 4, !tbaa !1
  %1299 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1298)
  %1300 = load i32, i32* %.pre-phi438, align 4, !tbaa !1
  %1301 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1300)
  %1302 = load i32, i32* %.pre-phi440, align 4, !tbaa !1
  %1303 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1302)
  %1304 = load i32, i32* %.pre-phi442, align 4, !tbaa !1
  %1305 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1304)
  %1306 = load i32, i32* %.pre-phi444, align 4, !tbaa !1
  %1307 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i64 0, i64 0), i32 %1306)
  %fputc7 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  br label %1308

; <label>:1308                                    ; preds = %.critedge98, %._crit_edge
  %1309 = call i32 @MPI_Allreduce(i8* nonnull %4, i8* %8, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %1310 = load i32, i32* %me, align 4, !tbaa !1
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1312, label %.thread128

; <label>:1312                                    ; preds = %1308
  %1313 = icmp eq i32 %screen_yaml, 0
  br i1 %1313, label %1318, label %1314

; <label>:1314                                    ; preds = %1312
  %1315 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %1316 = load double, double* %total, align 8, !tbaa !33
  %1317 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1315, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.62, i64 0, i64 0), double %1316)
  br label %1318

; <label>:1318                                    ; preds = %1314, %1312
  %1319 = load double, double* %total, align 8, !tbaa !33
  %1320 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %fp.0103, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.62, i64 0, i64 0), double %1319)
  %.pr124 = load i32, i32* %me, align 4, !tbaa !1
  %1321 = icmp eq i32 %.pr124, 0
  br i1 %1321, label %1322, label %.thread128

; <label>:1322                                    ; preds = %1318
  br i1 %1313, label %.thread125, label %1323

; <label>:1323                                    ; preds = %1322
  %1324 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %1324)
  br label %.thread125

.thread125:                                       ; preds = %1323, %1322
  %fputc4 = call i32 @fputc(i32 10, %struct._IO_FILE* %fp.0103)
  %.pr127.pr = load i32, i32* %me, align 4, !tbaa !1
  %1325 = icmp eq i32 %.pr127.pr, 0
  br i1 %1325, label %1326, label %.thread128

; <label>:1326                                    ; preds = %.thread125
  %1327 = call i32 @fclose(%struct._IO_FILE* %fp.0103)
  br label %.thread128

.thread128:                                       ; preds = %1326, %.thread125, %1318, %1308
  call void @llvm.lifetime.end(i64 8, i8* %559) #7
  call void @llvm.lifetime.end(i64 8, i8* %537) #7
  call void @llvm.lifetime.end(i64 8, i8* %515) #7
  call void @llvm.lifetime.end(i64 8, i8* %493) #7
  call void @llvm.lifetime.end(i64 8, i8* %408) #7
  br label %.thread

.thread:                                          ; preds = %.thread128, %68, %65, %62
  call void @llvm.lifetime.end(i64 4, i8* %54) #7
  call void @llvm.lifetime.end(i64 4, i8* %15) #7
  call void @llvm.lifetime.end(i64 4, i8* %11) #7
  call void @llvm.lifetime.end(i64 8, i8* %8) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  call void @llvm.lifetime.end(i64 8, i8* %6) #7
  call void @llvm.lifetime.end(i64 8, i8* %5) #7
  call void @llvm.lifetime.end(i64 8, i8* %4) #7
  call void @llvm.lifetime.end(i64 40, i8* %3) #7
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  call void @llvm.lifetime.end(i64 4, i8* nonnull %1) #7
  ret void
}

; Function Attrs: nounwind
declare double @pow(double, double) #5

; Function Attrs: nounwind
declare i64 @time(i64*) #5

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #5

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #5

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #7

; Function Attrs: uwtable
define void @_Z5statsiPdS_S_S_iPi(i32 %n, double* nocapture readonly %data, double* nocapture %pave, double* nocapture %pmax, double* nocapture %pmin, i32 %nhisto, i32* %histo) #11 {
  %1 = bitcast i32* %histo to i8*
  %2 = alloca i32, align 4
  %min = alloca double, align 8
  %max = alloca double, align 8
  %ave = alloca double, align 8
  %ntotal = alloca i32, align 4
  %tmp = alloca double, align 8
  store i32 %n, i32* %2, align 4, !tbaa !1
  %3 = bitcast double* %min to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #7
  store double 1.000000e+20, double* %min, align 8, !tbaa !33
  %4 = bitcast double* %max to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #7
  store double -1.000000e+20, double* %max, align 8, !tbaa !33
  %5 = bitcast double* %ave to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #7
  store double 0.000000e+00, double* %ave, align 8, !tbaa !33
  %6 = icmp sgt i32 %n, 0
  br i1 %6, label %.lr.ph12, label %39

.lr.ph12:                                         ; preds = %0
  %7 = sext i32 %n to i64
  %xtraiter29 = and i32 %n, 1
  %lcmp.mod30 = icmp eq i32 %xtraiter29, 0
  br i1 %lcmp.mod30, label %.lr.ph12.split, label %8

; <label>:8                                       ; preds = %.lr.ph12
  %9 = load double, double* %data, align 8, !tbaa !33
  %10 = fadd double %9, 0.000000e+00
  %11 = fcmp olt double %9, 1.000000e+20
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  store double %9, double* %min, align 8, !tbaa !33
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = phi double [ %9, %12 ], [ 1.000000e+20, %8 ]
  %15 = fcmp ogt double %9, -1.000000e+20
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  store double %9, double* %max, align 8, !tbaa !33
  br label %17

; <label>:17                                      ; preds = %16, %13
  %18 = phi double [ -1.000000e+20, %13 ], [ %9, %16 ]
  br label %.lr.ph12.split

.lr.ph12.split:                                   ; preds = %17, %.lr.ph12
  %.unr31 = phi double [ -1.000000e+20, %.lr.ph12 ], [ %18, %17 ]
  %.unr32 = phi double [ 1.000000e+20, %.lr.ph12 ], [ %14, %17 ]
  %indvars.iv21.unr = phi i64 [ 0, %.lr.ph12 ], [ 1, %17 ]
  %.unr33 = phi double [ 0.000000e+00, %.lr.ph12 ], [ %10, %17 ]
  %.lcssa28.unr = phi double [ undef, %.lr.ph12 ], [ %10, %17 ]
  %19 = icmp eq i32 %n, 1
  br i1 %19, label %._crit_edge13, label %.lr.ph12.split.split

.lr.ph12.split.split:                             ; preds = %.lr.ph12.split
  br label %20

; <label>:20                                      ; preds = %114, %.lr.ph12.split.split
  %21 = phi double [ %.unr31, %.lr.ph12.split.split ], [ %115, %114 ]
  %22 = phi double [ %.unr32, %.lr.ph12.split.split ], [ %111, %114 ]
  %indvars.iv21 = phi i64 [ %indvars.iv21.unr, %.lr.ph12.split.split ], [ %indvars.iv.next22.1, %114 ]
  %23 = phi double [ %.unr33, %.lr.ph12.split.split ], [ %37, %114 ]
  %24 = getelementptr inbounds double, double* %data, i64 %indvars.iv21
  %25 = load double, double* %24, align 8, !tbaa !33
  %26 = fadd double %25, %23
  %27 = fcmp olt double %25, %22
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %20
  store double %25, double* %min, align 8, !tbaa !33
  br label %29

; <label>:29                                      ; preds = %28, %20
  %30 = phi double [ %25, %28 ], [ %22, %20 ]
  %31 = fcmp ogt double %25, %21
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %29
  store double %25, double* %max, align 8, !tbaa !33
  br label %33

; <label>:33                                      ; preds = %32, %29
  %34 = phi double [ %21, %29 ], [ %25, %32 ]
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %35 = getelementptr inbounds double, double* %data, i64 %indvars.iv.next22
  %36 = load double, double* %35, align 8, !tbaa !33
  %37 = fadd double %36, %26
  %38 = fcmp olt double %36, %30
  br i1 %38, label %109, label %110

._crit_edge13.unr-lcssa:                          ; preds = %114
  br label %._crit_edge13

._crit_edge13:                                    ; preds = %._crit_edge13.unr-lcssa, %.lr.ph12.split
  %.lcssa28 = phi double [ %.lcssa28.unr, %.lr.ph12.split ], [ %37, %._crit_edge13.unr-lcssa ]
  store double %.lcssa28, double* %ave, align 8, !tbaa !33
  br label %39

; <label>:39                                      ; preds = %._crit_edge13, %0
  %40 = bitcast i32* %ntotal to i8*
  call void @llvm.lifetime.start(i64 4, i8* %40) #7
  %41 = bitcast i32* %2 to i8*
  %42 = call i32 @MPI_Allreduce(i8* %41, i8* %40, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
  %43 = bitcast double* %tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %43) #7
  %44 = call i32 @MPI_Allreduce(i8* %5, i8* %43, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %45 = load double, double* %tmp, align 8, !tbaa !33
  %46 = load i32, i32* %ntotal, align 4, !tbaa !1
  %47 = sitofp i32 %46 to double
  %48 = fdiv double %45, %47
  store double %48, double* %ave, align 8, !tbaa !33
  %49 = call i32 @MPI_Allreduce(i8* %3, i8* %43, i32 1, i32 1275070475, i32 1476395010, i32 1140850688)
  %50 = bitcast double* %tmp to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !33
  %52 = bitcast double* %min to i64*
  store i64 %51, i64* %52, align 8, !tbaa !33
  %53 = call i32 @MPI_Allreduce(i8* %4, i8* %43, i32 1, i32 1275070475, i32 1476395009, i32 1140850688)
  %54 = load i64, i64* %50, align 8, !tbaa !33
  %55 = bitcast double* %max to i64*
  store i64 %54, i64* %55, align 8, !tbaa !33
  %56 = icmp sgt i32 %nhisto, 0
  %57 = bitcast i64 %54 to double
  br i1 %56, label %.lr.ph8.preheader, label %._crit_edge9

.lr.ph8.preheader:                                ; preds = %39
  %58 = add i32 %nhisto, -1
  %59 = zext i32 %58 to i64
  %60 = shl nuw nsw i64 %59, 2
  %61 = add nuw nsw i64 %60, 4
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %61, i32 4, i1 false)
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %.lr.ph8.preheader, %39
  %62 = load double, double* %min, align 8, !tbaa !33
  %63 = fsub double %57, %62
  %64 = load i32, i32* %2, align 4, !tbaa !1
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %.lr.ph4, label %._crit_edge5

.lr.ph4:                                          ; preds = %._crit_edge9
  %66 = fcmp oeq double %63, 0.000000e+00
  %67 = add nsw i32 %nhisto, -1
  %68 = sitofp i32 %nhisto to double
  br i1 %66, label %.lr.ph4.split.us.preheader, label %.lr.ph4.split.preheader

.lr.ph4.split.us.preheader:                       ; preds = %.lr.ph4
  %69 = sext i32 %67 to i64
  %70 = select i1 %56, i64 0, i64 %69
  %71 = getelementptr inbounds i32, i32* %histo, i64 %70
  %.promoted = load i32, i32* %71, align 4, !tbaa !1
  %72 = add i32 %64, -1
  %xtraiter = and i32 %64, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph4.split.us.preheader.split, label %.lr.ph4.split.us.prol.preheader

.lr.ph4.split.us.prol.preheader:                  ; preds = %.lr.ph4.split.us.preheader
  br label %.lr.ph4.split.us.prol

.lr.ph4.split.us.prol:                            ; preds = %.lr.ph4.split.us.prol, %.lr.ph4.split.us.prol.preheader
  %73 = phi i32 [ %74, %.lr.ph4.split.us.prol ], [ %.promoted, %.lr.ph4.split.us.prol.preheader ]
  %i.22.us.prol = phi i32 [ %75, %.lr.ph4.split.us.prol ], [ 0, %.lr.ph4.split.us.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph4.split.us.prol ], [ %xtraiter, %.lr.ph4.split.us.prol.preheader ]
  %74 = add nsw i32 %73, 1
  %75 = add nuw nsw i32 %i.22.us.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph4.split.us.preheader.split.loopexit, label %.lr.ph4.split.us.prol, !llvm.loop !269

.lr.ph4.split.us.preheader.split.loopexit:        ; preds = %.lr.ph4.split.us.prol
  br label %.lr.ph4.split.us.preheader.split

.lr.ph4.split.us.preheader.split:                 ; preds = %.lr.ph4.split.us.preheader.split.loopexit, %.lr.ph4.split.us.preheader
  %.unr = phi i32 [ %.promoted, %.lr.ph4.split.us.preheader ], [ %74, %.lr.ph4.split.us.preheader.split.loopexit ]
  %i.22.us.unr = phi i32 [ 0, %.lr.ph4.split.us.preheader ], [ %75, %.lr.ph4.split.us.preheader.split.loopexit ]
  %.lcssa.unr = phi i32 [ undef, %.lr.ph4.split.us.preheader ], [ %74, %.lr.ph4.split.us.preheader.split.loopexit ]
  %76 = icmp ult i32 %72, 7
  br i1 %76, label %._crit_edge5.loopexit, label %.lr.ph4.split.us.preheader.split.split

.lr.ph4.split.us.preheader.split.split:           ; preds = %.lr.ph4.split.us.preheader.split
  br label %.lr.ph4.split.us

.lr.ph4.split.preheader:                          ; preds = %.lr.ph4
  %77 = sext i32 %64 to i64
  br label %.lr.ph4.split

.lr.ph4.split.us:                                 ; preds = %.lr.ph4.split.us, %.lr.ph4.split.us.preheader.split.split
  %78 = phi i32 [ %.unr, %.lr.ph4.split.us.preheader.split.split ], [ %79, %.lr.ph4.split.us ]
  %i.22.us = phi i32 [ %i.22.us.unr, %.lr.ph4.split.us.preheader.split.split ], [ %80, %.lr.ph4.split.us ]
  %79 = add nsw i32 %78, 8
  %80 = add nsw i32 %i.22.us, 8
  %81 = icmp slt i32 %80, %64
  br i1 %81, label %.lr.ph4.split.us, label %._crit_edge5.loopexit.unr-lcssa

.lr.ph4.split:                                    ; preds = %.lr.ph4.split, %.lr.ph4.split.preheader
  %indvars.iv15 = phi i64 [ 0, %.lr.ph4.split.preheader ], [ %indvars.iv.next16, %.lr.ph4.split ]
  %82 = getelementptr inbounds double, double* %data, i64 %indvars.iv15
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = fsub double %83, %62
  %85 = fdiv double %84, %63
  %86 = fmul double %68, %85
  %87 = fptosi double %86 to i32
  %88 = icmp slt i32 %87, %nhisto
  %m.0. = select i1 %88, i32 %87, i32 %67
  %89 = sext i32 %m.0. to i64
  %90 = getelementptr inbounds i32, i32* %histo, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !1
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 4, !tbaa !1
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %93 = icmp slt i64 %indvars.iv.next16, %77
  br i1 %93, label %.lr.ph4.split, label %._crit_edge5.loopexit27

._crit_edge5.loopexit.unr-lcssa:                  ; preds = %.lr.ph4.split.us
  br label %._crit_edge5.loopexit

._crit_edge5.loopexit:                            ; preds = %._crit_edge5.loopexit.unr-lcssa, %.lr.ph4.split.us.preheader.split
  %.lcssa = phi i32 [ %.lcssa.unr, %.lr.ph4.split.us.preheader.split ], [ %79, %._crit_edge5.loopexit.unr-lcssa ]
  store i32 %.lcssa, i32* %71, align 4, !tbaa !1
  br label %._crit_edge5

._crit_edge5.loopexit27:                          ; preds = %.lr.ph4.split
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit27, %._crit_edge5.loopexit, %._crit_edge9
  %94 = sext i32 %nhisto to i64
  %95 = shl nsw i64 %94, 2
  %96 = call noalias i8* @malloc(i64 %95) #7
  %97 = call i32 @MPI_Allreduce(i8* %1, i8* %96, i32 %nhisto, i32 1275069445, i32 1476395011, i32 1140850688)
  br i1 %56, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge5
  %98 = add i32 %nhisto, -1
  %99 = zext i32 %98 to i64
  %100 = shl nuw nsw i64 %99, 2
  %101 = add nuw nsw i64 %100, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %96, i64 %101, i32 4, i1 false)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.preheader, %._crit_edge5
  call void @free(i8* %96) #7
  %102 = bitcast double* %ave to i64*
  %103 = load i64, i64* %102, align 8, !tbaa !33
  %104 = bitcast double* %pave to i64*
  store i64 %103, i64* %104, align 8, !tbaa !33
  %105 = load i64, i64* %55, align 8, !tbaa !33
  %106 = bitcast double* %pmax to i64*
  store i64 %105, i64* %106, align 8, !tbaa !33
  %107 = load i64, i64* %52, align 8, !tbaa !33
  %108 = bitcast double* %pmin to i64*
  store i64 %107, i64* %108, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 8, i8* %43) #7
  call void @llvm.lifetime.end(i64 4, i8* %40) #7
  call void @llvm.lifetime.end(i64 8, i8* %5) #7
  call void @llvm.lifetime.end(i64 8, i8* %4) #7
  call void @llvm.lifetime.end(i64 8, i8* %3) #7
  ret void

; <label>:109                                     ; preds = %33
  store double %36, double* %min, align 8, !tbaa !33
  br label %110

; <label>:110                                     ; preds = %109, %33
  %111 = phi double [ %36, %109 ], [ %30, %33 ]
  %112 = fcmp ogt double %36, %34
  br i1 %112, label %113, label %114

; <label>:113                                     ; preds = %110
  store double %36, double* %max, align 8, !tbaa !33
  br label %114

; <label>:114                                     ; preds = %113, %110
  %115 = phi double [ %34, %110 ], [ %36, %113 ]
  %indvars.iv.next22.1 = add nsw i64 %indvars.iv21, 2
  %116 = icmp slt i64 %indvars.iv.next22.1, %7
  br i1 %116, label %20, label %._crit_edge13.unr-lcssa
}

; Function Attrs: nounwind uwtable
define void @_Z25read_lammps_parse_keywordi(i32 %first) #9 {
  %buffer = alloca [255 x i8], align 16
  %1 = getelementptr inbounds [255 x i8], [255 x i8]* %buffer, i64 0, i64 0
  call void @llvm.lifetime.start(i64 255, i8* %1) #7
  %2 = icmp eq i32 %first, 0
  br i1 %2, label %select.unfold.preheader, label %.lr.ph.preheader

select.unfold.preheader:                          ; preds = %0
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %4 = tail call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %3)
  %5 = icmp eq i8* %4, null
  br i1 %5, label %.critedge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %select.unfold.preheader, %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %select.unfold, %.lr.ph.preheader
  %6 = tail call i64 @strspn(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.220, i64 0, i64 0)) #16
  %7 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0)) #16
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %select.unfold, label %.critedge.loopexit

select.unfold:                                    ; preds = %.lr.ph
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %10 = tail call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %9)
  %11 = icmp eq i8* %10, null
  br i1 %11, label %.critedge.loopexit, label %.lr.ph

.critedge.loopexit:                               ; preds = %select.unfold, %.lr.ph
  %eof.0.shrunk.lcssa.ph = phi i1 [ false, %select.unfold ], [ true, %.lr.ph ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %select.unfold.preheader
  %eof.0.shrunk.lcssa = phi i1 [ false, %select.unfold.preheader ], [ %eof.0.shrunk.lcssa.ph, %.critedge.loopexit ]
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %13 = call i8* @fgets(i8* %1, i32 255, %struct._IO_FILE* %12)
  %not. = icmp ne i8* %13, null
  %14 = and i1 %not., %eof.0.shrunk.lcssa
  br i1 %14, label %16, label %15

; <label>:15                                      ; preds = %.critedge
  store i8 0, i8* getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), align 16, !tbaa !270
  br label %30

; <label>:16                                      ; preds = %.critedge
  %17 = call i64 @strspn(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.220, i64 0, i64 0)) #16
  %18 = call i64 @strlen(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0)) #16
  %19 = shl i64 %18, 32
  %sext8 = add i64 %19, -4294967296
  %20 = ashr exact i64 %sext8, 32
  br label %21

; <label>:21                                      ; preds = %switch.edge, %16
  %indvars.iv = phi i64 [ %indvars.iv.next, %switch.edge ], [ %20, %16 ]
  %22 = getelementptr inbounds [255 x i8], [255 x i8]* @line, i64 0, i64 %indvars.iv
  %23 = load i8, i8* %22, align 1, !tbaa !270
  switch i8 %23, label %.critedge3 [
    i8 32, label %switch.edge
    i8 9, label %switch.edge
    i8 10, label %switch.edge
    i8 13, label %switch.edge
  ]

.critedge3:                                       ; preds = %21
  %24 = shl i64 %indvars.iv, 32
  %sext9 = add i64 %24, 4294967296
  %25 = ashr exact i64 %sext9, 32
  %26 = getelementptr inbounds [255 x i8], [255 x i8]* @line, i64 0, i64 %25
  store i8 0, i8* %26, align 1, !tbaa !270
  %sext = shl i64 %17, 32
  %27 = ashr exact i64 %sext, 32
  %28 = getelementptr inbounds [255 x i8], [255 x i8]* @line, i64 0, i64 %27
  %29 = call i8* @strcpy(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* %28) #7
  br label %30

switch.edge:                                      ; preds = %21, %21, %21, %21
  %indvars.iv.next = add i64 %indvars.iv, -1
  br label %21

; <label>:30                                      ; preds = %.critedge3, %15
  call void @llvm.lifetime.end(i64 255, i8* %1) #7
  ret void
}

; Function Attrs: nounwind readonly
declare i64 @strspn(i8* nocapture, i8* nocapture) #3

; Function Attrs: nounwind uwtable
define void @_Z18read_lammps_headerR4Atom(%class.Atom* dereferenceable(224) %atom) #9 {
  %ntypes = alloca i32, align 4
  %xlo = alloca double, align 8
  %xhi = alloca double, align 8
  %ylo = alloca double, align 8
  %yhi = alloca double, align 8
  %zlo = alloca double, align 8
  %zhi = alloca double, align 8
  %str = alloca [128 x i8], align 16
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %2 = tail call i8* @fgets(i8* getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %1)
  %3 = bitcast i32* %ntypes to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #7
  store i32 0, i32* %ntypes, align 4, !tbaa !1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %5 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %4)
  %6 = icmp eq i8* %5, null
  br i1 %6, label %.thread, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %7 = bitcast double* %xlo to i8*
  %8 = bitcast double* %xhi to i8*
  %9 = bitcast double* %ylo to i8*
  %10 = bitcast double* %yhi to i8*
  %11 = bitcast double* %zlo to i8*
  %12 = bitcast double* %zhi to i8*
  %13 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %15 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %16 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  br label %20

.critedge:                                        ; preds = %29
  call void @llvm.lifetime.end(i64 8, i8* %12) #7
  call void @llvm.lifetime.end(i64 8, i8* %11) #7
  call void @llvm.lifetime.end(i64 8, i8* %10) #7
  call void @llvm.lifetime.end(i64 8, i8* %9) #7
  call void @llvm.lifetime.end(i64 8, i8* %8) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  br label %.backedge

.backedge:                                        ; preds = %67, %.critedge
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %18 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %17)
  %19 = icmp eq i8* %18, null
  br i1 %19, label %.thread.loopexit, label %20

; <label>:20                                      ; preds = %.backedge, %.lr.ph
  %21 = call i64 @strlen(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0)) #16
  %22 = add i64 %21, 1
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %.thread.loopexit, label %25

.thread.loopexit:                                 ; preds = %20, %.backedge
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit, %0
  store i8 0, i8* getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), align 16, !tbaa !270
  br label %.thread3

; <label>:25                                      ; preds = %20
  call void @llvm.lifetime.start(i64 8, i8* %7) #7
  call void @llvm.lifetime.start(i64 8, i8* %8) #7
  call void @llvm.lifetime.start(i64 8, i8* %9) #7
  call void @llvm.lifetime.start(i64 8, i8* %10) #7
  call void @llvm.lifetime.start(i64 8, i8* %11) #7
  call void @llvm.lifetime.start(i64 8, i8* %12) #7
  %26 = call i8* @strchr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 35) #16
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

; <label>:28                                      ; preds = %25
  store i8 0, i8* %26, align 1, !tbaa !270
  br label %29

; <label>:29                                      ; preds = %28, %25
  %30 = call i64 @strspn(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.220, i64 0, i64 0)) #16
  %31 = call i64 @strlen(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0)) #16
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %.critedge, label %33

; <label>:33                                      ; preds = %29
  %34 = call i8* @strstr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.221, i64 0, i64 0)) #16
  %35 = icmp eq i8* %34, null
  br i1 %35, label %38, label %36

; <label>:36                                      ; preds = %33
  %37 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5.222, i64 0, i64 0), i32* %16) #7
  br label %67

; <label>:38                                      ; preds = %33
  %39 = call i8* @strstr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.223, i64 0, i64 0)) #16
  %40 = icmp eq i8* %39, null
  br i1 %40, label %43, label %41

; <label>:41                                      ; preds = %38
  %42 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5.222, i64 0, i64 0), i32* nonnull %ntypes) #7
  br label %67

; <label>:43                                      ; preds = %38
  %44 = call i8* @strstr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.224, i64 0, i64 0)) #16
  %45 = icmp eq i8* %44, null
  br i1 %45, label %51, label %46

; <label>:46                                      ; preds = %43
  %47 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.225, i64 0, i64 0), double* nonnull %xlo, double* nonnull %xhi) #7
  %48 = load double, double* %xhi, align 8, !tbaa !33
  %49 = load double, double* %xlo, align 8, !tbaa !33
  %50 = fsub double %48, %49
  store double %50, double* %15, align 8, !tbaa !62
  br label %67

; <label>:51                                      ; preds = %43
  %52 = call i8* @strstr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.226, i64 0, i64 0)) #16
  %53 = icmp eq i8* %52, null
  br i1 %53, label %59, label %54

; <label>:54                                      ; preds = %51
  %55 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.225, i64 0, i64 0), double* nonnull %ylo, double* nonnull %yhi) #7
  %56 = load double, double* %yhi, align 8, !tbaa !33
  %57 = load double, double* %ylo, align 8, !tbaa !33
  %58 = fsub double %56, %57
  store double %58, double* %14, align 8, !tbaa !63
  br label %67

; <label>:59                                      ; preds = %51
  %60 = call i8* @strstr(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.227, i64 0, i64 0)) #16
  %61 = icmp eq i8* %60, null
  br i1 %61, label %.critedge2, label %62

; <label>:62                                      ; preds = %59
  %63 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.225, i64 0, i64 0), double* nonnull %zlo, double* nonnull %zhi) #7
  %64 = load double, double* %zhi, align 8, !tbaa !33
  %65 = load double, double* %zlo, align 8, !tbaa !33
  %66 = fsub double %64, %65
  store double %66, double* %13, align 8, !tbaa !64
  br label %67

; <label>:67                                      ; preds = %62, %54, %46, %41, %36
  call void @llvm.lifetime.end(i64 8, i8* %12) #7
  call void @llvm.lifetime.end(i64 8, i8* %11) #7
  call void @llvm.lifetime.end(i64 8, i8* %10) #7
  call void @llvm.lifetime.end(i64 8, i8* %9) #7
  call void @llvm.lifetime.end(i64 8, i8* %8) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  br label %.backedge

.critedge2:                                       ; preds = %59
  call void @llvm.lifetime.end(i64 8, i8* %12) #7
  call void @llvm.lifetime.end(i64 8, i8* %11) #7
  call void @llvm.lifetime.end(i64 8, i8* %10) #7
  call void @llvm.lifetime.end(i64 8, i8* %9) #7
  call void @llvm.lifetime.end(i64 8, i8* %8) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  call void @_Z25read_lammps_parse_keywordi(i32 1)
  %68 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.228, i64 0, i64 0)) #16
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %.thread3, label %70

; <label>:70                                      ; preds = %.critedge2
  %71 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.229, i64 0, i64 0)) #16
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %.thread3, label %76

; <label>:73                                      ; preds = %76
  %74 = getelementptr inbounds [128 x i8], [128 x i8]* %str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 128, i8* %74) #7
  %75 = call i32 (i8*, i8*, ...) @sprintf(i8* %74, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11.230, i64 0, i64 0), i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0)) #7
  call void @llvm.lifetime.end(i64 128, i8* %74) #7
  br label %.thread3

.thread3:                                         ; preds = %76, %73, %70, %.critedge2, %.thread
  call void @llvm.lifetime.end(i64 4, i8* %3) #7
  ret void

; <label>:76                                      ; preds = %70
  %77 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.231, i64 0, i64 0)) #16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %.thread3, label %73
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) #3

; Function Attrs: nounwind uwtable
define void @_Z17read_lammps_atomsR4AtomPd(%class.Atom* nocapture dereferenceable(224) %atom, double* nocapture %x) #9 {
  %i = alloca i32, align 4
  %type = alloca i32, align 4
  %xx = alloca double, align 8
  %xy = alloca double, align 8
  %xz = alloca double, align 8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !65
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  store i32 0, i32* %4, align 4, !tbaa !84
  %5 = bitcast i32* %type to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  %6 = bitcast double* %xx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #7
  %7 = bitcast double* %xy to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #7
  %8 = bitcast double* %xz to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #7
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %10 = bitcast double* %xx to i64*
  %11 = bitcast double* %xy to i64*
  %12 = bitcast double* %xz to i64*
  br label %13

; <label>:13                                      ; preds = %13, %.lr.ph
  %nread.01 = phi i32 [ 0, %.lr.ph ], [ %34, %13 ]
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %15 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %14)
  %16 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12.232, i64 0, i64 0), i32* nonnull %i, i32* nonnull %type, double* nonnull %xx, double* nonnull %xy, double* nonnull %xz) #7
  %17 = load i32, i32* %i, align 4, !tbaa !1
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %i, align 4, !tbaa !1
  %19 = load i64, i64* %10, align 8, !tbaa !33
  %20 = mul nsw i32 %18, 3
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds double, double* %x, i64 %21
  %23 = bitcast double* %22 to i64*
  store i64 %19, i64* %23, align 8, !tbaa !33
  %24 = load i64, i64* %11, align 8, !tbaa !33
  %25 = add nsw i32 %20, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %x, i64 %26
  %28 = bitcast double* %27 to i64*
  store i64 %24, i64* %28, align 8, !tbaa !33
  %29 = load i64, i64* %12, align 8, !tbaa !33
  %30 = add nsw i32 %20, 2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %x, i64 %31
  %33 = bitcast double* %32 to i64*
  store i64 %29, i64* %33, align 8, !tbaa !33
  %34 = add nuw nsw i32 %nread.01, 1
  %exitcond = icmp eq i32 %34, %3
  br i1 %exitcond, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 8, i8* %8) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  call void @llvm.lifetime.end(i64 8, i8* %6) #7
  call void @llvm.lifetime.end(i64 4, i8* %5) #7
  call void @llvm.lifetime.end(i64 4, i8* %1) #7
  ret void
}

; Function Attrs: nounwind uwtable
define void @_Z22read_lammps_velocitiesR4AtomPd(%class.Atom* nocapture readonly dereferenceable(224) %atom, double* nocapture %v) #9 {
  %i = alloca i32, align 4
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #7
  %2 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !65
  %4 = bitcast double* %x to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #7
  %5 = bitcast double* %y to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #7
  %6 = bitcast double* %z to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #7
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %8 = bitcast double* %x to i64*
  %9 = bitcast double* %y to i64*
  %10 = bitcast double* %z to i64*
  br label %11

; <label>:11                                      ; preds = %11, %.lr.ph
  %nread.01 = phi i32 [ 0, %.lr.ph ], [ %32, %11 ]
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %13 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %12)
  %14 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13.233, i64 0, i64 0), i32* nonnull %i, double* nonnull %x, double* nonnull %y, double* nonnull %z) #7
  %15 = load i32, i32* %i, align 4, !tbaa !1
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %i, align 4, !tbaa !1
  %17 = load i64, i64* %8, align 8, !tbaa !33
  %18 = mul nsw i32 %16, 3
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double, double* %v, i64 %19
  %21 = bitcast double* %20 to i64*
  store i64 %17, i64* %21, align 8, !tbaa !33
  %22 = load i64, i64* %9, align 8, !tbaa !33
  %23 = add nsw i32 %18, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds double, double* %v, i64 %24
  %26 = bitcast double* %25 to i64*
  store i64 %22, i64* %26, align 8, !tbaa !33
  %27 = load i64, i64* %10, align 8, !tbaa !33
  %28 = add nsw i32 %18, 2
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %v, i64 %29
  %31 = bitcast double* %30 to i64*
  store i64 %27, i64* %31, align 8, !tbaa !33
  %32 = add nuw nsw i32 %nread.01, 1
  %exitcond = icmp eq i32 %32, %3
  br i1 %exitcond, label %._crit_edge.loopexit, label %11

._crit_edge.loopexit:                             ; preds = %11
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  call void @llvm.lifetime.end(i64 8, i8* %6) #7
  call void @llvm.lifetime.end(i64 8, i8* %5) #7
  call void @llvm.lifetime.end(i64 8, i8* %4) #7
  call void @llvm.lifetime.end(i64 4, i8* %1) #7
  ret void
}

; Function Attrs: uwtable
define i32 @_Z16read_lammps_dataR4AtomR4CommR8NeighborR9IntegrateR6ThermoPci(%class.Atom* dereferenceable(224) %atom, %class.Comm* dereferenceable(336) %comm, %class.Neighbor* dereferenceable(240) %neighbor, %class.Integrate* dereferenceable(88) %integrate, %class.Thermo* dereferenceable(128) %thermo, i8* %file, i32 %units) #11 {
  %i.i2 = alloca i32, align 4
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %z.i = alloca double, align 8
  %i.i = alloca i32, align 4
  %type.i = alloca i32, align 4
  %xx.i = alloca double, align 8
  %xy.i = alloca double, align 8
  %xz.i = alloca double, align 8
  %str = alloca [128 x i8], align 16
  %tmp = alloca i32, align 4
  %me = alloca i32, align 4
  %natoms = alloca i32, align 4
  %1 = tail call %struct._IO_FILE* @fopen(i8* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14.236, i64 0, i64 0))
  store %struct._IO_FILE* %1, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %2 = icmp eq %struct._IO_FILE* %1, null
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds [128 x i8], [128 x i8]* %str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 128, i8* %4) #7
  %5 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.237, i64 0, i64 0), i8* %file) #7
  call void @llvm.lifetime.end(i64 128, i8* %4) #7
  br label %6

; <label>:6                                       ; preds = %3, %0
  tail call void @_Z18read_lammps_headerR4Atom(%class.Atom* nonnull dereferenceable(224) %atom)
  %7 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 4
  %8 = load double, double* %7, align 8, !tbaa !57
  %9 = tail call i32 @_ZN4Comm5setupEdR4Atom(%class.Comm* nonnull %comm, double %8, %class.Atom* nonnull dereferenceable(224) %atom)
  %10 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 1
  %11 = load i32, i32* %10, align 4, !tbaa !47
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %39

; <label>:13                                      ; preds = %6
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %15 = load double, double* %14, align 8, !tbaa !62
  %16 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %17 = load double, double* %16, align 8, !tbaa !63
  %18 = fmul double %15, %17
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %20 = load double, double* %19, align 8, !tbaa !64
  %21 = fmul double %18, %20
  %22 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %23 = load i32, i32* %22, align 8, !tbaa !65
  %24 = sitofp i32 %23 to double
  %25 = fdiv double %24, %21
  %26 = fmul double %25, 1.600000e+01
  %27 = tail call double @pow(double %26, double 0x3FD5555555555555) #7
  %28 = load double, double* %14, align 8, !tbaa !62
  %29 = fdiv double %28, %27
  %30 = fptosi double %29 to i32
  store i32 %30, i32* %10, align 4, !tbaa !47
  %31 = load double, double* %16, align 8, !tbaa !63
  %32 = fdiv double %31, %27
  %33 = fptosi double %32 to i32
  %34 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  store i32 %33, i32* %34, align 8, !tbaa !48
  %35 = load double, double* %19, align 8, !tbaa !64
  %36 = fdiv double %35, %27
  %37 = fptosi double %36 to i32
  %38 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 3
  store i32 %37, i32* %38, align 4, !tbaa !49
  br label %39

; <label>:39                                      ; preds = %13, %6
  %40 = phi i32 [ %30, %13 ], [ %11, %6 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42                                      ; preds = %39
  store i32 1, i32* %10, align 4, !tbaa !47
  br label %43

; <label>:43                                      ; preds = %42, %39
  %44 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 2
  %45 = bitcast i32* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

; <label>:49                                      ; preds = %43
  store i32 1, i32* %44, align 8, !tbaa !48
  br label %50

; <label>:50                                      ; preds = %49, %43
  %51 = icmp ult i64 %46, 4294967296
  br i1 %51, label %52, label %54

; <label>:52                                      ; preds = %50
  %53 = getelementptr inbounds %class.Neighbor, %class.Neighbor* %neighbor, i64 0, i32 3
  store i32 1, i32* %53, align 4, !tbaa !49
  br label %54

; <label>:54                                      ; preds = %52, %50
  %55 = tail call i32 @_ZN8Neighbor5setupER4Atom(%class.Neighbor* nonnull %neighbor, %class.Atom* nonnull dereferenceable(224) %atom)
  tail call void @_ZN9Integrate5setupEv(%class.Integrate* nonnull %integrate)
  %56 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  %57 = load double, double* %56, align 8, !tbaa !62
  %58 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  %59 = load double, double* %58, align 8, !tbaa !63
  %60 = fmul double %57, %59
  %61 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  %62 = load double, double* %61, align 8, !tbaa !64
  %63 = fmul double %60, %62
  %64 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %65 = load i32, i32* %64, align 8, !tbaa !65
  %66 = sitofp i32 %65 to double
  %67 = fdiv double %63, %66
  tail call void @_ZN6Thermo5setupEdR9IntegrateR4Atomi(%class.Thermo* nonnull %thermo, double %67, %class.Integrate* nonnull dereferenceable(88) %integrate, %class.Atom* nonnull dereferenceable(224) %atom, i32 %units)
  %68 = load i32, i32* %64, align 8, !tbaa !65
  %69 = tail call double* @_ZN4Atom25create_2d_MMD_float_arrayEii(%class.Atom* nonnull %atom, i32 %68, i32 3)
  %70 = load i32, i32* %64, align 8, !tbaa !65
  %71 = tail call double* @_ZN4Atom25create_2d_MMD_float_arrayEii(%class.Atom* nonnull %atom, i32 %70, i32 3)
  %72 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %72) #7
  %strlenfirst7 = load i8, i8* getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), align 16
  %73 = icmp eq i8 %strlenfirst7, 0
  br i1 %73, label %.preheader, label %.lr.ph10

.lr.ph10:                                         ; preds = %54
  %74 = bitcast i32* %i.i to i8*
  %75 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %76 = bitcast i32* %type.i to i8*
  %77 = bitcast double* %xx.i to i8*
  %78 = bitcast double* %xy.i to i8*
  %79 = bitcast double* %xz.i to i8*
  %80 = bitcast double* %xx.i to i64*
  %81 = bitcast double* %xy.i to i64*
  %82 = bitcast double* %xz.i to i64*
  %83 = bitcast i32* %i.i2 to i8*
  %84 = bitcast double* %x.i to i8*
  %85 = bitcast double* %y.i to i8*
  %86 = bitcast double* %z.i to i8*
  %87 = bitcast double* %x.i to i64*
  %88 = bitcast double* %y.i to i64*
  %89 = bitcast double* %z.i to i64*
  %90 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 13
  br label %99

.preheader.loopexit:                              ; preds = %163
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %54
  %91 = load i32, i32* %64, align 8, !tbaa !65
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %93 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %94 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %95 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %96 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  %97 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %98 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  br label %174

; <label>:99                                      ; preds = %163, %.lr.ph10
  %atomflag.08 = phi i32 [ 0, %.lr.ph10 ], [ %atomflag.1, %163 ]
  %100 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.228, i64 0, i64 0)) #16
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %126

; <label>:102                                     ; preds = %99
  call void @llvm.lifetime.start(i64 4, i8* %74) #7
  %103 = load i32, i32* %64, align 8, !tbaa !65
  store i32 0, i32* %75, align 4, !tbaa !84
  call void @llvm.lifetime.start(i64 4, i8* %76) #7
  call void @llvm.lifetime.start(i64 8, i8* %77) #7
  call void @llvm.lifetime.start(i64 8, i8* %78) #7
  call void @llvm.lifetime.start(i64 8, i8* %79) #7
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %.lr.ph.i.preheader, label %_Z17read_lammps_atomsR4AtomPd.exit

.lr.ph.i.preheader:                               ; preds = %102
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %.lr.ph.i.preheader
  %nread.01.i = phi i32 [ %125, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %106 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %105) #7
  %107 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12.232, i64 0, i64 0), i32* nonnull %i.i, i32* nonnull %type.i, double* nonnull %xx.i, double* nonnull %xy.i, double* nonnull %xz.i) #7
  %108 = load i32, i32* %i.i, align 4, !tbaa !1
  %109 = add nsw i32 %108, -1
  store i32 %109, i32* %i.i, align 4, !tbaa !1
  %110 = load i64, i64* %80, align 8, !tbaa !33
  %111 = mul nsw i32 %109, 3
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds double, double* %69, i64 %112
  %114 = bitcast double* %113 to i64*
  store i64 %110, i64* %114, align 8, !tbaa !33
  %115 = load i64, i64* %81, align 8, !tbaa !33
  %116 = add nsw i32 %111, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double, double* %69, i64 %117
  %119 = bitcast double* %118 to i64*
  store i64 %115, i64* %119, align 8, !tbaa !33
  %120 = load i64, i64* %82, align 8, !tbaa !33
  %121 = add nsw i32 %111, 2
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds double, double* %69, i64 %122
  %124 = bitcast double* %123 to i64*
  store i64 %120, i64* %124, align 8, !tbaa !33
  %125 = add nuw nsw i32 %nread.01.i, 1
  %exitcond.i = icmp eq i32 %125, %103
  br i1 %exitcond.i, label %_Z17read_lammps_atomsR4AtomPd.exit.loopexit, label %.lr.ph.i

_Z17read_lammps_atomsR4AtomPd.exit.loopexit:      ; preds = %.lr.ph.i
  br label %_Z17read_lammps_atomsR4AtomPd.exit

_Z17read_lammps_atomsR4AtomPd.exit:               ; preds = %_Z17read_lammps_atomsR4AtomPd.exit.loopexit, %102
  call void @llvm.lifetime.end(i64 8, i8* %79) #7
  call void @llvm.lifetime.end(i64 8, i8* %78) #7
  call void @llvm.lifetime.end(i64 8, i8* %77) #7
  call void @llvm.lifetime.end(i64 4, i8* %76) #7
  call void @llvm.lifetime.end(i64 4, i8* %74) #7
  br label %163

; <label>:126                                     ; preds = %99
  %127 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.229, i64 0, i64 0)) #16
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %156

; <label>:129                                     ; preds = %126
  %130 = icmp eq i32 %atomflag.08, 0
  br i1 %130, label %131, label %132

; <label>:131                                     ; preds = %129
  %puts1 = call i32 @puts(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @str.20, i64 0, i64 0))
  br label %132

; <label>:132                                     ; preds = %131, %129
  call void @llvm.lifetime.start(i64 4, i8* %83) #7
  %133 = load i32, i32* %64, align 8, !tbaa !65
  call void @llvm.lifetime.start(i64 8, i8* %84) #7
  call void @llvm.lifetime.start(i64 8, i8* %85) #7
  call void @llvm.lifetime.start(i64 8, i8* %86) #7
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %.lr.ph.i3.preheader, label %_Z22read_lammps_velocitiesR4AtomPd.exit

.lr.ph.i3.preheader:                              ; preds = %132
  br label %.lr.ph.i3

.lr.ph.i3:                                        ; preds = %.lr.ph.i3, %.lr.ph.i3.preheader
  %nread.01.i4 = phi i32 [ %155, %.lr.ph.i3 ], [ 0, %.lr.ph.i3.preheader ]
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %136 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %135) #7
  %137 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13.233, i64 0, i64 0), i32* nonnull %i.i2, double* nonnull %x.i, double* nonnull %y.i, double* nonnull %z.i) #7
  %138 = load i32, i32* %i.i2, align 4, !tbaa !1
  %139 = add nsw i32 %138, -1
  store i32 %139, i32* %i.i2, align 4, !tbaa !1
  %140 = load i64, i64* %87, align 8, !tbaa !33
  %141 = mul nsw i32 %139, 3
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %71, i64 %142
  %144 = bitcast double* %143 to i64*
  store i64 %140, i64* %144, align 8, !tbaa !33
  %145 = load i64, i64* %88, align 8, !tbaa !33
  %146 = add nsw i32 %141, 1
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double, double* %71, i64 %147
  %149 = bitcast double* %148 to i64*
  store i64 %145, i64* %149, align 8, !tbaa !33
  %150 = load i64, i64* %89, align 8, !tbaa !33
  %151 = add nsw i32 %141, 2
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds double, double* %71, i64 %152
  %154 = bitcast double* %153 to i64*
  store i64 %150, i64* %154, align 8, !tbaa !33
  %155 = add nuw nsw i32 %nread.01.i4, 1
  %exitcond.i5 = icmp eq i32 %155, %133
  br i1 %exitcond.i5, label %_Z22read_lammps_velocitiesR4AtomPd.exit.loopexit, label %.lr.ph.i3

_Z22read_lammps_velocitiesR4AtomPd.exit.loopexit: ; preds = %.lr.ph.i3
  br label %_Z22read_lammps_velocitiesR4AtomPd.exit

_Z22read_lammps_velocitiesR4AtomPd.exit:          ; preds = %_Z22read_lammps_velocitiesR4AtomPd.exit.loopexit, %132
  call void @llvm.lifetime.end(i64 8, i8* %86) #7
  call void @llvm.lifetime.end(i64 8, i8* %85) #7
  call void @llvm.lifetime.end(i64 8, i8* %84) #7
  call void @llvm.lifetime.end(i64 4, i8* %83) #7
  br label %163

; <label>:156                                     ; preds = %126
  %157 = call i32 @strcmp(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.231, i64 0, i64 0)) #16
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %163

; <label>:159                                     ; preds = %156
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** @fp, align 8, !tbaa !5
  %161 = call i8* @fgets(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i32 255, %struct._IO_FILE* %160)
  %162 = call i32 (i8*, i8*, ...) @sscanf(i8* nonnull getelementptr inbounds ([255 x i8], [255 x i8]* @line, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.238, i64 0, i64 0), i32* nonnull %tmp, double* %90) #7
  br label %163

; <label>:163                                     ; preds = %159, %156, %_Z22read_lammps_velocitiesR4AtomPd.exit, %_Z17read_lammps_atomsR4AtomPd.exit
  %atomflag.1 = phi i32 [ 1, %_Z17read_lammps_atomsR4AtomPd.exit ], [ %atomflag.08, %_Z22read_lammps_velocitiesR4AtomPd.exit ], [ %atomflag.08, %159 ], [ %atomflag.08, %156 ]
  call void @_Z25read_lammps_parse_keywordi(i32 0)
  %strlenfirst = load i8, i8* getelementptr inbounds ([255 x i8], [255 x i8]* @keyword, i64 0, i64 0), align 16
  %164 = icmp eq i8 %strlenfirst, 0
  br i1 %164, label %.preheader.loopexit, label %99

._crit_edge.loopexit:                             ; preds = %209
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %165 = bitcast i32* %me to i8*
  call void @llvm.lifetime.start(i64 4, i8* %165) #7
  %166 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %me)
  %167 = bitcast i32* %natoms to i8*
  call void @llvm.lifetime.start(i64 4, i8* %167) #7
  %168 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %169 = bitcast i32* %168 to i8*
  %170 = call i32 @MPI_Allreduce(i8* %169, i8* %167, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
  %171 = load i32, i32* %natoms, align 4, !tbaa !1
  %172 = load i32, i32* %64, align 8, !tbaa !65
  %173 = icmp eq i32 %171, %172
  br i1 %173, label %217, label %213

; <label>:174                                     ; preds = %209, %.lr.ph
  %175 = phi i32 [ %91, %.lr.ph ], [ %210, %209 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %209 ]
  %176 = mul nuw nsw i64 %indvars.iv, 3
  %177 = getelementptr inbounds double, double* %69, i64 %176
  %178 = load double, double* %177, align 8, !tbaa !33
  %179 = load double, double* %93, align 8, !tbaa !86
  %180 = fcmp ult double %178, %179
  br i1 %180, label %209, label %181

; <label>:181                                     ; preds = %174
  %182 = load double, double* %94, align 8, !tbaa !85
  %183 = fcmp olt double %178, %182
  br i1 %183, label %184, label %209

; <label>:184                                     ; preds = %181
  %185 = add nuw nsw i64 %176, 1
  %186 = getelementptr inbounds double, double* %69, i64 %185
  %187 = load double, double* %186, align 8, !tbaa !33
  %188 = load double, double* %95, align 8, !tbaa !88
  %189 = fcmp ult double %187, %188
  br i1 %189, label %209, label %190

; <label>:190                                     ; preds = %184
  %191 = load double, double* %96, align 8, !tbaa !87
  %192 = fcmp olt double %187, %191
  br i1 %192, label %193, label %209

; <label>:193                                     ; preds = %190
  %194 = add nuw nsw i64 %176, 2
  %195 = getelementptr inbounds double, double* %69, i64 %194
  %196 = load double, double* %195, align 8, !tbaa !33
  %197 = load double, double* %97, align 8, !tbaa !90
  %198 = fcmp ult double %196, %197
  br i1 %198, label %209, label %199

; <label>:199                                     ; preds = %193
  %200 = load double, double* %98, align 8, !tbaa !89
  %201 = fcmp olt double %196, %200
  br i1 %201, label %202, label %209

; <label>:202                                     ; preds = %199
  %203 = getelementptr inbounds double, double* %71, i64 %176
  %204 = load double, double* %203, align 8, !tbaa !33
  %205 = getelementptr inbounds double, double* %71, i64 %185
  %206 = load double, double* %205, align 8, !tbaa !33
  %207 = getelementptr inbounds double, double* %71, i64 %194
  %208 = load double, double* %207, align 8, !tbaa !33
  call void @_ZN4Atom7addatomEdddddd(%class.Atom* nonnull %atom, double %178, double %187, double %196, double %204, double %206, double %208)
  %.pre = load i32, i32* %64, align 8, !tbaa !65
  br label %209

; <label>:209                                     ; preds = %202, %199, %193, %190, %184, %181, %174
  %210 = phi i32 [ %175, %193 ], [ %175, %184 ], [ %175, %174 ], [ %175, %181 ], [ %175, %190 ], [ %175, %199 ], [ %.pre, %202 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %211 = sext i32 %210 to i64
  %212 = icmp slt i64 %indvars.iv.next, %211
  br i1 %212, label %174, label %._crit_edge.loopexit

; <label>:213                                     ; preds = %._crit_edge
  %214 = load i32, i32* %me, align 4, !tbaa !1
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %217

; <label>:216                                     ; preds = %213
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @str.21, i64 0, i64 0))
  br label %217

; <label>:217                                     ; preds = %216, %213, %._crit_edge
  %.0 = phi i32 [ 1, %216 ], [ 1, %213 ], [ 0, %._crit_edge ]
  call void @llvm.lifetime.end(i64 4, i8* %167) #7
  call void @llvm.lifetime.end(i64 4, i8* %165) #7
  call void @llvm.lifetime.end(i64 4, i8* %72) #7
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define void @_Z10create_boxR4Atomiiid(%class.Atom* nocapture dereferenceable(224) %atom, i32 %nx, i32 %ny, i32 %nz, double %rho) #9 {
  %1 = fdiv double 4.000000e+00, %rho
  %2 = tail call double @pow(double %1, double 0x3FD5555555555555) #7
  %3 = sitofp i32 %nx to double
  %4 = fmul double %3, %2
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 0
  store double %4, double* %5, align 8, !tbaa !62
  %6 = sitofp i32 %ny to double
  %7 = fmul double %6, %2
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 1
  store double %7, double* %8, align 8, !tbaa !63
  %9 = sitofp i32 %nz to double
  %10 = fmul double %9, %2
  %11 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 2
  store double %10, double* %11, align 8, !tbaa !64
  ret void
}

; Function Attrs: uwtable
define i32 @_Z12create_atomsR4Atomiiid(%class.Atom* dereferenceable(224) %atom, i32 %nx, i32 %ny, i32 %nz, double %rho) #11 {
  %iflag = alloca i32, align 4
  %me = alloca i32, align 4
  %iflagall = alloca i32, align 4
  %natoms = alloca i32, align 4
  %1 = shl i32 %nx, 2
  %2 = mul nsw i32 %1, %ny
  %3 = mul nsw i32 %2, %nz
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  store i32 %3, i32* %4, align 8, !tbaa !65
  %5 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  store i32 0, i32* %5, align 4, !tbaa !84
  %6 = fdiv double 4.000000e+00, %rho
  %7 = tail call double @pow(double %6, double 0x3FD5555555555555) #7
  %8 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 3
  %9 = load double, double* %8, align 8, !tbaa !86
  %10 = fmul double %7, 5.000000e-01
  %11 = fdiv double %9, %10
  %12 = fadd double %11, -1.000000e+00
  %13 = fptosi double %12 to i32
  %14 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 4
  %15 = load double, double* %14, align 8, !tbaa !85
  %16 = fdiv double %15, %10
  %17 = fadd double %16, 1.000000e+00
  %18 = fptosi double %17 to i32
  %19 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 5
  %20 = load double, double* %19, align 8, !tbaa !88
  %21 = fdiv double %20, %10
  %22 = fadd double %21, -1.000000e+00
  %23 = fptosi double %22 to i32
  %24 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 6
  %25 = load double, double* %24, align 8, !tbaa !87
  %26 = fdiv double %25, %10
  %27 = fadd double %26, 1.000000e+00
  %28 = fptosi double %27 to i32
  %29 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 7
  %30 = load double, double* %29, align 8, !tbaa !90
  %31 = fdiv double %30, %10
  %32 = fadd double %31, -1.000000e+00
  %33 = fptosi double %32 to i32
  %34 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 18, i32 8
  %35 = load double, double* %34, align 8, !tbaa !89
  %36 = fdiv double %35, %10
  %37 = fadd double %36, 1.000000e+00
  %38 = fptosi double %37 to i32
  %39 = icmp sgt i32 %13, 0
  %40 = select i1 %39, i32 %13, i32 0
  %41 = shl nsw i32 %nx, 1
  %42 = add nsw i32 %41, -1
  %43 = icmp slt i32 %18, %42
  %. = select i1 %43, i32 %18, i32 %42
  %44 = icmp sgt i32 %23, 0
  %45 = select i1 %44, i32 %23, i32 0
  %46 = shl nsw i32 %ny, 1
  %47 = add nsw i32 %46, -1
  %48 = icmp slt i32 %28, %47
  %49 = select i1 %48, i32 %28, i32 %47
  %50 = icmp sgt i32 %33, 0
  %51 = select i1 %50, i32 %33, i32 0
  %52 = shl nsw i32 %nz, 1
  %53 = add nsw i32 %52, -1
  %54 = icmp slt i32 %38, %53
  %.2 = select i1 %54, i32 %38, i32 %53
  %55 = bitcast i32* %iflag to i8*
  call void @llvm.lifetime.start(i64 4, i8* %55) #7
  store i32 0, i32* %iflag, align 4, !tbaa !1
  %56 = icmp slt i32 %.2, 0
  br i1 %56, label %.split, label %.us-lcssa21.us.preheader

.us-lcssa21.us.preheader:                         ; preds = %0
  br label %.us-lcssa21.us

.us-lcssa21.us:                                   ; preds = %.outer, %.us-lcssa21.us.preheader
  %57 = phi i32 [ %265, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %oz.0.ph31 = phi i32 [ %.oz.0, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %oy.0.ph30 = phi i32 [ %.oy.1, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %ox.0.ph29 = phi i32 [ %ox.2, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %sz.0.ph28 = phi i32 [ %.sz.1, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %sy.0.ph27 = phi i32 [ %sy.2, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %sx.0.ph26 = phi i32 [ %.8, %.outer ], [ 0, %.us-lcssa21.us.preheader ]
  %58 = add nsw i32 %57, %sz.0.ph28
  %59 = shl nsw i32 %oy.0.ph30, 3
  %60 = add nsw i32 %59, %sy.0.ph27
  %61 = shl nsw i32 %ox.0.ph29, 3
  %62 = add nsw i32 %61, %sx.0.ph26
  %63 = add nsw i32 %60, %62
  %64 = add nsw i32 %63, %58
  %65 = and i32 %64, 1
  %66 = icmp ne i32 %65, 0
  %67 = icmp slt i32 %62, %40
  %or.cond = or i1 %67, %66
  %68 = icmp sgt i32 %62, %.
  %or.cond3 = or i1 %68, %or.cond
  %69 = icmp slt i32 %60, %45
  %or.cond4 = or i1 %69, %or.cond3
  %70 = icmp sgt i32 %60, %49
  %or.cond5 = or i1 %70, %or.cond4
  %71 = icmp slt i32 %58, %51
  %or.cond6 = or i1 %71, %or.cond5
  %72 = icmp sgt i32 %58, %.2
  %or.cond7 = or i1 %72, %or.cond6
  br i1 %or.cond7, label %.outer, label %73

; <label>:73                                      ; preds = %.us-lcssa21.us
  %74 = sitofp i32 %62 to double
  %75 = fmul double %10, %74
  %76 = sitofp i32 %60 to double
  %77 = fmul double %10, %76
  %78 = sitofp i32 %58 to double
  %79 = fmul double %10, %78
  %80 = load double, double* %8, align 8, !tbaa !86
  %81 = fcmp ult double %75, %80
  br i1 %81, label %.outer, label %82

; <label>:82                                      ; preds = %73
  %83 = load double, double* %14, align 8, !tbaa !85
  %84 = fcmp olt double %75, %83
  br i1 %84, label %85, label %.outer

; <label>:85                                      ; preds = %82
  %86 = load double, double* %19, align 8, !tbaa !88
  %87 = fcmp ult double %77, %86
  br i1 %87, label %.outer, label %88

; <label>:88                                      ; preds = %85
  %89 = load double, double* %24, align 8, !tbaa !87
  %90 = fcmp olt double %77, %89
  br i1 %90, label %91, label %.outer

; <label>:91                                      ; preds = %88
  %92 = load double, double* %29, align 8, !tbaa !90
  %93 = fcmp ult double %79, %92
  br i1 %93, label %.outer, label %94

; <label>:94                                      ; preds = %91
  %95 = load double, double* %34, align 8, !tbaa !89
  %96 = fcmp olt double %79, %95
  br i1 %96, label %.preheader1124, label %.outer

.preheader1124:                                   ; preds = %94
  %97 = mul nsw i32 %58, %46
  %98 = add i32 %97, %60
  %99 = mul i32 %98, %41
  %100 = add i32 %62, 1
  %101 = add i32 %100, %99
  %102 = sdiv i32 %101, 127773
  %103 = mul i32 %102, -127773
  %104 = add i32 %103, %101
  %105 = mul nsw i32 %104, 16807
  %106 = mul nsw i32 %102, -2836
  %107 = add i32 %105, %106
  %108 = icmp slt i32 %107, 0
  %109 = add nsw i32 %107, 2147483647
  %..i = select i1 %108, i32 %109, i32 %107
  %110 = sdiv i32 %..i, 127773
  %111 = mul i32 %110, -127773
  %112 = add i32 %111, %..i
  %113 = mul nsw i32 %112, 16807
  %114 = mul nsw i32 %110, -2836
  %115 = add i32 %113, %114
  %116 = icmp slt i32 %115, 0
  %117 = add nsw i32 %115, 2147483647
  %..i.1 = select i1 %116, i32 %117, i32 %115
  %118 = sdiv i32 %..i.1, 127773
  %119 = mul i32 %118, -127773
  %120 = add i32 %119, %..i.1
  %121 = mul nsw i32 %120, 16807
  %122 = mul nsw i32 %118, -2836
  %123 = add i32 %121, %122
  %124 = icmp slt i32 %123, 0
  %125 = add nsw i32 %123, 2147483647
  %..i.2 = select i1 %124, i32 %125, i32 %123
  %126 = sdiv i32 %..i.2, 127773
  %127 = mul i32 %126, -127773
  %128 = add i32 %127, %..i.2
  %129 = mul nsw i32 %128, 16807
  %130 = mul nsw i32 %126, -2836
  %131 = add i32 %129, %130
  %132 = icmp slt i32 %131, 0
  %133 = add nsw i32 %131, 2147483647
  %..i.3 = select i1 %132, i32 %133, i32 %131
  %134 = sdiv i32 %..i.3, 127773
  %135 = mul i32 %134, -127773
  %136 = add i32 %135, %..i.3
  %137 = mul nsw i32 %136, 16807
  %138 = mul nsw i32 %134, -2836
  %139 = add i32 %137, %138
  %140 = icmp slt i32 %139, 0
  %141 = add nsw i32 %139, 2147483647
  %..i.4 = select i1 %140, i32 %141, i32 %139
  %142 = sdiv i32 %..i.4, 127773
  %143 = mul i32 %142, -127773
  %144 = add i32 %143, %..i.4
  %145 = mul nsw i32 %144, 16807
  %146 = mul nsw i32 %142, -2836
  %147 = add i32 %145, %146
  %148 = icmp slt i32 %147, 0
  %149 = add nsw i32 %147, 2147483647
  %..i.5 = select i1 %148, i32 %149, i32 %147
  %150 = sitofp i32 %..i.5 to double
  %151 = sdiv i32 %..i.5, 127773
  %152 = mul i32 %151, -127773
  %153 = add i32 %152, %..i.5
  %154 = mul nsw i32 %153, 16807
  %155 = mul nsw i32 %151, -2836
  %156 = add i32 %154, %155
  %157 = icmp slt i32 %156, 0
  %158 = add nsw i32 %156, 2147483647
  %..i10 = select i1 %157, i32 %158, i32 %156
  %159 = sdiv i32 %..i10, 127773
  %160 = mul i32 %159, -127773
  %161 = add i32 %160, %..i10
  %162 = mul nsw i32 %161, 16807
  %163 = mul nsw i32 %159, -2836
  %164 = add i32 %162, %163
  %165 = icmp slt i32 %164, 0
  %166 = add nsw i32 %164, 2147483647
  %..i10.1 = select i1 %165, i32 %166, i32 %164
  %167 = sdiv i32 %..i10.1, 127773
  %168 = mul i32 %167, -127773
  %169 = add i32 %168, %..i10.1
  %170 = mul nsw i32 %169, 16807
  %171 = mul nsw i32 %167, -2836
  %172 = add i32 %170, %171
  %173 = icmp slt i32 %172, 0
  %174 = add nsw i32 %172, 2147483647
  %..i10.2 = select i1 %173, i32 %174, i32 %172
  %175 = sdiv i32 %..i10.2, 127773
  %176 = mul i32 %175, -127773
  %177 = add i32 %176, %..i10.2
  %178 = mul nsw i32 %177, 16807
  %179 = mul nsw i32 %175, -2836
  %180 = add i32 %178, %179
  %181 = icmp slt i32 %180, 0
  %182 = add nsw i32 %180, 2147483647
  %..i10.3 = select i1 %181, i32 %182, i32 %180
  %183 = sdiv i32 %..i10.3, 127773
  %184 = mul i32 %183, -127773
  %185 = add i32 %184, %..i10.3
  %186 = mul nsw i32 %185, 16807
  %187 = mul nsw i32 %183, -2836
  %188 = add i32 %186, %187
  %189 = icmp slt i32 %188, 0
  %190 = add nsw i32 %188, 2147483647
  %..i10.4 = select i1 %189, i32 %190, i32 %188
  %191 = sdiv i32 %..i10.4, 127773
  %192 = mul i32 %191, -127773
  %193 = add i32 %192, %..i10.4
  %194 = mul nsw i32 %193, 16807
  %195 = mul nsw i32 %191, -2836
  %196 = add i32 %194, %195
  %197 = icmp slt i32 %196, 0
  %198 = add nsw i32 %196, 2147483647
  %..i10.5 = select i1 %197, i32 %198, i32 %196
  %199 = sitofp i32 %..i10.5 to double
  %200 = sdiv i32 %..i10.5, 127773
  %201 = mul i32 %200, -127773
  %202 = add i32 %201, %..i10.5
  %203 = mul nsw i32 %202, 16807
  %204 = mul nsw i32 %200, -2836
  %205 = add i32 %203, %204
  %206 = icmp slt i32 %205, 0
  %207 = add nsw i32 %205, 2147483647
  %..i9 = select i1 %206, i32 %207, i32 %205
  %208 = sdiv i32 %..i9, 127773
  %209 = mul i32 %208, -127773
  %210 = add i32 %209, %..i9
  %211 = mul nsw i32 %210, 16807
  %212 = mul nsw i32 %208, -2836
  %213 = add i32 %211, %212
  %214 = icmp slt i32 %213, 0
  %215 = add nsw i32 %213, 2147483647
  %..i9.1 = select i1 %214, i32 %215, i32 %213
  %216 = sdiv i32 %..i9.1, 127773
  %217 = mul i32 %216, -127773
  %218 = add i32 %217, %..i9.1
  %219 = mul nsw i32 %218, 16807
  %220 = mul nsw i32 %216, -2836
  %221 = add i32 %219, %220
  %222 = icmp slt i32 %221, 0
  %223 = add nsw i32 %221, 2147483647
  %..i9.2 = select i1 %222, i32 %223, i32 %221
  %224 = sdiv i32 %..i9.2, 127773
  %225 = mul i32 %224, -127773
  %226 = add i32 %225, %..i9.2
  %227 = mul nsw i32 %226, 16807
  %228 = mul nsw i32 %224, -2836
  %229 = add i32 %227, %228
  %230 = icmp slt i32 %229, 0
  %231 = add nsw i32 %229, 2147483647
  %..i9.3 = select i1 %230, i32 %231, i32 %229
  %232 = sdiv i32 %..i9.3, 127773
  %233 = mul i32 %232, -127773
  %234 = add i32 %233, %..i9.3
  %235 = mul nsw i32 %234, 16807
  %236 = mul nsw i32 %232, -2836
  %237 = add i32 %235, %236
  %238 = icmp slt i32 %237, 0
  %239 = add nsw i32 %237, 2147483647
  %..i9.4 = select i1 %238, i32 %239, i32 %237
  %240 = sdiv i32 %..i9.4, 127773
  %241 = mul i32 %240, -127773
  %242 = add i32 %241, %..i9.4
  %243 = mul nsw i32 %242, 16807
  %244 = mul nsw i32 %240, -2836
  %245 = add i32 %243, %244
  %246 = icmp slt i32 %245, 0
  %247 = add nsw i32 %245, 2147483647
  %..i9.5 = select i1 %246, i32 %247, i32 %245
  %248 = fmul double %150, 0x3E00000000200000
  %249 = fmul double %199, 0x3E00000000200000
  %250 = sitofp i32 %..i9.5 to double
  %251 = fmul double %250, 0x3E00000000200000
  tail call void @_ZN4Atom7addatomEdddddd(%class.Atom* nonnull %atom, double %75, double %77, double %79, double %248, double %249, double %251)
  br label %.outer

.outer:                                           ; preds = %.preheader1124, %94, %91, %88, %85, %82, %73, %.us-lcssa21.us
  %252 = add nsw i32 %sx.0.ph26, 1
  %253 = icmp eq i32 %252, 8
  %.8 = select i1 %253, i32 0, i32 %252
  %254 = zext i1 %253 to i32
  %.sy.0 = add nsw i32 %254, %sy.0.ph27
  %255 = icmp eq i32 %.sy.0, 8
  %sy.2 = select i1 %255, i32 0, i32 %.sy.0
  %256 = zext i1 %255 to i32
  %sz.1 = add nsw i32 %256, %sz.0.ph28
  %257 = icmp eq i32 %sz.1, 8
  %.sz.1 = select i1 %257, i32 0, i32 %sz.1
  %258 = zext i1 %257 to i32
  %.ox.0 = add nsw i32 %258, %ox.0.ph29
  %259 = shl nsw i32 %.ox.0, 3
  %260 = icmp sgt i32 %259, %.
  %ox.2 = select i1 %260, i32 0, i32 %.ox.0
  %261 = zext i1 %260 to i32
  %oy.1 = add nsw i32 %261, %oy.0.ph30
  %262 = shl nsw i32 %oy.1, 3
  %263 = icmp sgt i32 %262, %49
  %.oy.1 = select i1 %263, i32 0, i32 %oy.1
  %264 = zext i1 %263 to i32
  %.oz.0 = add nsw i32 %264, %oz.0.ph31
  %265 = shl nsw i32 %.oz.0, 3
  %266 = icmp sgt i32 %265, %.2
  br i1 %266, label %.split.loopexit, label %.us-lcssa21.us

.split.loopexit:                                  ; preds = %.outer
  br label %.split

.split:                                           ; preds = %.split.loopexit, %0
  %267 = bitcast i32* %me to i8*
  call void @llvm.lifetime.start(i64 4, i8* %267) #7
  %268 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %me)
  %269 = bitcast i32* %iflagall to i8*
  call void @llvm.lifetime.start(i64 4, i8* %269) #7
  %270 = call i32 @MPI_Allreduce(i8* %55, i8* %269, i32 1, i32 1275069445, i32 1476395009, i32 1140850688)
  %271 = load i32, i32* %iflagall, align 4, !tbaa !1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %277, label %273

; <label>:273                                     ; preds = %.split
  %274 = load i32, i32* %me, align 4, !tbaa !1
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %289

; <label>:276                                     ; preds = %273
  %puts1 = call i32 @puts(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @str.22, i64 0, i64 0))
  br label %289

; <label>:277                                     ; preds = %.split
  %278 = bitcast i32* %natoms to i8*
  call void @llvm.lifetime.start(i64 4, i8* %278) #7
  %279 = bitcast i32* %5 to i8*
  %280 = call i32 @MPI_Allreduce(i8* %279, i8* %278, i32 1, i32 1275069445, i32 1476395011, i32 1140850688)
  %281 = load i32, i32* %natoms, align 4, !tbaa !1
  %282 = load i32, i32* %4, align 8, !tbaa !65
  %283 = icmp eq i32 %281, %282
  br i1 %283, label %288, label %284

; <label>:284                                     ; preds = %277
  %285 = load i32, i32* %me, align 4, !tbaa !1
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %288

; <label>:287                                     ; preds = %284
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @str.21, i64 0, i64 0))
  br label %288

; <label>:288                                     ; preds = %287, %284, %277
  %.0 = phi i32 [ 1, %287 ], [ 1, %284 ], [ 0, %277 ]
  call void @llvm.lifetime.end(i64 4, i8* %278) #7
  br label %289

; <label>:289                                     ; preds = %288, %276, %273
  %.1 = phi i32 [ %.0, %288 ], [ 1, %276 ], [ 1, %273 ]
  call void @llvm.lifetime.end(i64 4, i8* %269) #7
  call void @llvm.lifetime.end(i64 4, i8* %267) #7
  call void @llvm.lifetime.end(i64 4, i8* %55) #7
  ret i32 %.1
}

; Function Attrs: norecurse nounwind uwtable
define double @_Z6randomPi(i32* nocapture %idum) #12 {
  %1 = load i32, i32* %idum, align 4, !tbaa !1
  %2 = sdiv i32 %1, 127773
  %3 = mul i32 %2, -127773
  %4 = add i32 %3, %1
  %5 = mul nsw i32 %4, 16807
  %6 = mul nsw i32 %2, -2836
  %7 = add i32 %5, %6
  %8 = icmp slt i32 %7, 0
  %9 = add nsw i32 %7, 2147483647
  %. = select i1 %8, i32 %9, i32 %7
  store i32 %., i32* %idum, align 4, !tbaa !1
  %10 = sitofp i32 %. to double
  %11 = fmul double %10, 0x3E00000000200000
  ret double %11
}

; Function Attrs: uwtable
define void @_Z15create_velocitydR4AtomR6Thermo(double %t_request, %class.Atom* dereferenceable(224) %atom, %class.Thermo* dereferenceable(128) %thermo) #11 {
  %vxtot = alloca double, align 8
  %vytot = alloca double, align 8
  %vztot = alloca double, align 8
  %tmp = alloca double, align 8
  %1 = bitcast double* %vxtot to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #7
  store double 0.000000e+00, double* %vxtot, align 8, !tbaa !33
  %2 = bitcast double* %vytot to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #7
  store double 0.000000e+00, double* %vytot, align 8, !tbaa !33
  %3 = bitcast double* %vztot to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #7
  store double 0.000000e+00, double* %vztot, align 8, !tbaa !33
  %4 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !84
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph8, label %._crit_edge9

.lr.ph8:                                          ; preds = %0
  %7 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 5
  %8 = load double*, double** %7, align 8
  %9 = sext i32 %5 to i64
  %xtraiter14 = and i32 %5, 1
  %lcmp.mod15 = icmp eq i32 %xtraiter14, 0
  br i1 %lcmp.mod15, label %.lr.ph8.split, label %10

; <label>:10                                      ; preds = %.lr.ph8
  %11 = load double, double* %8, align 8, !tbaa !33
  %12 = fadd double %11, 0.000000e+00
  store double %12, double* %vxtot, align 8, !tbaa !33
  %13 = getelementptr inbounds double, double* %8, i64 1
  %14 = load double, double* %13, align 8, !tbaa !33
  %15 = fadd double %14, 0.000000e+00
  store double %15, double* %vytot, align 8, !tbaa !33
  %16 = getelementptr inbounds double, double* %8, i64 2
  %17 = load double, double* %16, align 8, !tbaa !33
  %18 = fadd double %17, 0.000000e+00
  store double %18, double* %vztot, align 8, !tbaa !33
  br label %.lr.ph8.split

.lr.ph8.split:                                    ; preds = %10, %.lr.ph8
  %.unr = phi double [ 0.000000e+00, %.lr.ph8 ], [ %18, %10 ]
  %.unr16 = phi double [ 0.000000e+00, %.lr.ph8 ], [ %15, %10 ]
  %.unr17 = phi double [ 0.000000e+00, %.lr.ph8 ], [ %12, %10 ]
  %indvars.iv12.unr = phi i64 [ 0, %.lr.ph8 ], [ 1, %10 ]
  %19 = icmp eq i32 %5, 1
  br i1 %19, label %._crit_edge9.loopexit, label %.lr.ph8.split.split

.lr.ph8.split.split:                              ; preds = %.lr.ph8.split
  br label %20

; <label>:20                                      ; preds = %20, %.lr.ph8.split.split
  %21 = phi double [ %.unr, %.lr.ph8.split.split ], [ %47, %20 ]
  %22 = phi double [ %.unr16, %.lr.ph8.split.split ], [ %43, %20 ]
  %23 = phi double [ %.unr17, %.lr.ph8.split.split ], [ %39, %20 ]
  %indvars.iv12 = phi i64 [ %indvars.iv12.unr, %.lr.ph8.split.split ], [ %indvars.iv.next13.1, %20 ]
  %24 = mul i64 %indvars.iv12, 3
  %25 = getelementptr inbounds double, double* %8, i64 %24
  %26 = load double, double* %25, align 8, !tbaa !33
  %27 = fadd double %26, %23
  store double %27, double* %vxtot, align 8, !tbaa !33
  %28 = add nuw nsw i64 %24, 1
  %29 = getelementptr inbounds double, double* %8, i64 %28
  %30 = load double, double* %29, align 8, !tbaa !33
  %31 = fadd double %30, %22
  store double %31, double* %vytot, align 8, !tbaa !33
  %32 = add nuw nsw i64 %24, 2
  %33 = getelementptr inbounds double, double* %8, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !33
  %35 = fadd double %34, %21
  store double %35, double* %vztot, align 8, !tbaa !33
  %36 = add i64 %24, 3
  %37 = getelementptr inbounds double, double* %8, i64 %36
  %38 = load double, double* %37, align 8, !tbaa !33
  %39 = fadd double %38, %27
  store double %39, double* %vxtot, align 8, !tbaa !33
  %40 = add i64 %24, 4
  %41 = getelementptr inbounds double, double* %8, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !33
  %43 = fadd double %42, %31
  store double %43, double* %vytot, align 8, !tbaa !33
  %44 = add i64 %24, 5
  %45 = getelementptr inbounds double, double* %8, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !33
  %47 = fadd double %46, %35
  store double %47, double* %vztot, align 8, !tbaa !33
  %indvars.iv.next13.1 = add nsw i64 %indvars.iv12, 2
  %48 = icmp slt i64 %indvars.iv.next13.1, %9
  br i1 %48, label %20, label %._crit_edge9.loopexit.unr-lcssa

._crit_edge9.loopexit.unr-lcssa:                  ; preds = %20
  br label %._crit_edge9.loopexit

._crit_edge9.loopexit:                            ; preds = %._crit_edge9.loopexit.unr-lcssa, %.lr.ph8.split
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit, %0
  %49 = bitcast double* %tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %49) #7
  %50 = call i32 @MPI_Allreduce(i8* %1, i8* %49, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %51 = load double, double* %tmp, align 8, !tbaa !33
  %52 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 0
  %53 = load i32, i32* %52, align 8, !tbaa !65
  %54 = sitofp i32 %53 to double
  %55 = fdiv double %51, %54
  store double %55, double* %vxtot, align 8, !tbaa !33
  %56 = call i32 @MPI_Allreduce(i8* %2, i8* %49, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %57 = load double, double* %tmp, align 8, !tbaa !33
  %58 = load i32, i32* %52, align 8, !tbaa !65
  %59 = sitofp i32 %58 to double
  %60 = fdiv double %57, %59
  store double %60, double* %vytot, align 8, !tbaa !33
  %61 = call i32 @MPI_Allreduce(i8* %3, i8* %49, i32 1, i32 1275070475, i32 1476395011, i32 1140850688)
  %62 = load double, double* %tmp, align 8, !tbaa !33
  %63 = bitcast %class.Atom* %atom to i64*
  %64 = load i64, i64* %63, align 8
  %65 = trunc i64 %64 to i32
  %66 = sitofp i32 %65 to double
  %67 = fdiv double %62, %66
  store double %67, double* %vztot, align 8, !tbaa !33
  %68 = lshr i64 %64, 32
  %69 = trunc i64 %68 to i32
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %.lr.ph4, label %._crit_edge5

.lr.ph4:                                          ; preds = %._crit_edge9
  %71 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 5
  %72 = load double*, double** %71, align 8
  %73 = ashr i64 %64, 32
  br label %74

; <label>:74                                      ; preds = %74, %.lr.ph4
  %indvars.iv10 = phi i64 [ 0, %.lr.ph4 ], [ %indvars.iv.next11, %74 ]
  %75 = load double, double* %vxtot, align 8, !tbaa !33
  %76 = mul nuw nsw i64 %indvars.iv10, 3
  %77 = getelementptr inbounds double, double* %72, i64 %76
  %78 = load double, double* %77, align 8, !tbaa !33
  %79 = fsub double %78, %75
  store double %79, double* %77, align 8, !tbaa !33
  %80 = load double, double* %vytot, align 8, !tbaa !33
  %81 = add nuw nsw i64 %76, 1
  %82 = getelementptr inbounds double, double* %72, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !33
  %84 = fsub double %83, %80
  store double %84, double* %82, align 8, !tbaa !33
  %85 = load double, double* %vztot, align 8, !tbaa !33
  %86 = add nuw nsw i64 %76, 2
  %87 = getelementptr inbounds double, double* %72, i64 %86
  %88 = load double, double* %87, align 8, !tbaa !33
  %89 = fsub double %88, %85
  store double %89, double* %87, align 8, !tbaa !33
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %90 = icmp slt i64 %indvars.iv.next11, %73
  br i1 %90, label %74, label %._crit_edge5.loopexit

._crit_edge5.loopexit:                            ; preds = %74
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit, %._crit_edge9
  %91 = getelementptr inbounds %class.Thermo, %class.Thermo* %thermo, i64 0, i32 7
  store double 0.000000e+00, double* %91, align 8, !tbaa !230
  %92 = call double @_ZN6Thermo11temperatureER4Atom(%class.Thermo* nonnull %thermo, %class.Atom* nonnull dereferenceable(224) %atom)
  %93 = fdiv double %t_request, %92
  %94 = call double @sqrt(double %93) #7
  %95 = load i32, i32* %4, align 4, !tbaa !84
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %._crit_edge5
  %97 = getelementptr inbounds %class.Atom, %class.Atom* %atom, i64 0, i32 5
  %98 = load double*, double** %97, align 8
  %99 = sext i32 %95 to i64
  %100 = insertelement <2 x double> undef, double %94, i32 0
  %101 = insertelement <2 x double> %100, double %94, i32 1
  %xtraiter = and i32 %95, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.split, label %102

; <label>:102                                     ; preds = %.lr.ph
  %103 = bitcast double* %98 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 8, !tbaa !33
  %105 = fmul <2 x double> %101, %104
  store <2 x double> %105, <2 x double>* %103, align 8, !tbaa !33
  %106 = getelementptr inbounds double, double* %98, i64 2
  %107 = load double, double* %106, align 8, !tbaa !33
  %108 = fmul double %94, %107
  store double %108, double* %106, align 8, !tbaa !33
  br label %.lr.ph.split

.lr.ph.split:                                     ; preds = %102, %.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph ], [ 1, %102 ]
  %109 = icmp eq i32 %95, 1
  br i1 %109, label %._crit_edge.loopexit, label %.lr.ph.split.split

.lr.ph.split.split:                               ; preds = %.lr.ph.split
  br label %110

; <label>:110                                     ; preds = %110, %.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.split.split ], [ %indvars.iv.next.1, %110 ]
  %111 = mul i64 %indvars.iv, 3
  %112 = getelementptr inbounds double, double* %98, i64 %111
  %113 = bitcast double* %112 to <2 x double>*
  %114 = load <2 x double>, <2 x double>* %113, align 8, !tbaa !33
  %115 = fmul <2 x double> %101, %114
  store <2 x double> %115, <2 x double>* %113, align 8, !tbaa !33
  %116 = add nuw nsw i64 %111, 2
  %117 = getelementptr inbounds double, double* %98, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !33
  %119 = fmul double %94, %118
  store double %119, double* %117, align 8, !tbaa !33
  %120 = add i64 %111, 3
  %121 = getelementptr inbounds double, double* %98, i64 %120
  %122 = bitcast double* %121 to <2 x double>*
  %123 = load <2 x double>, <2 x double>* %122, align 8, !tbaa !33
  %124 = fmul <2 x double> %101, %123
  store <2 x double> %124, <2 x double>* %122, align 8, !tbaa !33
  %125 = add i64 %111, 5
  %126 = getelementptr inbounds double, double* %98, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !33
  %128 = fmul double %94, %127
  store double %128, double* %126, align 8, !tbaa !33
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %129 = icmp slt i64 %indvars.iv.next.1, %99
  br i1 %129, label %110, label %._crit_edge.loopexit.unr-lcssa

._crit_edge.loopexit.unr-lcssa:                   ; preds = %110
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.unr-lcssa, %.lr.ph.split
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge5
  call void @llvm.lifetime.end(i64 8, i8* %49) #7
  call void @llvm.lifetime.end(i64 8, i8* %3) #7
  call void @llvm.lifetime.end(i64 8, i8* %2) #7
  call void @llvm.lifetime.end(i64 8, i8* %1) #7
  ret void
}

attributes #0 = { norecurse uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nobuiltin nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline noreturn nounwind }
attributes #11 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone }
attributes #15 = { norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readonly }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin }
attributes #19 = { builtin nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"int", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !3, i64 0}
!7 = !{!8, !6, i64 56}
!8 = !{!"_ZTS2In", !2, i64 0, !2, i64 4, !2, i64 8, !9, i64 16, !9, i64 24, !2, i64 32, !10, i64 36, !9, i64 40, !9, i64 48, !6, i64 56, !2, i64 64, !9, i64 72, !2, i64 80, !9, i64 88, !9, i64 96, !2, i64 104}
!9 = !{!"double", !3, i64 0}
!10 = !{!"_ZTS10ForceStyle", !3, i64 0}
!11 = !{!8, !2, i64 32}
!12 = !{!8, !10, i64 36}
!13 = !{!14, !2, i64 16}
!14 = !{!"_ZTS10ThreadData", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !2, i64 16}
!15 = !{!14, !2, i64 0}
!16 = !{!14, !2, i64 4}
!17 = !{!14, !2, i64 8}
!18 = !{!14, !2, i64 12}
!19 = !{!20, !6, i64 64}
!20 = !{!"_ZTS4Atom", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !6, i64 16, !6, i64 24, !6, i64 32, !2, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !9, i64 72, !9, i64 80, !2, i64 88, !2, i64 92, !2, i64 96, !21, i64 104, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !2, i64 216}
!21 = !{!"_ZTS3Box", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64}
!22 = !{!23, !6, i64 240}
!23 = !{!"_ZTS4Comm", !2, i64 0, !2, i64 4, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !2, i64 168, !2, i64 172, !3, i64 176, !3, i64 200, !3, i64 212, !6, i64 224, !6, i64 232, !6, i64 240, !2, i64 248, !2, i64 252, !6, i64 256, !2, i64 264, !6, i64 272, !6, i64 280, !6, i64 288, !6, i64 296, !6, i64 304, !6, i64 312, !2, i64 320, !2, i64 324, !2, i64 328}
!24 = !{!25, !6, i64 72}
!25 = !{!"_ZTS5Force", !9, i64 8, !6, i64 16, !9, i64 24, !9, i64 32, !2, i64 40, !9, i64 48, !2, i64 56, !2, i64 60, !2, i64 64, !6, i64 72, !2, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !10, i64 120, !2, i64 124}
!26 = !{!27, !6, i64 80}
!27 = !{!"_ZTS9Integrate", !9, i64 0, !9, i64 8, !2, i64 16, !2, i64 20, !2, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !9, i64 64, !2, i64 72, !6, i64 80}
!28 = !{!29, !6, i64 80}
!29 = !{!"_ZTS8Neighbor", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !9, i64 16, !6, i64 24, !2, i64 32, !2, i64 36, !6, i64 40, !6, i64 48, !2, i64 56, !2, i64 60, !2, i64 64, !2, i64 68, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !2, i64 104, !2, i64 108, !9, i64 112, !9, i64 120, !9, i64 128, !2, i64 136, !2, i64 140, !2, i64 144, !6, i64 152, !2, i64 160, !2, i64 164, !2, i64 168, !2, i64 172, !2, i64 176, !2, i64 180, !9, i64 184, !9, i64 192, !9, i64 200, !9, i64 208, !9, i64 216, !9, i64 224, !2, i64 232}
!30 = !{!31, !6, i64 112}
!31 = !{!"_ZTS6Thermo", !2, i64 0, !2, i64 4, !2, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !9, i64 80, !9, i64 88, !9, i64 96, !9, i64 104, !6, i64 112, !9, i64 120}
!32 = !{!8, !9, i64 40}
!33 = !{!9, !9, i64 0}
!34 = !{!8, !9, i64 48}
!35 = !{!29, !2, i64 64}
!36 = !{!29, !6, i64 72}
!37 = !{!25, !6, i64 88}
!38 = !{!23, !2, i64 248}
!39 = !{!23, !2, i64 252}
!40 = !{!25, !2, i64 60}
!41 = !{!29, !2, i64 60}
!42 = !{!25, !2, i64 64}
!43 = !{!8, !2, i64 64}
!44 = !{!8, !2, i64 0}
!45 = !{!8, !2, i64 4}
!46 = !{!8, !2, i64 8}
!47 = !{!29, !2, i64 4}
!48 = !{!29, !2, i64 8}
!49 = !{!29, !2, i64 12}
!50 = !{!27, !2, i64 16}
!51 = !{!8, !9, i64 72}
!52 = !{!27, !9, i64 0}
!53 = !{!8, !2, i64 80}
!54 = !{!27, !2, i64 72}
!55 = !{!29, !2, i64 0}
!56 = !{!8, !9, i64 96}
!57 = !{!29, !9, i64 16}
!58 = !{!8, !9, i64 88}
!59 = !{!25, !9, i64 8}
!60 = !{!8, !2, i64 104}
!61 = !{!31, !2, i64 0}
!62 = !{!20, !9, i64 104}
!63 = !{!20, !9, i64 112}
!64 = !{!20, !9, i64 120}
!65 = !{!20, !2, i64 0}
!66 = !{!8, !9, i64 24}
!67 = !{!68, !68, i64 0}
!68 = !{!"vtable pointer", !4, i64 0}
!69 = !{!25, !9, i64 32}
!70 = !{!20, !9, i64 80}
!71 = !{!8, !9, i64 16}
!72 = !{!20, !2, i64 40}
!73 = !{!25, !2, i64 40}
!74 = !{!75, !6, i64 0}
!75 = !{!"_ZTS5Timer", !6, i64 0, !9, i64 8, !9, i64 16}
!76 = !{!27, !9, i64 8}
!77 = !{!27, !2, i64 20}
!78 = !{!23, !6, i64 256}
!79 = !{!27, !9, i64 64}
!80 = !{!20, !6, i64 32}
!81 = !{!27, !6, i64 48}
!82 = !{!20, !6, i64 56}
!83 = !{!27, !6, i64 56}
!84 = !{!20, !2, i64 4}
!85 = !{!20, !9, i64 136}
!86 = !{!20, !9, i64 128}
!87 = !{!20, !9, i64 152}
!88 = !{!20, !9, i64 144}
!89 = !{!20, !9, i64 168}
!90 = !{!20, !9, i64 160}
!91 = distinct !{!91, !92, !93}
!92 = !{!"llvm.loop.vectorize.width", i32 1}
!93 = !{!"llvm.loop.interleave.count", i32 1}
!94 = distinct !{!94, !92, !93}
!95 = !{!23, !2, i64 0}
!96 = !{!20, !2, i64 88}
!97 = !{!20, !2, i64 92}
!98 = !{!20, !2, i64 96}
!99 = !{!20, !2, i64 12}
!100 = !{!20, !6, i64 16}
!101 = !{!20, !6, i64 24}
!102 = !{!20, !6, i64 48}
!103 = distinct !{!103, !104}
!104 = !{!"llvm.loop.unroll.disable"}
!105 = !{!20, !2, i64 216}
!106 = !{!20, !6, i64 192}
!107 = !{!20, !6, i64 200}
!108 = !{!20, !6, i64 208}
!109 = !{!20, !6, i64 176}
!110 = !{!25, !2, i64 56}
!111 = distinct !{!111, !104}
!112 = !{!25, !9, i64 24}
!113 = !{!25, !9, i64 48}
!114 = !{!20, !2, i64 8}
!115 = distinct !{!115, !104}
!116 = !{!25, !6, i64 104}
!117 = !{!25, !6, i64 96}
!118 = !{!29, !2, i64 56}
!119 = !{!29, !6, i64 48}
!120 = !{!29, !6, i64 40}
!121 = !{!25, !6, i64 16}
!122 = distinct !{!122, !104}
!123 = distinct !{!123, !104}
!124 = distinct !{!124, !104}
!125 = distinct !{!125, !104}
!126 = distinct !{!126, !104}
!127 = !{!25, !2, i64 80}
!128 = !{!25, !10, i64 120}
!129 = !{!25, !6, i64 112}
!130 = distinct !{!130, !92, !93}
!131 = distinct !{!131, !132, !92, !93}
!132 = !{!"llvm.loop.unroll.runtime.disable"}
!133 = !{!25, !2, i64 124}
!134 = !{!135, !9, i64 176}
!135 = !{!"_ZTS8ForceEAM", !9, i64 128, !2, i64 136, !2, i64 140, !2, i64 144, !2, i64 148, !6, i64 152, !6, i64 160, !6, i64 168, !9, i64 176, !9, i64 184, !9, i64 192, !9, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !6, i64 240, !2, i64 248, !6, i64 256, !136, i64 264}
!136 = !{!"_ZTSN8ForceEAM6FuncflE", !6, i64 0, !2, i64 8, !2, i64 12, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !6, i64 48, !6, i64 56, !6, i64 64}
!137 = !{!135, !9, i64 184}
!138 = !{!135, !9, i64 192}
!139 = !{!135, !9, i64 200}
!140 = !{!135, !2, i64 144}
!141 = !{!135, !2, i64 148}
!142 = !{!135, !6, i64 216}
!143 = !{!135, !6, i64 208}
!144 = !{!135, !6, i64 224}
!145 = !{!135, !6, i64 152}
!146 = !{!135, !2, i64 140}
!147 = !{!135, !6, i64 160}
!148 = !{!135, !6, i64 168}
!149 = distinct !{!149, !104}
!150 = distinct !{!150, !92, !93}
!151 = distinct !{!151, !132, !92, !93}
!152 = distinct !{!152, !104}
!153 = !{!135, !2, i64 248}
!154 = !{!135, !6, i64 232}
!155 = !{!135, !6, i64 240}
!156 = distinct !{!156, !104}
!157 = !{!23, !2, i64 4}
!158 = !{!23, !6, i64 40}
!159 = !{!23, !6, i64 144}
!160 = !{!23, !6, i64 128}
!161 = !{!23, !6, i64 88}
!162 = !{!23, !6, i64 152}
!163 = !{!23, !6, i64 64}
!164 = !{!23, !6, i64 96}
!165 = !{!23, !6, i64 56}
!166 = !{!23, !6, i64 48}
!167 = !{!23, !6, i64 120}
!168 = !{!135, !2, i64 136}
!169 = !{!135, !6, i64 264}
!170 = !{!135, !9, i64 296}
!171 = !{!135, !9, i64 128}
!172 = distinct !{!172, !104}
!173 = distinct !{!173, !104}
!174 = distinct !{!174, !104}
!175 = distinct !{!175, !92, !93}
!176 = distinct !{!176, !92, !93}
!177 = !{!136, !9, i64 40}
!178 = !{!136, !6, i64 48}
!179 = !{!136, !6, i64 56}
!180 = !{!136, !6, i64 64}
!181 = !{!136, !2, i64 8}
!182 = !{!136, !2, i64 12}
!183 = !{!136, !9, i64 24}
!184 = !{!136, !9, i64 16}
!185 = distinct !{!185, !104}
!186 = distinct !{!186, !92, !93}
!187 = distinct !{!187, !92, !93}
!188 = !{!29, !2, i64 32}
!189 = !{!29, !2, i64 140}
!190 = !{!29, !2, i64 136}
!191 = !{!29, !2, i64 108}
!192 = !{!29, !6, i64 152}
!193 = !{!29, !6, i64 24}
!194 = !{!29, !6, i64 88}
!195 = !{!29, !6, i64 96}
!196 = !{!29, !2, i64 68}
!197 = !{!29, !2, i64 232}
!198 = !{!29, !9, i64 112}
!199 = !{!29, !9, i64 208}
!200 = !{!29, !2, i64 172}
!201 = !{!29, !9, i64 120}
!202 = !{!29, !9, i64 216}
!203 = !{!29, !9, i64 128}
!204 = !{!29, !9, i64 224}
!205 = !{!29, !2, i64 164}
!206 = !{!29, !2, i64 160}
!207 = !{!29, !2, i64 144}
!208 = !{!29, !2, i64 104}
!209 = distinct !{!209, !104}
!210 = !{!29, !9, i64 184}
!211 = !{!29, !9, i64 192}
!212 = !{!29, !9, i64 200}
!213 = !{!29, !2, i64 176}
!214 = !{!29, !2, i64 180}
!215 = !{!29, !2, i64 168}
!216 = !{!31, !9, i64 120}
!217 = !{!31, !2, i64 8}
!218 = !{!31, !6, i64 16}
!219 = !{!31, !6, i64 24}
!220 = !{!31, !6, i64 32}
!221 = !{!31, !6, i64 40}
!222 = !{!31, !9, i64 96}
!223 = !{!31, !9, i64 104}
!224 = !{!31, !9, i64 72}
!225 = !{!31, !9, i64 88}
!226 = !{!31, !9, i64 80}
!227 = !{!31, !9, i64 64}
!228 = !{!31, !9, i64 56}
!229 = !{!31, !2, i64 4}
!230 = !{!31, !9, i64 48}
!231 = !{!23, !2, i64 168}
!232 = !{!23, !2, i64 172}
!233 = !{!23, !2, i64 320}
!234 = !{!23, !2, i64 324}
!235 = !{!23, !6, i64 224}
!236 = !{!23, !6, i64 232}
!237 = !{!23, !6, i64 8}
!238 = !{!23, !6, i64 16}
!239 = !{!23, !6, i64 24}
!240 = !{!23, !6, i64 32}
!241 = !{!23, !6, i64 104}
!242 = !{!23, !6, i64 112}
!243 = !{!23, !6, i64 72}
!244 = !{!23, !6, i64 80}
!245 = distinct !{!245, !132, !92, !93}
!246 = !{!23, !6, i64 136}
!247 = distinct !{!247, !104}
!248 = distinct !{!248, !92, !93}
!249 = !{!23, !6, i64 304}
!250 = !{!23, !6, i64 272}
!251 = !{!23, !6, i64 280}
!252 = !{!23, !6, i64 288}
!253 = !{!23, !6, i64 312}
!254 = !{!23, !6, i64 296}
!255 = distinct !{!255, !92, !93}
!256 = distinct !{!256, !132, !92, !93}
!257 = !{!23, !2, i64 328}
!258 = distinct !{!258, !92, !93}
!259 = !{!23, !6, i64 160}
!260 = distinct !{!260, !132, !92, !93}
!261 = !{!75, !9, i64 8}
!262 = !{!75, !9, i64 16}
!263 = !{!264, !264, i64 0}
!264 = !{!"long", !3, i64 0}
!265 = distinct !{!265, !92, !93}
!266 = distinct !{!266, !132, !92, !93}
!267 = distinct !{!267, !92, !93}
!268 = distinct !{!268, !132, !92, !93}
!269 = distinct !{!269, !104}
!270 = !{!3, !3, i64 0}
