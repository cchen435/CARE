; ModuleID = 'gtcp.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.gtc_bench_data_t = type { %struct.gtc_global_params_t, %struct.gtc_field_data_t, %struct.gtc_particle_data_t, %struct.gtc_aux_particle_data_t, %struct.gtc_diagnosis_data_t, %struct.gtc_particle_decomp_t, %struct.gtc_radial_decomp_t, %struct.gtc_particle_remap_t, %struct.gtc_particle_collision_t }
%struct.gtc_global_params_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.gtc_field_data_t = type { i32, i32*, i32*, i32*, i32*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, i32*, double*, i32*, i32*, double*, double*, double*, i32*, i32*, i32*, i32* }
%struct.gtc_particle_data_t = type { double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, i32*, i32* }
%struct.gtc_aux_particle_data_t = type { i32*, i32*, i32*, double*, double*, double*, double*, i32* }
%struct.gtc_diagnosis_data_t = type { i32*, i32*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, [4 x double], double, double*, double*, double*, double*, i32, i32, i32, i32, i32*, i32*, i32*, double*, i32, i32, i32*, i32*, i32*, double*, i32, i32 }
%struct.gtc_particle_decomp_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double*, i32, double*, i32 }
%struct.gtc_radial_decomp_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, double, double, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i32, double*, i32, i32*, i32*, i32*, i32, double*, i32 }
%struct.gtc_particle_remap_t = type { i32, i32, i32, i32, i32, i32, i32, double, double, i32, double*, double*, double*, double*, double*, double*, double*, i32, i32*, i32*, i32*, i32, double*, i32, i32*, i32*, i32*, i32, double*, i32, i32*, i32* }
%struct.gtc_particle_collision_t = type { i32, i32, i32, double*, double*, double*, double*, double*, double*, double*, double*, double*, double* }
%struct.RngStream_InfoState = type { [6 x double], [6 x double], [6 x double], i32, i32, i8* }
%struct.MPI_Status = type { i32, i32, i32, i32, i32 }

@istep = common global i32 0, align 4
@irk = common global i32 0, align 4
@idiag = common global i32 0, align 4
@stdout = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [10 x i8] c"init MPI\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"init ADIOS\0A\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"/home/cchen/Documents/Projects/CARE/Benchmarks/GTCP/gtcp.xml\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Finish Initialization\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [33 x i8] c"*** Cannot open input file. ***\0A\00", align 1
@.str.6 = private unnamed_addr constant [68 x i8] c"*** Number of particles per cell should be a positive integer. ***\0A\00", align 1
@.str.7 = private unnamed_addr constant [66 x i8] c"*** Number of toroidal domains should be a positive integer. ***\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"** istep=%d start\0A\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"%d : momentsoutput=%d\0A\00", align 1
@str = private unnamed_addr constant [16 x i8] c"writing moments\00"
@str.13 = private unnamed_addr constant [15 x i8] c"writing output\00"
@.str.12 = private unnamed_addr constant [441 x i8] c"%d time steps\0ATotal time:   %9.6f s\0ACharge        %9.6f s (%3.4f)\0APush          %9.6f s (%3.4f)\0AShift_t       %9.6f s (%3.4f)\0AShift_r       %9.6f s (%3.4f)\0ASorting       %9.6f s (%3.4f)\0ACollision     %9.6f s (%3.4f)\0ARemapping     %9.6f s (%3.4f)\0APoisson       %9.6f s (%3.4f)\0AField         %9.6f s (%3.4f)\0ASmooth        %9.6f s (%3.4f)\0ARestart       %9.6f s (%3.4f)\0AMoments       %9.6f s (%3.4f)\0ASetup         %9.6f s\0APoisson Init  %9.6f s\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"usage: %s <filename> <micell> <ntoroidal>\0A\00", align 1
@.str.1.11 = private unnamed_addr constant [148 x i8] c"\0AGTC benchmark.\0A  <filename>\0A    Input file.\0A  <micell>\0A    Number of particles per cell.\0A  <ntoroidal>\0A    1D domain decomposition (< mzetamax).\0A\0A\00", align 1
@.str.3.14 = private unnamed_addr constant [7 x i8] c"%*s %d\00", align 1
@.str.4.15 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5.16 = private unnamed_addr constant [5 x i8] c"irun\00", align 1
@.str.6.17 = private unnamed_addr constant [6 x i8] c"mstep\00", align 1
@.str.7.18 = private unnamed_addr constant [5 x i8] c"mpsi\00", align 1
@.str.8.19 = private unnamed_addr constant [10 x i8] c"mthetamax\00", align 1
@.str.9.20 = private unnamed_addr constant [9 x i8] c"mzetamax\00", align 1
@.str.10.21 = private unnamed_addr constant [12 x i8] c"npe_radiald\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"r0\00", align 1
@.str.12.22 = private unnamed_addr constant [7 x i8] c"nbound\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"tauii\00", align 1
@.str.14 = private unnamed_addr constant [30 x i8] c"Finished reading input file.\0A\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"mstep % ndiag == 0\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"setup.c\00", align 1
@__PRETTY_FUNCTION__.setup = private unnamed_addr constant [30 x i8] c"int setup(gtc_bench_data_t *)\00", align 1
@.str.18 = private unnamed_addr constant [46 x i8] c"Using npartdom %d, ntoroidal %d, nthreads %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"npartdom >= 1\00", align 1
@str.140 = private unnamed_addr constant [38 x i8] c"NOT use customized MPI mapping on BGQ\00"
@.str.21 = private unnamed_addr constant [59 x i8] c"number of radial parition=%d number of particle copies=%d\0A\00", align 1
@.str.22 = private unnamed_addr constant [48 x i8] c"mi: %d, mi_total: %ld, mgrid: %d, mzetamax: %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [24 x i8] c"ipsi_out %d /= mpsi %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [68 x i8] c"failed radial partition: use more radial grid cells (or less procs)\00", align 1
@.str.25 = private unnamed_addr constant [55 x i8] c"Using n_rad_buf=%d buffer cells: gyroradius/deltar=%f\0A\00", align 1
@.str.26 = private unnamed_addr constant [62 x i8] c"mype=%d: in set_radial_decomp:ipsi_in < 0 or ipsi_out > mpsi\0A\00", align 1
@.str.27 = private unnamed_addr constant [25 x i8] c"nghost_comm_num == i_loc\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"ghost_comm_num == i_loc\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"mpsi_loc > 0\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"pgyro != NULL\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"tgyro != NULL\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"markeri != NULL\00", align 1
@.str.33 = private unnamed_addr constant [17 x i8] c"densityi != NULL\00", align 1
@.str.34 = private unnamed_addr constant [23 x i8] c"densityi_local != NULL\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"phi != NULL\00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"evector != NULL\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"jtp1 != NULL\00", align 1
@.str.38 = private unnamed_addr constant [13 x i8] c"jtp2 != NULL\00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c"wtp1 != NULL\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"wtp2 != NULL\00", align 1
@.str.41 = private unnamed_addr constant [16 x i8] c"dtemper != NULL\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"heatflux != NULL\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"z0 != NULL\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"z1 != NULL\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"z2 != NULL\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"z3 != NULL\00", align 1
@.str.47 = private unnamed_addr constant [11 x i8] c"z4 != NULL\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"z5 != NULL\00", align 1
@.str.49 = private unnamed_addr constant [12 x i8] c"z00 != NULL\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"z01 != NULL\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"z02 != NULL\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"z03 != NULL\00", align 1
@.str.53 = private unnamed_addr constant [12 x i8] c"z04 != NULL\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"z05 != NULL\00", align 1
@.str.55 = private unnamed_addr constant [13 x i8] c"ztmp != NULL\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"ztmp2 != NULL\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"kzi != NULL\00", align 1
@.str.58 = private unnamed_addr constant [14 x i8] c"wzion != NULL\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"wpion != NULL\00", align 1
@.str.60 = private unnamed_addr constant [15 x i8] c"wtion0 != NULL\00", align 1
@.str.61 = private unnamed_addr constant [15 x i8] c"wtion1 != NULL\00", align 1
@.str.62 = private unnamed_addr constant [14 x i8] c"kzion != NULL\00", align 1
@.str.63 = private unnamed_addr constant [15 x i8] c"jtion0 != NULL\00", align 1
@.str.64 = private unnamed_addr constant [15 x i8] c"jtion1 != NULL\00", align 1
@.str.65 = private unnamed_addr constant [14 x i8] c"drdpa != NULL\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"diffta != NULL\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"idx1a != NULL\00", align 1
@.str.68 = private unnamed_addr constant [14 x i8] c"idx2a != NULL\00", align 1
@.str.69 = private unnamed_addr constant [20 x i8] c"recvl_index != NULL\00", align 1
@.str.70 = private unnamed_addr constant [20 x i8] c"recvr_index != NULL\00", align 1
@.str.71 = private unnamed_addr constant [16 x i8] c"sendrsf != NULL\00", align 1
@.str.72 = private unnamed_addr constant [16 x i8] c"recvlsf != NULL\00", align 1
@.str.73 = private unnamed_addr constant [15 x i8] c"sendrf != NULL\00", align 1
@.str.74 = private unnamed_addr constant [15 x i8] c"sendlf != NULL\00", align 1
@.str.75 = private unnamed_addr constant [15 x i8] c"recvrf != NULL\00", align 1
@.str.76 = private unnamed_addr constant [15 x i8] c"recvlf != NULL\00", align 1
@.str.77 = private unnamed_addr constant [13 x i8] c"perr != NULL\00", align 1
@.str.78 = private unnamed_addr constant [15 x i8] c"ptilde != NULL\00", align 1
@.str.79 = private unnamed_addr constant [15 x i8] c"phitmp != NULL\00", align 1
@.str.80 = private unnamed_addr constant [15 x i8] c"dentmp != NULL\00", align 1
@.str.81 = private unnamed_addr constant [16 x i8] c"phitmps != NULL\00", align 1
@.str.82 = private unnamed_addr constant [16 x i8] c"maxwell != NULL\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"tmp != NULL\00", align 1
@.str.84 = private unnamed_addr constant [16 x i8] c"tmp_loc != NULL\00", align 1
@.str.85 = private unnamed_addr constant [13 x i8] c"adum != NULL\00", align 1
@.str.86 = private unnamed_addr constant [33 x i8] c"nghost_moments_comm_num == i_loc\00", align 1
@.str.87 = private unnamed_addr constant [32 x i8] c"ghost_moments_comm_num == i_loc\00", align 1
@.str.88 = private unnamed_addr constant [20 x i8] c"scalar_data != NULL\00", align 1
@.str.89 = private unnamed_addr constant [18 x i8] c"flux_data != NULL\00", align 1
@.str.90 = private unnamed_addr constant [14 x i8] c"eflux != NULL\00", align 1
@.str.91 = private unnamed_addr constant [16 x i8] c"rmarker != NULL\00", align 1
@.str.92 = private unnamed_addr constant [14 x i8] c"dmark != NULL\00", align 1
@.str.93 = private unnamed_addr constant [13 x i8] c"dden != NULL\00", align 1
@.str.94 = private unnamed_addr constant [15 x i8] c"rdtemi != NULL\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c"rdteme != NULL\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"amp_mode != NULL\00", align 1
@.str.97 = private unnamed_addr constant [18 x i8] c"eigenmode != NULL\00", align 1
@.str.98 = private unnamed_addr constant [14 x i8] c"nmode != NULL\00", align 1
@.str.99 = private unnamed_addr constant [14 x i8] c"mmode != NULL\00", align 1
@.str.100 = private unnamed_addr constant [16 x i8] c"moments != NULL\00", align 1
@.str.101 = private unnamed_addr constant [19 x i8] c"momentstmp != NULL\00", align 1
@.str.102 = private unnamed_addr constant [22 x i8] c"sendl_moments != NULL\00", align 1
@.str.103 = private unnamed_addr constant [22 x i8] c"recvr_moments != NULL\00", align 1
@.str.104 = private unnamed_addr constant [32 x i8] c"ghost_moments_comm_list != NULL\00", align 1
@.str.105 = private unnamed_addr constant [28 x i8] c"ghost_moments_start != NULL\00", align 1
@.str.106 = private unnamed_addr constant [26 x i8] c"ghost_moments_end != NULL\00", align 1
@.str.107 = private unnamed_addr constant [34 x i8] c"ghost_moments_sendrecvbuf != NULL\00", align 1
@.str.108 = private unnamed_addr constant [33 x i8] c"nghost_moments_comm_list != NULL\00", align 1
@.str.109 = private unnamed_addr constant [29 x i8] c"nghost_moments_start != NULL\00", align 1
@.str.110 = private unnamed_addr constant [27 x i8] c"nghost_moments_end != NULL\00", align 1
@.str.111 = private unnamed_addr constant [35 x i8] c"nghost_moments_sendrecvbuf != NULL\00", align 1
@.str.112 = private unnamed_addr constant [17 x i8] c"rng_seed != NULL\00", align 1
@.str.113 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.114 = private unnamed_addr constant [15 x i8] c"indexp != NULL\00", align 1
@.str.115 = private unnamed_addr constant [13 x i8] c"ring != NULL\00", align 1
@.str.116 = private unnamed_addr constant [15 x i8] c"nindex != NULL\00", align 1
@.str.117 = private unnamed_addr constant [16 x i8] c"recvbuf != NULL\00", align 1
@.str.118 = private unnamed_addr constant [16 x i8] c"sendbuf != NULL\00", align 1
@.str.119 = private unnamed_addr constant [64 x i8] c"/home/cchen/Documents/Projects/CARE/Benchmarks/GTCP/maxwell.dat\00", align 1
@str.27 = private unnamed_addr constant [16 x i8] c"File read error\00"
@.str.121 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"i == 100001\00", align 1
@.str.123 = private unnamed_addr constant [43 x i8] c"collision time tauii=%e nu_star = %e q=%e\0A\00", align 1
@.str.124 = private unnamed_addr constant [19 x i8] c"RUN_PARAMETERS.dat\00", align 1
@.str.125 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.126 = private unnamed_addr constant [33 x i8] c"no input file for RUN_PARAMETERS\00", align 1
@.str.135 = private unnamed_addr constant [43 x i8] c"Binning and removing holes every %d steps\0A\00", align 1
@.str.136 = private unnamed_addr constant [15 x i8] c"nloc_over: %d\0A\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"mzeta: %d\0A\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"mflux: %d\0A\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"mpsi: %d\0A\00", align 1
@.str.120 = private unnamed_addr constant [20 x i8] c"ip >= ipsi_valid_in\00", align 1
@.str.1.121 = private unnamed_addr constant [20 x i8] c"chargei_reduction.c\00", align 1
@__PRETTY_FUNCTION__.chargei = private unnamed_addr constant [32 x i8] c"int chargei(gtc_bench_data_t *)\00", align 1
@.str.2.122 = private unnamed_addr constant [21 x i8] c"ip <= ipsi_valid_out\00", align 1
@.str.3.123 = private unnamed_addr constant [38 x i8] c"warning: reducing rhoi to %e from %e\0A\00", align 1
@.str.4.124 = private unnamed_addr constant [14 x i8] c"ii >= ipsi_in\00", align 1
@.str.5.125 = private unnamed_addr constant [19 x i8] c"ii <= ipsi_out - 1\00", align 1
@.str.6.127 = private unnamed_addr constant [13 x i8] c"adum != NULL\00", align 1
@.str.7.128 = private unnamed_addr constant [14 x i8] c"adum2 != NULL\00", align 1
@__PRETTY_FUNCTION__.chargei_init = private unnamed_addr constant [37 x i8] c"int chargei_init(gtc_bench_data_t *)\00", align 1
@.str.140 = private unnamed_addr constant [14 x i8] c"phism != NULL\00", align 1
@.str.1.141 = private unnamed_addr constant [9 x i8] c"smooth.c\00", align 1
@__PRETTY_FUNCTION__.smooth = private unnamed_addr constant [36 x i8] c"int smooth(int, gtc_bench_data_t *)\00", align 1
@.str.2.142 = private unnamed_addr constant [27 x i8] c"Error! Bad iflag argument\0A\00", align 1
@str.143 = private unnamed_addr constant [44 x i8] c"mzeta!=0 hasn't been implemented in field.c\00"
@.str.148 = private unnamed_addr constant [21 x i8] c"hfluxpsi_all != NULL\00", align 1
@.str.1.149 = private unnamed_addr constant [7 x i8] c"push.c\00", align 1
@__PRETTY_FUNCTION__.pushi = private unnamed_addr constant [30 x i8] c"int pushi(gtc_bench_data_t *)\00", align 1
@.str.2.150 = private unnamed_addr constant [61 x i8] c"Error! decoupling modes for nonlinear = 0.0 not implemented\0A\00", align 1
@.str.3.151 = private unnamed_addr constant [21 x i8] c"rmarker_temp != NULL\00", align 1
@.str.4.152 = private unnamed_addr constant [11 x i8] c"mzeta == 1\00", align 1
@.str.156 = private unnamed_addr constant [47 x i8] c"mpsi_loc == ipsi_valid_out - ipsi_valid_in + 1\00", align 1
@.str.1.157 = private unnamed_addr constant [9 x i8] c"shifti.c\00", align 1
@__PRETTY_FUNCTION__.radial_bin_particles = private unnamed_addr constant [45 x i8] c"int radial_bin_particles(gtc_bench_data_t *)\00", align 1
@.str.2.158 = private unnamed_addr constant [13 x i8] c"psitmp > 0.0\00", align 1
@.str.3.159 = private unnamed_addr constant [26 x i8] c"psi offset sum %d, mi %d\0A\00", align 1
@.str.4.163 = private unnamed_addr constant [15 x i8] c"mshift != NULL\00", align 1
@__PRETTY_FUNCTION__.shifti_toroidal = private unnamed_addr constant [40 x i8] c"int shifti_toroidal(gtc_bench_data_t *)\00", align 1
@.str.5.164 = private unnamed_addr constant [38 x i8] c"nthreads == parallel_decomp->nthreads\00", align 1
@.str.6.165 = private unnamed_addr constant [24 x i8] c"nthreads <= max_threads\00", align 1
@.str.7.166 = private unnamed_addr constant [15 x i8] c"lstack != NULL\00", align 1
@.str.8.167 = private unnamed_addr constant [15 x i8] c"rstack != NULL\00", align 1
@.str.9.168 = private unnamed_addr constant [18 x i8] c"stack_tmp != NULL\00", align 1
@.str.10.169 = private unnamed_addr constant [52 x i8] c"Error! mype %d, msend %d, left %d, right %d, mi %d\0A\00", align 1
@.str.11.170 = private unnamed_addr constant [69 x i8] c"Toroidal Error! PE %d, msendleft %d, msendright %d, sendbuf_size %d\0A\00", align 1
@.str.12.171 = private unnamed_addr constant [69 x i8] c"Toroidal Error! PE %d, mrecvleft %d, mrecvright %d, recvbuf_size %d\0A\00", align 1
@.str.13.172 = private unnamed_addr constant [40 x i8] c"mi_end + mrecvleft + mrecvright < mimax\00", align 1
@.str.14.173 = private unnamed_addr constant [47 x i8] c"Error! Endless particle sorting loop at PE %d\0A\00", align 1
@__PRETTY_FUNCTION__.shifti_radial = private unnamed_addr constant [38 x i8] c"int shifti_radial(gtc_bench_data_t *)\00", align 1
@.str.15.177 = private unnamed_addr constant [67 x i8] c"Radial Error! PE %d, msendleft %d, msendright %d, sendbuf_size %d\0A\00", align 1
@.str.16.178 = private unnamed_addr constant [67 x i8] c"Radial Error! PE %d, mrecvleft %d, mrecvright %d, recvbuf_size %d\0A\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"Error! mring=1 not implemented\0A\00", align 1
@.str.1.180 = private unnamed_addr constant [33 x i8] c"Error! mring=%d not implemented\0A\00", align 1
@.str.2.181 = private unnamed_addr constant [9 x i8] c"ij0 >= 0\00", align 1
@.str.3.182 = private unnamed_addr constant [10 x i8] c"poisson.c\00", align 1
@__PRETTY_FUNCTION__.poisson_initial = private unnamed_addr constant [72 x i8] c"int poisson_initial(gtc_bench_data_t *, int, int, int *, int *, real *)\00", align 1
@.str.4.183 = private unnamed_addr constant [16 x i8] c"ij0 < nloc_over\00", align 1
@.str.5.184 = private unnamed_addr constant [10 x i8] c"ipjt >= 0\00", align 1
@.str.6.185 = private unnamed_addr constant [17 x i8] c"ipjt < nloc_over\00", align 1
@.str.7.186 = private unnamed_addr constant [8 x i8] c"ij >= 0\00", align 1
@.str.8.187 = private unnamed_addr constant [15 x i8] c"ij < nloc_over\00", align 1
@.str.9.188 = private unnamed_addr constant [35 x i8] c"poisson solver: %d %d %f %f %d %d\0A\00", align 1
@str.193 = private unnamed_addr constant [44 x i8] c"mzeta!=0 hasn't been implemented in field.c\00"
@.str.197 = private unnamed_addr constant [16 x i8] c"xnormal != NULL\00", align 1
@.str.1.198 = private unnamed_addr constant [12 x i8] c"diagnosis.c\00", align 1
@__PRETTY_FUNCTION__.diagnosis = private unnamed_addr constant [34 x i8] c"int diagnosis(gtc_bench_data_t *)\00", align 1
@.str.2.199 = private unnamed_addr constant [13 x i8] c"fdum != NULL\00", align 1
@.str.3.200 = private unnamed_addr constant [13 x i8] c"adum != NULL\00", align 1
@.str.4.201 = private unnamed_addr constant [46 x i8] c"kappa_T at radial_bin %d is %e gyroradius=%e\0A\00", align 1
@.str.5.202 = private unnamed_addr constant [215 x i8] c"istep+mstepall=%d efield=%e eradial=%e entropyi=%e, dflowi=%e, pfluxi=%e, efluxi=%e eflux[2]=%e rmarker[2]=%e particles_energy[0]=%e particles_energy[1]=%e, sum_of_weights=%e sum_of_f0=%e max_of_f0=%e min_of_f0=%e\0A\00", align 1
@.str.6.203 = private unnamed_addr constant [11 x i8] c"diag_c.txt\00", align 1
@.str.7.204 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.8.205 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.9.206 = private unnamed_addr constant [46 x i8] c"%d %e %e %e %e %e %e %e %e %e %e %e %e %e %e\0A\00", align 1
@A1p127 = internal global [3 x [3 x double]] [[3 x double] [double 0x41E216DD10400000, double 0x41EAAC9AE7000000, double 0x41CC4E2D10000000], [3 x double] [double 0x41AAF5A9BE000000, double 0x41D2560B74000000, double 0x41EAAC9AE7000000], [3 x double] [double 0x41DDA2CDAE400000, double 0x41CD689F4E800000, double 0x41D2560B74000000]], align 16
@A2p127 = internal global [3 x [3 x double]] [[3 x double] [double 0x41D5D24904400000, double 0x41B08D543F000000, double 0x41D8006C47400000], [3 x double] [double 3.218393e+07, double 0x41D5D24904400000, double 0x41CE79E0D6000000], [3 x double] [double 0x41E50B2A3B000000, double 3.218393e+07, double 0x41DF33589BC00000]], align 16
@str.212 = private unnamed_addr constant [40 x i8] c"RngStream_CreateStream: No more memory\0A\00"
@A1p76 = internal global [3 x [3 x double]] [[3 x double] [double 0x4193BB302C000000, double 0x41DBE2CA5CC00000, double 0x41EEC06A7EC00000], [3 x double] [double 0x41EB5D5EC4600000, double 0x41907F542C000000, double 0x41DBE2CA5CC00000], [3 x double] [double 0x41EB5BF562E00000, double 0x41EA4A8B28600000, double 0x41907F542C000000]], align 16
@A2p76 = internal global [3 x [3 x double]] [[3 x double] [double 0x41D68540FC000000, double 0x41EC021FA1C00000, double 0x41D800B2B0000000], [3 x double] [double 0x41EFFBC769600000, double 0x41D68540FC000000, double 0x41ECFB6DCB800000], [3 x double] [double 0x41ECC1B8FDA00000, double 0x41EFFBC769600000, double 0x41EBA15674000000]], align 16
@.str.15.215 = private unnamed_addr constant [125 x i8] c"****************************************\0AERROR: Seed[%1d] >= m1, Seed is not set.\0A****************************************\0A\0A\00", align 1
@.str.16.216 = private unnamed_addr constant [86 x i8] c"****************************\0AERROR: First 3 seeds = 0.\0A****************************\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [85 x i8] c"****************************\0AERROR: Last 3 seeds = 0.\0A****************************\0A\0A\00", align 1
@A1p0 = internal global [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], [3 x double] [double -8.107280e+05, double 1.403580e+06, double 0.000000e+00]], align 16
@A2p0 = internal global [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], [3 x double] [double -1.370589e+06, double 0.000000e+00, double 5.276120e+05]], align 16
@InvA1 = internal global [3 x [3 x double]] [[3 x double] [double 0x41A60A5A12000000, double 0.000000e+00, double 0x41DCFC3CFD400000], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@InvA2 = internal global [3 x [3 x double]] [[3 x double] [double 0.000000e+00, double 0x41B57AB546000000, double 0x41EF7BA372000000], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@.str.1.217 = private unnamed_addr constant [35 x i8] c"The current state of the Rngstream\00", align 1
@.str.2.218 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.3.219 = private unnamed_addr constant [13 x i8] c":\0A   Cg = { \00", align 1
@.str.4.220 = private unnamed_addr constant [6 x i8] c"%lu, \00", align 1
@.str.5.221 = private unnamed_addr constant [8 x i8] c"%lu }\0A\0A\00", align 1
@.str.6.222 = private unnamed_addr constant [14 x i8] c"The RngStream\00", align 1
@.str.8.223 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.9.224 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.7.225 = private unnamed_addr constant [16 x i8] c":\0A   Anti = %s\0A\00", align 1
@.str.10.226 = private unnamed_addr constant [17 x i8] c"   IncPrec = %s\0A\00", align 1
@.str.11.227 = private unnamed_addr constant [11 x i8] c"   Ig = { \00", align 1
@.str.12.228 = private unnamed_addr constant [7 x i8] c"%lu }\0A\00", align 1
@.str.13.229 = private unnamed_addr constant [11 x i8] c"   Bg = { \00", align 1
@.str.14.230 = private unnamed_addr constant [11 x i8] c"   Cg = { \00", align 1
@.str.233 = private unnamed_addr constant [24 x i8] c"./restart/restart.%5.5d\00", align 1
@.str.1.234 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.235 = private unnamed_addr constant [26 x i8] c"no input file for restart\00", align 1
@.str.12.236 = private unnamed_addr constant [17 x i8] c"restart.%3.3d.bp\00", align 1
@.str.13.237 = private unnamed_addr constant [8 x i8] c"restart\00", align 1
@.str.14.238 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.15.239 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.16.240 = private unnamed_addr constant [5 x i8] c"mype\00", align 1
@.str.17.241 = private unnamed_addr constant [9 x i8] c"numberpe\00", align 1
@.str.18.242 = private unnamed_addr constant [6 x i8] c"mzeta\00", align 1
@.str.19.243 = private unnamed_addr constant [10 x i8] c"nloc_over\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"phi\00", align 1
@.str.21.244 = private unnamed_addr constant [6 x i8] c"zion0\00", align 1
@.str.22.245 = private unnamed_addr constant [6 x i8] c"zion1\00", align 1
@.str.23.246 = private unnamed_addr constant [6 x i8] c"zion2\00", align 1
@.str.24.247 = private unnamed_addr constant [6 x i8] c"zion3\00", align 1
@.str.25.248 = private unnamed_addr constant [6 x i8] c"zion4\00", align 1
@.str.26.249 = private unnamed_addr constant [6 x i8] c"zion5\00", align 1
@.str.27.250 = private unnamed_addr constant [7 x i8] c"zion05\00", align 1
@.str.251 = private unnamed_addr constant [43 x i8] c"offset == nghost_bufsize * (mzeta + 1) * 7\00", align 1
@.str.1.252 = private unnamed_addr constant [13 x i8] c"ghost_comm.c\00", align 1
@__PRETTY_FUNCTION__.sum_plane_moments = private unnamed_addr constant [42 x i8] c"int sum_plane_moments(gtc_bench_data_t *)\00", align 1
@.str.2.253 = private unnamed_addr constant [42 x i8] c"offset == ghost_bufsize * (mzeta + 1) * 7\00", align 1
@.str.3.256 = private unnamed_addr constant [39 x i8] c"offset == nghost_bufsize * (mzeta + 1)\00", align 1
@__PRETTY_FUNCTION__.sum_plane = private unnamed_addr constant [34 x i8] c"int sum_plane(gtc_bench_data_t *)\00", align 1
@.str.4.257 = private unnamed_addr constant [38 x i8] c"offset == ghost_bufsize * (mzeta + 1)\00", align 1
@.str.5.260 = private unnamed_addr constant [44 x i8] c"offset == ghost_bufsize * (mzeta + 1) * dim\00", align 1
@__PRETTY_FUNCTION__.fix_radial_ghosts = private unnamed_addr constant [60 x i8] c"int fix_radial_ghosts(gtc_bench_data_t *, real *, int, int)\00", align 1
@.str.263 = private unnamed_addr constant [17 x i8] c"rng_seed != NULL\00", align 1
@.str.1.264 = private unnamed_addr constant [12 x i8] c"collision.c\00", align 1
@__PRETTY_FUNCTION__.collision = private unnamed_addr constant [34 x i8] c"int collision(gtc_bench_data_t *)\00", align 1
@.str.2.265 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.270 = private unnamed_addr constant [12 x i8] c"offset >= 0\00", align 1
@.str.1.271 = private unnamed_addr constant [15 x i8] c"calc_moments.c\00", align 1
@__PRETTY_FUNCTION__.calc_moments = private unnamed_addr constant [37 x i8] c"int calc_moments(gtc_bench_data_t *)\00", align 1
@.str.2.272 = private unnamed_addr constant [107 x i8] c"istep=%d timing_e_inter=%e timing_inter_max=%e timing_inter_min=%e timing=%e, timing_max=%e timing_min=%e\0A\00", align 1

; Function Attrs: nounwind uwtable
define double @timer() #0 {
  %1 = tail call double @MPI_Wtime() #3
  ret double %1
}

declare double @MPI_Wtime() #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8**, align 8
  %mype = alloca i32, align 4
  %numberpe = alloca i32, align 4
  store i32 %argc, i32* %1, align 4, !tbaa !1
  store i8** %argv, i8*** %2, align 8, !tbaa !5
  %3 = bitcast i32* %mype to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #3
  %4 = bitcast i32* %numberpe to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #3
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i64 9, i64 1, %struct._IO_FILE* %5)
  %7 = call i32 @MPI_Init(i32* nonnull %1, i8*** nonnull %2) #3
  %8 = call i32 @MPI_Comm_size(i32 1140850688, i32* nonnull %numberpe) #3
  %9 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %mype) #3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %11 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %10)
  %12 = call i32 @adios_init(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i32 1140850688) #3
  %13 = load i32, i32* %mype, align 4, !tbaa !1
  %14 = icmp eq i32 %13, 0
  %15 = load i32, i32* %1, align 4
  %16 = icmp ne i32 %15, 4
  %or.cond3 = and i1 %14, %16
  br i1 %or.cond3, label %17, label %21

; <label>:17                                      ; preds = %0
  %18 = load i8**, i8*** %2, align 8, !tbaa !5
  %19 = load i8*, i8** %18, align 8, !tbaa !5
  call void @usage(i8* %19) #3
  %20 = call i32 @MPI_Abort(i32 1140850688, i32 2) #3
  br label %21

; <label>:21                                      ; preds = %17, %0
  %22 = call i32 @MPI_Barrier(i32 1140850688) #3
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %24 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %23)
  %25 = load i32, i32* %mype, align 4, !tbaa !1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %41

; <label>:27                                      ; preds = %21
  %28 = load i8**, i8*** %2, align 8, !tbaa !5
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8, !tbaa !5
  %31 = call %struct._IO_FILE* @fopen(i8* %30, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %32 = icmp eq %struct._IO_FILE* %31, null
  br i1 %32, label %33, label %39

; <label>:33                                      ; preds = %27
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %35 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i64 32, i64 1, %struct._IO_FILE* %34) #13
  %36 = load i8**, i8*** %2, align 8, !tbaa !5
  %37 = load i8*, i8** %36, align 8, !tbaa !5
  call void @usage(i8* %37) #3
  %38 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  br label %39

; <label>:39                                      ; preds = %33, %27
  %40 = call i32 @fclose(%struct._IO_FILE* %31)
  br label %41

; <label>:41                                      ; preds = %39, %21
  %42 = call i32 @MPI_Barrier(i32 1140850688) #3
  %43 = load i8**, i8*** %2, align 8, !tbaa !5
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8, !tbaa !5
  %46 = call i32 @atoi(i8* %45) #14
  %47 = load i32, i32* %mype, align 4, !tbaa !1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %46, 1
  %or.cond5 = and i1 %49, %48
  br i1 %or.cond5, label %50, label %56

; <label>:50                                      ; preds = %41
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %52 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i64 67, i64 1, %struct._IO_FILE* %51) #13
  %53 = load i8**, i8*** %2, align 8, !tbaa !5
  %54 = load i8*, i8** %53, align 8, !tbaa !5
  call void @usage(i8* %54) #3
  %55 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  br label %56

; <label>:56                                      ; preds = %50, %41
  %57 = call i32 @MPI_Barrier(i32 1140850688) #3
  %58 = load i8**, i8*** %2, align 8, !tbaa !5
  %59 = getelementptr inbounds i8*, i8** %58, i64 3
  %60 = load i8*, i8** %59, align 8, !tbaa !5
  %61 = call i32 @atoi(i8* %60) #14
  %62 = load i32, i32* %mype, align 4, !tbaa !1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %61, 1
  %or.cond7 = and i1 %64, %63
  br i1 %or.cond7, label %65, label %71

; <label>:65                                      ; preds = %56
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %67 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([66 x i8], [66 x i8]* @.str.7, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %66) #13
  %68 = load i8**, i8*** %2, align 8, !tbaa !5
  %69 = load i8*, i8** %68, align 8, !tbaa !5
  call void @usage(i8* %69) #3
  %70 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  br label %71

; <label>:71                                      ; preds = %65, %56
  %72 = call i32 @MPI_Barrier(i32 1140850688) #3
  %73 = call double @timer()
  %74 = call noalias i8* @malloc(i64 2128) #3
  %75 = bitcast i8* %74 to %struct.gtc_bench_data_t*
  %76 = load i32, i32* %numberpe, align 4, !tbaa !1
  %77 = getelementptr inbounds i8, i8* %74, i64 1440
  %78 = bitcast i8* %77 to %struct.gtc_particle_decomp_t*
  %79 = getelementptr inbounds i8, i8* %74, i64 1444
  %80 = bitcast i8* %79 to i32*
  store i32 %76, i32* %80, align 4, !tbaa !7
  %81 = getelementptr inbounds i8, i8* %74, i64 1448
  %82 = bitcast i8* %81 to i32*
  store i32 %61, i32* %82, align 8, !tbaa !19
  %83 = load i32, i32* %mype, align 4, !tbaa !1
  %84 = bitcast i8* %77 to i32*
  store i32 %83, i32* %84, align 8, !tbaa !20
  %85 = load i8**, i8*** %2, align 8, !tbaa !5
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = load i8*, i8** %86, align 8, !tbaa !5
  %88 = bitcast i8* %74 to %struct.gtc_global_params_t*
  %89 = getelementptr inbounds i8, i8* %74, i64 1536
  %90 = bitcast i8* %89 to %struct.gtc_radial_decomp_t*
  %91 = call i32 @read_input_file(i8* %87, %struct.gtc_global_params_t* %88, %struct.gtc_particle_decomp_t* %78, %struct.gtc_radial_decomp_t* %90) #3
  %92 = getelementptr inbounds i8, i8* %74, i64 176
  %93 = bitcast i8* %92 to i32*
  store i32 %46, i32* %93, align 8, !tbaa !21
  %94 = call i32 @setup(%struct.gtc_bench_data_t* %75) #3
  %95 = getelementptr inbounds i8, i8* %74, i64 104
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 8, !tbaa !22
  %98 = call i32 @chargei_init(%struct.gtc_bench_data_t* %75) #3
  %99 = icmp eq i32 %97, 0
  br i1 %99, label %100, label %102

; <label>:100                                     ; preds = %71
  %101 = call i32 @calc_moments(%struct.gtc_bench_data_t* %75) #3
  br label %102

; <label>:102                                     ; preds = %100, %71
  %103 = call double @timer()
  %104 = fsub double %103, %73
  %105 = getelementptr inbounds i8, i8* %74, i64 72
  %106 = bitcast i8* %105 to i32*
  %107 = load i32, i32* %106, align 8, !tbaa !23
  %108 = getelementptr inbounds i8, i8* %74, i64 60
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 4, !tbaa !24
  %111 = call double @timer()
  store i32 1, i32* @istep, align 4, !tbaa !1
  %112 = icmp slt i32 %107, 1
  br i1 %112, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %102
  %113 = getelementptr inbounds i8, i8* %74, i64 408
  %114 = bitcast i8* %113 to double*
  %115 = getelementptr inbounds i8, i8* %74, i64 80
  %116 = bitcast i8* %115 to i32*
  br label %117

; <label>:117                                     ; preds = %204, %.lr.ph
  %restart_time.035 = phi double [ 0.000000e+00, %.lr.ph ], [ %208, %204 ]
  %moments_time.034 = phi double [ 0.000000e+00, %.lr.ph ], [ %217, %204 ]
  %remap_time.033 = phi double [ 0.000000e+00, %.lr.ph ], [ %181, %204 ]
  %collision_time.032 = phi double [ 0.000000e+00, %.lr.ph ], [ %176, %204 ]
  %poisson_init_time.031 = phi double [ 0.000000e+00, %.lr.ph ], [ %poisson_init_time.2, %204 ]
  %field_time.030 = phi double [ 0.000000e+00, %.lr.ph ], [ %138, %204 ]
  %smooth_time.029 = phi double [ 0.000000e+00, %.lr.ph ], [ %191, %204 ]
  %sorting_time.028 = phi double [ 0.000000e+00, %.lr.ph ], [ %164, %204 ]
  %shift_radial_time.027 = phi double [ 0.000000e+00, %.lr.ph ], [ %159, %204 ]
  %shift_toroidal_time.026 = phi double [ 0.000000e+00, %.lr.ph ], [ %154, %204 ]
  %poisson_time.025 = phi double [ 0.000000e+00, %.lr.ph ], [ %poisson_time.2, %204 ]
  %charge_time.024 = phi double [ 0.000000e+00, %.lr.ph ], [ %186, %204 ]
  %push_time.023 = phi double [ 0.000000e+00, %.lr.ph ], [ %143, %204 ]
  %storemerge22 = phi i32 [ 1, %.lr.ph ], [ %220, %204 ]
  %118 = load i32, i32* %mype, align 4, !tbaa !1
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %.preheader

; <label>:120                                     ; preds = %117
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i32 %storemerge22)
  br label %.preheader

.preheader:                                       ; preds = %120, %117
  store i32 1, i32* @irk, align 4, !tbaa !1
  br label %123

; <label>:123                                     ; preds = %173, %.preheader
  %remap_time.121 = phi double [ %remap_time.033, %.preheader ], [ %181, %173 ]
  %collision_time.120 = phi double [ %collision_time.032, %.preheader ], [ %176, %173 ]
  %poisson_init_time.119 = phi double [ %poisson_init_time.031, %.preheader ], [ %poisson_init_time.2, %173 ]
  %field_time.118 = phi double [ %field_time.030, %.preheader ], [ %138, %173 ]
  %smooth_time.117 = phi double [ %smooth_time.029, %.preheader ], [ %191, %173 ]
  %sorting_time.116 = phi double [ %sorting_time.028, %.preheader ], [ %164, %173 ]
  %shift_radial_time.115 = phi double [ %shift_radial_time.027, %.preheader ], [ %159, %173 ]
  %shift_toroidal_time.114 = phi double [ %shift_toroidal_time.026, %.preheader ], [ %154, %173 ]
  %poisson_time.113 = phi double [ %poisson_time.025, %.preheader ], [ %poisson_time.2, %173 ]
  %charge_time.112 = phi double [ %charge_time.024, %.preheader ], [ %186, %173 ]
  %push_time.111 = phi double [ %push_time.023, %.preheader ], [ %143, %173 ]
  %storemerge810 = phi i32 [ 1, %.preheader ], [ %202, %173 ]
  %124 = add nsw i32 %storemerge810, 1
  %125 = srem i32 %124, 2
  %126 = load i32, i32* @istep, align 4, !tbaa !1
  %127 = srem i32 %126, %110
  %128 = add nsw i32 %127, %125
  store i32 %128, i32* @idiag, align 4, !tbaa !1
  %129 = call double @timer()
  %130 = call i32 @smooth(i32 3, %struct.gtc_bench_data_t* %75) #3
  %131 = call double @timer()
  %132 = fsub double %131, %129
  %133 = fadd double %smooth_time.117, %132
  %134 = call double @timer()
  %135 = call i32 @field(%struct.gtc_bench_data_t* %75) #3
  %136 = call double @timer()
  %137 = fsub double %136, %134
  %138 = fadd double %field_time.118, %137
  %139 = call double @timer()
  %140 = call i32 @pushi(%struct.gtc_bench_data_t* %75) #3
  %141 = call double @timer()
  %142 = fsub double %141, %139
  %143 = fadd double %push_time.111, %142
  %144 = call double @timer()
  %145 = load i32, i32* @idiag, align 4, !tbaa !1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %149

; <label>:147                                     ; preds = %123
  %148 = call i32 @diagnosis(%struct.gtc_bench_data_t* %75) #3
  br label %149

; <label>:149                                     ; preds = %147, %123
  %150 = call double @timer()
  %151 = call i32 @shifti_toroidal(%struct.gtc_bench_data_t* %75) #3
  %152 = call double @timer()
  %153 = fsub double %152, %150
  %154 = fadd double %shift_toroidal_time.114, %153
  %155 = call double @timer()
  %156 = call i32 @shifti_radial(%struct.gtc_bench_data_t* %75) #3
  %157 = call double @timer()
  %158 = fsub double %157, %155
  %159 = fadd double %shift_radial_time.115, %158
  %160 = call double @timer()
  %161 = call i32 @radial_bin_particles(%struct.gtc_bench_data_t* %75) #3
  %162 = call double @timer()
  %163 = fsub double %162, %160
  %164 = fadd double %sorting_time.116, %163
  %165 = call double @timer()
  %166 = load i32, i32* @irk, align 4, !tbaa !1
  %167 = icmp eq i32 %166, 2
  br i1 %167, label %168, label %173

; <label>:168                                     ; preds = %149
  %169 = load double, double* %114, align 8, !tbaa !25
  %170 = fcmp ogt double %169, 0.000000e+00
  br i1 %170, label %171, label %173

; <label>:171                                     ; preds = %168
  %172 = call i32 @collision(%struct.gtc_bench_data_t* nonnull %75) #3
  br label %173

; <label>:173                                     ; preds = %171, %168, %149
  %174 = call double @timer()
  %175 = fsub double %174, %165
  %176 = fadd double %collision_time.120, %175
  %177 = call double @timer()
  %178 = call i32 (%struct.gtc_bench_data_t*, ...) bitcast (i32 (%struct.gtc_bench_data_t*)* @remap to i32 (%struct.gtc_bench_data_t*, ...)*)(%struct.gtc_bench_data_t* %75) #3
  %179 = call double @timer()
  %180 = fsub double %179, %177
  %181 = fadd double %remap_time.121, %180
  %182 = call double @timer()
  %183 = call i32 @chargei(%struct.gtc_bench_data_t* %75) #3
  %184 = call double @timer()
  %185 = fsub double %184, %182
  %186 = fadd double %charge_time.112, %185
  %187 = call double @timer()
  %188 = call i32 @smooth(i32 0, %struct.gtc_bench_data_t* %75) #3
  %189 = call double @timer()
  %190 = fsub double %189, %187
  %191 = fadd double %133, %190
  %192 = call double @timer()
  %193 = call i32 @poisson(i32 0, %struct.gtc_bench_data_t* %75) #3
  %194 = load i32, i32* @istep, align 4, !tbaa !1
  %195 = icmp eq i32 %194, 1
  %196 = load i32, i32* @irk, align 4
  %197 = icmp eq i32 %196, 1
  %or.cond = and i1 %195, %197
  %198 = call double @timer()
  %199 = fsub double %198, %192
  %200 = fadd double %poisson_time.113, %199
  %poisson_time.2 = select i1 %or.cond, double %poisson_time.113, double %200
  %poisson_init_time.2 = select i1 %or.cond, double %199, double %poisson_init_time.119
  %201 = load i32, i32* @irk, align 4, !tbaa !1
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* @irk, align 4, !tbaa !1
  %203 = icmp slt i32 %202, 3
  br i1 %203, label %123, label %204

; <label>:204                                     ; preds = %173
  %205 = call double @timer()
  %206 = call double @timer()
  %207 = fsub double %206, %205
  %208 = fadd double %restart_time.035, %207
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %210 = load i32, i32* %mype, align 4, !tbaa !1
  %211 = load i32, i32* %116, align 8, !tbaa !26
  %212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i32 %210, i32 %211)
  %213 = call double @timer()
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @str, i64 0, i64 0))
  %214 = call i32 @calc_moments(%struct.gtc_bench_data_t* %75) #3
  %215 = call double @timer()
  %216 = fsub double %215, %213
  %217 = fadd double %moments_time.034, %216
  %puts9 = call i32 @puts(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @str.13, i64 0, i64 0))
  %218 = call i32 (%struct.gtc_bench_data_t*, ...) bitcast (i32 (%struct.gtc_bench_data_t*)* @output to i32 (%struct.gtc_bench_data_t*, ...)*)(%struct.gtc_bench_data_t* %75) #3
  %219 = load i32, i32* @istep, align 4, !tbaa !1
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* @istep, align 4, !tbaa !1
  %221 = icmp slt i32 %219, %107
  br i1 %221, label %117, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %204
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %102
  %restart_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %208, %._crit_edge.loopexit ]
  %moments_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %217, %._crit_edge.loopexit ]
  %remap_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %181, %._crit_edge.loopexit ]
  %collision_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %176, %._crit_edge.loopexit ]
  %poisson_init_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %poisson_init_time.2, %._crit_edge.loopexit ]
  %field_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %138, %._crit_edge.loopexit ]
  %smooth_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %191, %._crit_edge.loopexit ]
  %sorting_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %164, %._crit_edge.loopexit ]
  %shift_radial_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %159, %._crit_edge.loopexit ]
  %shift_toroidal_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %154, %._crit_edge.loopexit ]
  %poisson_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %poisson_time.2, %._crit_edge.loopexit ]
  %charge_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %186, %._crit_edge.loopexit ]
  %push_time.0.lcssa = phi double [ 0.000000e+00, %102 ], [ %143, %._crit_edge.loopexit ]
  %222 = call double @timer()
  %223 = fsub double %222, %111
  %224 = fsub double %223, %poisson_init_time.0.lcssa
  %225 = call i32 @gtc_mem_free(%struct.gtc_bench_data_t* nonnull %75) #3
  call void @free(i8* nonnull %74) #3
  %226 = load i32, i32* %mype, align 4, !tbaa !1
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %255

; <label>:228                                     ; preds = %._crit_edge
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %230 = fdiv double %charge_time.0.lcssa, %224
  %231 = fmul double %230, 1.000000e+02
  %232 = fdiv double %push_time.0.lcssa, %224
  %233 = fmul double %232, 1.000000e+02
  %234 = fdiv double %shift_toroidal_time.0.lcssa, %224
  %235 = fmul double %234, 1.000000e+02
  %236 = fdiv double %shift_radial_time.0.lcssa, %224
  %237 = fmul double %236, 1.000000e+02
  %238 = fdiv double %sorting_time.0.lcssa, %224
  %239 = fmul double %238, 1.000000e+02
  %240 = fdiv double %collision_time.0.lcssa, %224
  %241 = fmul double %240, 1.000000e+02
  %242 = fdiv double %remap_time.0.lcssa, %224
  %243 = fmul double %242, 1.000000e+02
  %244 = fdiv double %poisson_time.0.lcssa, %224
  %245 = fmul double %244, 1.000000e+02
  %246 = fdiv double %field_time.0.lcssa, %224
  %247 = fmul double %246, 1.000000e+02
  %248 = fdiv double %smooth_time.0.lcssa, %224
  %249 = fmul double %248, 1.000000e+02
  %250 = fdiv double %restart_time.0.lcssa, %224
  %251 = fmul double %250, 1.000000e+02
  %252 = fdiv double %moments_time.0.lcssa, %224
  %253 = fmul double %252, 1.000000e+02
  %254 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %229, i8* nonnull getelementptr inbounds ([441 x i8], [441 x i8]* @.str.12, i64 0, i64 0), i32 %107, double %224, double %charge_time.0.lcssa, double %231, double %push_time.0.lcssa, double %233, double %shift_toroidal_time.0.lcssa, double %235, double %shift_radial_time.0.lcssa, double %237, double %sorting_time.0.lcssa, double %239, double %collision_time.0.lcssa, double %241, double %remap_time.0.lcssa, double %243, double %poisson_time.0.lcssa, double %245, double %field_time.0.lcssa, double %247, double %smooth_time.0.lcssa, double %249, double %restart_time.0.lcssa, double %251, double %moments_time.0.lcssa, double %253, double %104, double %poisson_init_time.0.lcssa)
  %.pre = load i32, i32* %mype, align 4, !tbaa !1
  br label %255

; <label>:255                                     ; preds = %228, %._crit_edge
  %256 = phi i32 [ %.pre, %228 ], [ %226, %._crit_edge ]
  %257 = call i32 @adios_finalize(i32 %256) #3
  %258 = call i32 @MPI_Finalize() #3
  call void @llvm.lifetime.end(i64 4, i8* %4) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %3) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #3

declare i32 @MPI_Init(i32*, i8***) #1

declare i32 @MPI_Comm_size(i32, i32*) #1

declare i32 @MPI_Comm_rank(i32, i32*) #1

declare i32 @adios_init(i8*, i32) #1

declare i32 @MPI_Abort(i32, i32) #1

declare i32 @MPI_Barrier(i32) #1

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #4

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #4

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally i32 @atoi(i8* nocapture nonnull readonly %__nptr) #5 {
  %1 = tail call i64 @strtol(i8* nocapture nonnull %__nptr, i8** null, i32 10) #3
  %2 = trunc i64 %1 to i32
  ret i32 %2
}

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #4

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #4

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture) #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) #4

declare i32 @adios_finalize(i32) #1

declare i32 @MPI_Finalize() #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @usage(i8* %progname) #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i8* %progname)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.1.11, i64 0, i64 0), i64 147, i64 1, %struct._IO_FILE* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @read_input_file(i8* nocapture readonly %filename, %struct.gtc_global_params_t* %global_params, %struct.gtc_particle_decomp_t* nocapture readonly %parallel_decomp, %struct.gtc_radial_decomp_t* %radial_decomp) #0 {
  %real_scan_str = alloca [100 x i8], align 16
  %int_scan_str = alloca [100 x i8], align 16
  %buf = alloca [100 x i8], align 16
  %1 = getelementptr inbounds [100 x i8], [100 x i8]* %real_scan_str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %1) #3
  %2 = getelementptr inbounds [100 x i8], [100 x i8]* %int_scan_str, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %2) #3
  %3 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %3) #3
  %4 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %parallel_decomp, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !27
  %6 = bitcast [100 x i8]* %real_scan_str to i64*
  store i64 28829354338495013, i64* %6, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.14, i64 0, i64 0), i64 7, i32 1, i1 false)
  %7 = icmp eq i32 %5, 0
  br i1 %7, label %8, label %73

; <label>:8                                       ; preds = %0
  %9 = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.15, i64 0, i64 0))
  %10 = call i8* @fgets(i8* %3, i32 100, %struct._IO_FILE* %9)
  %11 = icmp eq i8* %10, null
  br i1 %11, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %8
  %12 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 25
  %13 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 17
  %14 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 3
  %15 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 4
  %16 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 6
  %17 = getelementptr inbounds %struct.gtc_radial_decomp_t, %struct.gtc_radial_decomp_t* %radial_decomp, i64 0, i32 23
  %18 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 78
  %19 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 24
  %20 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 73
  br label %21

; <label>:21                                      ; preds = %.backedge, %.lr.ph
  %22 = load i8, i8* %3, align 16, !tbaa !28
  switch i8 %22, label %23 [
    i8 33, label %.backedge
    i8 35, label %.backedge
    i8 47, label %.backedge
  ]

; <label>:23                                      ; preds = %21
  %24 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.16, i64 0, i64 0), i64 4) #14
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %23
  %27 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %12) #3
  br label %28

; <label>:28                                      ; preds = %26, %23
  %29 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.17, i64 0, i64 0), i64 5) #14
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

; <label>:31                                      ; preds = %28
  %32 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %13) #3
  br label %33

; <label>:33                                      ; preds = %31, %28
  %34 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.18, i64 0, i64 0), i64 4) #14
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %33
  %37 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %14) #3
  br label %38

; <label>:38                                      ; preds = %36, %33
  %39 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.19, i64 0, i64 0), i64 9) #14
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

; <label>:41                                      ; preds = %38
  %42 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %15) #3
  br label %43

; <label>:43                                      ; preds = %41, %38
  %44 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9.20, i64 0, i64 0), i64 8) #14
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

; <label>:46                                      ; preds = %43
  %47 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %16) #3
  br label %48

; <label>:48                                      ; preds = %46, %43
  %49 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.21, i64 0, i64 0), i64 11) #14
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

; <label>:51                                      ; preds = %48
  %52 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %17) #3
  br label %53

; <label>:53                                      ; preds = %51, %48
  %54 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2) #14
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

; <label>:56                                      ; preds = %53
  %57 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %1, double* %18) #3
  br label %58

; <label>:58                                      ; preds = %56, %53
  %59 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.22, i64 0, i64 0), i64 6) #14
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

; <label>:61                                      ; preds = %58
  %62 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %2, i32* %19) #3
  br label %63

; <label>:63                                      ; preds = %61, %58
  %64 = call i32 @strncmp(i8* nonnull %3, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 5) #14
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %.backedge

; <label>:66                                      ; preds = %63
  %67 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %3, i8* %1, double* %20) #3
  br label %.backedge

.backedge:                                        ; preds = %66, %63, %21, %21, %21
  %68 = call i8* @fgets(i8* %3, i32 100, %struct._IO_FILE* %9)
  %69 = icmp eq i8* %68, null
  br i1 %69, label %._crit_edge.loopexit, label %21

._crit_edge.loopexit:                             ; preds = %.backedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %70 = call i32 @fclose(%struct._IO_FILE* %9)
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %72 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* %71)
  br label %73

; <label>:73                                      ; preds = %._crit_edge, %0
  %74 = call i32 @MPI_Barrier(i32 1140850688) #3
  %75 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 25
  %76 = bitcast i32* %75 to i8*
  %77 = call i32 @MPI_Bcast(i8* %76, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %78 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 17
  %79 = bitcast i32* %78 to i8*
  %80 = call i32 @MPI_Bcast(i8* %79, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %81 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 3
  %82 = bitcast i32* %81 to i8*
  %83 = call i32 @MPI_Bcast(i8* %82, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %84 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 4
  %85 = bitcast i32* %84 to i8*
  %86 = call i32 @MPI_Bcast(i8* %85, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %87 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 6
  %88 = bitcast i32* %87 to i8*
  %89 = call i32 @MPI_Bcast(i8* %88, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %90 = getelementptr inbounds %struct.gtc_radial_decomp_t, %struct.gtc_radial_decomp_t* %radial_decomp, i64 0, i32 23
  %91 = bitcast i32* %90 to i8*
  %92 = call i32 @MPI_Bcast(i8* %91, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %93 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 24
  %94 = bitcast i32* %93 to i8*
  %95 = call i32 @MPI_Bcast(i8* %94, i32 1, i32 1275069445, i32 0, i32 1140850688) #3
  %96 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 78
  %97 = bitcast double* %96 to i8*
  %98 = call i32 @MPI_Bcast(i8* %97, i32 1, i32 1275070475, i32 0, i32 1140850688) #3
  %99 = getelementptr inbounds %struct.gtc_global_params_t, %struct.gtc_global_params_t* %global_params, i64 0, i32 73
  %100 = bitcast double* %99 to i8*
  %101 = call i32 @MPI_Bcast(i8* %100, i32 1, i32 1275070475, i32 0, i32 1140850688) #3
  %102 = call i32 @MPI_Barrier(i32 1140850688) #3
  call void @llvm.lifetime.end(i64 100, i8* %3) #3
  call void @llvm.lifetime.end(i64 100, i8* %2) #3
  call void @llvm.lifetime.end(i64 100, i8* %1) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind
declare i8* @fgets(i8*, i32, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #6

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) #4

declare i32 @MPI_Bcast(i8*, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define i32 @gtc_mem_free(%struct.gtc_bench_data_t* readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4
  %4 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %5 = bitcast i32** %4 to i8**
  %6 = load i8*, i8** %5, align 8, !tbaa !29
  tail call fastcc void @_mm_free(i8* %6)
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %8 = bitcast double** %7 to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !30
  tail call fastcc void @_mm_free(i8* %9)
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %11 = bitcast i32** %10 to i8**
  %12 = load i8*, i8** %11, align 8, !tbaa !31
  tail call fastcc void @_mm_free(i8* %12)
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 24
  %14 = bitcast double** %13 to i8**
  %15 = load i8*, i8** %14, align 8, !tbaa !32
  tail call fastcc void @_mm_free(i8* %15)
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 25
  %17 = bitcast double** %16 to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !33
  tail call fastcc void @_mm_free(i8* %18)
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %20 = bitcast double** %19 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !34
  tail call fastcc void @_mm_free(i8* %21)
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 16
  %23 = bitcast double** %22 to i8**
  %24 = load i8*, i8** %23, align 8, !tbaa !35
  tail call fastcc void @_mm_free(i8* %24)
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %26 = bitcast double** %25 to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !36
  tail call fastcc void @_mm_free(i8* %27)
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 46
  %29 = bitcast double** %28 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !37
  tail call fastcc void @_mm_free(i8* %30)
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 13
  %32 = bitcast double** %31 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !38
  tail call fastcc void @_mm_free(i8* %33)
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 7
  %35 = bitcast double** %34 to i8**
  %36 = load i8*, i8** %35, align 8, !tbaa !39
  tail call fastcc void @_mm_free(i8* %36)
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 18
  %38 = bitcast double** %37 to i8**
  %39 = load i8*, i8** %38, align 8, !tbaa !40
  tail call fastcc void @_mm_free(i8* %39)
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 17
  %41 = bitcast double** %40 to i8**
  %42 = load i8*, i8** %41, align 8, !tbaa !41
  tail call fastcc void @_mm_free(i8* %42)
  %43 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 29
  %44 = bitcast double** %43 to i8**
  %45 = load i8*, i8** %44, align 8, !tbaa !42
  tail call fastcc void @_mm_free(i8* %45)
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 27
  %47 = bitcast double** %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !43
  tail call fastcc void @_mm_free(i8* %48)
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 1
  %50 = bitcast i32** %49 to i8**
  %51 = load i8*, i8** %50, align 8, !tbaa !44
  tail call fastcc void @_mm_free(i8* %51)
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 8
  %53 = bitcast double** %52 to i8**
  %54 = load i8*, i8** %53, align 8, !tbaa !45
  tail call fastcc void @_mm_free(i8* %54)
  %55 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 19
  %56 = bitcast double** %55 to i8**
  %57 = load i8*, i8** %56, align 8, !tbaa !46
  tail call fastcc void @_mm_free(i8* %57)
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 3
  %59 = bitcast i32** %58 to i8**
  %60 = load i8*, i8** %59, align 8, !tbaa !47
  tail call fastcc void @_mm_free(i8* %60)
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 4
  %62 = bitcast i32** %61 to i8**
  %63 = load i8*, i8** %62, align 8, !tbaa !48
  tail call fastcc void @_mm_free(i8* %63)
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 30
  %65 = bitcast double** %64 to i8**
  %66 = load i8*, i8** %65, align 8, !tbaa !49
  tail call fastcc void @_mm_free(i8* %66)
  %67 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 31
  %68 = bitcast double** %67 to i8**
  %69 = load i8*, i8** %68, align 8, !tbaa !50
  tail call fastcc void @_mm_free(i8* %69)
  %70 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 23
  %71 = bitcast double** %70 to i8**
  %72 = load i8*, i8** %71, align 8, !tbaa !51
  tail call fastcc void @_mm_free(i8* %72)
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 44
  %74 = bitcast double** %73 to i8**
  %75 = load i8*, i8** %74, align 8, !tbaa !52
  tail call fastcc void @_mm_free(i8* %75)
  %76 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 20
  %77 = bitcast double** %76 to i8**
  %78 = load i8*, i8** %77, align 8, !tbaa !53
  tail call fastcc void @_mm_free(i8* %78)
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 21
  %80 = bitcast double** %79 to i8**
  %81 = load i8*, i8** %80, align 8, !tbaa !54
  tail call fastcc void @_mm_free(i8* %81)
  %82 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 22
  %83 = bitcast double** %82 to i8**
  %84 = load i8*, i8** %83, align 8, !tbaa !55
  tail call fastcc void @_mm_free(i8* %84)
  %85 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 11
  %86 = bitcast double** %85 to i8**
  %87 = load i8*, i8** %86, align 8, !tbaa !56
  tail call fastcc void @_mm_free(i8* %87)
  %88 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 34
  %89 = bitcast double** %88 to i8**
  %90 = load i8*, i8** %89, align 8, !tbaa !57
  tail call fastcc void @_mm_free(i8* %90)
  %91 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 33
  %92 = bitcast double** %91 to i8**
  %93 = load i8*, i8** %92, align 8, !tbaa !58
  tail call fastcc void @_mm_free(i8* %93)
  %94 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 26
  %95 = bitcast double** %94 to i8**
  %96 = load i8*, i8** %95, align 8, !tbaa !59
  tail call fastcc void @_mm_free(i8* %96)
  %97 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %98 = bitcast double** %97 to i8**
  %99 = load i8*, i8** %98, align 8, !tbaa !60
  tail call fastcc void @_mm_free(i8* %99)
  %100 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 10
  %101 = bitcast double** %100 to i8**
  %102 = load i8*, i8** %101, align 8, !tbaa !61
  tail call fastcc void @_mm_free(i8* %102)
  %103 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 5
  %104 = bitcast double** %103 to i8**
  %105 = load i8*, i8** %104, align 8, !tbaa !62
  tail call fastcc void @_mm_free(i8* %105)
  %106 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 6
  %107 = bitcast double** %106 to i8**
  %108 = load i8*, i8** %107, align 8, !tbaa !63
  tail call fastcc void @_mm_free(i8* %108)
  %109 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 12
  %110 = bitcast double** %109 to i8**
  %111 = load i8*, i8** %110, align 8, !tbaa !64
  tail call fastcc void @_mm_free(i8* %111)
  %112 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 49
  %113 = bitcast double** %112 to i8**
  %114 = load i8*, i8** %113, align 8, !tbaa !65
  tail call fastcc void @_mm_free(i8* %114)
  %115 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 50
  %116 = bitcast i32** %115 to i8**
  %117 = load i8*, i8** %116, align 8, !tbaa !66
  tail call fastcc void @_mm_free(i8* %117)
  %118 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 51
  %119 = bitcast i32** %118 to i8**
  %120 = load i8*, i8** %119, align 8, !tbaa !67
  tail call fastcc void @_mm_free(i8* %120)
  %121 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 52
  %122 = bitcast double** %121 to i8**
  %123 = load i8*, i8** %122, align 8, !tbaa !68
  tail call fastcc void @_mm_free(i8* %123)
  %124 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 37
  %125 = bitcast double** %124 to i8**
  %126 = load i8*, i8** %125, align 8, !tbaa !69
  tail call fastcc void @_mm_free(i8* %126)
  %127 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 39
  %128 = bitcast double** %127 to i8**
  %129 = load i8*, i8** %128, align 8, !tbaa !70
  tail call fastcc void @_mm_free(i8* %129)
  %130 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 38
  %131 = bitcast double** %130 to i8**
  %132 = load i8*, i8** %131, align 8, !tbaa !71
  tail call fastcc void @_mm_free(i8* %132)
  %133 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 40
  %134 = bitcast double** %133 to i8**
  %135 = load i8*, i8** %134, align 8, !tbaa !72
  tail call fastcc void @_mm_free(i8* %135)
  %136 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 35
  %137 = bitcast double** %136 to i8**
  %138 = load i8*, i8** %137, align 8, !tbaa !73
  tail call fastcc void @_mm_free(i8* %138)
  %139 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 36
  %140 = bitcast double** %139 to i8**
  %141 = load i8*, i8** %140, align 8, !tbaa !74
  tail call fastcc void @_mm_free(i8* %141)
  %142 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 41
  %143 = bitcast double** %142 to i8**
  %144 = load i8*, i8** %143, align 8, !tbaa !75
  tail call fastcc void @_mm_free(i8* %144)
  %145 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 42
  %146 = bitcast double** %145 to i8**
  %147 = load i8*, i8** %146, align 8, !tbaa !76
  tail call fastcc void @_mm_free(i8* %147)
  %148 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 43
  %149 = bitcast double** %148 to i8**
  %150 = load i8*, i8** %149, align 8, !tbaa !77
  tail call fastcc void @_mm_free(i8* %150)
  %151 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 45
  %152 = bitcast double** %151 to i8**
  %153 = load i8*, i8** %152, align 8, !tbaa !78
  tail call fastcc void @_mm_free(i8* %153)
  %154 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 53
  %155 = bitcast double** %154 to i8**
  %156 = load i8*, i8** %155, align 8, !tbaa !79
  tail call fastcc void @_mm_free(i8* %156)
  %157 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 54
  %158 = bitcast double** %157 to i8**
  %159 = load i8*, i8** %158, align 8, !tbaa !80
  tail call fastcc void @_mm_free(i8* %159)
  %160 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 55
  %161 = bitcast i32** %160 to i8**
  %162 = load i8*, i8** %161, align 8, !tbaa !81
  tail call fastcc void @_mm_free(i8* %162)
  %163 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 56
  %164 = bitcast i32** %163 to i8**
  %165 = load i8*, i8** %164, align 8, !tbaa !82
  tail call fastcc void @_mm_free(i8* %165)
  %166 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 57
  %167 = bitcast i32** %166 to i8**
  %168 = load i8*, i8** %167, align 8, !tbaa !83
  tail call fastcc void @_mm_free(i8* %168)
  %169 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 58
  %170 = bitcast i32** %169 to i8**
  %171 = load i8*, i8** %170, align 8, !tbaa !84
  tail call fastcc void @_mm_free(i8* %171)
  %172 = bitcast %struct.gtc_particle_data_t* %2 to i8**
  %173 = load i8*, i8** %172, align 8, !tbaa !85
  tail call fastcc void @_mm_free(i8* %173)
  %174 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %175 = bitcast double** %174 to i8**
  %176 = load i8*, i8** %175, align 8, !tbaa !86
  tail call fastcc void @_mm_free(i8* %176)
  %177 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %178 = bitcast double** %177 to i8**
  %179 = load i8*, i8** %178, align 8, !tbaa !87
  tail call fastcc void @_mm_free(i8* %179)
  %180 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %181 = bitcast double** %180 to i8**
  %182 = load i8*, i8** %181, align 8, !tbaa !88
  tail call fastcc void @_mm_free(i8* %182)
  %183 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %184 = bitcast double** %183 to i8**
  %185 = load i8*, i8** %184, align 8, !tbaa !89
  tail call fastcc void @_mm_free(i8* %185)
  %186 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %187 = bitcast double** %186 to i8**
  %188 = load i8*, i8** %187, align 8, !tbaa !90
  tail call fastcc void @_mm_free(i8* %188)
  %189 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %190 = bitcast double** %189 to i8**
  %191 = load i8*, i8** %190, align 8, !tbaa !91
  tail call fastcc void @_mm_free(i8* %191)
  %192 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %193 = bitcast double** %192 to i8**
  %194 = load i8*, i8** %193, align 8, !tbaa !92
  tail call fastcc void @_mm_free(i8* %194)
  %195 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %196 = bitcast double** %195 to i8**
  %197 = load i8*, i8** %196, align 8, !tbaa !93
  tail call fastcc void @_mm_free(i8* %197)
  %198 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %199 = bitcast double** %198 to i8**
  %200 = load i8*, i8** %199, align 8, !tbaa !94
  tail call fastcc void @_mm_free(i8* %200)
  %201 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %202 = bitcast double** %201 to i8**
  %203 = load i8*, i8** %202, align 8, !tbaa !95
  tail call fastcc void @_mm_free(i8* %203)
  %204 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %205 = bitcast double** %204 to i8**
  %206 = load i8*, i8** %205, align 8, !tbaa !96
  tail call fastcc void @_mm_free(i8* %206)
  %207 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 12
  %208 = bitcast double** %207 to i8**
  %209 = load i8*, i8** %208, align 8, !tbaa !97
  tail call fastcc void @_mm_free(i8* %209)
  %210 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 13
  %211 = bitcast double** %210 to i8**
  %212 = load i8*, i8** %211, align 8, !tbaa !98
  tail call fastcc void @_mm_free(i8* %212)
  %213 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 14
  %214 = bitcast i32** %213 to i8**
  %215 = load i8*, i8** %214, align 8, !tbaa !99
  tail call fastcc void @_mm_free(i8* %215)
  %216 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 15
  %217 = bitcast i32** %216 to i8**
  %218 = load i8*, i8** %217, align 8, !tbaa !100
  tail call fastcc void @_mm_free(i8* %218)
  %219 = bitcast %struct.gtc_aux_particle_data_t* %1 to i8**
  %220 = load i8*, i8** %219, align 8, !tbaa !101
  tail call fastcc void @_mm_free(i8* %220)
  %221 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 1
  %222 = bitcast i32** %221 to i8**
  %223 = load i8*, i8** %222, align 8, !tbaa !102
  tail call fastcc void @_mm_free(i8* %223)
  %224 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 2
  %225 = bitcast i32** %224 to i8**
  %226 = load i8*, i8** %225, align 8, !tbaa !103
  tail call fastcc void @_mm_free(i8* %226)
  %227 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 3
  %228 = bitcast double** %227 to i8**
  %229 = load i8*, i8** %228, align 8, !tbaa !104
  tail call fastcc void @_mm_free(i8* %229)
  %230 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 4
  %231 = bitcast double** %230 to i8**
  %232 = load i8*, i8** %231, align 8, !tbaa !105
  tail call fastcc void @_mm_free(i8* %232)
  %233 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 5
  %234 = bitcast double** %233 to i8**
  %235 = load i8*, i8** %234, align 8, !tbaa !106
  tail call fastcc void @_mm_free(i8* %235)
  %236 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 6
  %237 = bitcast double** %236 to i8**
  %238 = load i8*, i8** %237, align 8, !tbaa !107
  tail call fastcc void @_mm_free(i8* %238)
  %239 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %240 = bitcast i32** %239 to i8**
  %241 = load i8*, i8** %240, align 8, !tbaa !108
  tail call fastcc void @_mm_free(i8* %241)
  %242 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 15
  %243 = bitcast double** %242 to i8**
  %244 = load i8*, i8** %243, align 8, !tbaa !109
  tail call fastcc void @_mm_free(i8* %244)
  %245 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 17
  %246 = bitcast double** %245 to i8**
  %247 = load i8*, i8** %246, align 8, !tbaa !110
  tail call fastcc void @_mm_free(i8* %247)
  %248 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 21
  %249 = bitcast i32** %248 to i8**
  %250 = load i8*, i8** %249, align 8, !tbaa !111
  tail call fastcc void @_mm_free(i8* %250)
  %251 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 22
  %252 = bitcast i32** %251 to i8**
  %253 = load i8*, i8** %252, align 8, !tbaa !112
  tail call fastcc void @_mm_free(i8* %253)
  %254 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 35
  %255 = bitcast i32** %254 to i8**
  %256 = load i8*, i8** %255, align 8, !tbaa !113
  tail call fastcc void @_mm_free(i8* %256)
  %257 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 36
  %258 = bitcast i32** %257 to i8**
  %259 = load i8*, i8** %258, align 8, !tbaa !114
  tail call fastcc void @_mm_free(i8* %259)
  %260 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 37
  %261 = bitcast i32** %260 to i8**
  %262 = load i8*, i8** %261, align 8, !tbaa !115
  tail call fastcc void @_mm_free(i8* %262)
  %263 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 39
  %264 = bitcast double** %263 to i8**
  %265 = load i8*, i8** %264, align 8, !tbaa !116
  tail call fastcc void @_mm_free(i8* %265)
  %266 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 41
  %267 = bitcast i32** %266 to i8**
  %268 = load i8*, i8** %267, align 8, !tbaa !117
  tail call fastcc void @_mm_free(i8* %268)
  %269 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 42
  %270 = bitcast i32** %269 to i8**
  %271 = load i8*, i8** %270, align 8, !tbaa !118
  tail call fastcc void @_mm_free(i8* %271)
  %272 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 43
  %273 = bitcast i32** %272 to i8**
  %274 = load i8*, i8** %273, align 8, !tbaa !119
  tail call fastcc void @_mm_free(i8* %274)
  %275 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 45
  %276 = bitcast double** %275 to i8**
  %277 = load i8*, i8** %276, align 8, !tbaa !120
  tail call fastcc void @_mm_free(i8* %277)
  %278 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %279 = bitcast double** %278 to i8**
  %280 = load i8*, i8** %279, align 8, !tbaa !121
  tail call fastcc void @_mm_free(i8* %280)
  %281 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 3
  %282 = bitcast double** %281 to i8**
  %283 = load i8*, i8** %282, align 8, !tbaa !122
  tail call fastcc void @_mm_free(i8* %283)
  %284 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 4
  %285 = bitcast double** %284 to i8**
  %286 = load i8*, i8** %285, align 8, !tbaa !123
  tail call fastcc void @_mm_free(i8* %286)
  %287 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 5
  %288 = bitcast double** %287 to i8**
  %289 = load i8*, i8** %288, align 8, !tbaa !124
  tail call fastcc void @_mm_free(i8* %289)
  %290 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 6
  %291 = bitcast double** %290 to i8**
  %292 = load i8*, i8** %291, align 8, !tbaa !125
  tail call fastcc void @_mm_free(i8* %292)
  %293 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 7
  %294 = bitcast double** %293 to i8**
  %295 = load i8*, i8** %294, align 8, !tbaa !126
  tail call fastcc void @_mm_free(i8* %295)
  %296 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 8
  %297 = bitcast double** %296 to i8**
  %298 = load i8*, i8** %297, align 8, !tbaa !127
  tail call fastcc void @_mm_free(i8* %298)
  %299 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 9
  %300 = bitcast double** %299 to i8**
  %301 = load i8*, i8** %300, align 8, !tbaa !128
  tail call fastcc void @_mm_free(i8* %301)
  %302 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 10
  %303 = bitcast double** %302 to i8**
  %304 = load i8*, i8** %303, align 8, !tbaa !129
  tail call fastcc void @_mm_free(i8* %304)
  %305 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 11
  %306 = bitcast double** %305 to i8**
  %307 = load i8*, i8** %306, align 8, !tbaa !130
  tail call fastcc void @_mm_free(i8* %307)
  %308 = bitcast %struct.gtc_diagnosis_data_t* %3 to i8**
  %309 = load i8*, i8** %308, align 8, !tbaa !131
  tail call fastcc void @_mm_free(i8* %309)
  %310 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 1
  %311 = bitcast i32** %310 to i8**
  %312 = load i8*, i8** %311, align 8, !tbaa !132
  tail call fastcc void @_mm_free(i8* %312)
  %313 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 14
  %314 = bitcast double** %313 to i8**
  %315 = load i8*, i8** %314, align 8, !tbaa !133
  tail call fastcc void @_mm_free(i8* %315)
  %316 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 15
  %317 = bitcast double** %316 to i8**
  %318 = load i8*, i8** %317, align 8, !tbaa !134
  tail call fastcc void @_mm_free(i8* %318)
  %319 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 16
  %320 = bitcast double** %319 to i8**
  %321 = load i8*, i8** %320, align 8, !tbaa !135
  tail call fastcc void @_mm_free(i8* %321)
  %322 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 17
  %323 = bitcast double** %322 to i8**
  %324 = load i8*, i8** %323, align 8, !tbaa !136
  tail call fastcc void @_mm_free(i8* %324)
  %325 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 22
  %326 = bitcast i32** %325 to i8**
  %327 = load i8*, i8** %326, align 8, !tbaa !137
  tail call fastcc void @_mm_free(i8* %327)
  %328 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 23
  %329 = bitcast i32** %328 to i8**
  %330 = load i8*, i8** %329, align 8, !tbaa !138
  tail call fastcc void @_mm_free(i8* %330)
  %331 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 24
  %332 = bitcast i32** %331 to i8**
  %333 = load i8*, i8** %332, align 8, !tbaa !139
  tail call fastcc void @_mm_free(i8* %333)
  %334 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 25
  %335 = bitcast double** %334 to i8**
  %336 = load i8*, i8** %335, align 8, !tbaa !140
  tail call fastcc void @_mm_free(i8* %336)
  %337 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 28
  %338 = bitcast i32** %337 to i8**
  %339 = load i8*, i8** %338, align 8, !tbaa !141
  tail call fastcc void @_mm_free(i8* %339)
  %340 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 29
  %341 = bitcast i32** %340 to i8**
  %342 = load i8*, i8** %341, align 8, !tbaa !142
  tail call fastcc void @_mm_free(i8* %342)
  %343 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 30
  %344 = bitcast i32** %343 to i8**
  %345 = load i8*, i8** %344, align 8, !tbaa !143
  tail call fastcc void @_mm_free(i8* %345)
  %346 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 31
  %347 = bitcast double** %346 to i8**
  %348 = load i8*, i8** %347, align 8, !tbaa !144
  tail call fastcc void @_mm_free(i8* %348)
  %349 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 3
  %350 = bitcast double** %349 to i8**
  %351 = load i8*, i8** %350, align 8, !tbaa !145
  tail call fastcc void @_mm_free(i8* %351)
  %352 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 4
  %353 = bitcast double** %352 to i8**
  %354 = load i8*, i8** %353, align 8, !tbaa !146
  tail call fastcc void @_mm_free(i8* %354)
  %355 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 5
  %356 = bitcast double** %355 to i8**
  %357 = load i8*, i8** %356, align 8, !tbaa !147
  tail call fastcc void @_mm_free(i8* %357)
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @setup(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %ntoroidal = alloca i32, align 4
  %mpsi = alloca i32, align 4
  %mzetamax = alloca i32, align 4
  %mgrid = alloca i32, align 4
  %mzeta = alloca i32, align 4
  %nproc_partd = alloca i32, align 4
  %myrank_partd = alloca i32, align 4
  %myrank_toroidal = alloca i32, align 4
  %nproc_radiald = alloca i32, align 4
  %myrank_radiald = alloca i32, align 4
  %nproc_radial_partd = alloca i32, align 4
  %myrank_radial_partd = alloca i32, align 4
  %nproc_toroidal = alloca i32, align 4
  %nbyte = alloca i32, align 4
  %nbyte1 = alloca i32, align 4
  %nbyte2 = alloca i32, align 4
  %1 = bitcast i32* %ntoroidal to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #3
  %2 = bitcast i32* %mpsi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #3
  %3 = bitcast i32* %mzetamax to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #3
  %4 = bitcast i32* %mgrid to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #3
  %5 = bitcast i32* %mzeta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #3
  %6 = bitcast i32* %nproc_partd to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #3
  %7 = bitcast i32* %myrank_partd to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #3
  %8 = bitcast i32* %myrank_toroidal to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #3
  %9 = bitcast i32* %nproc_radiald to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #3
  %10 = bitcast i32* %myrank_radiald to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #3
  %11 = bitcast i32* %nproc_radial_partd to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #3
  %12 = bitcast i32* %myrank_radial_partd to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #3
  %13 = bitcast i32* %nproc_toroidal to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #3
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %18 = bitcast i32* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 2
  %22 = load i32, i32* %21, align 8, !tbaa !148
  store i32 %22, i32* %ntoroidal, align 4, !tbaa !1
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 1
  %24 = lshr i64 %19, 32
  %25 = trunc i64 %24 to i32
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 25
  %27 = load i32, i32* %26, align 8, !tbaa !149
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 43
  %29 = load i32, i32* %28, align 8, !tbaa !150
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 17
  %31 = load i32, i32* %30, align 8, !tbaa !151
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %33 = load i32, i32* %32, align 4, !tbaa !152
  store i32 %33, i32* %mpsi, align 4, !tbaa !1
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 4
  %35 = load i32, i32* %34, align 8, !tbaa !153
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 6
  %37 = load i32, i32* %36, align 8, !tbaa !154
  store i32 %37, i32* %mzetamax, align 4, !tbaa !1
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 14
  store i32 4, i32* %38, align 4, !tbaa !155
  %39 = and i32 %31, 3
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41

; <label>:41                                      ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 487, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:42                                      ; preds = %0
  %43 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 16
  store i32 1, i32* %43, align 4, !tbaa !156
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 46
  store double 1.000000e+00, double* %44, align 8, !tbaa !157
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 47
  store double 1.000000e+00, double* %45, align 8, !tbaa !158
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 23
  store i32 1, i32* %46, align 8, !tbaa !159
  %47 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 55
  store double 1.500000e-01, double* %47, align 8, !tbaa !160
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 29
  store i32 0, i32* %48, align 8, !tbaa !161
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 50
  store double 3.580000e-01, double* %49, align 8, !tbaa !162
  %50 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  store double 1.000000e-01, double* %50, align 8, !tbaa !163
  %51 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  store double 9.000000e-01, double* %51, align 8, !tbaa !164
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 51
  store double 8.540000e-01, double* %52, align 8, !tbaa !165
  %53 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 52
  store double 0.000000e+00, double* %53, align 8, !tbaa !166
  %54 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 53
  store double 2.184000e+00, double* %54, align 8, !tbaa !167
  %55 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 71
  store double 5.000000e-01, double* %55, align 8, !tbaa !168
  %56 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 72
  store double 3.500000e-01, double* %56, align 8, !tbaa !169
  %57 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  store double 1.000000e+00, double* %57, align 8, !tbaa !170
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  store double 1.000000e+00, double* %58, align 8, !tbaa !171
  %59 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 56
  store double 6.900000e+00, double* %59, align 8, !tbaa !172
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 77
  store double 5.443658e-04, double* %60, align 8, !tbaa !173
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 75
  store double -1.000000e+00, double* %61, align 8, !tbaa !174
  %62 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 58
  store double 2.200000e+00, double* %62, align 8, !tbaa !175
  %63 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 70
  store double 1.000000e+00, double* %63, align 8, !tbaa !176
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 59
  %65 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 78
  %66 = bitcast double* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 24, i32 8, i1 false)
  %67 = load double, double* %65, align 8, !tbaa !177
  %68 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 79
  store double 1.910000e+04, double* %68, align 8, !tbaa !178
  %69 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 80
  store double 2.500000e+03, double* %69, align 8, !tbaa !179
  %70 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 81
  store double 4.600000e+13, double* %70, align 8, !tbaa !180
  %71 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 69
  store double 4.000000e+00, double* %71, align 8, !tbaa !181
  %72 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 33
  store i32 5, i32* %72, align 8, !tbaa !182
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 19
  store i32 1, i32* %73, align 8, !tbaa !183
  %74 = icmp eq i32 %27, 0
  br i1 %74, label %75, label %77

; <label>:75                                      ; preds = %42
  %76 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 18
  store i32 0, i32* %76, align 4, !tbaa !184
  br label %77

; <label>:77                                      ; preds = %75, %42
  %78 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 34
  store i32 1, i32* %78, align 4, !tbaa !185
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 23
  %80 = load i32, i32* %79, align 8, !tbaa !186
  %81 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 0
  store i32 32, i32* %81, align 8, !tbaa !187
  %82 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 1
  store i32 1, i32* %82, align 4, !tbaa !188
  %83 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 2
  store i32 1, i32* %83, align 8, !tbaa !189
  %84 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %85 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 13
  %86 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  %87 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 34
  %88 = icmp eq i32 %25, 1
  br i1 %88, label %89, label %90

; <label>:89                                      ; preds = %77
  store i32 1, i32* %ntoroidal, align 4, !tbaa !1
  br label %92

; <label>:90                                      ; preds = %77
  %91 = sdiv i32 %25, %22
  br label %92

; <label>:92                                      ; preds = %90, %89
  %93 = phi i32 [ 1, %89 ], [ %22, %90 ]
  %npartdom.0 = phi i32 [ 1, %89 ], [ %91, %90 ]
  %94 = icmp eq i32 %20, 0
  br i1 %94, label %95, label %98

; <label>:95                                      ; preds = %92
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %97 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.18, i64 0, i64 0), i32 %npartdom.0, i32 %93, i32 1)
  br label %98

; <label>:98                                      ; preds = %95, %92
  %99 = icmp sgt i32 %npartdom.0, 0
  br i1 %99, label %101, label %100

; <label>:100                                     ; preds = %98
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 588, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:101                                     ; preds = %98
  %102 = srem i32 %37, %93
  %103 = sub i32 %37, %102
  store i32 %103, i32* %mzetamax, align 4, !tbaa !1
  %104 = icmp eq i32 %37, %102
  br i1 %104, label %105, label %106

; <label>:105                                     ; preds = %101
  store i32 %93, i32* %mzetamax, align 4, !tbaa !1
  br label %106

; <label>:106                                     ; preds = %105, %101
  %107 = phi i32 [ %93, %105 ], [ %103, %101 ]
  %108 = sdiv i32 %33, 2
  %109 = shl nsw i32 %108, 1
  store i32 %109, i32* %mpsi, align 4, !tbaa !1
  br i1 %94, label %110, label %111

; <label>:110                                     ; preds = %106
  %puts69 = tail call i32 @puts(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @str.140, i64 0, i64 0))
  br label %111

; <label>:111                                     ; preds = %110, %106
  %112 = srem i32 %20, %npartdom.0
  %113 = sdiv i32 %20, %npartdom.0
  %114 = srem i32 %112, %80
  %115 = sdiv i32 %112, %80
  %116 = sdiv i32 %107, %93
  store i32 %116, i32* %mzeta, align 4, !tbaa !1
  %117 = sitofp i32 %113 to double
  %118 = fmul double %117, 0x401921FB54442D18
  %119 = sitofp i32 %93 to double
  %120 = fdiv double %118, %119
  %121 = add nsw i32 %113, 1
  %122 = sitofp i32 %121 to double
  %123 = fmul double %122, 0x401921FB54442D18
  %124 = fdiv double %123, %119
  %125 = fsub double %124, %120
  %126 = sitofp i32 %116 to double
  %127 = fdiv double %125, %126
  %128 = tail call i32 @MPI_Comm_split(i32 1140850688, i32 %113, i32 %112, i32* %85) #3
  %129 = tail call i32 @MPI_Comm_split(i32 1140850688, i32 %112, i32 %113, i32* %84) #3
  %130 = load i32, i32* %85, align 4, !tbaa !1
  %131 = call i32 @MPI_Comm_size(i32 %130, i32* nonnull %nproc_partd) #3
  %132 = load i32, i32* %85, align 4, !tbaa !1
  %133 = call i32 @MPI_Comm_rank(i32 %132, i32* nonnull %myrank_partd) #3
  %134 = load i32, i32* %84, align 4, !tbaa !1
  %135 = call i32 @MPI_Comm_size(i32 %134, i32* nonnull %nproc_toroidal) #3
  %136 = load i32, i32* %84, align 4, !tbaa !1
  %137 = call i32 @MPI_Comm_rank(i32 %136, i32* nonnull %myrank_toroidal) #3
  %138 = load i32, i32* %85, align 4, !tbaa !1
  %139 = call i32 @MPI_Comm_split(i32 %138, i32 %115, i32 %114, i32* %87) #3
  %140 = load i32, i32* %85, align 4, !tbaa !1
  %141 = call i32 @MPI_Comm_split(i32 %140, i32 %114, i32 %115, i32* %86) #3
  %142 = load i32, i32* %87, align 4, !tbaa !1
  %143 = call i32 @MPI_Comm_size(i32 %142, i32* nonnull %nproc_radial_partd) #3
  %144 = load i32, i32* %87, align 4, !tbaa !1
  %145 = call i32 @MPI_Comm_rank(i32 %144, i32* nonnull %myrank_radial_partd) #3
  %146 = load i32, i32* %86, align 4, !tbaa !1
  %147 = call i32 @MPI_Comm_size(i32 %146, i32* nonnull %nproc_radiald) #3
  %148 = load i32, i32* %86, align 4, !tbaa !1
  %149 = call i32 @MPI_Comm_rank(i32 %148, i32* nonnull %myrank_radiald) #3
  %150 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br i1 %94, label %151, label %155

; <label>:151                                     ; preds = %111
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %153 = load i32, i32* %nproc_radial_partd, align 4, !tbaa !1
  %154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %152, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.21, i64 0, i64 0), i32 %150, i32 %153)
  br label %155

; <label>:155                                     ; preds = %151, %111
  %156 = load i32, i32* %myrank_toroidal, align 4, !tbaa !1
  %157 = add nsw i32 %156, -1
  %158 = add nsw i32 %157, %93
  %159 = srem i32 %158, %93
  %160 = add nsw i32 %156, 1
  %161 = srem i32 %160, %93
  %162 = load i32, i32* %myrank_partd, align 4, !tbaa !1
  %163 = load i32, i32* %nproc_radial_partd, align 4, !tbaa !1
  %164 = sub nsw i32 %162, %163
  %165 = icmp slt i32 %164, 0
  %166 = load i32, i32* %nproc_partd, align 4, !tbaa !1
  %167 = select i1 %165, i32 %166, i32 0
  %left_radial_pe.0 = add nsw i32 %167, %164
  %168 = add nsw i32 %163, %162
  %169 = icmp slt i32 %168, %166
  %170 = select i1 %169, i32 0, i32 %166
  %.70 = sub nsw i32 %168, %170
  %171 = fdiv double 0x3FD116C90C101572, %67
  %172 = fmul double %171, 6.900000e+00
  %173 = fdiv double 1.500000e-01, %172
  %174 = load i32, i32* %mpsi, align 4, !tbaa !1
  %175 = add nsw i32 %174, 1
  %176 = sext i32 %175 to i64
  %177 = shl nsw i64 %176, 3
  %178 = call fastcc i8* @_mm_malloc(i64 %177)
  %179 = bitcast i8* %178 to double*
  %180 = load i32, i32* %mpsi, align 4, !tbaa !1
  %181 = add nsw i32 %180, 1
  %182 = sext i32 %181 to i64
  %183 = shl nsw i64 %182, 2
  %184 = call fastcc i8* @_mm_malloc(i64 %183)
  %185 = bitcast i8* %184 to i32*
  %186 = load i32, i32* %mpsi, align 4, !tbaa !1
  %187 = add nsw i32 %186, 1
  %188 = sext i32 %187 to i64
  %189 = shl nsw i64 %188, 2
  %190 = call fastcc i8* @_mm_malloc(i64 %189)
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %mpsi, align 4, !tbaa !1
  %193 = add nsw i32 %192, 1
  %194 = sext i32 %193 to i64
  %195 = shl nsw i64 %194, 3
  %196 = call fastcc i8* @_mm_malloc(i64 %195)
  %197 = bitcast i8* %196 to double*
  %198 = load i32, i32* %mpsi, align 4, !tbaa !1
  %199 = add nsw i32 %198, 1
  %200 = sext i32 %199 to i64
  %201 = shl nsw i64 %200, 3
  %202 = call fastcc i8* @_mm_malloc(i64 %201)
  %203 = bitcast i8* %202 to double*
  %204 = load i32, i32* %mpsi, align 4, !tbaa !1
  %205 = add nsw i32 %204, 1
  %206 = sext i32 %205 to i64
  %207 = shl nsw i64 %206, 3
  %208 = call fastcc i8* @_mm_malloc(i64 %207)
  %209 = bitcast i8* %208 to double*
  %210 = load i32, i32* %mpsi, align 4, !tbaa !1
  %211 = add nsw i32 %210, 1
  %212 = sext i32 %211 to i64
  %213 = shl nsw i64 %212, 2
  %214 = call fastcc i8* @_mm_malloc(i64 %213)
  %215 = bitcast i8* %214 to i32*
  %216 = load i32, i32* %mpsi, align 4, !tbaa !1
  %217 = add nsw i32 %216, 1
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 3
  %220 = call fastcc i8* @_mm_malloc(i64 %219)
  %221 = bitcast i8* %220 to double*
  %222 = load i32, i32* %mpsi, align 4, !tbaa !1
  %223 = add nsw i32 %222, 1
  %224 = sext i32 %223 to i64
  %225 = shl nsw i64 %224, 3
  %226 = call fastcc i8* @_mm_malloc(i64 %225)
  %227 = load i32, i32* %mpsi, align 4, !tbaa !1
  %228 = add nsw i32 %227, 1
  %229 = sext i32 %228 to i64
  %230 = shl nsw i64 %229, 3
  %231 = call fastcc i8* @_mm_malloc(i64 %230)
  %232 = bitcast i8* %231 to double*
  %233 = load i32, i32* %mpsi, align 4, !tbaa !1
  %234 = add nsw i32 %233, 1
  %235 = sext i32 %234 to i64
  %236 = shl nsw i64 %235, 3
  %237 = call fastcc i8* @_mm_malloc(i64 %236)
  %238 = bitcast i8* %237 to double*
  %239 = load i32, i32* %mpsi, align 4, !tbaa !1
  %240 = add nsw i32 %239, 1
  %241 = sext i32 %240 to i64
  %242 = shl nsw i64 %241, 3
  %243 = call fastcc i8* @_mm_malloc(i64 %242)
  %244 = load i32, i32* %mpsi, align 4, !tbaa !1
  %245 = add nsw i32 %244, 1
  %246 = sext i32 %245 to i64
  %247 = shl nsw i64 %246, 3
  %248 = call fastcc i8* @_mm_malloc(i64 %247)
  %249 = bitcast i8* %248 to double*
  %250 = load i32, i32* %mpsi, align 4, !tbaa !1
  %251 = add nsw i32 %250, 1
  %252 = sext i32 %251 to i64
  %253 = shl nsw i64 %252, 3
  %254 = call fastcc i8* @_mm_malloc(i64 %253)
  %255 = load i32, i32* %mpsi, align 4, !tbaa !1
  %256 = add nsw i32 %255, 1
  %257 = sext i32 %256 to i64
  %258 = shl nsw i64 %257, 3
  %259 = call fastcc i8* @_mm_malloc(i64 %258)
  %260 = bitcast i8* %259 to double*
  %261 = call fastcc i8* @_mm_malloc(i64 40)
  %262 = bitcast i8* %261 to double*
  %263 = call fastcc i8* @_mm_malloc(i64 40)
  %264 = bitcast i8* %263 to double*
  %265 = load i32, i32* %mpsi, align 4, !tbaa !1
  %266 = add nsw i32 %265, 1
  %267 = sext i32 %266 to i64
  %268 = shl nsw i64 %267, 3
  %269 = call fastcc i8* @_mm_malloc(i64 %268)
  %270 = bitcast i8* %269 to double*
  %271 = load i32, i32* %mpsi, align 4, !tbaa !1
  %272 = add nsw i32 %271, 1
  %273 = sext i32 %272 to i64
  %274 = shl nsw i64 %273, 3
  %275 = call fastcc i8* @_mm_malloc(i64 %274)
  %276 = bitcast i8* %275 to double*
  %277 = load i32, i32* %mpsi, align 4, !tbaa !1
  %278 = add nsw i32 %277, 1
  %279 = sext i32 %278 to i64
  %280 = shl nsw i64 %279, 3
  %281 = call fastcc i8* @_mm_malloc(i64 %280)
  %282 = bitcast i8* %281 to double*
  %283 = load i32, i32* %mpsi, align 4, !tbaa !1
  %284 = sitofp i32 %283 to double
  %285 = fdiv double 2.864000e-01, %284
  %286 = sitofp i32 %35 to double
  %287 = fdiv double 0x4000320ECEC65A17, %286
  %288 = icmp slt i32 %283, 0
  br i1 %288, label %.preheader146thread-pre-split, label %.lr.ph436.preheader

.lr.ph436.preheader:                              ; preds = %155
  br label %.lr.ph436

.preheader146thread-pre-split:                    ; preds = %155
  br label %.preheader146

.preheader146.loopexit:                           ; preds = %.lr.ph436
  br label %.preheader146

.preheader146:                                    ; preds = %.preheader146.loopexit, %.preheader146thread-pre-split
  %289 = phi i32 [ %283, %.preheader146thread-pre-split ], [ %341, %.preheader146.loopexit ]
  %290 = icmp slt i32 %289, 0
  br i1 %290, label %._crit_edge433, label %.lr.ph432

.lr.ph432:                                        ; preds = %.preheader146
  %291 = sext i32 %289 to i64
  br label %344

.lr.ph436:                                        ; preds = %.lr.ph436.preheader, %.lr.ph436
  %indvars.iv615 = phi i64 [ %indvars.iv.next616, %.lr.ph436 ], [ 0, %.lr.ph436.preheader ]
  %292 = trunc i64 %indvars.iv615 to i32
  %293 = sitofp i32 %292 to double
  %294 = fmul double %285, %293
  %295 = fadd double %294, 3.580000e-02
  %296 = fmul double %295, 0x400921FB54442D18
  %297 = fdiv double %296, %287
  %298 = fadd double %297, 5.000000e-01
  %299 = fptosi double %298 to i32
  %300 = shl nsw i32 %299, 1
  %301 = icmp slt i32 %300, %35
  %302 = select i1 %301, i32 %300, i32 %35
  %303 = icmp sgt i32 %302, 2
  %304 = select i1 %303, i32 %302, i32 2
  %305 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv615
  store i32 %304, i32* %305, align 4, !tbaa !1
  %306 = sitofp i32 %304 to double
  %307 = fdiv double 0x401921FB54442D18, %306
  %308 = getelementptr inbounds double, double* %197, i64 %indvars.iv615
  store double %307, double* %308, align 8, !tbaa !190
  %309 = fdiv double 5.000000e-01, %307
  %310 = getelementptr inbounds double, double* %282, i64 %indvars.iv615
  store double %309, double* %310, align 8, !tbaa !190
  %311 = fmul double %295, 0.000000e+00
  %312 = fdiv double %311, 3.580000e-01
  %313 = fadd double %312, 8.540000e-01
  %314 = fmul double %295, 2.184000e+00
  %315 = fmul double %295, %314
  %316 = fdiv double %315, 1.281640e-01
  %317 = fadd double %313, %316
  %318 = load i32, i32* %305, align 4, !tbaa !1
  %319 = sitofp i32 %318 to double
  %320 = fdiv double %319, %317
  %321 = fadd double %320, 5.000000e-01
  %322 = fptosi double %321 to i32
  %323 = getelementptr inbounds i32, i32* %185, i64 %indvars.iv615
  store i32 %322, i32* %323, align 4, !tbaa !1
  %324 = load i32, i32* %305, align 4, !tbaa !1
  %325 = sitofp i32 %324 to double
  %326 = sitofp i32 %322 to double
  %327 = fdiv double %325, %326
  %328 = getelementptr inbounds double, double* %179, i64 %indvars.iv615
  %329 = fdiv double 1.000000e+00, %327
  store double %329, double* %328, align 8, !tbaa !190
  %330 = load i32, i32* %323, align 4, !tbaa !1
  %331 = load i32, i32* %305, align 4, !tbaa !1
  %332 = srem i32 %330, %331
  store i32 %332, i32* %323, align 4, !tbaa !1
  %333 = getelementptr inbounds double, double* %203, i64 %indvars.iv615
  store double 1.000000e+00, double* %333, align 8, !tbaa !190
  %334 = getelementptr inbounds double, double* %249, i64 %indvars.iv615
  store double 0.000000e+00, double* %334, align 8, !tbaa !190
  %335 = getelementptr inbounds double, double* %209, i64 %indvars.iv615
  store double 1.000000e+00, double* %335, align 8, !tbaa !190
  %336 = getelementptr inbounds double, double* %270, i64 %indvars.iv615
  store double 0.000000e+00, double* %336, align 8, !tbaa !190
  %337 = getelementptr inbounds double, double* %276, i64 %indvars.iv615
  store double 0.000000e+00, double* %337, align 8, !tbaa !190
  %338 = getelementptr inbounds double, double* %238, i64 %indvars.iv615
  store double 0.000000e+00, double* %338, align 8, !tbaa !190
  %339 = getelementptr inbounds double, double* %232, i64 %indvars.iv615
  store double 0.000000e+00, double* %339, align 8, !tbaa !190
  %340 = getelementptr inbounds double, double* %221, i64 %indvars.iv615
  store double 0.000000e+00, double* %340, align 8, !tbaa !190
  %indvars.iv.next616 = add nuw nsw i64 %indvars.iv615, 1
  %341 = load i32, i32* %mpsi, align 4, !tbaa !1
  %342 = sext i32 %341 to i64
  %343 = icmp slt i64 %indvars.iv615, %342
  br i1 %343, label %.lr.ph436, label %.preheader146.loopexit

; <label>:344                                     ; preds = %344, %.lr.ph432
  %indvars.iv613 = phi i64 [ %indvars.iv.next614, %344 ], [ 0, %.lr.ph432 ]
  %345 = getelementptr inbounds double, double* %270, i64 %indvars.iv613
  store double 1.000000e+00, double* %345, align 8, !tbaa !190
  %346 = getelementptr inbounds double, double* %276, i64 %indvars.iv613
  store double 0.000000e+00, double* %346, align 8, !tbaa !190
  %347 = load double, double* %345, align 8, !tbaa !190
  %348 = getelementptr inbounds double, double* %203, i64 %indvars.iv613
  %349 = load double, double* %348, align 8, !tbaa !190
  %350 = fmul double %347, %349
  %351 = fmul double %171, %350
  %352 = fmul double %171, %351
  %353 = fdiv double 1.000000e+00, %352
  store double %353, double* %345, align 8, !tbaa !190
  %indvars.iv.next614 = add nuw nsw i64 %indvars.iv613, 1
  %354 = icmp slt i64 %indvars.iv613, %291
  br i1 %354, label %344, label %._crit_edge433.loopexit

._crit_edge433.loopexit:                          ; preds = %344
  br label %._crit_edge433

._crit_edge433:                                   ; preds = %._crit_edge433.loopexit, %.preheader146
  %355 = load i32, i32* %mzetamax, align 4, !tbaa !1
  %356 = srem i32 %35, %355
  br label %357

; <label>:357                                     ; preds = %357, %._crit_edge433
  %indvars.iv610 = phi i64 [ 0, %._crit_edge433 ], [ %indvars.iv.next611, %357 ]
  %358 = getelementptr inbounds double, double* %262, i64 %indvars.iv610
  store double 0.000000e+00, double* %358, align 8, !tbaa !190
  %359 = getelementptr inbounds double, double* %264, i64 %indvars.iv610
  store double 0.000000e+00, double* %359, align 8, !tbaa !190
  %indvars.iv.next611 = add nuw nsw i64 %indvars.iv610, 1
  %exitcond612 = icmp eq i64 %indvars.iv.next611, 5
  br i1 %exitcond612, label %360, label %357

; <label>:360                                     ; preds = %357
  %361 = sub i32 %35, %356
  store i32 1, i32* %215, align 4, !tbaa !1
  %362 = load i32, i32* %mpsi, align 4, !tbaa !1
  %363 = icmp slt i32 %362, 1
  br i1 %363, label %._crit_edge429, label %.lr.ph428.preheader

.lr.ph428.preheader:                              ; preds = %360
  br label %.lr.ph428

.lr.ph428:                                        ; preds = %.lr.ph428.preheader, %.lr.ph428
  %364 = phi i32 [ %370, %.lr.ph428 ], [ 1, %.lr.ph428.preheader ]
  %indvars.iv608 = phi i64 [ %indvars.iv.next609, %.lr.ph428 ], [ 1, %.lr.ph428.preheader ]
  %365 = add nsw i64 %indvars.iv608, -1
  %366 = getelementptr inbounds i32, i32* %215, i64 %365
  %367 = getelementptr inbounds i32, i32* %191, i64 %365
  %368 = load i32, i32* %367, align 4, !tbaa !1
  %369 = add i32 %364, 1
  %370 = add i32 %369, %368
  %371 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv608
  store i32 %370, i32* %371, align 4, !tbaa !1
  %indvars.iv.next609 = add nuw nsw i64 %indvars.iv608, 1
  %372 = load i32, i32* %mpsi, align 4, !tbaa !1
  %373 = sext i32 %372 to i64
  %374 = icmp slt i64 %indvars.iv608, %373
  br i1 %374, label %.lr.ph428, label %._crit_edge429.loopexit

._crit_edge429.loopexit:                          ; preds = %.lr.ph428
  br label %._crit_edge429

._crit_edge429:                                   ; preds = %._crit_edge429.loopexit, %360
  %375 = phi i32 [ %362, %360 ], [ %372, %._crit_edge429.loopexit ]
  store i32 0, i32* %mgrid, align 4, !tbaa !1
  %376 = icmp slt i32 %375, 0
  br i1 %376, label %385, label %.lr.ph423

.lr.ph423:                                        ; preds = %._crit_edge429
  %377 = sext i32 %375 to i64
  br label %378

; <label>:378                                     ; preds = %378, %.lr.ph423
  %indvars.iv606 = phi i64 [ %indvars.iv.next607, %378 ], [ 0, %.lr.ph423 ]
  %379 = phi i32 [ %383, %378 ], [ 0, %.lr.ph423 ]
  %380 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv606
  %381 = load i32, i32* %380, align 4, !tbaa !1
  %382 = add nsw i32 %381, 1
  %383 = add nsw i32 %382, %379
  %indvars.iv.next607 = add nuw nsw i64 %indvars.iv606, 1
  %384 = icmp slt i64 %indvars.iv606, %377
  br i1 %384, label %378, label %._crit_edge424

._crit_edge424:                                   ; preds = %378
  store i32 %383, i32* %mgrid, align 4, !tbaa !1
  br label %385

; <label>:385                                     ; preds = %._crit_edge424, %._crit_edge429
  %386 = phi i32 [ %383, %._crit_edge424 ], [ 0, %._crit_edge429 ]
  %387 = sub nsw i32 %386, %375
  %388 = mul nsw i32 %387, %29
  %389 = load i32, i32* %mzeta, align 4, !tbaa !1
  %390 = mul nsw i32 %388, %389
  %391 = sdiv i32 %390, %npartdom.0
  %392 = shl i32 %391, 1
  br i1 %94, label %393, label %402

; <label>:393                                     ; preds = %385
  %394 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %395 = sext i32 %391 to i64
  %396 = sext i32 %npartdom.0 to i64
  %397 = load i32, i32* %ntoroidal, align 4, !tbaa !1
  %398 = sext i32 %397 to i64
  %399 = mul nsw i64 %395, %396
  %400 = mul i64 %399, %398
  %401 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %394, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str.22, i64 0, i64 0), i32 %391, i64 %400, i32 %386, i32 %355)
  br label %402

; <label>:402                                     ; preds = %393, %385
  %403 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %404 = sitofp i32 %403 to double
  %405 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %406 = sitofp i32 %405 to double
  %407 = fdiv double %404, %406
  %408 = fmul double %407, 0x3FBA3F7C16D1D39C
  %409 = fadd double %408, 1.281640e-03
  %410 = call double @sqrt(double %409) #3
  %411 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %412 = add nsw i32 %411, 1
  %413 = sitofp i32 %412 to double
  %414 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %415 = sitofp i32 %414 to double
  %416 = fdiv double %413, %415
  %417 = fmul double %416, 0x3FBA3F7C16D1D39C
  %418 = fadd double %417, 1.281640e-03
  %419 = call double @sqrt(double %418) #3
  %420 = load i32, i32* %mpsi, align 4, !tbaa !1
  %421 = icmp slt i32 %420, 0
  br i1 %421, label %._crit_edge415.thread, label %.lr.ph414

.lr.ph414:                                        ; preds = %402
  br label %422

; <label>:422                                     ; preds = %433, %.lr.ph414
  %ipsi_in.0412 = phi i32 [ undef, %.lr.ph414 ], [ %ipsi_in.2, %433 ]
  %ipsi_out.0411 = phi i32 [ undef, %.lr.ph414 ], [ %ipsi_out.1, %433 ]
  %a_valid_in.0410 = phi double [ -1.000000e+00, %.lr.ph414 ], [ %a_valid_in.1, %433 ]
  %a_valid_out.0409 = phi double [ -1.000000e+00, %.lr.ph414 ], [ %a_valid_out.1, %433 ]
  %i.5408 = phi i32 [ 0, %.lr.ph414 ], [ %437, %433 ]
  %423 = sitofp i32 %i.5408 to double
  %424 = fmul double %285, %423
  %425 = fadd double %424, 3.580000e-02
  %426 = fsub double %425, %410
  %427 = fcmp ogt double %426, -1.000000e-15
  %428 = fcmp oeq double %a_valid_in.0410, -1.000000e+00
  %or.cond = and i1 %428, %427
  br i1 %or.cond, label %429, label %433

; <label>:429                                     ; preds = %422
  %430 = icmp ne i32 %i.5408, 0
  %431 = add nsw i32 %i.5408, -1
  %.i.5 = select i1 %430, i32 %431, i32 0
  %432 = fsub double %425, %285
  %.83 = select i1 %430, double %432, double %425
  br label %433

; <label>:433                                     ; preds = %429, %422
  %a_valid_in.1 = phi double [ %a_valid_in.0410, %422 ], [ %.83, %429 ]
  %ipsi_in.2 = phi i32 [ %ipsi_in.0412, %422 ], [ %.i.5, %429 ]
  %434 = fcmp oeq double %a_valid_out.0409, -1.000000e+00
  %435 = fsub double %425, %419
  %436 = fcmp ogt double %435, -1.000000e-15
  %or.cond72 = and i1 %434, %436
  %a_valid_out.1 = select i1 %or.cond72, double %425, double %a_valid_out.0409
  %ipsi_out.1 = select i1 %or.cond72, i32 %i.5408, i32 %ipsi_out.0411
  %437 = add nuw nsw i32 %i.5408, 1
  %438 = icmp slt i32 %i.5408, %420
  br i1 %438, label %422, label %._crit_edge415

._crit_edge415:                                   ; preds = %433
  %439 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %440 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %441 = add nsw i32 %440, -1
  %442 = icmp ne i32 %439, %441
  %443 = icmp eq i32 %ipsi_out.1, %420
  %or.cond73 = or i1 %443, %442
  br i1 %or.cond73, label %._crit_edge415.thread, label %444

; <label>:444                                     ; preds = %._crit_edge415
  %445 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23, i64 0, i64 0), i32 %ipsi_out.1, i32 %420)
  %446 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  %.pre = load i32, i32* %mpsi, align 4, !tbaa !1
  br label %._crit_edge415.thread

._crit_edge415.thread:                            ; preds = %444, %._crit_edge415, %402
  %447 = phi i32 [ %420, %._crit_edge415 ], [ %.pre, %444 ], [ %420, %402 ]
  %a_valid_out.0.lcssa629 = phi double [ %a_valid_out.1, %._crit_edge415 ], [ %a_valid_out.1, %444 ], [ -1.000000e+00, %402 ]
  %a_valid_in.0.lcssa628 = phi double [ %a_valid_in.1, %._crit_edge415 ], [ %a_valid_in.1, %444 ], [ -1.000000e+00, %402 ]
  %ipsi_out.0.lcssa627 = phi i32 [ %ipsi_out.1, %._crit_edge415 ], [ %ipsi_out.1, %444 ], [ undef, %402 ]
  %ipsi_in.0.lcssa626 = phi i32 [ %ipsi_in.2, %._crit_edge415 ], [ %ipsi_in.2, %444 ], [ undef, %402 ]
  %448 = add nsw i32 %447, 1
  %449 = sext i32 %448 to i64
  %450 = shl nsw i64 %449, 2
  %451 = call fastcc i8* @_mm_malloc(i64 %450)
  %452 = bitcast i8* %451 to i32*
  %453 = load i32, i32* %mpsi, align 4, !tbaa !1
  %454 = add nsw i32 %453, 1
  %455 = sext i32 %454 to i64
  %456 = shl nsw i64 %455, 2
  %457 = call fastcc i8* @_mm_malloc(i64 %456)
  %458 = bitcast i8* %457 to i32*
  %459 = load i32, i32* %mpsi, align 4, !tbaa !1
  %460 = icmp slt i32 %459, 0
  br i1 %460, label %._crit_edge406, label %.lr.ph405.preheader

.lr.ph405.preheader:                              ; preds = %._crit_edge415.thread
  %461 = sext i32 %ipsi_out.0.lcssa627 to i64
  %462 = sext i32 %ipsi_in.0.lcssa626 to i64
  br label %.lr.ph405

.lr.ph405:                                        ; preds = %470, %.lr.ph405.preheader
  %indvars.iv604 = phi i64 [ 0, %.lr.ph405.preheader ], [ %indvars.iv.next605, %470 ]
  %463 = load i32, i32* %nproc_partd, align 4, !tbaa !1
  %464 = add nsw i32 %463, 1
  %465 = getelementptr inbounds i32, i32* %458, i64 %indvars.iv604
  store i32 %464, i32* %465, align 4, !tbaa !1
  %466 = icmp slt i64 %indvars.iv604, %462
  %467 = icmp sgt i64 %indvars.iv604, %461
  %or.cond74 = or i1 %466, %467
  br i1 %or.cond74, label %470, label %468

; <label>:468                                     ; preds = %.lr.ph405
  %469 = load i32, i32* %myrank_partd, align 4, !tbaa !1
  store i32 %469, i32* %465, align 4, !tbaa !1
  br label %470

; <label>:470                                     ; preds = %468, %.lr.ph405
  %indvars.iv.next605 = add nuw nsw i64 %indvars.iv604, 1
  %471 = load i32, i32* %mpsi, align 4, !tbaa !1
  %472 = sext i32 %471 to i64
  %473 = icmp slt i64 %indvars.iv604, %472
  br i1 %473, label %.lr.ph405, label %._crit_edge406.loopexit

._crit_edge406.loopexit:                          ; preds = %470
  br label %._crit_edge406

._crit_edge406:                                   ; preds = %._crit_edge406.loopexit, %._crit_edge415.thread
  %.lcssa154 = phi i32 [ %459, %._crit_edge415.thread ], [ %471, %._crit_edge406.loopexit ]
  %474 = add nsw i32 %.lcssa154, 1
  %475 = load i32, i32* %85, align 4, !tbaa !1
  %476 = call i32 @MPI_Allreduce(i8* %457, i8* %451, i32 %474, i32 1275069445, i32 1476395010, i32 %475) #3
  %477 = icmp slt i32 %ipsi_out.0.lcssa627, %ipsi_in.0.lcssa626
  br i1 %477, label %._crit_edge400, label %.lr.ph399

.lr.ph399:                                        ; preds = %._crit_edge406
  %478 = load i32, i32* %myrank_partd, align 4
  %479 = sext i32 %ipsi_in.0.lcssa626 to i64
  %480 = sext i32 %ipsi_out.0.lcssa627 to i64
  br label %481

; <label>:481                                     ; preds = %481, %.lr.ph399
  %indvars.iv602 = phi i64 [ %indvars.iv.next603, %481 ], [ %479, %.lr.ph399 ]
  %ipsi_nover_in.0397 = phi i32 [ %i.7.ipsi_nover_in.0, %481 ], [ -1, %.lr.ph399 ]
  %ipsi_nover_out.0396 = phi i32 [ %ipsi_nover_out.1, %481 ], [ -1, %.lr.ph399 ]
  %482 = getelementptr inbounds i32, i32* %452, i64 %indvars.iv602
  %483 = load i32, i32* %482, align 4, !tbaa !1
  %484 = icmp eq i32 %483, %478
  %485 = icmp eq i32 %ipsi_nover_in.0397, -1
  %or.cond28 = and i1 %485, %484
  %486 = trunc i64 %indvars.iv602 to i32
  %i.7.ipsi_nover_in.0 = select i1 %or.cond28, i32 %486, i32 %ipsi_nover_in.0397
  %487 = icmp ne i32 %483, %478
  %488 = icmp ne i32 %i.7.ipsi_nover_in.0, -1
  %or.cond30 = and i1 %487, %488
  %489 = icmp eq i32 %ipsi_nover_out.0396, -1
  %or.cond32 = and i1 %489, %or.cond30
  %490 = add i64 %indvars.iv602, 4294967295
  %491 = trunc i64 %490 to i32
  %ipsi_nover_out.1 = select i1 %or.cond32, i32 %491, i32 %ipsi_nover_out.0396
  %492 = icmp slt i64 %indvars.iv602, %480
  %indvars.iv.next603 = add nsw i64 %indvars.iv602, 1
  br i1 %492, label %481, label %._crit_edge400.loopexit

._crit_edge400.loopexit:                          ; preds = %481
  br label %._crit_edge400

._crit_edge400:                                   ; preds = %._crit_edge400.loopexit, %._crit_edge406
  %ipsi_nover_in.0.lcssa = phi i32 [ -1, %._crit_edge406 ], [ %i.7.ipsi_nover_in.0, %._crit_edge400.loopexit ]
  %ipsi_nover_out.0.lcssa = phi i32 [ -1, %._crit_edge406 ], [ %ipsi_nover_out.1, %._crit_edge400.loopexit ]
  %493 = icmp eq i32 %ipsi_nover_out.0.lcssa, -1
  %ipsi_out.0.ipsi_nover_out.0 = select i1 %493, i32 %ipsi_out.0.lcssa627, i32 %ipsi_nover_out.0.lcssa
  %494 = icmp eq i32 %ipsi_nover_in.0.lcssa, -1
  %ipsi_nover_out.3 = select i1 %494, i32 0, i32 %ipsi_out.0.ipsi_nover_out.0
  %ipsi_nover_in.2 = select i1 %494, i32 1, i32 %ipsi_nover_in.0.lcssa
  %495 = sext i32 %ipsi_nover_in.2 to i64
  %496 = getelementptr inbounds i32, i32* %215, i64 %495
  %497 = load i32, i32* %496, align 4, !tbaa !1
  %498 = sext i32 %ipsi_nover_out.3 to i64
  %499 = getelementptr inbounds i32, i32* %215, i64 %498
  %500 = load i32, i32* %499, align 4, !tbaa !1
  %501 = getelementptr inbounds i32, i32* %191, i64 %498
  %502 = load i32, i32* %501, align 4, !tbaa !1
  %503 = add nsw i32 %502, %500
  %504 = load i32, i32* %mpsi, align 4, !tbaa !1
  %505 = add nsw i32 %504, 1
  %506 = sext i32 %505 to i64
  %507 = shl nsw i64 %506, 2
  %508 = call fastcc i8* @_mm_malloc(i64 %507)
  %509 = bitcast i8* %508 to i32*
  %510 = load i32, i32* %mpsi, align 4, !tbaa !1
  %511 = add nsw i32 %510, 1
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 2
  %514 = call fastcc i8* @_mm_malloc(i64 %513)
  %515 = bitcast i8* %514 to i32*
  %516 = load i32, i32* %mpsi, align 4, !tbaa !1
  %517 = icmp slt i32 %516, 0
  br i1 %517, label %._crit_edge393, label %.lr.ph392.preheader

.lr.ph392.preheader:                              ; preds = %._crit_edge400
  br label %.lr.ph392

.lr.ph392:                                        ; preds = %.lr.ph392, %.lr.ph392.preheader
  %indvars.iv600 = phi i64 [ 0, %.lr.ph392.preheader ], [ %indvars.iv.next601, %.lr.ph392 ]
  %518 = getelementptr inbounds i32, i32* %509, i64 %indvars.iv600
  %519 = icmp slt i64 %indvars.iv600, %495
  %520 = icmp sgt i64 %indvars.iv600, %498
  %or.cond75 = or i1 %519, %520
  %521 = zext i1 %or.cond75 to i32
  %.84 = xor i32 %521, 1
  store i32 %.84, i32* %518, align 4
  %indvars.iv.next601 = add nuw nsw i64 %indvars.iv600, 1
  %522 = load i32, i32* %mpsi, align 4, !tbaa !1
  %523 = sext i32 %522 to i64
  %524 = icmp slt i64 %indvars.iv600, %523
  br i1 %524, label %.lr.ph392, label %._crit_edge393.loopexit

._crit_edge393.loopexit:                          ; preds = %.lr.ph392
  br label %._crit_edge393

._crit_edge393:                                   ; preds = %._crit_edge393.loopexit, %._crit_edge400
  %.lcssa153 = phi i32 [ %516, %._crit_edge400 ], [ %522, %._crit_edge393.loopexit ]
  %525 = add nsw i32 %.lcssa153, 1
  %526 = load i32, i32* %85, align 4, !tbaa !1
  %527 = call i32 @MPI_Allreduce(i8* %508, i8* %514, i32 %525, i32 1275069445, i32 1476395011, i32 %526) #3
  %528 = load i32, i32* %mpsi, align 4, !tbaa !1
  %529 = icmp slt i32 %528, 0
  br i1 %529, label %._crit_edge389, label %.lr.ph388.preheader

.lr.ph388.preheader:                              ; preds = %._crit_edge393
  br label %.lr.ph388

.lr.ph388:                                        ; preds = %.lr.ph388.preheader, %537
  %530 = phi i32 [ %538, %537 ], [ %528, %.lr.ph388.preheader ]
  %indvars.iv598 = phi i64 [ %indvars.iv.next599, %537 ], [ 0, %.lr.ph388.preheader ]
  %531 = getelementptr inbounds i32, i32* %515, i64 %indvars.iv598
  %532 = load i32, i32* %531, align 4, !tbaa !1
  %533 = icmp eq i32 %532, 1
  br i1 %533, label %537, label %534

; <label>:534                                     ; preds = %.lr.ph388
  %535 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([68 x i8], [68 x i8]* @.str.24, i64 0, i64 0))
  %536 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  %.pre1 = load i32, i32* %mpsi, align 4, !tbaa !1
  br label %537

; <label>:537                                     ; preds = %534, %.lr.ph388
  %538 = phi i32 [ %.pre1, %534 ], [ %530, %.lr.ph388 ]
  %indvars.iv.next599 = add nuw nsw i64 %indvars.iv598, 1
  %539 = sext i32 %538 to i64
  %540 = icmp slt i64 %indvars.iv598, %539
  br i1 %540, label %.lr.ph388, label %._crit_edge389.loopexit

._crit_edge389.loopexit:                          ; preds = %537
  br label %._crit_edge389

._crit_edge389:                                   ; preds = %._crit_edge389.loopexit, %._crit_edge393
  %541 = phi i32 [ %528, %._crit_edge393 ], [ %538, %._crit_edge389.loopexit ]
  %542 = fmul double %171, 8.000000e+00
  %543 = fdiv double %542, %285
  %544 = fadd double %543, 5.000000e-01
  %545 = fptosi double %544 to i32
  %546 = icmp slt i32 %545, 3
  %. = select i1 %546, i32 3, i32 %545
  %547 = sitofp i32 %. to double
  %548 = fmul double %285, %547
  br i1 %94, label %549, label %552

; <label>:549                                     ; preds = %._crit_edge389
  %550 = fdiv double %171, %285
  %551 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.25, i64 0, i64 0), i32 %., double %550)
  %.pre2 = load i32, i32* %mpsi, align 4, !tbaa !1
  br label %552

; <label>:552                                     ; preds = %549, %._crit_edge389
  %553 = phi i32 [ %.pre2, %549 ], [ %541, %._crit_edge389 ]
  %554 = fsub double %a_valid_in.0.lcssa628, %548
  %555 = sub nsw i32 %ipsi_in.0.lcssa626, %.
  %556 = fcmp ugt double %554, 3.580000e-02
  %a_in.0 = select i1 %556, double %554, double 3.580000e-02
  %ipsi_in.3 = select i1 %556, i32 %555, i32 0
  %557 = fadd double %548, %a_valid_out.0.lcssa629
  %558 = add nsw i32 %ipsi_out.0.lcssa627, %.
  %559 = fcmp ult double %557, 3.222000e-01
  %a_out.0 = select i1 %559, double %557, double 3.222000e-01
  %ipsi_out.2 = select i1 %559, i32 %558, i32 %553
  %560 = icmp slt i32 %ipsi_in.3, 0
  %561 = icmp sgt i32 %ipsi_out.2, %553
  %or.cond77 = or i1 %560, %561
  br i1 %or.cond77, label %562, label %565

; <label>:562                                     ; preds = %552
  %563 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([62 x i8], [62 x i8]* @.str.26, i64 0, i64 0), i32 %20)
  %564 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  %.pre3 = load i32, i32* %mpsi, align 4, !tbaa !1
  br label %565

; <label>:565                                     ; preds = %562, %552
  %566 = phi i32 [ %.pre3, %562 ], [ %553, %552 ]
  %567 = sext i32 %ipsi_in.0.lcssa626 to i64
  %568 = getelementptr inbounds i32, i32* %215, i64 %567
  %569 = sext i32 %ipsi_out.0.lcssa627 to i64
  %570 = getelementptr inbounds i32, i32* %215, i64 %569
  %571 = getelementptr inbounds i32, i32* %191, i64 %569
  %572 = sext i32 %ipsi_in.3 to i64
  %573 = getelementptr inbounds i32, i32* %215, i64 %572
  %574 = load i32, i32* %573, align 4, !tbaa !1
  %575 = sext i32 %ipsi_out.2 to i64
  %576 = getelementptr inbounds i32, i32* %215, i64 %575
  %577 = load i32, i32* %576, align 4, !tbaa !1
  %578 = getelementptr inbounds i32, i32* %191, i64 %575
  %579 = load i32, i32* %578, align 4, !tbaa !1
  %580 = add i32 %579, %577
  %581 = sub nsw i32 %580, %574
  %582 = add nsw i32 %581, 1
  %583 = sub i32 1, %497
  %584 = add i32 %583, %503
  %585 = add nsw i32 %566, 1
  %586 = sext i32 %585 to i64
  %587 = shl nsw i64 %586, 2
  %588 = call fastcc i8* @_mm_malloc(i64 %587)
  %589 = bitcast i8* %588 to i32*
  %590 = load i32, i32* %mpsi, align 4, !tbaa !1
  %591 = icmp slt i32 %590, 0
  br i1 %591, label %._crit_edge384, label %.lr.ph383.preheader

.lr.ph383.preheader:                              ; preds = %565
  br label %.lr.ph383

.lr.ph383:                                        ; preds = %599, %.lr.ph383.preheader
  %indvars.iv596 = phi i64 [ 0, %.lr.ph383.preheader ], [ %indvars.iv.next597, %599 ]
  %592 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %593 = add nsw i32 %592, 1
  %594 = getelementptr inbounds i32, i32* %458, i64 %indvars.iv596
  store i32 %593, i32* %594, align 4, !tbaa !1
  %595 = icmp slt i64 %indvars.iv596, %567
  %596 = icmp sgt i64 %indvars.iv596, %569
  %or.cond78 = or i1 %595, %596
  br i1 %or.cond78, label %599, label %597

; <label>:597                                     ; preds = %.lr.ph383
  %598 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  store i32 %598, i32* %594, align 4, !tbaa !1
  br label %599

; <label>:599                                     ; preds = %597, %.lr.ph383
  %indvars.iv.next597 = add nuw nsw i64 %indvars.iv596, 1
  %600 = load i32, i32* %mpsi, align 4, !tbaa !1
  %601 = sext i32 %600 to i64
  %602 = icmp slt i64 %indvars.iv596, %601
  br i1 %602, label %.lr.ph383, label %._crit_edge384.loopexit

._crit_edge384.loopexit:                          ; preds = %599
  br label %._crit_edge384

._crit_edge384:                                   ; preds = %._crit_edge384.loopexit, %565
  %.lcssa152 = phi i32 [ %590, %565 ], [ %600, %._crit_edge384.loopexit ]
  %603 = add nsw i32 %.lcssa152, 1
  %604 = load i32, i32* %86, align 4, !tbaa !1
  %605 = call i32 @MPI_Allreduce(i8* %457, i8* %588, i32 %603, i32 1275069445, i32 1476395010, i32 %604) #3
  %606 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %607 = sext i32 %606 to i64
  %608 = shl nsw i64 %607, 2
  %609 = call fastcc i8* @_mm_malloc(i64 %608)
  %610 = bitcast i8* %609 to i32*
  %611 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %612 = sext i32 %611 to i64
  %613 = shl nsw i64 %612, 2
  %614 = call fastcc i8* @_mm_malloc(i64 %613)
  %615 = bitcast i8* %614 to i32*
  %616 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %617 = mul nsw i32 %616, %616
  %618 = zext i32 %617 to i64
  %619 = shl nuw nsw i64 %618, 2
  %620 = call fastcc i8* @_mm_malloc(i64 %619)
  %621 = bitcast i8* %620 to i32*
  %622 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %623 = mul nsw i32 %622, %622
  %624 = zext i32 %623 to i64
  %625 = shl nuw nsw i64 %624, 2
  %626 = call fastcc i8* @_mm_malloc(i64 %625)
  %627 = bitcast i8* %626 to i32*
  %628 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %629 = icmp sgt i32 %628, 0
  br i1 %629, label %.lr.ph380.preheader, label %.preheader145

.lr.ph380.preheader:                              ; preds = %._crit_edge384
  br label %.lr.ph380

.preheader145.loopexit:                           ; preds = %.lr.ph380
  br label %.preheader145

.preheader145:                                    ; preds = %.preheader145.loopexit, %._crit_edge384
  %630 = phi i32 [ %628, %._crit_edge384 ], [ %634, %.preheader145.loopexit ]
  %631 = icmp sgt i32 %ipsi_in.3, %ipsi_out.2
  br i1 %631, label %._crit_edge377, label %.lr.ph376.preheader

.lr.ph376.preheader:                              ; preds = %.preheader145
  br label %.lr.ph376

.lr.ph380:                                        ; preds = %.lr.ph380.preheader, %.lr.ph380
  %indvars.iv594 = phi i64 [ %indvars.iv.next595, %.lr.ph380 ], [ 0, %.lr.ph380.preheader ]
  %632 = getelementptr inbounds i32, i32* %610, i64 %indvars.iv594
  store i32 0, i32* %632, align 4, !tbaa !1
  %633 = getelementptr inbounds i32, i32* %615, i64 %indvars.iv594
  store i32 0, i32* %633, align 4, !tbaa !1
  %indvars.iv.next595 = add nuw nsw i64 %indvars.iv594, 1
  %634 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %635 = sext i32 %634 to i64
  %636 = icmp slt i64 %indvars.iv.next595, %635
  br i1 %636, label %.lr.ph380, label %.preheader145.loopexit

.lr.ph376:                                        ; preds = %661, %.lr.ph376.preheader
  %indvars.iv592 = phi i64 [ %572, %.lr.ph376.preheader ], [ %indvars.iv.next593, %661 ]
  %637 = getelementptr inbounds i32, i32* %589, i64 %indvars.iv592
  %638 = load i32, i32* %637, align 4, !tbaa !1
  %639 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %640 = icmp eq i32 %638, %639
  br i1 %640, label %648, label %641

; <label>:641                                     ; preds = %.lr.ph376
  %642 = sext i32 %638 to i64
  %643 = getelementptr inbounds i32, i32* %615, i64 %642
  %644 = load i32, i32* %643, align 4, !tbaa !1
  %645 = icmp eq i32 %644, 0
  br i1 %645, label %648, label %646

; <label>:646                                     ; preds = %641
  %647 = trunc i64 %indvars.iv592 to i32
  store i32 %647, i32* %643, align 4, !tbaa !1
  %.pre4 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  br label %648

; <label>:648                                     ; preds = %646, %641, %.lr.ph376
  %649 = phi i32 [ %.pre4, %646 ], [ %639, %641 ], [ %638, %.lr.ph376 ]
  %650 = icmp eq i32 %638, %649
  br i1 %650, label %661, label %651

; <label>:651                                     ; preds = %648
  %652 = sext i32 %638 to i64
  %653 = getelementptr inbounds i32, i32* %610, i64 %652
  %654 = load i32, i32* %653, align 4, !tbaa !1
  %655 = getelementptr inbounds i32, i32* %615, i64 %652
  %656 = load i32, i32* %655, align 4, !tbaa !1
  %657 = or i32 %656, %654
  %658 = icmp eq i32 %657, 0
  br i1 %658, label %659, label %661

; <label>:659                                     ; preds = %651
  %660 = trunc i64 %indvars.iv592 to i32
  store i32 %660, i32* %653, align 4, !tbaa !1
  store i32 %660, i32* %655, align 4, !tbaa !1
  br label %661

; <label>:661                                     ; preds = %659, %651, %648
  %662 = icmp slt i64 %indvars.iv592, %575
  %indvars.iv.next593 = add nsw i64 %indvars.iv592, 1
  br i1 %662, label %.lr.ph376, label %.._crit_edge377_crit_edge

.._crit_edge377_crit_edge:                        ; preds = %661
  %.pre5 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %._crit_edge377

._crit_edge377:                                   ; preds = %.._crit_edge377_crit_edge, %.preheader145
  %663 = phi i32 [ %.pre5, %.._crit_edge377_crit_edge ], [ %630, %.preheader145 ]
  %664 = load i32, i32* %86, align 4, !tbaa !1
  %665 = call i32 @MPI_Allgather(i8* %609, i32 %663, i32 1275069445, i8* %620, i32 %663, i32 1275069445, i32 %664) #3
  %666 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %667 = load i32, i32* %86, align 4, !tbaa !1
  %668 = call i32 @MPI_Allgather(i8* %614, i32 %666, i32 1275069445, i8* %626, i32 %666, i32 1275069445, i32 %667) #3
  %669 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %670 = icmp sgt i32 %669, 0
  br i1 %670, label %.lr.ph372, label %._crit_edge373

.lr.ph372:                                        ; preds = %._crit_edge377
  %671 = load i32, i32* %myrank_radiald, align 4
  br label %672

; <label>:672                                     ; preds = %681, %.lr.ph372
  %nghost_comm_num.0370 = phi i32 [ 0, %.lr.ph372 ], [ %nghost_comm_num.1, %681 ]
  %i.13369 = phi i32 [ 0, %.lr.ph372 ], [ %682, %681 ]
  %673 = icmp eq i32 %i.13369, %671
  br i1 %673, label %681, label %674

; <label>:674                                     ; preds = %672
  %675 = mul nsw i32 %669, %i.13369
  %676 = add nsw i32 %671, %675
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i32, i32* %621, i64 %677
  %679 = load i32, i32* %678, align 4, !tbaa !1
  %not.87 = icmp ne i32 %679, 0
  %680 = zext i1 %not.87 to i32
  %nghost_comm_num.0. = add nsw i32 %680, %nghost_comm_num.0370
  br label %681

; <label>:681                                     ; preds = %674, %672
  %nghost_comm_num.1 = phi i32 [ %nghost_comm_num.0370, %672 ], [ %nghost_comm_num.0., %674 ]
  %682 = add nuw nsw i32 %i.13369, 1
  %683 = icmp slt i32 %682, %669
  br i1 %683, label %672, label %._crit_edge373.loopexit

._crit_edge373.loopexit:                          ; preds = %681
  br label %._crit_edge373

._crit_edge373:                                   ; preds = %._crit_edge373.loopexit, %._crit_edge377
  %nghost_comm_num.0.lcssa = phi i32 [ 0, %._crit_edge377 ], [ %nghost_comm_num.1, %._crit_edge373.loopexit ]
  %684 = sext i32 %nghost_comm_num.0.lcssa to i64
  %685 = shl nsw i64 %684, 2
  %686 = call fastcc i8* @_mm_malloc(i64 %685)
  %687 = bitcast i8* %686 to i32*
  %688 = call fastcc i8* @_mm_malloc(i64 %685)
  %689 = bitcast i8* %688 to i32*
  %690 = call fastcc i8* @_mm_malloc(i64 %685)
  %691 = bitcast i8* %690 to i32*
  %692 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %693 = icmp sgt i32 %692, 0
  br i1 %693, label %.lr.ph365.preheader, label %._crit_edge366

.lr.ph365.preheader:                              ; preds = %._crit_edge373
  br label %.lr.ph365

.lr.ph365:                                        ; preds = %.lr.ph365.preheader, %737
  %694 = phi i32 [ %738, %737 ], [ %692, %.lr.ph365.preheader ]
  %nghost_bufsize.0363 = phi i32 [ %nghost_bufsize.1, %737 ], [ 0, %.lr.ph365.preheader ]
  %i_loc.0362 = phi i32 [ %i_loc.1, %737 ], [ 0, %.lr.ph365.preheader ]
  %i.14361 = phi i32 [ %739, %737 ], [ 0, %.lr.ph365.preheader ]
  %695 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %696 = icmp eq i32 %i.14361, %695
  br i1 %696, label %737, label %697

; <label>:697                                     ; preds = %.lr.ph365
  %698 = mul nsw i32 %694, %i.14361
  %699 = add nsw i32 %695, %698
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i32, i32* %621, i64 %700
  %702 = load i32, i32* %701, align 4, !tbaa !1
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %737, label %704

; <label>:704                                     ; preds = %697
  %705 = sext i32 %i_loc.0362 to i64
  %706 = getelementptr inbounds i32, i32* %687, i64 %705
  store i32 %i.14361, i32* %706, align 4, !tbaa !1
  %707 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %708 = mul nsw i32 %707, %i.14361
  %709 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %710 = add nsw i32 %708, %709
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i32, i32* %621, i64 %711
  %713 = load i32, i32* %712, align 4, !tbaa !1
  %714 = getelementptr inbounds i32, i32* %689, i64 %705
  store i32 %713, i32* %714, align 4, !tbaa !1
  %715 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %716 = mul nsw i32 %715, %i.14361
  %717 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %718 = add nsw i32 %716, %717
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i32, i32* %627, i64 %719
  %721 = load i32, i32* %720, align 4, !tbaa !1
  %722 = getelementptr inbounds i32, i32* %691, i64 %705
  store i32 %721, i32* %722, align 4, !tbaa !1
  %723 = sext i32 %721 to i64
  %724 = getelementptr inbounds i32, i32* %215, i64 %723
  %725 = load i32, i32* %724, align 4, !tbaa !1
  %726 = getelementptr inbounds i32, i32* %191, i64 %723
  %727 = load i32, i32* %726, align 4, !tbaa !1
  %728 = load i32, i32* %714, align 4, !tbaa !1
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds i32, i32* %215, i64 %729
  %731 = load i32, i32* %730, align 4, !tbaa !1
  %732 = add i32 %nghost_bufsize.0363, 1
  %733 = add i32 %732, %725
  %734 = add i32 %733, %727
  %735 = sub i32 %734, %731
  %736 = add nsw i32 %i_loc.0362, 1
  %.pre6 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %737

; <label>:737                                     ; preds = %704, %697, %.lr.ph365
  %738 = phi i32 [ %.pre6, %704 ], [ %694, %697 ], [ %694, %.lr.ph365 ]
  %i_loc.1 = phi i32 [ %736, %704 ], [ %i_loc.0362, %697 ], [ %i_loc.0362, %.lr.ph365 ]
  %nghost_bufsize.1 = phi i32 [ %735, %704 ], [ %nghost_bufsize.0363, %697 ], [ %nghost_bufsize.0363, %.lr.ph365 ]
  %739 = add nuw nsw i32 %i.14361, 1
  %740 = icmp slt i32 %739, %738
  br i1 %740, label %.lr.ph365, label %._crit_edge366.loopexit

._crit_edge366.loopexit:                          ; preds = %737
  br label %._crit_edge366

._crit_edge366:                                   ; preds = %._crit_edge366.loopexit, %._crit_edge373
  %nghost_bufsize.0.lcssa = phi i32 [ 0, %._crit_edge373 ], [ %nghost_bufsize.1, %._crit_edge366.loopexit ]
  %i_loc.0.lcssa = phi i32 [ 0, %._crit_edge373 ], [ %i_loc.1, %._crit_edge366.loopexit ]
  %741 = icmp eq i32 %nghost_comm_num.0.lcssa, %i_loc.0.lcssa
  br i1 %741, label %743, label %742

; <label>:742                                     ; preds = %._crit_edge366
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.27, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 977, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:743                                     ; preds = %._crit_edge366
  %744 = load i32, i32* %mzeta, align 4, !tbaa !1
  %745 = add nsw i32 %744, 1
  %746 = mul i32 %nghost_bufsize.0.lcssa, 3
  %747 = mul i32 %746, %745
  %748 = sext i32 %747 to i64
  %749 = shl nsw i64 %748, 3
  %750 = call fastcc i8* @_mm_malloc(i64 %749)
  %751 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %752 = icmp sgt i32 %751, 0
  br i1 %752, label %.lr.ph358, label %._crit_edge359

.lr.ph358:                                        ; preds = %743
  %753 = load i32, i32* %myrank_radiald, align 4
  br label %754

; <label>:754                                     ; preds = %763, %.lr.ph358
  %ghost_comm_num.0356 = phi i32 [ 0, %.lr.ph358 ], [ %ghost_comm_num.1, %763 ]
  %i.15355 = phi i32 [ 0, %.lr.ph358 ], [ %764, %763 ]
  %755 = icmp eq i32 %i.15355, %753
  br i1 %755, label %763, label %756

; <label>:756                                     ; preds = %754
  %757 = mul nsw i32 %753, %751
  %758 = add nsw i32 %757, %i.15355
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i32, i32* %621, i64 %759
  %761 = load i32, i32* %760, align 4, !tbaa !1
  %not.86 = icmp ne i32 %761, 0
  %762 = zext i1 %not.86 to i32
  %ghost_comm_num.0. = add nsw i32 %762, %ghost_comm_num.0356
  br label %763

; <label>:763                                     ; preds = %756, %754
  %ghost_comm_num.1 = phi i32 [ %ghost_comm_num.0356, %754 ], [ %ghost_comm_num.0., %756 ]
  %764 = add nuw nsw i32 %i.15355, 1
  %765 = icmp slt i32 %764, %751
  br i1 %765, label %754, label %._crit_edge359.loopexit

._crit_edge359.loopexit:                          ; preds = %763
  br label %._crit_edge359

._crit_edge359:                                   ; preds = %._crit_edge359.loopexit, %743
  %ghost_comm_num.0.lcssa = phi i32 [ 0, %743 ], [ %ghost_comm_num.1, %._crit_edge359.loopexit ]
  %766 = sext i32 %ghost_comm_num.0.lcssa to i64
  %767 = shl nsw i64 %766, 2
  %768 = call fastcc i8* @_mm_malloc(i64 %767)
  %769 = bitcast i8* %768 to i32*
  %770 = call fastcc i8* @_mm_malloc(i64 %767)
  %771 = bitcast i8* %770 to i32*
  %772 = call fastcc i8* @_mm_malloc(i64 %767)
  %773 = bitcast i8* %772 to i32*
  %774 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %775 = icmp sgt i32 %774, 0
  br i1 %775, label %.lr.ph351.preheader, label %._crit_edge352

.lr.ph351.preheader:                              ; preds = %._crit_edge359
  br label %.lr.ph351

.lr.ph351:                                        ; preds = %.lr.ph351.preheader, %819
  %776 = phi i32 [ %820, %819 ], [ %774, %.lr.ph351.preheader ]
  %ghost_bufsize.0349 = phi i32 [ %ghost_bufsize.1, %819 ], [ 0, %.lr.ph351.preheader ]
  %i_loc.2348 = phi i32 [ %i_loc.3, %819 ], [ 0, %.lr.ph351.preheader ]
  %i.16347 = phi i32 [ %821, %819 ], [ 0, %.lr.ph351.preheader ]
  %777 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %778 = icmp eq i32 %i.16347, %777
  br i1 %778, label %819, label %779

; <label>:779                                     ; preds = %.lr.ph351
  %780 = mul nsw i32 %777, %776
  %781 = add nsw i32 %780, %i.16347
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds i32, i32* %621, i64 %782
  %784 = load i32, i32* %783, align 4, !tbaa !1
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %819, label %786

; <label>:786                                     ; preds = %779
  %787 = sext i32 %i_loc.2348 to i64
  %788 = getelementptr inbounds i32, i32* %769, i64 %787
  store i32 %i.16347, i32* %788, align 4, !tbaa !1
  %789 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %790 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %791 = mul nsw i32 %790, %789
  %792 = add nsw i32 %791, %i.16347
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i32, i32* %621, i64 %793
  %795 = load i32, i32* %794, align 4, !tbaa !1
  %796 = getelementptr inbounds i32, i32* %771, i64 %787
  store i32 %795, i32* %796, align 4, !tbaa !1
  %797 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %798 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %799 = mul nsw i32 %798, %797
  %800 = add nsw i32 %799, %i.16347
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i32, i32* %627, i64 %801
  %803 = load i32, i32* %802, align 4, !tbaa !1
  %804 = getelementptr inbounds i32, i32* %773, i64 %787
  store i32 %803, i32* %804, align 4, !tbaa !1
  %805 = sext i32 %803 to i64
  %806 = getelementptr inbounds i32, i32* %215, i64 %805
  %807 = load i32, i32* %806, align 4, !tbaa !1
  %808 = getelementptr inbounds i32, i32* %191, i64 %805
  %809 = load i32, i32* %808, align 4, !tbaa !1
  %810 = load i32, i32* %796, align 4, !tbaa !1
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i32, i32* %215, i64 %811
  %813 = load i32, i32* %812, align 4, !tbaa !1
  %814 = add i32 %ghost_bufsize.0349, 1
  %815 = add i32 %814, %807
  %816 = add i32 %815, %809
  %817 = sub i32 %816, %813
  %818 = add nsw i32 %i_loc.2348, 1
  %.pre7 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %819

; <label>:819                                     ; preds = %786, %779, %.lr.ph351
  %820 = phi i32 [ %.pre7, %786 ], [ %776, %779 ], [ %776, %.lr.ph351 ]
  %i_loc.3 = phi i32 [ %818, %786 ], [ %i_loc.2348, %779 ], [ %i_loc.2348, %.lr.ph351 ]
  %ghost_bufsize.1 = phi i32 [ %817, %786 ], [ %ghost_bufsize.0349, %779 ], [ %ghost_bufsize.0349, %.lr.ph351 ]
  %821 = add nuw nsw i32 %i.16347, 1
  %822 = icmp slt i32 %821, %820
  br i1 %822, label %.lr.ph351, label %._crit_edge352.loopexit

._crit_edge352.loopexit:                          ; preds = %819
  br label %._crit_edge352

._crit_edge352:                                   ; preds = %._crit_edge352.loopexit, %._crit_edge359
  %ghost_bufsize.0.lcssa = phi i32 [ 0, %._crit_edge359 ], [ %ghost_bufsize.1, %._crit_edge352.loopexit ]
  %i_loc.2.lcssa = phi i32 [ 0, %._crit_edge359 ], [ %i_loc.3, %._crit_edge352.loopexit ]
  %823 = icmp eq i32 %ghost_comm_num.0.lcssa, %i_loc.2.lcssa
  br i1 %823, label %825, label %824

; <label>:824                                     ; preds = %._crit_edge352
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1015, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:825                                     ; preds = %._crit_edge352
  %826 = load i32, i32* %mzeta, align 4, !tbaa !1
  %827 = add nsw i32 %826, 1
  %828 = mul i32 %ghost_bufsize.0.lcssa, 3
  %829 = mul i32 %828, %827
  %830 = sext i32 %829 to i64
  %831 = shl nsw i64 %830, 3
  %832 = call fastcc i8* @_mm_malloc(i64 %831)
  br i1 %477, label %._crit_edge344, label %.lr.ph343

.lr.ph343:                                        ; preds = %825
  %833 = load i32, i32* %myrank_radiald, align 4
  br label %834

; <label>:834                                     ; preds = %834, %.lr.ph343
  %indvars.iv590 = phi i64 [ %indvars.iv.next591, %834 ], [ %567, %.lr.ph343 ]
  %ipsi_nover_in_radiald.0341 = phi i32 [ %i.17.ipsi_nover_in_radiald.0, %834 ], [ -1, %.lr.ph343 ]
  %ipsi_nover_out_radiald.0340 = phi i32 [ %ipsi_nover_out_radiald.1, %834 ], [ -1, %.lr.ph343 ]
  %835 = getelementptr inbounds i32, i32* %589, i64 %indvars.iv590
  %836 = load i32, i32* %835, align 4, !tbaa !1
  %837 = icmp eq i32 %836, %833
  %838 = icmp eq i32 %ipsi_nover_in_radiald.0341, -1
  %or.cond34 = and i1 %838, %837
  %839 = trunc i64 %indvars.iv590 to i32
  %i.17.ipsi_nover_in_radiald.0 = select i1 %or.cond34, i32 %839, i32 %ipsi_nover_in_radiald.0341
  %840 = icmp ne i32 %836, %833
  %841 = icmp ne i32 %i.17.ipsi_nover_in_radiald.0, -1
  %or.cond36 = and i1 %840, %841
  %842 = icmp eq i32 %ipsi_nover_out_radiald.0340, -1
  %or.cond38 = and i1 %842, %or.cond36
  %843 = add i64 %indvars.iv590, 4294967295
  %844 = trunc i64 %843 to i32
  %ipsi_nover_out_radiald.1 = select i1 %or.cond38, i32 %844, i32 %ipsi_nover_out_radiald.0340
  %845 = icmp slt i64 %indvars.iv590, %569
  %indvars.iv.next591 = add nsw i64 %indvars.iv590, 1
  br i1 %845, label %834, label %._crit_edge344.loopexit

._crit_edge344.loopexit:                          ; preds = %834
  br label %._crit_edge344

._crit_edge344:                                   ; preds = %._crit_edge344.loopexit, %825
  %ipsi_nover_in_radiald.0.lcssa = phi i32 [ -1, %825 ], [ %i.17.ipsi_nover_in_radiald.0, %._crit_edge344.loopexit ]
  %ipsi_nover_out_radiald.0.lcssa = phi i32 [ -1, %825 ], [ %ipsi_nover_out_radiald.1, %._crit_edge344.loopexit ]
  %846 = icmp eq i32 %ipsi_nover_out_radiald.0.lcssa, -1
  %ipsi_out.0.ipsi_nover_out_radiald.0 = select i1 %846, i32 %ipsi_out.0.lcssa627, i32 %ipsi_nover_out_radiald.0.lcssa
  %847 = icmp eq i32 %ipsi_nover_in_radiald.0.lcssa, -1
  %ipsi_nover_out_radiald.3 = select i1 %847, i32 0, i32 %ipsi_out.0.ipsi_nover_out_radiald.0
  %ipsi_nover_in_radiald.2 = select i1 %847, i32 1, i32 %ipsi_nover_in_radiald.0.lcssa
  %848 = sext i32 %ipsi_nover_in_radiald.2 to i64
  %849 = getelementptr inbounds i32, i32* %215, i64 %848
  %850 = load i32, i32* %849, align 4, !tbaa !1
  %851 = sext i32 %ipsi_nover_out_radiald.3 to i64
  %852 = getelementptr inbounds i32, i32* %215, i64 %851
  %853 = load i32, i32* %852, align 4, !tbaa !1
  %854 = getelementptr inbounds i32, i32* %191, i64 %851
  %855 = load i32, i32* %854, align 4, !tbaa !1
  %856 = add nsw i32 %855, %853
  %857 = shl nsw i32 %582, 2
  %858 = sext i32 %857 to i64
  %859 = shl nsw i64 %858, 3
  %860 = call fastcc i8* @_mm_malloc(i64 %859)
  %861 = bitcast i8* %860 to double*
  %862 = call fastcc i8* @_mm_malloc(i64 %859)
  %863 = bitcast i8* %862 to double*
  %864 = load i32, i32* %mzeta, align 4, !tbaa !1
  %865 = mul nsw i32 %864, %582
  %866 = sext i32 %865 to i64
  %867 = shl nsw i64 %866, 3
  %868 = call fastcc i8* @_mm_malloc(i64 %867)
  %869 = bitcast i8* %868 to double*
  %870 = load i32, i32* %mzeta, align 4, !tbaa !1
  %871 = add nsw i32 %870, 1
  %872 = mul nsw i32 %871, %582
  %873 = sext i32 %872 to i64
  %874 = shl nsw i64 %873, 3
  %875 = call fastcc i8* @_mm_malloc(i64 %874)
  %876 = bitcast i8* %875 to double*
  %877 = load i32, i32* %mzeta, align 4, !tbaa !1
  %878 = add nsw i32 %877, 1
  %879 = mul nsw i32 %878, %582
  %880 = sext i32 %879 to i64
  %881 = shl nsw i64 %880, 3
  %882 = call fastcc i8* @_mm_malloc(i64 %881)
  %883 = load i32, i32* %mzeta, align 4, !tbaa !1
  %884 = add nsw i32 %883, 1
  %885 = mul nsw i32 %884, %582
  %886 = sext i32 %885 to i64
  %887 = shl nsw i64 %886, 3
  %888 = call fastcc i8* @_mm_malloc(i64 %887)
  %889 = bitcast i8* %888 to double*
  %890 = sext i32 %582 to i64
  %891 = shl nsw i64 %890, 3
  %892 = call fastcc i8* @_mm_malloc(i64 %891)
  %893 = call fastcc i8* @_mm_malloc(i64 %891)
  %894 = sub nsw i32 %ipsi_out.0.lcssa627, %ipsi_in.0.lcssa626
  %895 = add nsw i32 %894, 1
  %896 = icmp sgt i32 %894, -1
  br i1 %896, label %898, label %897

; <label>:897                                     ; preds = %._crit_edge344
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1212, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:898                                     ; preds = %._crit_edge344
  %899 = sext i32 %895 to i64
  %900 = shl nsw i64 %899, 2
  %901 = call fastcc i8* @_mm_malloc(i64 %900)
  %902 = bitcast i8* %901 to i32*
  %903 = call fastcc i8* @_mm_malloc(i64 %900)
  %904 = bitcast i8* %903 to i32*
  %905 = load i32, i32* %mzeta, align 4, !tbaa !1
  %906 = add nsw i32 %905, 1
  %907 = mul nsw i32 %906, %582
  %908 = sext i32 %907 to i64
  %909 = shl nsw i64 %908, 3
  %910 = call fastcc i8* @_mm_malloc(i64 %909)
  %911 = bitcast i8* %910 to double*
  %912 = load i32, i32* %mzeta, align 4, !tbaa !1
  %913 = mul i32 %912, 3
  %914 = add i32 %913, 3
  %915 = mul nsw i32 %914, %582
  %916 = sext i32 %915 to i64
  %917 = shl nsw i64 %916, 3
  %918 = call fastcc i8* @_mm_malloc(i64 %917)
  %919 = shl i32 %582, 1
  %920 = load i32, i32* %mzeta, align 4, !tbaa !1
  %921 = mul nsw i32 %920, %919
  %922 = sext i32 %921 to i64
  %923 = shl nsw i64 %922, 2
  %924 = call fastcc i8* @_mm_malloc(i64 %923)
  %925 = bitcast i8* %924 to i32*
  %926 = load i32, i32* %mzeta, align 4, !tbaa !1
  %927 = mul nsw i32 %926, %919
  %928 = sext i32 %927 to i64
  %929 = shl nsw i64 %928, 2
  %930 = call fastcc i8* @_mm_malloc(i64 %929)
  %931 = bitcast i8* %930 to i32*
  %932 = load i32, i32* %mzeta, align 4, !tbaa !1
  %933 = mul nsw i32 %932, %919
  %934 = sext i32 %933 to i64
  %935 = shl nsw i64 %934, 3
  %936 = call fastcc i8* @_mm_malloc(i64 %935)
  %937 = bitcast i8* %936 to double*
  %938 = load i32, i32* %mzeta, align 4, !tbaa !1
  %939 = mul nsw i32 %938, %919
  %940 = sext i32 %939 to i64
  %941 = shl nsw i64 %940, 3
  %942 = call fastcc i8* @_mm_malloc(i64 %941)
  %943 = bitcast i8* %942 to double*
  %944 = load i32, i32* %mzeta, align 4, !tbaa !1
  %945 = mul nsw i32 %944, %582
  %946 = sext i32 %945 to i64
  %947 = shl nsw i64 %946, 3
  %948 = call fastcc i8* @_mm_malloc(i64 %947)
  %949 = bitcast i8* %948 to double*
  %950 = load i32, i32* %mzeta, align 4, !tbaa !1
  %951 = mul nsw i32 %950, %582
  %952 = sext i32 %951 to i64
  %953 = shl nsw i64 %952, 3
  %954 = call fastcc i8* @_mm_malloc(i64 %953)
  %955 = bitcast i8* %954 to double*
  %956 = call fastcc i8* @_mm_malloc(i64 %891)
  %957 = bitcast i8* %956 to double*
  %958 = call fastcc i8* @_mm_malloc(i64 %891)
  %959 = bitcast i8* %958 to double*
  %960 = shl nsw i64 %890, 2
  %961 = call fastcc i8* @_mm_malloc(i64 %960)
  %962 = bitcast i8* %961 to i32*
  %963 = call fastcc i8* @_mm_malloc(i64 %960)
  %964 = bitcast i8* %963 to i32*
  %965 = call fastcc i8* @_mm_malloc(i64 %960)
  %966 = bitcast i8* %965 to i32*
  %967 = call fastcc i8* @_mm_malloc(i64 %960)
  %968 = bitcast i8* %967 to i32*
  %969 = call fastcc i8* @_mm_malloc(i64 %891)
  %970 = bitcast i8* %969 to double*
  %971 = call fastcc i8* @_mm_malloc(i64 %891)
  %972 = bitcast i8* %971 to double*
  %973 = call fastcc i8* @_mm_malloc(i64 %891)
  %974 = bitcast i8* %973 to double*
  %975 = call fastcc i8* @_mm_malloc(i64 %891)
  %976 = bitcast i8* %975 to double*
  %977 = mul nsw i32 %582, 3
  %978 = sext i32 %977 to i64
  %979 = shl nsw i64 %978, 3
  %980 = call fastcc i8* @_mm_malloc(i64 %979)
  %981 = bitcast i8* %980 to double*
  %982 = call fastcc i8* @_mm_malloc(i64 %979)
  %983 = bitcast i8* %982 to double*
  %984 = call fastcc i8* @_mm_malloc(i64 %891)
  %985 = bitcast i8* %984 to double*
  %986 = call fastcc i8* @_mm_malloc(i64 %891)
  %987 = bitcast i8* %986 to double*
  %988 = call fastcc i8* @_mm_malloc(i64 %891)
  %989 = bitcast i8* %988 to double*
  %990 = call fastcc i8* @_mm_malloc(i64 %891)
  %991 = bitcast i8* %990 to double*
  %992 = load i32, i32* %mzeta, align 4, !tbaa !1
  %993 = add nsw i32 %992, 1
  %994 = mul nsw i32 %993, %582
  %995 = sext i32 %994 to i64
  %996 = shl nsw i64 %995, 3
  %997 = call fastcc i8* @_mm_malloc(i64 %996)
  %998 = sext i32 %392 to i64
  %999 = shl nsw i64 %998, 3
  %1000 = call fastcc i8* @_mm_malloc(i64 %999)
  %1001 = bitcast i8* %1000 to double*
  %1002 = call fastcc i8* @_mm_malloc(i64 %999)
  %1003 = bitcast i8* %1002 to double*
  %1004 = call fastcc i8* @_mm_malloc(i64 %999)
  %1005 = bitcast i8* %1004 to double*
  %1006 = call fastcc i8* @_mm_malloc(i64 %999)
  %1007 = bitcast i8* %1006 to double*
  %1008 = call fastcc i8* @_mm_malloc(i64 %999)
  %1009 = bitcast i8* %1008 to double*
  %1010 = call fastcc i8* @_mm_malloc(i64 %999)
  %1011 = bitcast i8* %1010 to double*
  %1012 = call fastcc i8* @_mm_malloc(i64 %999)
  %1013 = bitcast i8* %1012 to double*
  %1014 = call fastcc i8* @_mm_malloc(i64 %999)
  %1015 = bitcast i8* %1014 to double*
  %1016 = call fastcc i8* @_mm_malloc(i64 %999)
  %1017 = bitcast i8* %1016 to double*
  %1018 = call fastcc i8* @_mm_malloc(i64 %999)
  %1019 = bitcast i8* %1018 to double*
  %1020 = call fastcc i8* @_mm_malloc(i64 %999)
  %1021 = bitcast i8* %1020 to double*
  %1022 = call fastcc i8* @_mm_malloc(i64 %999)
  %1023 = bitcast i8* %1022 to double*
  %1024 = call fastcc i8* @_mm_malloc(i64 %999)
  %1025 = bitcast i8* %1024 to double*
  %1026 = call fastcc i8* @_mm_malloc(i64 %999)
  %1027 = bitcast i8* %1026 to double*
  %1028 = call fastcc i8* @_mm_malloc(i64 %999)
  %1029 = bitcast i8* %1028 to double*
  %1030 = shl nsw i32 %391, 3
  %1031 = sext i32 %1030 to i64
  %1032 = shl nsw i64 %1031, 3
  %1033 = call fastcc i8* @_mm_malloc(i64 %1032)
  %1034 = bitcast i8* %1033 to double*
  %1035 = call fastcc i8* @_mm_malloc(i64 %1032)
  %1036 = bitcast i8* %1035 to double*
  %1037 = call fastcc i8* @_mm_malloc(i64 %1032)
  %1038 = bitcast i8* %1037 to double*
  %1039 = shl nsw i64 %998, 2
  %1040 = call fastcc i8* @_mm_malloc(i64 %1039)
  %1041 = bitcast i8* %1040 to i32*
  %1042 = shl nsw i64 %1031, 2
  %1043 = call fastcc i8* @_mm_malloc(i64 %1042)
  %1044 = bitcast i8* %1043 to i32*
  %1045 = call fastcc i8* @_mm_malloc(i64 %1042)
  %1046 = bitcast i8* %1045 to i32*
  %1047 = call fastcc i8* @_mm_malloc(i64 %1039)
  %1048 = call fastcc i8* @_mm_malloc(i64 800008)
  %1049 = bitcast i8* %1048 to double*
  %1050 = call fastcc i8* @_mm_malloc(i64 1024)
  %1051 = call fastcc i8* @_mm_malloc(i64 768)
  %1052 = icmp eq i8* %860, null
  br i1 %1052, label %1053, label %1054

; <label>:1053                                    ; preds = %898
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1290, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1054                                    ; preds = %898
  %1055 = icmp eq i8* %862, null
  br i1 %1055, label %1056, label %1057

; <label>:1056                                    ; preds = %1054
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1291, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1057                                    ; preds = %1054
  %1058 = icmp eq i8* %868, null
  br i1 %1058, label %1059, label %1060

; <label>:1059                                    ; preds = %1057
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1292, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1060                                    ; preds = %1057
  %1061 = icmp eq i8* %875, null
  br i1 %1061, label %1062, label %1063

; <label>:1062                                    ; preds = %1060
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1293, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1063                                    ; preds = %1060
  %1064 = icmp eq i8* %882, null
  br i1 %1064, label %1065, label %1066

; <label>:1065                                    ; preds = %1063
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1294, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1066                                    ; preds = %1063
  %1067 = icmp eq i8* %910, null
  br i1 %1067, label %1068, label %1069

; <label>:1068                                    ; preds = %1066
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1296, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1069                                    ; preds = %1066
  %1070 = icmp eq i8* %918, null
  br i1 %1070, label %1071, label %1072

; <label>:1071                                    ; preds = %1069
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1297, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1072                                    ; preds = %1069
  %1073 = icmp eq i8* %924, null
  br i1 %1073, label %1074, label %1075

; <label>:1074                                    ; preds = %1072
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1298, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1075                                    ; preds = %1072
  %1076 = icmp eq i8* %930, null
  br i1 %1076, label %1077, label %1078

; <label>:1077                                    ; preds = %1075
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.38, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1299, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1078                                    ; preds = %1075
  %1079 = icmp eq i8* %936, null
  br i1 %1079, label %1080, label %1081

; <label>:1080                                    ; preds = %1078
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1300, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1081                                    ; preds = %1078
  %1082 = icmp eq i8* %942, null
  br i1 %1082, label %1083, label %1084

; <label>:1083                                    ; preds = %1081
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1301, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1084                                    ; preds = %1081
  %1085 = icmp eq i8* %948, null
  br i1 %1085, label %1086, label %1087

; <label>:1086                                    ; preds = %1084
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1302, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1087                                    ; preds = %1084
  %1088 = icmp eq i8* %954, null
  br i1 %1088, label %1089, label %1090

; <label>:1089                                    ; preds = %1087
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1303, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1090                                    ; preds = %1087
  %1091 = icmp eq i8* %1000, null
  br i1 %1091, label %1092, label %1093

; <label>:1092                                    ; preds = %1090
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1305, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1093                                    ; preds = %1090
  %1094 = icmp eq i8* %1002, null
  br i1 %1094, label %1095, label %1096

; <label>:1095                                    ; preds = %1093
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1306, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1096                                    ; preds = %1093
  %1097 = icmp eq i8* %1004, null
  br i1 %1097, label %1098, label %1099

; <label>:1098                                    ; preds = %1096
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1307, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1099                                    ; preds = %1096
  %1100 = icmp eq i8* %1006, null
  br i1 %1100, label %1101, label %1102

; <label>:1101                                    ; preds = %1099
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1308, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1102                                    ; preds = %1099
  %1103 = icmp eq i8* %1008, null
  br i1 %1103, label %1104, label %1105

; <label>:1104                                    ; preds = %1102
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.47, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1309, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1105                                    ; preds = %1102
  %1106 = icmp eq i8* %1010, null
  br i1 %1106, label %1107, label %1108

; <label>:1107                                    ; preds = %1105
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.48, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1310, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1108                                    ; preds = %1105
  %1109 = icmp eq i8* %1012, null
  br i1 %1109, label %1110, label %1111

; <label>:1110                                    ; preds = %1108
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1311, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1111                                    ; preds = %1108
  %1112 = icmp eq i8* %1014, null
  br i1 %1112, label %1113, label %1114

; <label>:1113                                    ; preds = %1111
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1312, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1114                                    ; preds = %1111
  %1115 = icmp eq i8* %1016, null
  br i1 %1115, label %1116, label %1117

; <label>:1116                                    ; preds = %1114
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1313, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1117                                    ; preds = %1114
  %1118 = icmp eq i8* %1018, null
  br i1 %1118, label %1119, label %1120

; <label>:1119                                    ; preds = %1117
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.52, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1314, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1120                                    ; preds = %1117
  %1121 = icmp eq i8* %1020, null
  br i1 %1121, label %1122, label %1123

; <label>:1122                                    ; preds = %1120
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.53, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1315, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1123                                    ; preds = %1120
  %1124 = icmp eq i8* %1022, null
  br i1 %1124, label %1125, label %1126

; <label>:1125                                    ; preds = %1123
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1316, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1126                                    ; preds = %1123
  %1127 = icmp eq i8* %1024, null
  br i1 %1127, label %1128, label %1129

; <label>:1128                                    ; preds = %1126
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.55, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1320, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1129                                    ; preds = %1126
  %1130 = icmp eq i8* %1026, null
  br i1 %1130, label %1131, label %1132

; <label>:1131                                    ; preds = %1129
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1321, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1132                                    ; preds = %1129
  %1133 = icmp eq i8* %1047, null
  br i1 %1133, label %1134, label %1135

; <label>:1134                                    ; preds = %1132
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1322, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1135                                    ; preds = %1132
  %1136 = icmp eq i8* %1028, null
  br i1 %1136, label %1137, label %1138

; <label>:1137                                    ; preds = %1135
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.58, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1324, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1138                                    ; preds = %1135
  %1139 = icmp eq i8* %1033, null
  br i1 %1139, label %1140, label %1141

; <label>:1140                                    ; preds = %1138
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1325, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1141                                    ; preds = %1138
  %1142 = icmp eq i8* %1035, null
  br i1 %1142, label %1143, label %1144

; <label>:1143                                    ; preds = %1141
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1326, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1144                                    ; preds = %1141
  %1145 = icmp eq i8* %1037, null
  br i1 %1145, label %1146, label %1147

; <label>:1146                                    ; preds = %1144
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.61, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1327, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1147                                    ; preds = %1144
  %1148 = icmp eq i8* %1040, null
  br i1 %1148, label %1149, label %1150

; <label>:1149                                    ; preds = %1147
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.62, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1328, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1150                                    ; preds = %1147
  %1151 = icmp eq i8* %1043, null
  br i1 %1151, label %1152, label %1153

; <label>:1152                                    ; preds = %1150
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1329, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1153                                    ; preds = %1150
  %1154 = icmp eq i8* %1045, null
  br i1 %1154, label %1155, label %1156

; <label>:1155                                    ; preds = %1153
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1330, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1156                                    ; preds = %1153
  %1157 = icmp eq i8* %956, null
  br i1 %1157, label %1158, label %1159

; <label>:1158                                    ; preds = %1156
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1332, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1159                                    ; preds = %1156
  %1160 = icmp eq i8* %958, null
  br i1 %1160, label %1161, label %1162

; <label>:1161                                    ; preds = %1159
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1333, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1162                                    ; preds = %1159
  %1163 = icmp eq i8* %961, null
  br i1 %1163, label %1164, label %1165

; <label>:1164                                    ; preds = %1162
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.67, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1334, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1165                                    ; preds = %1162
  %1166 = icmp eq i8* %963, null
  br i1 %1166, label %1167, label %1168

; <label>:1167                                    ; preds = %1165
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.68, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1335, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1168                                    ; preds = %1165
  %1169 = icmp eq i8* %965, null
  br i1 %1169, label %1170, label %1171

; <label>:1170                                    ; preds = %1168
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.69, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1336, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1171                                    ; preds = %1168
  %1172 = icmp eq i8* %967, null
  br i1 %1172, label %1173, label %1174

; <label>:1173                                    ; preds = %1171
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.70, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1337, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1174                                    ; preds = %1171
  %1175 = icmp eq i8* %980, null
  br i1 %1175, label %1176, label %1177

; <label>:1176                                    ; preds = %1174
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.71, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1339, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1177                                    ; preds = %1174
  %1178 = icmp eq i8* %982, null
  br i1 %1178, label %1179, label %1180

; <label>:1179                                    ; preds = %1177
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.72, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1340, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1180                                    ; preds = %1177
  %1181 = icmp eq i8* %969, null
  br i1 %1181, label %1182, label %1183

; <label>:1182                                    ; preds = %1180
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.73, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1341, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1183                                    ; preds = %1180
  %1184 = icmp eq i8* %971, null
  br i1 %1184, label %1185, label %1186

; <label>:1185                                    ; preds = %1183
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1342, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1186                                    ; preds = %1183
  %1187 = icmp eq i8* %973, null
  br i1 %1187, label %1188, label %1189

; <label>:1188                                    ; preds = %1186
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1343, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1189                                    ; preds = %1186
  %1190 = icmp eq i8* %975, null
  br i1 %1190, label %1191, label %1192

; <label>:1191                                    ; preds = %1189
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.76, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1344, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1192                                    ; preds = %1189
  %1193 = icmp eq i8* %984, null
  br i1 %1193, label %1194, label %1195

; <label>:1194                                    ; preds = %1192
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.77, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1345, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1195                                    ; preds = %1192
  %1196 = icmp eq i8* %986, null
  br i1 %1196, label %1197, label %1198

; <label>:1197                                    ; preds = %1195
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.78, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1346, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1198                                    ; preds = %1195
  %1199 = icmp eq i8* %990, null
  br i1 %1199, label %1200, label %1201

; <label>:1200                                    ; preds = %1198
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.79, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1347, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1201                                    ; preds = %1198
  %1202 = icmp eq i8* %988, null
  br i1 %1202, label %1203, label %1204

; <label>:1203                                    ; preds = %1201
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.80, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1348, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1204                                    ; preds = %1201
  %1205 = icmp eq i8* %997, null
  br i1 %1205, label %1206, label %1207

; <label>:1206                                    ; preds = %1204
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.81, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1349, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1207                                    ; preds = %1204
  %1208 = icmp eq i8* %1048, null
  br i1 %1208, label %1209, label %1210

; <label>:1209                                    ; preds = %1207
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.82, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1351, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1210                                    ; preds = %1207
  %1211 = icmp eq i8* %1050, null
  br i1 %1211, label %1212, label %1213

; <label>:1212                                    ; preds = %1210
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1352, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1213                                    ; preds = %1210
  %1214 = icmp eq i8* %1051, null
  br i1 %1214, label %1216, label %.preheader144

.preheader144:                                    ; preds = %1213
  %1215 = icmp sgt i32 %391, 0
  br i1 %1215, label %.lr.ph338.preheader, label %.preheader142

.lr.ph338.preheader:                              ; preds = %.preheader144
  br label %.lr.ph338

; <label>:1216                                    ; preds = %1213
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.84, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1353, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

.preheader143:                                    ; preds = %.lr.ph338
  br i1 true, label %.preheader142.loopexit, label %.preheader143..preheader142_crit_edge

.preheader143..preheader142_crit_edge:            ; preds = %.preheader143
  br label %.preheader142

.lr.ph338:                                        ; preds = %.lr.ph338.preheader, %.lr.ph338
  %indvars.iv586 = phi i64 [ %indvars.iv.next587, %.lr.ph338 ], [ 0, %.lr.ph338.preheader ]
  %1217 = getelementptr inbounds double, double* %1001, i64 %indvars.iv586
  store double 0.000000e+00, double* %1217, align 8, !tbaa !190
  %1218 = getelementptr inbounds double, double* %1003, i64 %indvars.iv586
  store double 0.000000e+00, double* %1218, align 8, !tbaa !190
  %1219 = getelementptr inbounds double, double* %1005, i64 %indvars.iv586
  store double 0.000000e+00, double* %1219, align 8, !tbaa !190
  %1220 = getelementptr inbounds double, double* %1007, i64 %indvars.iv586
  store double 0.000000e+00, double* %1220, align 8, !tbaa !190
  %1221 = getelementptr inbounds double, double* %1009, i64 %indvars.iv586
  store double 0.000000e+00, double* %1221, align 8, !tbaa !190
  %1222 = getelementptr inbounds double, double* %1011, i64 %indvars.iv586
  store double 0.000000e+00, double* %1222, align 8, !tbaa !190
  %1223 = getelementptr inbounds double, double* %1013, i64 %indvars.iv586
  store double 0.000000e+00, double* %1223, align 8, !tbaa !190
  %1224 = getelementptr inbounds double, double* %1015, i64 %indvars.iv586
  store double 0.000000e+00, double* %1224, align 8, !tbaa !190
  %1225 = getelementptr inbounds double, double* %1017, i64 %indvars.iv586
  store double 0.000000e+00, double* %1225, align 8, !tbaa !190
  %1226 = getelementptr inbounds double, double* %1019, i64 %indvars.iv586
  store double 0.000000e+00, double* %1226, align 8, !tbaa !190
  %1227 = getelementptr inbounds double, double* %1021, i64 %indvars.iv586
  store double 0.000000e+00, double* %1227, align 8, !tbaa !190
  %1228 = getelementptr inbounds double, double* %1023, i64 %indvars.iv586
  store double 0.000000e+00, double* %1228, align 8, !tbaa !190
  %1229 = getelementptr inbounds double, double* %1025, i64 %indvars.iv586
  store double 0.000000e+00, double* %1229, align 8, !tbaa !190
  %1230 = getelementptr inbounds double, double* %1027, i64 %indvars.iv586
  store double 0.000000e+00, double* %1230, align 8, !tbaa !190
  %1231 = shl nsw i64 %indvars.iv586, 2
  %1232 = getelementptr inbounds double, double* %1034, i64 %1231
  store double 0.000000e+00, double* %1232, align 8, !tbaa !190
  %1233 = or i64 %1231, 1
  %1234 = getelementptr inbounds double, double* %1034, i64 %1233
  store double 0.000000e+00, double* %1234, align 8, !tbaa !190
  %1235 = or i64 %1231, 2
  %1236 = getelementptr inbounds double, double* %1034, i64 %1235
  store double 0.000000e+00, double* %1236, align 8, !tbaa !190
  %1237 = or i64 %1231, 3
  %1238 = getelementptr inbounds double, double* %1034, i64 %1237
  store double 0.000000e+00, double* %1238, align 8, !tbaa !190
  %1239 = getelementptr inbounds double, double* %1036, i64 %1231
  store double 0.000000e+00, double* %1239, align 8, !tbaa !190
  %1240 = getelementptr inbounds double, double* %1036, i64 %1233
  store double 0.000000e+00, double* %1240, align 8, !tbaa !190
  %1241 = getelementptr inbounds double, double* %1036, i64 %1235
  store double 0.000000e+00, double* %1241, align 8, !tbaa !190
  %1242 = getelementptr inbounds double, double* %1036, i64 %1237
  store double 0.000000e+00, double* %1242, align 8, !tbaa !190
  %1243 = getelementptr inbounds double, double* %1038, i64 %1231
  store double 0.000000e+00, double* %1243, align 8, !tbaa !190
  %1244 = getelementptr inbounds double, double* %1038, i64 %1233
  store double 0.000000e+00, double* %1244, align 8, !tbaa !190
  %1245 = getelementptr inbounds double, double* %1038, i64 %1235
  store double 0.000000e+00, double* %1245, align 8, !tbaa !190
  %1246 = getelementptr inbounds double, double* %1038, i64 %1237
  store double 0.000000e+00, double* %1246, align 8, !tbaa !190
  %1247 = getelementptr inbounds i32, i32* %1041, i64 %indvars.iv586
  store i32 0, i32* %1247, align 4, !tbaa !1
  %1248 = getelementptr inbounds double, double* %1029, i64 %indvars.iv586
  store double 0.000000e+00, double* %1248, align 8, !tbaa !190
  %1249 = getelementptr inbounds i32, i32* %1044, i64 %1231
  store i32 0, i32* %1249, align 4, !tbaa !1
  %1250 = getelementptr inbounds i32, i32* %1044, i64 %1233
  store i32 0, i32* %1250, align 4, !tbaa !1
  %1251 = getelementptr inbounds i32, i32* %1044, i64 %1235
  store i32 0, i32* %1251, align 4, !tbaa !1
  %1252 = getelementptr inbounds i32, i32* %1044, i64 %1237
  store i32 0, i32* %1252, align 4, !tbaa !1
  %1253 = getelementptr inbounds i32, i32* %1046, i64 %1231
  store i32 0, i32* %1253, align 4, !tbaa !1
  %1254 = getelementptr inbounds i32, i32* %1046, i64 %1233
  store i32 0, i32* %1254, align 4, !tbaa !1
  %1255 = getelementptr inbounds i32, i32* %1046, i64 %1235
  store i32 0, i32* %1255, align 4, !tbaa !1
  %1256 = getelementptr inbounds i32, i32* %1046, i64 %1237
  store i32 0, i32* %1256, align 4, !tbaa !1
  %indvars.iv.next587 = add nuw nsw i64 %indvars.iv586, 1
  %lftr.wideiv588 = trunc i64 %indvars.iv.next587 to i32
  %exitcond589 = icmp eq i32 %lftr.wideiv588, %391
  br i1 %exitcond589, label %.preheader143, label %.lr.ph338

.preheader142.loopexit:                           ; preds = %.preheader143
  %1257 = icmp sgt i32 %392, 1
  %smax624 = select i1 %1257, i32 %392, i32 1
  %1258 = add i32 %smax624, -1
  %1259 = zext i32 %1258 to i64
  %1260 = shl nuw nsw i64 %1259, 2
  %1261 = add nuw nsw i64 %1260, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull %1047, i8 0, i64 %1261, i32 4, i1 false)
  br label %.preheader142

.preheader142:                                    ; preds = %.preheader143..preheader142_crit_edge, %.preheader142.loopexit, %.preheader144
  %1262 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1263 = add nsw i32 %1262, 1
  %1264 = mul nsw i32 %1263, %582
  %1265 = icmp sgt i32 %1264, 0
  br i1 %1265, label %.lr.ph334, label %.preheader141

.lr.ph334:                                        ; preds = %.preheader142
  %1266 = sext i32 %1264 to i64
  br label %1267

.preheader141.loopexit:                           ; preds = %1267
  br label %.preheader141

.preheader141:                                    ; preds = %.preheader141.loopexit, %.preheader142
  br i1 %1265, label %.preheader140.loopexit, label %.preheader140

; <label>:1267                                    ; preds = %1267, %.lr.ph334
  %indvars.iv582 = phi i64 [ 0, %.lr.ph334 ], [ %indvars.iv.next583, %1267 ]
  %1268 = getelementptr inbounds double, double* %911, i64 %indvars.iv582
  store double 0.000000e+00, double* %1268, align 8, !tbaa !190
  %1269 = getelementptr inbounds double, double* %876, i64 %indvars.iv582
  store double 0.000000e+00, double* %1269, align 8, !tbaa !190
  %1270 = getelementptr inbounds double, double* %889, i64 %indvars.iv582
  store double 0.000000e+00, double* %1270, align 8, !tbaa !190
  %indvars.iv.next583 = add nuw nsw i64 %indvars.iv582, 1
  %1271 = icmp slt i64 %indvars.iv.next583, %1266
  br i1 %1271, label %1267, label %.preheader141.loopexit

.preheader140.loopexit:                           ; preds = %.preheader141
  %1272 = add i32 %580, 1
  %1273 = sub i32 %1272, %574
  %1274 = mul i32 %1273, %1263
  %1275 = sext i32 %1274 to i64
  %1276 = icmp sgt i64 %1275, 1
  %smax623 = select i1 %1276, i64 %1275, i64 1
  %1277 = shl nsw i64 %smax623, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %882, i8 0, i64 %1277, i32 8, i1 false)
  br label %.preheader140

.preheader140:                                    ; preds = %.preheader140.loopexit, %.preheader141
  %1278 = icmp slt i32 %894, 0
  br i1 %1278, label %.preheader139, label %.lr.ph330.preheader

.lr.ph330.preheader:                              ; preds = %.preheader140
  %1279 = add i32 %ipsi_out.0.lcssa627, 1
  %1280 = sub i32 %1279, %ipsi_in.0.lcssa626
  br label %.lr.ph330

.preheader139.loopexit:                           ; preds = %.lr.ph330
  br label %.preheader139

.preheader139:                                    ; preds = %.preheader139.loopexit, %.preheader140
  %1281 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1282 = mul i32 %919, %1281
  %1283 = icmp sgt i32 %1282, 0
  br i1 %1283, label %.lr.ph328.preheader, label %.preheader138

.lr.ph328.preheader:                              ; preds = %.preheader139
  br label %.lr.ph328

.lr.ph330:                                        ; preds = %.lr.ph330, %.lr.ph330.preheader
  %indvars.iv576 = phi i64 [ 0, %.lr.ph330.preheader ], [ %indvars.iv.next577, %.lr.ph330 ]
  %1284 = getelementptr inbounds i32, i32* %902, i64 %indvars.iv576
  store i32 0, i32* %1284, align 4, !tbaa !1
  %1285 = getelementptr inbounds i32, i32* %904, i64 %indvars.iv576
  store i32 0, i32* %1285, align 4, !tbaa !1
  %indvars.iv.next577 = add nuw nsw i64 %indvars.iv576, 1
  %lftr.wideiv578 = trunc i64 %indvars.iv.next577 to i32
  %exitcond579 = icmp eq i32 %lftr.wideiv578, %1280
  br i1 %exitcond579, label %.preheader139.loopexit, label %.lr.ph330

.preheader138.loopexit:                           ; preds = %.lr.ph328
  br label %.preheader138

.preheader138:                                    ; preds = %.preheader138.loopexit, %.preheader139
  %1286 = phi i32 [ %1281, %.preheader139 ], [ %1294, %.preheader138.loopexit ]
  %1287 = mul nsw i32 %1286, %582
  %1288 = icmp sgt i32 %1287, 0
  br i1 %1288, label %.lr.ph326, label %.preheader137

.lr.ph326:                                        ; preds = %.preheader138
  %1289 = sext i32 %1287 to i64
  br label %1301

.lr.ph328:                                        ; preds = %.lr.ph328.preheader, %.lr.ph328
  %indvars.iv574 = phi i64 [ %indvars.iv.next575, %.lr.ph328 ], [ 0, %.lr.ph328.preheader ]
  %1290 = getelementptr inbounds i32, i32* %925, i64 %indvars.iv574
  store i32 0, i32* %1290, align 4, !tbaa !1
  %1291 = getelementptr inbounds i32, i32* %931, i64 %indvars.iv574
  store i32 0, i32* %1291, align 4, !tbaa !1
  %1292 = getelementptr inbounds double, double* %937, i64 %indvars.iv574
  store double 0.000000e+00, double* %1292, align 8, !tbaa !190
  %1293 = getelementptr inbounds double, double* %943, i64 %indvars.iv574
  store double 0.000000e+00, double* %1293, align 8, !tbaa !190
  %indvars.iv.next575 = add nuw nsw i64 %indvars.iv574, 1
  %1294 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1295 = mul i32 %919, %1294
  %1296 = sext i32 %1295 to i64
  %1297 = icmp slt i64 %indvars.iv.next575, %1296
  br i1 %1297, label %.lr.ph328, label %.preheader138.loopexit

.preheader137.loopexit:                           ; preds = %1301
  br label %.preheader137

.preheader137:                                    ; preds = %.preheader137.loopexit, %.preheader138
  %1298 = icmp slt i32 %581, 0
  br i1 %1298, label %.preheader136, label %.lr.ph324.preheader

.lr.ph324.preheader:                              ; preds = %.preheader137
  %1299 = add i32 %580, 1
  %1300 = sub i32 %1299, %574
  br label %.lr.ph324

; <label>:1301                                    ; preds = %1301, %.lr.ph326
  %indvars.iv572 = phi i64 [ 0, %.lr.ph326 ], [ %indvars.iv.next573, %1301 ]
  %1302 = getelementptr inbounds double, double* %949, i64 %indvars.iv572
  store double 0.000000e+00, double* %1302, align 8, !tbaa !190
  %1303 = getelementptr inbounds double, double* %955, i64 %indvars.iv572
  store double 0.000000e+00, double* %1303, align 8, !tbaa !190
  %1304 = getelementptr inbounds double, double* %869, i64 %indvars.iv572
  store double 0.000000e+00, double* %1304, align 8, !tbaa !190
  %indvars.iv.next573 = add nuw nsw i64 %indvars.iv572, 1
  %1305 = icmp slt i64 %indvars.iv.next573, %1289
  br i1 %1305, label %1301, label %.preheader137.loopexit

.preheader136:                                    ; preds = %.lr.ph324..preheader136_crit_edge, %.preheader137
  %1306 = phi i32 [ %.pre8, %.lr.ph324..preheader136_crit_edge ], [ %1286, %.preheader137 ]
  %1307 = mul i32 %1306, 3
  %1308 = add i32 %1307, 3
  %1309 = mul nsw i32 %1308, %582
  %1310 = icmp sgt i32 %1309, 0
  br i1 %1310, label %.preheader135.loopexit, label %.preheader135

.lr.ph324:                                        ; preds = %.lr.ph324, %.lr.ph324.preheader
  %indvars.iv568 = phi i64 [ 0, %.lr.ph324.preheader ], [ %indvars.iv.next569, %.lr.ph324 ]
  %1311 = shl nsw i64 %indvars.iv568, 2
  %1312 = getelementptr inbounds double, double* %861, i64 %1311
  store double 0.000000e+00, double* %1312, align 8, !tbaa !190
  %1313 = or i64 %1311, 1
  %1314 = getelementptr inbounds double, double* %861, i64 %1313
  store double 0.000000e+00, double* %1314, align 8, !tbaa !190
  %1315 = or i64 %1311, 2
  %1316 = getelementptr inbounds double, double* %861, i64 %1315
  store double 0.000000e+00, double* %1316, align 8, !tbaa !190
  %1317 = or i64 %1311, 3
  %1318 = getelementptr inbounds double, double* %861, i64 %1317
  store double 0.000000e+00, double* %1318, align 8, !tbaa !190
  %1319 = getelementptr inbounds double, double* %863, i64 %1311
  store double 0.000000e+00, double* %1319, align 8, !tbaa !190
  %1320 = getelementptr inbounds double, double* %863, i64 %1313
  store double 0.000000e+00, double* %1320, align 8, !tbaa !190
  %1321 = getelementptr inbounds double, double* %863, i64 %1315
  store double 0.000000e+00, double* %1321, align 8, !tbaa !190
  %1322 = getelementptr inbounds double, double* %863, i64 %1317
  store double 0.000000e+00, double* %1322, align 8, !tbaa !190
  %1323 = getelementptr inbounds double, double* %970, i64 %indvars.iv568
  store double 0.000000e+00, double* %1323, align 8, !tbaa !190
  %1324 = getelementptr inbounds double, double* %972, i64 %indvars.iv568
  store double 0.000000e+00, double* %1324, align 8, !tbaa !190
  %1325 = getelementptr inbounds double, double* %974, i64 %indvars.iv568
  store double 0.000000e+00, double* %1325, align 8, !tbaa !190
  %1326 = getelementptr inbounds double, double* %976, i64 %indvars.iv568
  store double 0.000000e+00, double* %1326, align 8, !tbaa !190
  %1327 = getelementptr inbounds double, double* %985, i64 %indvars.iv568
  store double 0.000000e+00, double* %1327, align 8, !tbaa !190
  %1328 = getelementptr inbounds double, double* %987, i64 %indvars.iv568
  store double 0.000000e+00, double* %1328, align 8, !tbaa !190
  %1329 = getelementptr inbounds double, double* %991, i64 %indvars.iv568
  store double 0.000000e+00, double* %1329, align 8, !tbaa !190
  %1330 = getelementptr inbounds double, double* %989, i64 %indvars.iv568
  store double 0.000000e+00, double* %1330, align 8, !tbaa !190
  %1331 = getelementptr inbounds double, double* %957, i64 %indvars.iv568
  store double 0.000000e+00, double* %1331, align 8, !tbaa !190
  %1332 = getelementptr inbounds double, double* %959, i64 %indvars.iv568
  store double 0.000000e+00, double* %1332, align 8, !tbaa !190
  %1333 = getelementptr inbounds i32, i32* %962, i64 %indvars.iv568
  store i32 0, i32* %1333, align 4, !tbaa !1
  %1334 = getelementptr inbounds i32, i32* %964, i64 %indvars.iv568
  store i32 0, i32* %1334, align 4, !tbaa !1
  %indvars.iv.next569 = add nuw nsw i64 %indvars.iv568, 1
  %lftr.wideiv570 = trunc i64 %indvars.iv.next569 to i32
  %exitcond571 = icmp eq i32 %lftr.wideiv570, %1300
  br i1 %exitcond571, label %.lr.ph324..preheader136_crit_edge, label %.lr.ph324

.lr.ph324..preheader136_crit_edge:                ; preds = %.lr.ph324
  %.pre8 = load i32, i32* %mzeta, align 4, !tbaa !1
  br label %.preheader136

.preheader135.loopexit:                           ; preds = %.preheader136
  %1335 = add i32 %580, 1
  %1336 = sub i32 %1335, %574
  %1337 = mul i32 %1336, %1308
  %1338 = sext i32 %1337 to i64
  %1339 = icmp sgt i64 %1338, 1
  %smax622 = select i1 %1339, i64 %1338, i64 1
  %1340 = shl nsw i64 %smax622, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %918, i8 0, i64 %1340, i32 8, i1 false)
  %.pre9 = load i32, i32* %mzeta, align 4, !tbaa !1
  br label %.preheader135

.preheader135:                                    ; preds = %.preheader135.loopexit, %.preheader136
  %1341 = phi i32 [ %.pre9, %.preheader135.loopexit ], [ %1306, %.preheader136 ]
  %1342 = add nsw i32 %1341, 1
  %1343 = mul nsw i32 %1342, %582
  %1344 = icmp sgt i32 %1343, 0
  br i1 %1344, label %.preheader134.loopexit, label %.preheader134

.preheader134.loopexit:                           ; preds = %.preheader135
  %1345 = add i32 %580, 1
  %1346 = sub i32 %1345, %574
  %1347 = mul i32 %1346, %1342
  %1348 = sext i32 %1347 to i64
  %1349 = icmp sgt i64 %1348, 1
  %smax621 = select i1 %1349, i64 %1348, i64 1
  %1350 = shl nsw i64 %smax621, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %997, i8 0, i64 %1350, i32 8, i1 false)
  br label %.preheader134

.preheader134:                                    ; preds = %.preheader134.loopexit, %.preheader135
  %1351 = icmp sgt i32 %581, -1
  br i1 %1351, label %.lr.ph318.preheader, label %.preheader133

.lr.ph318.preheader:                              ; preds = %.preheader134
  br label %.lr.ph318

.preheader133.loopexit:                           ; preds = %.lr.ph318
  br label %.preheader133

.preheader133:                                    ; preds = %.preheader133.loopexit, %.preheader134
  br i1 %631, label %._crit_edge316, label %.lr.ph315.preheader

.lr.ph315.preheader:                              ; preds = %.preheader133
  br label %.lr.ph315

.lr.ph318:                                        ; preds = %.lr.ph318, %.lr.ph318.preheader
  %indvars.iv562 = phi i64 [ 0, %.lr.ph318.preheader ], [ %indvars.iv.next563, %.lr.ph318 ]
  %1352 = getelementptr inbounds double, double* %981, i64 %indvars.iv562
  store double 0.000000e+00, double* %1352, align 8, !tbaa !190
  %1353 = getelementptr inbounds double, double* %983, i64 %indvars.iv562
  store double 0.000000e+00, double* %1353, align 8, !tbaa !190
  %indvars.iv.next563 = add nuw nsw i64 %indvars.iv562, 1
  %1354 = icmp slt i64 %indvars.iv.next563, %978
  br i1 %1354, label %.lr.ph318, label %.preheader133.loopexit

.lr.ph315:                                        ; preds = %._crit_edge312, %.lr.ph315.preheader
  %indvars.iv560 = phi i64 [ %572, %.lr.ph315.preheader ], [ %indvars.iv.next561, %._crit_edge312 ]
  %1355 = trunc i64 %indvars.iv560 to i32
  %1356 = sitofp i32 %1355 to double
  %1357 = fmul double %285, %1356
  %1358 = fadd double %1357, 3.580000e-02
  %1359 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv560
  %1360 = load i32, i32* %1359, align 4, !tbaa !1
  %1361 = icmp slt i32 %1360, 1
  br i1 %1361, label %._crit_edge312, label %.lr.ph311

.lr.ph311:                                        ; preds = %.lr.ph315
  %1362 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv560
  %1363 = getelementptr inbounds double, double* %197, i64 %indvars.iv560
  %1364 = getelementptr inbounds double, double* %179, i64 %indvars.iv560
  %1365 = icmp slt i64 %indvars.iv560, %495
  %1366 = icmp sgt i64 %indvars.iv560, %498
  %or.cond79 = or i1 %1365, %1366
  %1367 = getelementptr inbounds double, double* %221, i64 %indvars.iv560
  %.pre10 = load i32, i32* %mzeta, align 4, !tbaa !1
  br label %1368

; <label>:1368                                    ; preds = %._crit_edge307, %.lr.ph311
  %1369 = phi i32 [ %1360, %.lr.ph311 ], [ %1400, %._crit_edge307 ]
  %1370 = phi i32 [ %.pre10, %.lr.ph311 ], [ %1401, %._crit_edge307 ]
  %j.0308 = phi i32 [ 1, %.lr.ph311 ], [ %1402, %._crit_edge307 ]
  %1371 = icmp slt i32 %1370, 1
  br i1 %1371, label %._crit_edge307, label %.lr.ph306

.lr.ph306:                                        ; preds = %1368
  %1372 = load i32, i32* %1362, align 4, !tbaa !1
  %1373 = sitofp i32 %j.0308 to double
  %1374 = sub i32 %j.0308, %574
  %1375 = add i32 %1374, %1372
  br label %1376

; <label>:1376                                    ; preds = %1397, %.lr.ph306
  %k.0304 = phi i32 [ 1, %.lr.ph306 ], [ %1398, %1397 ]
  %1377 = sitofp i32 %k.0304 to double
  %1378 = fmul double %127, %1377
  %1379 = fadd double %120, %1378
  %1380 = load double, double* %1363, align 8, !tbaa !190
  %1381 = fmul double %1373, %1380
  %1382 = load double, double* %1364, align 8, !tbaa !190
  %1383 = fmul double %1379, %1382
  %1384 = fadd double %1381, %1383
  %1385 = call double @cos(double %1384) #3
  %1386 = fmul double %1358, %1385
  %1387 = fadd double %1386, 1.000000e+00
  %pow268 = fmul double %1387, %1387
  %1388 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1389 = mul nsw i32 %1388, %1375
  %1390 = add nsw i32 %k.0304, -1
  %1391 = add i32 %1390, %1389
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds double, double* %869, i64 %1392
  store double %pow268, double* %1393, align 8, !tbaa !190
  br i1 %or.cond79, label %1397, label %1394

; <label>:1394                                    ; preds = %1376
  %1395 = load double, double* %1367, align 8, !tbaa !190
  %1396 = fadd double %1395, %pow268
  store double %1396, double* %1367, align 8, !tbaa !190
  br label %1397

; <label>:1397                                    ; preds = %1394, %1376
  %1398 = add nuw nsw i32 %k.0304, 1
  %1399 = icmp slt i32 %k.0304, %1388
  br i1 %1399, label %1376, label %.._crit_edge307_crit_edge

.._crit_edge307_crit_edge:                        ; preds = %1397
  %.pre11 = load i32, i32* %1359, align 4, !tbaa !1
  br label %._crit_edge307

._crit_edge307:                                   ; preds = %.._crit_edge307_crit_edge, %1368
  %1400 = phi i32 [ %.pre11, %.._crit_edge307_crit_edge ], [ %1369, %1368 ]
  %1401 = phi i32 [ %1388, %.._crit_edge307_crit_edge ], [ %1370, %1368 ]
  %1402 = add nuw nsw i32 %j.0308, 1
  %1403 = icmp slt i32 %j.0308, %1400
  br i1 %1403, label %1368, label %._crit_edge312.loopexit

._crit_edge312.loopexit:                          ; preds = %._crit_edge307
  br label %._crit_edge312

._crit_edge312:                                   ; preds = %._crit_edge312.loopexit, %.lr.ph315
  %1404 = icmp slt i64 %indvars.iv560, %575
  %indvars.iv.next561 = add nsw i64 %indvars.iv560, 1
  br i1 %1404, label %.lr.ph315, label %._crit_edge316.loopexit

._crit_edge316.loopexit:                          ; preds = %._crit_edge312
  br label %._crit_edge316

._crit_edge316:                                   ; preds = %._crit_edge316.loopexit, %.preheader133
  %1405 = load i32, i32* %mpsi, align 4, !tbaa !1
  %1406 = add nsw i32 %1405, 1
  %1407 = sext i32 %1406 to i64
  %1408 = shl nsw i64 %1407, 3
  %1409 = call fastcc i8* @_mm_malloc(i64 %1408)
  %1410 = bitcast i8* %1409 to double*
  %1411 = icmp eq i8* %1409, null
  br i1 %1411, label %1412, label %1413

; <label>:1412                                    ; preds = %._crit_edge316
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.85, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1496, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1413                                    ; preds = %._crit_edge316
  %1414 = load i32, i32* %mpsi, align 4, !tbaa !1
  %1415 = add nsw i32 %1414, 1
  %1416 = load i32, i32* %85, align 4, !tbaa !1
  %1417 = call i32 @MPI_Allreduce(i8* %220, i8* nonnull %1409, i32 %1415, i32 1275070475, i32 1476395011, i32 %1416) #3
  %1418 = load i32, i32* %mpsi, align 4, !tbaa !1
  %1419 = icmp slt i32 %1418, 0
  br i1 %1419, label %.preheader132, label %.lr.ph303

.lr.ph303:                                        ; preds = %1413
  %1420 = sext i32 %1418 to i64
  br label %1427

.preheader132.loopexit:                           ; preds = %1427
  br label %.preheader132

.preheader132:                                    ; preds = %.preheader132.loopexit, %1413
  br i1 %631, label %.preheader130, label %.lr.ph300

.lr.ph300:                                        ; preds = %.preheader132
  %1421 = fmul double %285, 5.000000e-01
  %1422 = mul nsw i32 %391, %npartdom.0
  %1423 = sitofp i32 %1422 to double
  %1424 = load i32, i32* %mzeta, align 4
  %1425 = icmp slt i32 %1424, 1
  %1426 = add i32 %1424, 1
  br label %1440

; <label>:1427                                    ; preds = %1427, %.lr.ph303
  %indvars.iv558 = phi i64 [ %indvars.iv.next559, %1427 ], [ 0, %.lr.ph303 ]
  %1428 = getelementptr inbounds double, double* %1410, i64 %indvars.iv558
  %1429 = bitcast double* %1428 to i64*
  %1430 = load i64, i64* %1429, align 8, !tbaa !190
  %1431 = getelementptr inbounds double, double* %221, i64 %indvars.iv558
  %1432 = bitcast double* %1431 to i64*
  store i64 %1430, i64* %1432, align 8, !tbaa !190
  %indvars.iv.next559 = add nuw nsw i64 %indvars.iv558, 1
  %1433 = icmp slt i64 %indvars.iv558, %1420
  br i1 %1433, label %1427, label %.preheader132.loopexit

.preheader130.loopexit:                           ; preds = %._crit_edge298
  br label %.preheader130

.preheader130:                                    ; preds = %.preheader130.loopexit, %.preheader132
  br i1 %1419, label %.preheader129, label %.lr.ph285

.lr.ph285:                                        ; preds = %.preheader130
  %1434 = fmul double %285, 5.000000e-01
  %1435 = mul nsw i32 %391, %npartdom.0
  %1436 = sitofp i32 %1435 to double
  %1437 = load i32, i32* %ntoroidal, align 4
  %1438 = sitofp i32 %1437 to double
  %1439 = sext i32 %1418 to i64
  br label %1498

; <label>:1440                                    ; preds = %._crit_edge298, %.lr.ph300
  %indvars.iv556 = phi i64 [ %indvars.iv.next557, %._crit_edge298 ], [ %572, %.lr.ph300 ]
  %1441 = trunc i64 %indvars.iv556 to i32
  %1442 = sitofp i32 %1441 to double
  %1443 = fmul double %285, %1442
  %1444 = fadd double %1443, 3.580000e-02
  %1445 = fadd double %1421, %1444
  %1446 = fcmp ogt double %1445, 3.222000e-01
  %.80 = select i1 %1446, double 3.222000e-01, double %1445
  %1447 = fsub double %1444, %1421
  %1448 = fcmp olt double %1447, 3.580000e-02
  %1449 = select i1 %1448, double 3.580000e-02, double %1447
  %1450 = fmul double %.80, %.80
  %1451 = fmul double %1449, %1449
  %1452 = fsub double %1450, %1451
  %1453 = fmul double %1423, %1452
  %1454 = fdiv double %1453, 0x3FBA3F7C16D1D39C
  %1455 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv556
  %1456 = load i32, i32* %1455, align 4, !tbaa !1
  %1457 = icmp slt i32 %1456, 1
  br i1 %1457, label %.preheader131, label %.lr.ph293

.lr.ph293:                                        ; preds = %1440
  %1458 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv556
  %1459 = load i32, i32* %1458, align 4
  %1460 = getelementptr inbounds double, double* %221, i64 %indvars.iv556
  br label %1468

.preheader131.loopexit:                           ; preds = %._crit_edge289
  br label %.preheader131

.preheader131:                                    ; preds = %.preheader131.loopexit, %1440
  br i1 %1425, label %._crit_edge298, label %.lr.ph297

.lr.ph297:                                        ; preds = %.preheader131
  %1461 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv556
  %1462 = load i32, i32* %1461, align 4
  %1463 = load i32, i32* %1455, align 4
  %1464 = sub i32 %1462, %574
  %1465 = add i32 %1464, %1463
  %1466 = mul nsw i32 %1465, %1424
  %1467 = mul nsw i32 %1464, %1424
  br label %1485

; <label>:1468                                    ; preds = %._crit_edge289, %.lr.ph293
  %j.1290 = phi i32 [ 1, %.lr.ph293 ], [ %1483, %._crit_edge289 ]
  br i1 %1425, label %._crit_edge289, label %.lr.ph288

.lr.ph288:                                        ; preds = %1468
  %1469 = sub i32 %j.1290, %574
  %1470 = add i32 %1469, %1459
  %1471 = mul nsw i32 %1424, %1470
  br label %1472

; <label>:1472                                    ; preds = %1472, %.lr.ph288
  %indvars.iv548 = phi i64 [ %indvars.iv.next549, %1472 ], [ 1, %.lr.ph288 ]
  %1473 = add i64 %indvars.iv548, 4294967295
  %1474 = trunc i64 %1473 to i32
  %1475 = add i32 %1474, %1471
  %1476 = sext i32 %1475 to i64
  %1477 = getelementptr inbounds double, double* %869, i64 %1476
  %1478 = load double, double* %1477, align 8, !tbaa !190
  %1479 = fmul double %1454, %1478
  %1480 = load double, double* %1460, align 8, !tbaa !190
  %1481 = fdiv double %1479, %1480
  store double %1481, double* %1477, align 8, !tbaa !190
  %1482 = fdiv double 1.000000e+00, %1481
  store double %1482, double* %1477, align 8, !tbaa !190
  %indvars.iv.next549 = add nuw nsw i64 %indvars.iv548, 1
  %lftr.wideiv550 = trunc i64 %indvars.iv.next549 to i32
  %exitcond551 = icmp eq i32 %lftr.wideiv550, %1426
  br i1 %exitcond551, label %._crit_edge289.loopexit, label %1472

._crit_edge289.loopexit:                          ; preds = %1472
  br label %._crit_edge289

._crit_edge289:                                   ; preds = %._crit_edge289.loopexit, %1468
  %1483 = add nuw nsw i32 %j.1290, 1
  %1484 = icmp slt i32 %j.1290, %1456
  br i1 %1484, label %1468, label %.preheader131.loopexit

; <label>:1485                                    ; preds = %1485, %.lr.ph297
  %indvars.iv552 = phi i64 [ %indvars.iv.next553, %1485 ], [ 1, %.lr.ph297 ]
  %1486 = add i64 %indvars.iv552, 4294967295
  %1487 = trunc i64 %1486 to i32
  %1488 = add i32 %1487, %1466
  %1489 = sext i32 %1488 to i64
  %1490 = getelementptr inbounds double, double* %869, i64 %1489
  %1491 = bitcast double* %1490 to i64*
  %1492 = load i64, i64* %1491, align 8, !tbaa !190
  %1493 = add i32 %1487, %1467
  %1494 = sext i32 %1493 to i64
  %1495 = getelementptr inbounds double, double* %869, i64 %1494
  %1496 = bitcast double* %1495 to i64*
  store i64 %1492, i64* %1496, align 8, !tbaa !190
  %indvars.iv.next553 = add nuw nsw i64 %indvars.iv552, 1
  %lftr.wideiv554 = trunc i64 %indvars.iv.next553 to i32
  %exitcond555 = icmp eq i32 %lftr.wideiv554, %1426
  br i1 %exitcond555, label %._crit_edge298.loopexit, label %1485

._crit_edge298.loopexit:                          ; preds = %1485
  br label %._crit_edge298

._crit_edge298:                                   ; preds = %._crit_edge298.loopexit, %.preheader131
  %1497 = icmp slt i64 %indvars.iv556, %575
  %indvars.iv.next557 = add nsw i64 %indvars.iv556, 1
  br i1 %1497, label %1440, label %.preheader130.loopexit

.preheader129.loopexit:                           ; preds = %1498
  br label %.preheader129

.preheader129:                                    ; preds = %.preheader129.loopexit, %.preheader130
  br i1 %631, label %.preheader128, label %.lr.ph283.preheader

.lr.ph283.preheader:                              ; preds = %.preheader129
  br label %.lr.ph283

; <label>:1498                                    ; preds = %1498, %.lr.ph285
  %indvars.iv546 = phi i64 [ %indvars.iv.next547, %1498 ], [ 0, %.lr.ph285 ]
  %1499 = trunc i64 %indvars.iv546 to i32
  %1500 = sitofp i32 %1499 to double
  %1501 = fmul double %285, %1500
  %1502 = fadd double %1501, 3.580000e-02
  %1503 = fadd double %1434, %1502
  %1504 = fcmp ogt double %1503, 3.222000e-01
  %.81 = select i1 %1504, double 3.222000e-01, double %1503
  %1505 = fsub double %1502, %1434
  %1506 = fcmp olt double %1505, 3.580000e-02
  %1507 = select i1 %1506, double 3.580000e-02, double %1505
  %1508 = fmul double %.81, %.81
  %1509 = fmul double %1507, %1507
  %1510 = fsub double %1508, %1509
  %1511 = fmul double %1436, %1510
  %1512 = fdiv double %1511, 0x3FBA3F7C16D1D39C
  %1513 = fmul double %1512, %1438
  %1514 = fdiv double 1.000000e+00, %1513
  %1515 = getelementptr inbounds double, double* %221, i64 %indvars.iv546
  store double %1514, double* %1515, align 8, !tbaa !190
  %indvars.iv.next547 = add nuw nsw i64 %indvars.iv546, 1
  %1516 = icmp slt i64 %indvars.iv546, %1439
  br i1 %1516, label %1498, label %.preheader129.loopexit

.preheader128.loopexit:                           ; preds = %._crit_edge281
  br label %.preheader128

.preheader128:                                    ; preds = %.preheader128.loopexit, %.preheader129
  %1517 = icmp sgt i32 %ipsi_nover_in_radiald.2, %ipsi_nover_out_radiald.3
  br i1 %1517, label %.preheader127, label %.lr.ph277

.lr.ph277:                                        ; preds = %.preheader128
  %1518 = sub i32 1, %574
  %1519 = xor i32 %574, -1
  br label %1573

.lr.ph283:                                        ; preds = %._crit_edge281, %.lr.ph283.preheader
  %indvars.iv544 = phi i64 [ %572, %.lr.ph283.preheader ], [ %indvars.iv.next545, %._crit_edge281 ]
  %1520 = trunc i64 %indvars.iv544 to i32
  %1521 = sitofp i32 %1520 to double
  %1522 = fmul double %285, %1521
  %1523 = fadd double %1522, 3.580000e-02
  %1524 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv544
  %1525 = load i32, i32* %1524, align 4, !tbaa !1
  %1526 = icmp slt i32 %1525, 0
  br i1 %1526, label %._crit_edge281, label %.lr.ph280

.lr.ph280:                                        ; preds = %.lr.ph283
  %1527 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv544
  %1528 = getelementptr inbounds double, double* %197, i64 %indvars.iv544
  %1529 = fdiv double 1.000000e+00, %1523
  br label %1530

; <label>:1530                                    ; preds = %1530, %.lr.ph280
  %j.2278 = phi i32 [ 0, %.lr.ph280 ], [ %1566, %1530 ]
  %1531 = load i32, i32* %1527, align 4, !tbaa !1
  %1532 = sub i32 %j.2278, %574
  %1533 = add i32 %1532, %1531
  %1534 = load double, double* %1528, align 8, !tbaa !190
  %1535 = sitofp i32 %j.2278 to double
  %1536 = fmul double %1535, %1534
  %1537 = call double @cos(double %1536) #3
  %1538 = fmul double %1523, %1537
  %1539 = fadd double %1538, 1.000000e+00
  %1540 = fdiv double 1.000000e+00, %1539
  %1541 = fdiv double 2.000000e+00, %1540
  %1542 = call double @sqrt(double %1541) #3
  %1543 = fmul double %171, %1542
  %1544 = fsub double -0.000000e+00, %1543
  %1545 = shl nsw i32 %1533, 2
  %1546 = sext i32 %1545 to i64
  %1547 = getelementptr inbounds double, double* %861, i64 %1546
  store double %1544, double* %1547, align 8, !tbaa !190
  %1548 = or i32 %1545, 1
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr inbounds double, double* %861, i64 %1549
  store double %1543, double* %1550, align 8, !tbaa !190
  %1551 = getelementptr inbounds double, double* %863, i64 %1546
  store double 0.000000e+00, double* %1551, align 8, !tbaa !190
  %1552 = getelementptr inbounds double, double* %863, i64 %1549
  store double 0.000000e+00, double* %1552, align 8, !tbaa !190
  %1553 = fmul double %1529, %1544
  %1554 = or i32 %1545, 2
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds double, double* %863, i64 %1555
  store double %1553, double* %1556, align 8, !tbaa !190
  %1557 = fmul double %1529, %1543
  %1558 = or i32 %1545, 3
  %1559 = sext i32 %1558 to i64
  %1560 = getelementptr inbounds double, double* %863, i64 %1559
  store double %1557, double* %1560, align 8, !tbaa !190
  %1561 = fmul double %1543, 5.000000e-01
  %1562 = fmul double %1543, %1561
  %1563 = fdiv double %1562, %1523
  %1564 = getelementptr inbounds double, double* %861, i64 %1555
  store double %1563, double* %1564, align 8, !tbaa !190
  %1565 = getelementptr inbounds double, double* %861, i64 %1559
  store double %1563, double* %1565, align 8, !tbaa !190
  %1566 = add nuw nsw i32 %j.2278, 1
  %1567 = load i32, i32* %1524, align 4, !tbaa !1
  %1568 = icmp slt i32 %j.2278, %1567
  br i1 %1568, label %1530, label %._crit_edge281.loopexit

._crit_edge281.loopexit:                          ; preds = %1530
  br label %._crit_edge281

._crit_edge281:                                   ; preds = %._crit_edge281.loopexit, %.lr.ph283
  %1569 = icmp slt i64 %indvars.iv544, %575
  %indvars.iv.next545 = add nsw i64 %indvars.iv544, 1
  br i1 %1569, label %.lr.ph283, label %.preheader128.loopexit

.preheader127.loopexit:                           ; preds = %._crit_edge275
  br label %.preheader127

.preheader127:                                    ; preds = %.preheader127.loopexit, %.preheader128
  br i1 %631, label %.preheader117, label %.lr.ph271

.lr.ph271:                                        ; preds = %.preheader127
  %1570 = load i32, i32* %ntoroidal, align 4
  %1571 = add nsw i32 %1570, -1
  %1572 = sext i32 %574 to i64
  br label %1610

; <label>:1573                                    ; preds = %._crit_edge275, %.lr.ph277
  %indvars.iv542 = phi i64 [ %indvars.iv.next543, %._crit_edge275 ], [ %848, %.lr.ph277 ]
  %1574 = trunc i64 %indvars.iv542 to i32
  %1575 = sitofp i32 %1574 to double
  %1576 = fmul double %285, %1575
  %1577 = fadd double %1576, 3.580000e-02
  %1578 = fdiv double 1.000000e+00, %1577
  %1579 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv542
  %1580 = load i32, i32* %1579, align 4, !tbaa !1
  %1581 = icmp slt i32 %1580, 0
  br i1 %1581, label %._crit_edge275, label %.lr.ph274

.lr.ph274:                                        ; preds = %1573
  %1582 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv542
  %1583 = getelementptr inbounds double, double* %282, i64 %indvars.iv542
  %1584 = bitcast double* %1583 to i64*
  br label %1586

._crit_edge275.loopexit:                          ; preds = %1586
  br label %._crit_edge275

._crit_edge275:                                   ; preds = %._crit_edge275.loopexit, %1573
  %1585 = icmp slt i64 %indvars.iv542, %851
  %indvars.iv.next543 = add nsw i64 %indvars.iv542, 1
  br i1 %1585, label %1573, label %.preheader127.loopexit

; <label>:1586                                    ; preds = %1586, %.lr.ph274
  %1587 = phi i32 [ %1580, %.lr.ph274 ], [ %1606, %1586 ]
  %j2.0272 = phi i32 [ 0, %.lr.ph274 ], [ %1591, %1586 ]
  %1588 = load i32, i32* %1582, align 4, !tbaa !1
  %1589 = sub i32 %j2.0272, %574
  %1590 = add i32 %1589, %1588
  %1591 = add nuw nsw i32 %j2.0272, 1
  %1592 = srem i32 %j2.0272, %1587
  %1593 = sext i32 %1590 to i64
  %1594 = getelementptr inbounds double, double* %957, i64 %1593
  store double %1578, double* %1594, align 8, !tbaa !190
  %1595 = load i64, i64* %1584, align 8, !tbaa !190
  %1596 = getelementptr inbounds double, double* %959, i64 %1593
  %1597 = bitcast double* %1596 to i64*
  store i64 %1595, i64* %1597, align 8, !tbaa !190
  %1598 = load i32, i32* %1582, align 4, !tbaa !1
  %1599 = add i32 %1518, %1592
  %1600 = add i32 %1599, %1598
  %1601 = getelementptr inbounds i32, i32* %962, i64 %1593
  store i32 %1600, i32* %1601, align 4, !tbaa !1
  %1602 = load i32, i32* %1582, align 4, !tbaa !1
  %1603 = add i32 %j2.0272, %1519
  %1604 = add i32 %1603, %1602
  %1605 = getelementptr inbounds i32, i32* %964, i64 %1593
  store i32 %1604, i32* %1605, align 4, !tbaa !1
  %1606 = load i32, i32* %1579, align 4, !tbaa !1
  %1607 = icmp slt i32 %j2.0272, %1606
  br i1 %1607, label %1586, label %._crit_edge275.loopexit

.preheader117.loopexit:                           ; preds = %.loopexit
  br label %.preheader117

.preheader117:                                    ; preds = %.preheader117.loopexit, %.preheader127
  %1608 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1609 = icmp slt i32 %1608, 1
  br i1 %1609, label %._crit_edge250, label %.lr.ph249

.lr.ph249:                                        ; preds = %.preheader117
  br label %1686

; <label>:1610                                    ; preds = %.loopexit, %.lr.ph271
  %indvars.iv540 = phi i64 [ %indvars.iv.next541, %.loopexit ], [ %572, %.lr.ph271 ]
  %1611 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv540
  %1612 = load i32, i32* %1611, align 4, !tbaa !1
  %1613 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv540
  %1614 = load i32, i32* %1613, align 4, !tbaa !1
  %1615 = getelementptr inbounds i32, i32* %185, i64 %indvars.iv540
  %1616 = load i32, i32* %1615, align 4, !tbaa !1
  %1617 = load i32, i32* %myrank_toroidal, align 4, !tbaa !1
  %1618 = icmp eq i32 %1617, 0
  br i1 %1618, label %.preheader120, label %1647

.preheader120:                                    ; preds = %1610
  %1619 = icmp slt i32 %1614, 0
  br i1 %1619, label %.preheader119, label %.lr.ph263

.lr.ph263:                                        ; preds = %.preheader120
  %1620 = sub i32 %1612, %574
  %1621 = add i32 %1614, 1
  br label %1628

.preheader119.loopexit:                           ; preds = %1628
  br label %.preheader119

.preheader119:                                    ; preds = %.preheader119.loopexit, %.preheader120
  %1622 = add i32 %1616, %1612
  %1623 = icmp slt i32 %1616, 0
  br i1 %1623, label %.preheader118, label %.lr.ph265

.lr.ph265:                                        ; preds = %.preheader119
  %1624 = sub i32 %1614, %574
  %1625 = sub i32 %1624, %1616
  %1626 = sext i32 %1612 to i64
  %1627 = sext i32 %1622 to i64
  br label %1636

; <label>:1628                                    ; preds = %1628, %.lr.ph263
  %indvars.iv530 = phi i64 [ %indvars.iv.next531, %1628 ], [ 0, %.lr.ph263 ]
  %1629 = trunc i64 %indvars.iv530 to i32
  %1630 = add i32 %1620, %1629
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds i32, i32* %968, i64 %1631
  store i32 %1630, i32* %1632, align 4, !tbaa !1
  %indvars.iv.next531 = add nuw nsw i64 %indvars.iv530, 1
  %lftr.wideiv532 = trunc i64 %indvars.iv.next531 to i32
  %exitcond533 = icmp eq i32 %lftr.wideiv532, %1621
  br i1 %exitcond533, label %.preheader119.loopexit, label %1628

.preheader118.loopexit:                           ; preds = %1636
  br label %.preheader118

.preheader118:                                    ; preds = %.preheader118.loopexit, %.preheader119
  %1633 = add i32 %1614, %1612
  %1634 = icmp slt i32 %1622, %1633
  br i1 %1634, label %.lr.ph269, label %.loopexit

.lr.ph269:                                        ; preds = %.preheader118
  %sum438 = add i32 %1616, %574
  %1635 = sext i32 %1622 to i64
  br label %1642

; <label>:1636                                    ; preds = %1636, %.lr.ph265
  %indvars.iv534 = phi i64 [ %indvars.iv.next535, %1636 ], [ %1626, %.lr.ph265 ]
  %1637 = trunc i64 %indvars.iv534 to i32
  %1638 = add i32 %1625, %1637
  %1639 = sub nsw i64 %indvars.iv534, %1572
  %1640 = getelementptr inbounds i32, i32* %966, i64 %1639
  store i32 %1638, i32* %1640, align 4, !tbaa !1
  %1641 = icmp slt i64 %indvars.iv534, %1627
  %indvars.iv.next535 = add nsw i64 %indvars.iv534, 1
  br i1 %1641, label %1636, label %.preheader118.loopexit

; <label>:1642                                    ; preds = %1642, %.lr.ph269
  %indvars.iv536 = phi i64 [ %1635, %.lr.ph269 ], [ %indvars.iv.next537, %1642 ]
  %indvars.iv.next537 = add nsw i64 %indvars.iv536, 1
  %1643 = trunc i64 %indvars.iv.next537 to i32
  %1644 = sub i32 %1643, %sum438
  %1645 = sub nsw i64 %indvars.iv.next537, %1572
  %1646 = getelementptr inbounds i32, i32* %966, i64 %1645
  store i32 %1644, i32* %1646, align 4, !tbaa !1
  %exitcond539 = icmp eq i32 %1643, %1633
  br i1 %exitcond539, label %.loopexit.loopexit, label %1642

; <label>:1647                                    ; preds = %1610
  %1648 = icmp eq i32 %1617, %1571
  %1649 = icmp slt i32 %1614, 0
  br i1 %1648, label %.preheader124, label %.preheader125

.preheader125:                                    ; preds = %1647
  br i1 %1649, label %.loopexit, label %.lr.ph252

.lr.ph252:                                        ; preds = %.preheader125
  %1650 = sub i32 %1612, %574
  %1651 = add i32 %1614, 1
  br label %1679

.preheader124:                                    ; preds = %1647
  br i1 %1649, label %.preheader123, label %.lr.ph254

.lr.ph254:                                        ; preds = %.preheader124
  %1652 = sub i32 %1612, %574
  %1653 = add i32 %1614, 1
  br label %1660

.preheader123.loopexit:                           ; preds = %1660
  br label %.preheader123

.preheader123:                                    ; preds = %.preheader123.loopexit, %.preheader124
  %1654 = add nsw i32 %1614, %1612
  %1655 = sub nsw i32 %1654, %1616
  %1656 = icmp sgt i32 %1612, %1655
  br i1 %1656, label %.preheader121, label %.lr.ph256

.lr.ph256:                                        ; preds = %.preheader123
  %1657 = sub i32 %1616, %574
  %1658 = sext i32 %1612 to i64
  %1659 = sext i32 %1655 to i64
  br label %1667

; <label>:1660                                    ; preds = %1660, %.lr.ph254
  %indvars.iv522 = phi i64 [ %indvars.iv.next523, %1660 ], [ 0, %.lr.ph254 ]
  %1661 = trunc i64 %indvars.iv522 to i32
  %1662 = add i32 %1652, %1661
  %1663 = sext i32 %1662 to i64
  %1664 = getelementptr inbounds i32, i32* %966, i64 %1663
  store i32 %1662, i32* %1664, align 4, !tbaa !1
  %indvars.iv.next523 = add nuw nsw i64 %indvars.iv522, 1
  %lftr.wideiv524 = trunc i64 %indvars.iv.next523 to i32
  %exitcond525 = icmp eq i32 %lftr.wideiv524, %1653
  br i1 %exitcond525, label %.preheader123.loopexit, label %1660

.preheader121.loopexit:                           ; preds = %1667
  br label %.preheader121

.preheader121:                                    ; preds = %.preheader121.loopexit, %.preheader123
  %1665 = icmp sgt i32 %1616, 0
  br i1 %1665, label %.lr.ph261, label %.loopexit

.lr.ph261:                                        ; preds = %.preheader121
  %sum = add i32 %1614, %574
  %1666 = sub i32 %1616, %sum
  br label %1673

; <label>:1667                                    ; preds = %1667, %.lr.ph256
  %indvars.iv526 = phi i64 [ %indvars.iv.next527, %1667 ], [ %1658, %.lr.ph256 ]
  %1668 = trunc i64 %indvars.iv526 to i32
  %1669 = add i32 %1657, %1668
  %1670 = sub nsw i64 %indvars.iv526, %1572
  %1671 = getelementptr inbounds i32, i32* %968, i64 %1670
  store i32 %1669, i32* %1671, align 4, !tbaa !1
  %1672 = icmp slt i64 %indvars.iv526, %1659
  %indvars.iv.next527 = add nsw i64 %indvars.iv526, 1
  br i1 %1672, label %1667, label %.preheader121.loopexit

; <label>:1673                                    ; preds = %1673, %.lr.ph261
  %j12.0260.in = phi i32 [ %1655, %.lr.ph261 ], [ %j12.0260, %1673 ]
  %j12.0260 = add nsw i32 %j12.0260.in, 1
  %1674 = add i32 %1666, %j12.0260
  %1675 = sub nsw i32 %j12.0260, %574
  %1676 = sext i32 %1675 to i64
  %1677 = getelementptr inbounds i32, i32* %968, i64 %1676
  store i32 %1674, i32* %1677, align 4, !tbaa !1
  %1678 = icmp slt i32 %j12.0260, %1654
  br i1 %1678, label %1673, label %.loopexit.loopexit19

; <label>:1679                                    ; preds = %1679, %.lr.ph252
  %indvars.iv518 = phi i64 [ %indvars.iv.next519, %1679 ], [ 0, %.lr.ph252 ]
  %1680 = trunc i64 %indvars.iv518 to i32
  %1681 = add i32 %1650, %1680
  %1682 = sext i32 %1681 to i64
  %1683 = getelementptr inbounds i32, i32* %966, i64 %1682
  store i32 %1681, i32* %1683, align 4, !tbaa !1
  %1684 = getelementptr inbounds i32, i32* %968, i64 %1682
  store i32 %1681, i32* %1684, align 4, !tbaa !1
  %indvars.iv.next519 = add nuw nsw i64 %indvars.iv518, 1
  %lftr.wideiv520 = trunc i64 %indvars.iv.next519 to i32
  %exitcond521 = icmp eq i32 %lftr.wideiv520, %1651
  br i1 %exitcond521, label %.loopexit.loopexit20, label %1679

.loopexit.loopexit:                               ; preds = %1642
  br label %.loopexit

.loopexit.loopexit19:                             ; preds = %1673
  br label %.loopexit

.loopexit.loopexit20:                             ; preds = %1679
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit20, %.loopexit.loopexit19, %.loopexit.loopexit, %.preheader121, %.preheader125, %.preheader118
  %1685 = icmp slt i64 %indvars.iv540, %575
  %indvars.iv.next541 = add nsw i64 %indvars.iv540, 1
  br i1 %1685, label %1610, label %.preheader117.loopexit

; <label>:1686                                    ; preds = %._crit_edge246, %.lr.ph249
  %1687 = phi i32 [ %1608, %.lr.ph249 ], [ %1789, %._crit_edge246 ]
  %k.3247 = phi i32 [ 1, %.lr.ph249 ], [ %1790, %._crit_edge246 ]
  %1688 = sitofp i32 %k.3247 to double
  %1689 = fmul double %127, %1688
  %1690 = fadd double %120, %1689
  br i1 %631, label %._crit_edge246, label %.preheader116.lr.ph

.preheader116.lr.ph:                              ; preds = %1686
  %1691 = shl i32 %k.3247, 1
  %1692 = add i32 %1691, -2
  %1693 = mul nsw i32 %1692, %582
  br label %.preheader116

.preheader116:                                    ; preds = %1787, %.preheader116.lr.ph
  %indvars.iv516 = phi i64 [ %indvars.iv.next517, %1787 ], [ %572, %.preheader116.lr.ph ]
  %1694 = getelementptr inbounds i32, i32* %191, i64 %indvars.iv516
  %1695 = getelementptr inbounds i32, i32* %215, i64 %indvars.iv516
  %1696 = getelementptr inbounds double, double* %197, i64 %indvars.iv516
  %1697 = getelementptr inbounds double, double* %179, i64 %indvars.iv516
  %1698 = trunc i64 %indvars.iv516 to i32
  %.pre12 = load i32, i32* %1694, align 4, !tbaa !1
  br label %1699

; <label>:1699                                    ; preds = %._crit_edge243, %.preheader116
  %1700 = phi i32 [ %.pre12, %.preheader116 ], [ %1785, %._crit_edge243 ]
  %ip.0244 = phi i32 [ 1, %.preheader116 ], [ %1786, %._crit_edge243 ]
  %1701 = add nsw i32 %ip.0244, %1698
  %1702 = sub nsw i32 %1698, %ip.0244
  %1703 = icmp slt i32 %1700, 0
  br i1 %1703, label %._crit_edge243, label %.lr.ph242

.lr.ph242:                                        ; preds = %1699
  %1704 = icmp sgt i32 %ipsi_in.3, %1702
  %1705 = select i1 %1704, i32 %ipsi_in.3, i32 %1702
  %1706 = icmp slt i32 %ipsi_out.2, %1701
  %ipsi_out.2. = select i1 %1706, i32 %ipsi_out.2, i32 %1701
  %1707 = sext i32 %ipsi_out.2. to i64
  %1708 = getelementptr inbounds double, double* %179, i64 %1707
  %1709 = getelementptr inbounds double, double* %197, i64 %1707
  %1710 = getelementptr inbounds i32, i32* %191, i64 %1707
  %1711 = icmp eq i32 %ip.0244, 1
  %1712 = getelementptr inbounds i32, i32* %215, i64 %1707
  %1713 = sext i32 %1705 to i64
  %1714 = getelementptr inbounds double, double* %179, i64 %1713
  %1715 = getelementptr inbounds double, double* %197, i64 %1713
  %1716 = getelementptr inbounds i32, i32* %191, i64 %1713
  %1717 = getelementptr inbounds i32, i32* %215, i64 %1713
  br label %1718

; <label>:1718                                    ; preds = %1781, %.lr.ph242
  %j.3240 = phi i32 [ 0, %.lr.ph242 ], [ %1782, %1781 ]
  %1719 = load i32, i32* %1695, align 4, !tbaa !1
  %1720 = sitofp i32 %j.3240 to double
  %1721 = load double, double* %1696, align 8, !tbaa !190
  %1722 = fmul double %1720, %1721
  %1723 = load double, double* %1697, align 8, !tbaa !190
  %1724 = load double, double* %1708, align 8, !tbaa !190
  %1725 = fsub double %1723, %1724
  %1726 = fmul double %1690, %1725
  %1727 = fadd double %1722, %1726
  %1728 = load double, double* %1709, align 8, !tbaa !190
  %1729 = fdiv double %1727, %1728
  %1730 = call double @floor(double %1729) #16
  %1731 = fptosi double %1730 to i32
  %1732 = sitofp i32 %1731 to double
  %1733 = fsub double %1729, %1732
  %1734 = load i32, i32* %1710, align 4, !tbaa !1
  %1735 = add nsw i32 %1731, %1734
  %1736 = srem i32 %1735, %1734
  %1737 = sub i32 %j.3240, %574
  %1738 = add i32 %1737, %1719
  %1739 = shl nsw i32 %1738, 1
  %1740 = add nsw i32 %1739, %1693
  %1741 = sext i32 %1740 to i64
  br i1 %1711, label %1742, label %1747

; <label>:1742                                    ; preds = %1718
  %1743 = getelementptr inbounds double, double* %937, i64 %1741
  store double %1733, double* %1743, align 8, !tbaa !190
  %1744 = load i32, i32* %1712, align 4, !tbaa !1
  %1745 = add nsw i32 %1744, %1736
  %1746 = getelementptr inbounds i32, i32* %925, i64 %1741
  store i32 %1745, i32* %1746, align 4, !tbaa !1
  br label %1752

; <label>:1747                                    ; preds = %1718
  %1748 = getelementptr inbounds double, double* %943, i64 %1741
  store double %1733, double* %1748, align 8, !tbaa !190
  %1749 = load i32, i32* %1712, align 4, !tbaa !1
  %1750 = add nsw i32 %1749, %1736
  %1751 = getelementptr inbounds i32, i32* %931, i64 %1741
  store i32 %1750, i32* %1751, align 4, !tbaa !1
  br label %1752

; <label>:1752                                    ; preds = %1747, %1742
  %1753 = load double, double* %1696, align 8, !tbaa !190
  %1754 = fmul double %1720, %1753
  %1755 = load double, double* %1697, align 8, !tbaa !190
  %1756 = load double, double* %1714, align 8, !tbaa !190
  %1757 = fsub double %1755, %1756
  %1758 = fmul double %1690, %1757
  %1759 = fadd double %1754, %1758
  %1760 = load double, double* %1715, align 8, !tbaa !190
  %1761 = fdiv double %1759, %1760
  %1762 = call double @floor(double %1761) #16
  %1763 = fptosi double %1762 to i32
  %1764 = sitofp i32 %1763 to double
  %1765 = fsub double %1761, %1764
  %1766 = load i32, i32* %1716, align 4, !tbaa !1
  %1767 = add nsw i32 %1763, %1766
  %1768 = srem i32 %1767, %1766
  %1769 = or i32 %1740, 1
  %1770 = sext i32 %1769 to i64
  br i1 %1711, label %1771, label %1776

; <label>:1771                                    ; preds = %1752
  %1772 = getelementptr inbounds double, double* %937, i64 %1770
  store double %1765, double* %1772, align 8, !tbaa !190
  %1773 = load i32, i32* %1717, align 4, !tbaa !1
  %1774 = add nsw i32 %1773, %1768
  %1775 = getelementptr inbounds i32, i32* %925, i64 %1770
  store i32 %1774, i32* %1775, align 4, !tbaa !1
  br label %1781

; <label>:1776                                    ; preds = %1752
  %1777 = getelementptr inbounds double, double* %943, i64 %1770
  store double %1765, double* %1777, align 8, !tbaa !190
  %1778 = load i32, i32* %1717, align 4, !tbaa !1
  %1779 = add nsw i32 %1778, %1768
  %1780 = getelementptr inbounds i32, i32* %931, i64 %1770
  store i32 %1779, i32* %1780, align 4, !tbaa !1
  br label %1781

; <label>:1781                                    ; preds = %1776, %1771
  %1782 = add nuw nsw i32 %j.3240, 1
  %1783 = load i32, i32* %1694, align 4, !tbaa !1
  %1784 = icmp slt i32 %j.3240, %1783
  br i1 %1784, label %1718, label %._crit_edge243.loopexit

._crit_edge243.loopexit:                          ; preds = %1781
  br label %._crit_edge243

._crit_edge243:                                   ; preds = %._crit_edge243.loopexit, %1699
  %1785 = phi i32 [ %1700, %1699 ], [ %1783, %._crit_edge243.loopexit ]
  %1786 = add nuw nsw i32 %ip.0244, 1
  %exitcond515 = icmp eq i32 %1786, 3
  br i1 %exitcond515, label %1787, label %1699

; <label>:1787                                    ; preds = %._crit_edge243
  %1788 = icmp slt i64 %indvars.iv516, %575
  %indvars.iv.next517 = add nsw i64 %indvars.iv516, 1
  br i1 %1788, label %.preheader116, label %.._crit_edge246_crit_edge

.._crit_edge246_crit_edge:                        ; preds = %1787
  %.pre13 = load i32, i32* %mzeta, align 4, !tbaa !1
  br label %._crit_edge246

._crit_edge246:                                   ; preds = %.._crit_edge246_crit_edge, %1686
  %1789 = phi i32 [ %.pre13, %.._crit_edge246_crit_edge ], [ %1687, %1686 ]
  %1790 = add nuw nsw i32 %k.3247, 1
  %1791 = icmp slt i32 %k.3247, %1789
  br i1 %1791, label %1686, label %._crit_edge250.loopexit

._crit_edge250.loopexit:                          ; preds = %._crit_edge246
  br label %._crit_edge250

._crit_edge250:                                   ; preds = %._crit_edge250.loopexit, %.preheader117
  %1792 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 12, i64 0
  %1793 = bitcast double* %1792 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1793, i8 0, i64 40, i32 8, i1 false)
  %1794 = call fastcc i8* @_mm_malloc(i64 152)
  %1795 = call fastcc i8* @_mm_malloc(i64 40)
  %1796 = bitcast i8* %1795 to double*
  %1797 = call fastcc i8* @_mm_malloc(i64 40)
  %1798 = bitcast i8* %1797 to double*
  %1799 = call fastcc i8* @_mm_malloc(i64 40)
  %1800 = bitcast i8* %1799 to double*
  %1801 = call fastcc i8* @_mm_malloc(i64 40)
  %1802 = bitcast i8* %1801 to double*
  %1803 = call fastcc i8* @_mm_malloc(i64 40)
  %1804 = bitcast i8* %1803 to double*
  %1805 = call fastcc i8* @_mm_malloc(i64 40)
  %1806 = bitcast i8* %1805 to double*
  %1807 = call fastcc i8* @_mm_malloc(i64 240)
  %1808 = call fastcc i8* @_mm_malloc(i64 256)
  %1809 = load i32, i32* %mpsi, align 4, !tbaa !1
  %1810 = mul nsw i32 %1809, 72
  %1811 = sext i32 %1810 to i64
  %1812 = shl nsw i64 %1811, 3
  %1813 = call fastcc i8* @_mm_malloc(i64 %1812)
  %1814 = call fastcc i8* @_mm_malloc(i64 32)
  %1815 = bitcast i8* %1814 to i32*
  %1816 = call fastcc i8* @_mm_malloc(i64 32)
  %1817 = bitcast i8* %1816 to i32*
  %1818 = load i32, i32* %570, align 4, !tbaa !1
  %1819 = load i32, i32* %571, align 4, !tbaa !1
  %1820 = load i32, i32* %568, align 4, !tbaa !1
  %1821 = add i32 %1818, 1
  %1822 = add i32 %1821, %1819
  %1823 = sub i32 %1822, %1820
  %1824 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1825 = mul i32 %1824, 7
  %1826 = add i32 %1825, 7
  %1827 = mul nsw i32 %1826, %1823
  %1828 = sext i32 %1827 to i64
  %1829 = shl nsw i64 %1828, 3
  %1830 = call fastcc i8* @_mm_malloc(i64 %1829)
  %1831 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1832 = mul i32 %1831, 7
  %1833 = add i32 %1832, 7
  %1834 = mul nsw i32 %1833, %1823
  %1835 = sext i32 %1834 to i64
  %1836 = shl nsw i64 %1835, 3
  %1837 = call fastcc i8* @_mm_malloc(i64 %1836)
  %1838 = mul nsw i32 %1823, 7
  %1839 = sext i32 %1838 to i64
  %1840 = shl nsw i64 %1839, 3
  %1841 = call fastcc i8* @_mm_malloc(i64 %1840)
  %1842 = bitcast i8* %1841 to double*
  %1843 = call fastcc i8* @_mm_malloc(i64 %1840)
  %1844 = bitcast i8* %1843 to double*
  %1845 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1846 = icmp sgt i32 %1845, 0
  br i1 %1846, label %.lr.ph239.preheader, label %.preheader115

.lr.ph239.preheader:                              ; preds = %._crit_edge250
  br label %.lr.ph239

.preheader115.loopexit:                           ; preds = %.lr.ph239
  br label %.preheader115

.preheader115:                                    ; preds = %.preheader115.loopexit, %._crit_edge250
  %1847 = phi i32 [ %1845, %._crit_edge250 ], [ %1850, %.preheader115.loopexit ]
  br i1 %477, label %._crit_edge236, label %.lr.ph235.preheader

.lr.ph235.preheader:                              ; preds = %.preheader115
  br label %.lr.ph235

.lr.ph239:                                        ; preds = %.lr.ph239.preheader, %.lr.ph239
  %indvars.iv513 = phi i64 [ %indvars.iv.next514, %.lr.ph239 ], [ 0, %.lr.ph239.preheader ]
  %1848 = getelementptr inbounds i32, i32* %610, i64 %indvars.iv513
  store i32 0, i32* %1848, align 4, !tbaa !1
  %1849 = getelementptr inbounds i32, i32* %615, i64 %indvars.iv513
  store i32 0, i32* %1849, align 4, !tbaa !1
  %indvars.iv.next514 = add nuw nsw i64 %indvars.iv513, 1
  %1850 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1851 = sext i32 %1850 to i64
  %1852 = icmp slt i64 %indvars.iv.next514, %1851
  br i1 %1852, label %.lr.ph239, label %.preheader115.loopexit

.lr.ph235:                                        ; preds = %1877, %.lr.ph235.preheader
  %indvars.iv511 = phi i64 [ %567, %.lr.ph235.preheader ], [ %indvars.iv.next512, %1877 ]
  %1853 = getelementptr inbounds i32, i32* %589, i64 %indvars.iv511
  %1854 = load i32, i32* %1853, align 4, !tbaa !1
  %1855 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %1856 = icmp eq i32 %1854, %1855
  br i1 %1856, label %1864, label %1857

; <label>:1857                                    ; preds = %.lr.ph235
  %1858 = sext i32 %1854 to i64
  %1859 = getelementptr inbounds i32, i32* %615, i64 %1858
  %1860 = load i32, i32* %1859, align 4, !tbaa !1
  %1861 = icmp eq i32 %1860, 0
  br i1 %1861, label %1864, label %1862

; <label>:1862                                    ; preds = %1857
  %1863 = trunc i64 %indvars.iv511 to i32
  store i32 %1863, i32* %1859, align 4, !tbaa !1
  %.pre14 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  br label %1864

; <label>:1864                                    ; preds = %1862, %1857, %.lr.ph235
  %1865 = phi i32 [ %.pre14, %1862 ], [ %1855, %1857 ], [ %1854, %.lr.ph235 ]
  %1866 = icmp eq i32 %1854, %1865
  br i1 %1866, label %1877, label %1867

; <label>:1867                                    ; preds = %1864
  %1868 = sext i32 %1854 to i64
  %1869 = getelementptr inbounds i32, i32* %610, i64 %1868
  %1870 = load i32, i32* %1869, align 4, !tbaa !1
  %1871 = getelementptr inbounds i32, i32* %615, i64 %1868
  %1872 = load i32, i32* %1871, align 4, !tbaa !1
  %1873 = or i32 %1872, %1870
  %1874 = icmp eq i32 %1873, 0
  br i1 %1874, label %1875, label %1877

; <label>:1875                                    ; preds = %1867
  %1876 = trunc i64 %indvars.iv511 to i32
  store i32 %1876, i32* %1869, align 4, !tbaa !1
  store i32 %1876, i32* %1871, align 4, !tbaa !1
  br label %1877

; <label>:1877                                    ; preds = %1875, %1867, %1864
  %1878 = icmp slt i64 %indvars.iv511, %569
  %indvars.iv.next512 = add nsw i64 %indvars.iv511, 1
  br i1 %1878, label %.lr.ph235, label %.._crit_edge236_crit_edge

.._crit_edge236_crit_edge:                        ; preds = %1877
  %.pre15 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %._crit_edge236

._crit_edge236:                                   ; preds = %.._crit_edge236_crit_edge, %.preheader115
  %1879 = phi i32 [ %.pre15, %.._crit_edge236_crit_edge ], [ %1847, %.preheader115 ]
  %1880 = load i32, i32* %86, align 4, !tbaa !1
  %1881 = call i32 @MPI_Allgather(i8* %609, i32 %1879, i32 1275069445, i8* %620, i32 %1879, i32 1275069445, i32 %1880) #3
  %1882 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1883 = load i32, i32* %86, align 4, !tbaa !1
  %1884 = call i32 @MPI_Allgather(i8* %614, i32 %1882, i32 1275069445, i8* %626, i32 %1882, i32 1275069445, i32 %1883) #3
  %1885 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1886 = icmp sgt i32 %1885, 0
  br i1 %1886, label %.lr.ph231, label %._crit_edge232

.lr.ph231:                                        ; preds = %._crit_edge236
  %1887 = load i32, i32* %myrank_radiald, align 4
  br label %1888

; <label>:1888                                    ; preds = %1897, %.lr.ph231
  %nghost_moments_comm_num.0229 = phi i32 [ 0, %.lr.ph231 ], [ %nghost_moments_comm_num.1, %1897 ]
  %i.38228 = phi i32 [ 0, %.lr.ph231 ], [ %1898, %1897 ]
  %1889 = icmp eq i32 %i.38228, %1887
  br i1 %1889, label %1897, label %1890

; <label>:1890                                    ; preds = %1888
  %1891 = mul nsw i32 %1885, %i.38228
  %1892 = add nsw i32 %1887, %1891
  %1893 = sext i32 %1892 to i64
  %1894 = getelementptr inbounds i32, i32* %621, i64 %1893
  %1895 = load i32, i32* %1894, align 4, !tbaa !1
  %not.85 = icmp ne i32 %1895, 0
  %1896 = zext i1 %not.85 to i32
  %nghost_moments_comm_num.0. = add nsw i32 %1896, %nghost_moments_comm_num.0229
  br label %1897

; <label>:1897                                    ; preds = %1890, %1888
  %nghost_moments_comm_num.1 = phi i32 [ %nghost_moments_comm_num.0229, %1888 ], [ %nghost_moments_comm_num.0., %1890 ]
  %1898 = add nuw nsw i32 %i.38228, 1
  %1899 = icmp slt i32 %1898, %1885
  br i1 %1899, label %1888, label %._crit_edge232.loopexit

._crit_edge232.loopexit:                          ; preds = %1897
  br label %._crit_edge232

._crit_edge232:                                   ; preds = %._crit_edge232.loopexit, %._crit_edge236
  %nghost_moments_comm_num.0.lcssa = phi i32 [ 0, %._crit_edge236 ], [ %nghost_moments_comm_num.1, %._crit_edge232.loopexit ]
  %1900 = sext i32 %nghost_moments_comm_num.0.lcssa to i64
  %1901 = shl nsw i64 %1900, 2
  %1902 = call fastcc i8* @_mm_malloc(i64 %1901)
  %1903 = bitcast i8* %1902 to i32*
  %1904 = call fastcc i8* @_mm_malloc(i64 %1901)
  %1905 = bitcast i8* %1904 to i32*
  %1906 = call fastcc i8* @_mm_malloc(i64 %1901)
  %1907 = bitcast i8* %1906 to i32*
  %1908 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1909 = icmp sgt i32 %1908, 0
  br i1 %1909, label %.lr.ph224.preheader, label %._crit_edge225

.lr.ph224.preheader:                              ; preds = %._crit_edge232
  br label %.lr.ph224

.lr.ph224:                                        ; preds = %.lr.ph224.preheader, %1953
  %1910 = phi i32 [ %1954, %1953 ], [ %1908, %.lr.ph224.preheader ]
  %nghost_moments_bufsize.0222 = phi i32 [ %nghost_moments_bufsize.1, %1953 ], [ 0, %.lr.ph224.preheader ]
  %i_loc.4221 = phi i32 [ %i_loc.5, %1953 ], [ 0, %.lr.ph224.preheader ]
  %i.39220 = phi i32 [ %1955, %1953 ], [ 0, %.lr.ph224.preheader ]
  %1911 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %1912 = icmp eq i32 %i.39220, %1911
  br i1 %1912, label %1953, label %1913

; <label>:1913                                    ; preds = %.lr.ph224
  %1914 = mul nsw i32 %1910, %i.39220
  %1915 = add nsw i32 %1911, %1914
  %1916 = sext i32 %1915 to i64
  %1917 = getelementptr inbounds i32, i32* %621, i64 %1916
  %1918 = load i32, i32* %1917, align 4, !tbaa !1
  %1919 = icmp eq i32 %1918, 0
  br i1 %1919, label %1953, label %1920

; <label>:1920                                    ; preds = %1913
  %1921 = sext i32 %i_loc.4221 to i64
  %1922 = getelementptr inbounds i32, i32* %1903, i64 %1921
  store i32 %i.39220, i32* %1922, align 4, !tbaa !1
  %1923 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1924 = mul nsw i32 %1923, %i.39220
  %1925 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %1926 = add nsw i32 %1924, %1925
  %1927 = sext i32 %1926 to i64
  %1928 = getelementptr inbounds i32, i32* %621, i64 %1927
  %1929 = load i32, i32* %1928, align 4, !tbaa !1
  %1930 = getelementptr inbounds i32, i32* %1905, i64 %1921
  store i32 %1929, i32* %1930, align 4, !tbaa !1
  %1931 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1932 = mul nsw i32 %1931, %i.39220
  %1933 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %1934 = add nsw i32 %1932, %1933
  %1935 = sext i32 %1934 to i64
  %1936 = getelementptr inbounds i32, i32* %627, i64 %1935
  %1937 = load i32, i32* %1936, align 4, !tbaa !1
  %1938 = getelementptr inbounds i32, i32* %1907, i64 %1921
  store i32 %1937, i32* %1938, align 4, !tbaa !1
  %1939 = sext i32 %1937 to i64
  %1940 = getelementptr inbounds i32, i32* %215, i64 %1939
  %1941 = load i32, i32* %1940, align 4, !tbaa !1
  %1942 = getelementptr inbounds i32, i32* %191, i64 %1939
  %1943 = load i32, i32* %1942, align 4, !tbaa !1
  %1944 = load i32, i32* %1930, align 4, !tbaa !1
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds i32, i32* %215, i64 %1945
  %1947 = load i32, i32* %1946, align 4, !tbaa !1
  %1948 = add i32 %nghost_moments_bufsize.0222, 1
  %1949 = add i32 %1948, %1941
  %1950 = add i32 %1949, %1943
  %1951 = sub i32 %1950, %1947
  %1952 = add nsw i32 %i_loc.4221, 1
  %.pre16 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %1953

; <label>:1953                                    ; preds = %1920, %1913, %.lr.ph224
  %1954 = phi i32 [ %.pre16, %1920 ], [ %1910, %1913 ], [ %1910, %.lr.ph224 ]
  %i_loc.5 = phi i32 [ %1952, %1920 ], [ %i_loc.4221, %1913 ], [ %i_loc.4221, %.lr.ph224 ]
  %nghost_moments_bufsize.1 = phi i32 [ %1951, %1920 ], [ %nghost_moments_bufsize.0222, %1913 ], [ %nghost_moments_bufsize.0222, %.lr.ph224 ]
  %1955 = add nuw nsw i32 %i.39220, 1
  %1956 = icmp slt i32 %1955, %1954
  br i1 %1956, label %.lr.ph224, label %._crit_edge225.loopexit

._crit_edge225.loopexit:                          ; preds = %1953
  br label %._crit_edge225

._crit_edge225:                                   ; preds = %._crit_edge225.loopexit, %._crit_edge232
  %nghost_moments_bufsize.0.lcssa = phi i32 [ 0, %._crit_edge232 ], [ %nghost_moments_bufsize.1, %._crit_edge225.loopexit ]
  %i_loc.4.lcssa = phi i32 [ 0, %._crit_edge232 ], [ %i_loc.5, %._crit_edge225.loopexit ]
  %1957 = icmp eq i32 %nghost_moments_comm_num.0.lcssa, %i_loc.4.lcssa
  br i1 %1957, label %1959, label %1958

; <label>:1958                                    ; preds = %._crit_edge225
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.86, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1758, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:1959                                    ; preds = %._crit_edge225
  %1960 = load i32, i32* %mzeta, align 4, !tbaa !1
  %1961 = add nsw i32 %1960, 1
  %1962 = mul i32 %nghost_moments_bufsize.0.lcssa, 7
  %1963 = mul i32 %1962, %1961
  %1964 = sext i32 %1963 to i64
  %1965 = shl nsw i64 %1964, 3
  %1966 = call fastcc i8* @_mm_malloc(i64 %1965)
  %1967 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1968 = icmp sgt i32 %1967, 0
  br i1 %1968, label %.lr.ph217, label %._crit_edge218

.lr.ph217:                                        ; preds = %1959
  %1969 = load i32, i32* %myrank_radiald, align 4
  br label %1970

; <label>:1970                                    ; preds = %1979, %.lr.ph217
  %ghost_moments_comm_num.0215 = phi i32 [ 0, %.lr.ph217 ], [ %ghost_moments_comm_num.1, %1979 ]
  %i.40214 = phi i32 [ 0, %.lr.ph217 ], [ %1980, %1979 ]
  %1971 = icmp eq i32 %i.40214, %1969
  br i1 %1971, label %1979, label %1972

; <label>:1972                                    ; preds = %1970
  %1973 = mul nsw i32 %1969, %1967
  %1974 = add nsw i32 %1973, %i.40214
  %1975 = sext i32 %1974 to i64
  %1976 = getelementptr inbounds i32, i32* %621, i64 %1975
  %1977 = load i32, i32* %1976, align 4, !tbaa !1
  %not. = icmp ne i32 %1977, 0
  %1978 = zext i1 %not. to i32
  %ghost_moments_comm_num.0. = add nsw i32 %1978, %ghost_moments_comm_num.0215
  br label %1979

; <label>:1979                                    ; preds = %1972, %1970
  %ghost_moments_comm_num.1 = phi i32 [ %ghost_moments_comm_num.0215, %1970 ], [ %ghost_moments_comm_num.0., %1972 ]
  %1980 = add nuw nsw i32 %i.40214, 1
  %1981 = icmp slt i32 %1980, %1967
  br i1 %1981, label %1970, label %._crit_edge218.loopexit

._crit_edge218.loopexit:                          ; preds = %1979
  br label %._crit_edge218

._crit_edge218:                                   ; preds = %._crit_edge218.loopexit, %1959
  %ghost_moments_comm_num.0.lcssa = phi i32 [ 0, %1959 ], [ %ghost_moments_comm_num.1, %._crit_edge218.loopexit ]
  %1982 = sext i32 %ghost_moments_comm_num.0.lcssa to i64
  %1983 = shl nsw i64 %1982, 2
  %1984 = call fastcc i8* @_mm_malloc(i64 %1983)
  %1985 = bitcast i8* %1984 to i32*
  %1986 = call fastcc i8* @_mm_malloc(i64 %1983)
  %1987 = bitcast i8* %1986 to i32*
  %1988 = call fastcc i8* @_mm_malloc(i64 %1983)
  %1989 = bitcast i8* %1988 to i32*
  %1990 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %1991 = icmp sgt i32 %1990, 0
  br i1 %1991, label %.lr.ph210.preheader, label %._crit_edge211

.lr.ph210.preheader:                              ; preds = %._crit_edge218
  br label %.lr.ph210

.lr.ph210:                                        ; preds = %.lr.ph210.preheader, %2035
  %1992 = phi i32 [ %2036, %2035 ], [ %1990, %.lr.ph210.preheader ]
  %ghost_moments_bufsize.0208 = phi i32 [ %ghost_moments_bufsize.1, %2035 ], [ 0, %.lr.ph210.preheader ]
  %i_loc.6207 = phi i32 [ %i_loc.7, %2035 ], [ 0, %.lr.ph210.preheader ]
  %i.41206 = phi i32 [ %2037, %2035 ], [ 0, %.lr.ph210.preheader ]
  %1993 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %1994 = icmp eq i32 %i.41206, %1993
  br i1 %1994, label %2035, label %1995

; <label>:1995                                    ; preds = %.lr.ph210
  %1996 = mul nsw i32 %1993, %1992
  %1997 = add nsw i32 %1996, %i.41206
  %1998 = sext i32 %1997 to i64
  %1999 = getelementptr inbounds i32, i32* %621, i64 %1998
  %2000 = load i32, i32* %1999, align 4, !tbaa !1
  %2001 = icmp eq i32 %2000, 0
  br i1 %2001, label %2035, label %2002

; <label>:2002                                    ; preds = %1995
  %2003 = sext i32 %i_loc.6207 to i64
  %2004 = getelementptr inbounds i32, i32* %1985, i64 %2003
  store i32 %i.41206, i32* %2004, align 4, !tbaa !1
  %2005 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %2006 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %2007 = mul nsw i32 %2006, %2005
  %2008 = add nsw i32 %2007, %i.41206
  %2009 = sext i32 %2008 to i64
  %2010 = getelementptr inbounds i32, i32* %621, i64 %2009
  %2011 = load i32, i32* %2010, align 4, !tbaa !1
  %2012 = getelementptr inbounds i32, i32* %1987, i64 %2003
  store i32 %2011, i32* %2012, align 4, !tbaa !1
  %2013 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %2014 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %2015 = mul nsw i32 %2014, %2013
  %2016 = add nsw i32 %2015, %i.41206
  %2017 = sext i32 %2016 to i64
  %2018 = getelementptr inbounds i32, i32* %627, i64 %2017
  %2019 = load i32, i32* %2018, align 4, !tbaa !1
  %2020 = getelementptr inbounds i32, i32* %1989, i64 %2003
  store i32 %2019, i32* %2020, align 4, !tbaa !1
  %2021 = sext i32 %2019 to i64
  %2022 = getelementptr inbounds i32, i32* %215, i64 %2021
  %2023 = load i32, i32* %2022, align 4, !tbaa !1
  %2024 = getelementptr inbounds i32, i32* %191, i64 %2021
  %2025 = load i32, i32* %2024, align 4, !tbaa !1
  %2026 = load i32, i32* %2012, align 4, !tbaa !1
  %2027 = sext i32 %2026 to i64
  %2028 = getelementptr inbounds i32, i32* %215, i64 %2027
  %2029 = load i32, i32* %2028, align 4, !tbaa !1
  %2030 = add i32 %ghost_moments_bufsize.0208, 1
  %2031 = add i32 %2030, %2023
  %2032 = add i32 %2031, %2025
  %2033 = sub i32 %2032, %2029
  %2034 = add nsw i32 %i_loc.6207, 1
  %.pre17 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  br label %2035

; <label>:2035                                    ; preds = %2002, %1995, %.lr.ph210
  %2036 = phi i32 [ %.pre17, %2002 ], [ %1992, %1995 ], [ %1992, %.lr.ph210 ]
  %i_loc.7 = phi i32 [ %2034, %2002 ], [ %i_loc.6207, %1995 ], [ %i_loc.6207, %.lr.ph210 ]
  %ghost_moments_bufsize.1 = phi i32 [ %2033, %2002 ], [ %ghost_moments_bufsize.0208, %1995 ], [ %ghost_moments_bufsize.0208, %.lr.ph210 ]
  %2037 = add nuw nsw i32 %i.41206, 1
  %2038 = icmp slt i32 %2037, %2036
  br i1 %2038, label %.lr.ph210, label %._crit_edge211.loopexit

._crit_edge211.loopexit:                          ; preds = %2035
  br label %._crit_edge211

._crit_edge211:                                   ; preds = %._crit_edge211.loopexit, %._crit_edge218
  %ghost_moments_bufsize.0.lcssa = phi i32 [ 0, %._crit_edge218 ], [ %ghost_moments_bufsize.1, %._crit_edge211.loopexit ]
  %i_loc.6.lcssa = phi i32 [ 0, %._crit_edge218 ], [ %i_loc.7, %._crit_edge211.loopexit ]
  %2039 = icmp eq i32 %ghost_moments_comm_num.0.lcssa, %i_loc.6.lcssa
  br i1 %2039, label %2041, label %2040

; <label>:2040                                    ; preds = %._crit_edge211
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.87, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1797, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2041                                    ; preds = %._crit_edge211
  %2042 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2043 = add nsw i32 %2042, 1
  %2044 = mul i32 %ghost_moments_bufsize.0.lcssa, 7
  %2045 = mul i32 %2044, %2043
  %2046 = sext i32 %2045 to i64
  %2047 = shl nsw i64 %2046, 3
  %2048 = call fastcc i8* @_mm_malloc(i64 %2047)
  %2049 = icmp eq i8* %1794, null
  br i1 %2049, label %2050, label %2051

; <label>:2050                                    ; preds = %2041
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.88, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1814, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2051                                    ; preds = %2041
  %2052 = icmp eq i8* %1807, null
  br i1 %2052, label %2053, label %2054

; <label>:2053                                    ; preds = %2051
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.89, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1815, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2054                                    ; preds = %2051
  %2055 = icmp eq i8* %1795, null
  br i1 %2055, label %2056, label %2057

; <label>:2056                                    ; preds = %2054
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1816, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2057                                    ; preds = %2054
  %2058 = icmp eq i8* %1797, null
  br i1 %2058, label %2059, label %2060

; <label>:2059                                    ; preds = %2057
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.91, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1817, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2060                                    ; preds = %2057
  %2061 = icmp eq i8* %1799, null
  br i1 %2061, label %2062, label %2063

; <label>:2062                                    ; preds = %2060
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.92, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1818, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2063                                    ; preds = %2060
  %2064 = icmp eq i8* %1801, null
  br i1 %2064, label %2065, label %2066

; <label>:2065                                    ; preds = %2063
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.93, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1819, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2066                                    ; preds = %2063
  %2067 = icmp eq i8* %1803, null
  br i1 %2067, label %2068, label %2069

; <label>:2068                                    ; preds = %2066
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1820, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2069                                    ; preds = %2066
  %2070 = icmp eq i8* %1805, null
  br i1 %2070, label %2071, label %2072

; <label>:2071                                    ; preds = %2069
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1821, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2072                                    ; preds = %2069
  %2073 = icmp eq i8* %1808, null
  br i1 %2073, label %2074, label %2075

; <label>:2074                                    ; preds = %2072
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1822, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2075                                    ; preds = %2072
  %2076 = icmp eq i8* %1813, null
  br i1 %2076, label %2077, label %2078

; <label>:2077                                    ; preds = %2075
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.97, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1823, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2078                                    ; preds = %2075
  %2079 = icmp eq i8* %1814, null
  br i1 %2079, label %2080, label %2081

; <label>:2080                                    ; preds = %2078
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1824, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2081                                    ; preds = %2078
  %2082 = icmp eq i8* %1816, null
  br i1 %2082, label %2083, label %2084

; <label>:2083                                    ; preds = %2081
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.99, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1825, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2084                                    ; preds = %2081
  %2085 = icmp eq i8* %1830, null
  br i1 %2085, label %2086, label %2087

; <label>:2086                                    ; preds = %2084
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.100, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1827, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2087                                    ; preds = %2084
  %2088 = icmp eq i8* %1837, null
  br i1 %2088, label %2089, label %2090

; <label>:2089                                    ; preds = %2087
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.101, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1828, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2090                                    ; preds = %2087
  %2091 = icmp eq i8* %1841, null
  br i1 %2091, label %2092, label %2093

; <label>:2092                                    ; preds = %2090
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.102, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1829, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2093                                    ; preds = %2090
  %2094 = icmp eq i8* %1843, null
  br i1 %2094, label %2095, label %2096

; <label>:2095                                    ; preds = %2093
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.103, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1830, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2096                                    ; preds = %2093
  %2097 = icmp eq i8* %1984, null
  br i1 %2097, label %2098, label %2099

; <label>:2098                                    ; preds = %2096
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.104, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1831, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2099                                    ; preds = %2096
  %2100 = icmp eq i8* %1986, null
  br i1 %2100, label %2101, label %2102

; <label>:2101                                    ; preds = %2099
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.105, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1832, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2102                                    ; preds = %2099
  %2103 = icmp eq i8* %1988, null
  br i1 %2103, label %2104, label %2105

; <label>:2104                                    ; preds = %2102
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.106, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1833, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2105                                    ; preds = %2102
  %2106 = icmp eq i8* %2048, null
  br i1 %2106, label %2107, label %2108

; <label>:2107                                    ; preds = %2105
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.107, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1834, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2108                                    ; preds = %2105
  %2109 = icmp eq i8* %1902, null
  br i1 %2109, label %2110, label %2111

; <label>:2110                                    ; preds = %2108
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.108, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1835, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2111                                    ; preds = %2108
  %2112 = icmp eq i8* %1904, null
  br i1 %2112, label %2113, label %2114

; <label>:2113                                    ; preds = %2111
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.109, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1836, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2114                                    ; preds = %2111
  %2115 = icmp eq i8* %1906, null
  br i1 %2115, label %2116, label %2117

; <label>:2116                                    ; preds = %2114
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.110, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1837, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2117                                    ; preds = %2114
  %2118 = icmp eq i8* %1966, null
  br i1 %2118, label %2119, label %.preheader113.preheader

; <label>:2119                                    ; preds = %2117
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.111, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1838, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

.preheader113.preheader:                          ; preds = %2117
  call void @llvm.memset.p0i8.i64(i8* nonnull %1794, i8 0, i64 152, i32 8, i1 false)
  br label %.preheader113

.preheader113:                                    ; preds = %.preheader113, %.preheader113.preheader
  %indvars.iv505 = phi i64 [ 0, %.preheader113.preheader ], [ %indvars.iv.next506, %.preheader113 ]
  %2120 = getelementptr inbounds double, double* %1796, i64 %indvars.iv505
  store double 0.000000e+00, double* %2120, align 8, !tbaa !190
  %2121 = getelementptr inbounds double, double* %1798, i64 %indvars.iv505
  store double 0.000000e+00, double* %2121, align 8, !tbaa !190
  %2122 = getelementptr inbounds double, double* %1800, i64 %indvars.iv505
  store double 0.000000e+00, double* %2122, align 8, !tbaa !190
  %2123 = getelementptr inbounds double, double* %1802, i64 %indvars.iv505
  store double 0.000000e+00, double* %2123, align 8, !tbaa !190
  %2124 = getelementptr inbounds double, double* %1804, i64 %indvars.iv505
  store double 0.000000e+00, double* %2124, align 8, !tbaa !190
  %2125 = getelementptr inbounds double, double* %1806, i64 %indvars.iv505
  store double 0.000000e+00, double* %2125, align 8, !tbaa !190
  %indvars.iv.next506 = add nuw nsw i64 %indvars.iv505, 1
  %exitcond507 = icmp eq i64 %indvars.iv.next506, 5
  br i1 %exitcond507, label %.preheader111, label %.preheader113

.preheader111:                                    ; preds = %.preheader113
  call void @llvm.memset.p0i8.i64(i8* nonnull %1807, i8 0, i64 240, i32 8, i1 false)
  %2126 = load i32, i32* %mpsi, align 4
  %2127 = icmp sgt i32 %2126, 0
  %2128 = mul nsw i32 %2126, 9
  %2129 = sext i32 %2126 to i64
  %2130 = mul nsw i64 %2129, 72
  %2131 = icmp sgt i32 %2128, 1
  %smax620 = select i1 %2131, i32 %2128, i32 1
  %2132 = add i32 %smax620, -1
  %2133 = zext i32 %2132 to i64
  %2134 = shl nuw nsw i64 %2133, 3
  %2135 = add nuw nsw i64 %2134, 8
  br label %.preheader109

; <label>:2136                                    ; preds = %._crit_edge201
  store i32 5, i32* %1815, align 4, !tbaa !1
  %2137 = getelementptr inbounds i8, i8* %1814, i64 4
  %2138 = bitcast i8* %2137 to i32*
  store i32 7, i32* %2138, align 4, !tbaa !1
  %2139 = getelementptr inbounds i8, i8* %1814, i64 8
  %2140 = bitcast i8* %2139 to i32*
  store i32 9, i32* %2140, align 4, !tbaa !1
  %2141 = getelementptr inbounds i8, i8* %1814, i64 12
  %2142 = bitcast i8* %2141 to i32*
  store i32 11, i32* %2142, align 4, !tbaa !1
  %2143 = getelementptr inbounds i8, i8* %1814, i64 16
  %2144 = bitcast i8* %2143 to i32*
  store i32 13, i32* %2144, align 4, !tbaa !1
  %2145 = getelementptr inbounds i8, i8* %1814, i64 20
  %2146 = bitcast i8* %2145 to i32*
  store i32 15, i32* %2146, align 4, !tbaa !1
  %2147 = getelementptr inbounds i8, i8* %1814, i64 24
  %2148 = bitcast i8* %2147 to i32*
  store i32 18, i32* %2148, align 4, !tbaa !1
  %2149 = getelementptr inbounds i8, i8* %1814, i64 28
  %2150 = bitcast i8* %2149 to i32*
  store i32 20, i32* %2150, align 4, !tbaa !1
  store i32 7, i32* %1817, align 4, !tbaa !1
  %2151 = getelementptr inbounds i8, i8* %1816, i64 4
  %2152 = bitcast i8* %2151 to i32*
  store i32 10, i32* %2152, align 4, !tbaa !1
  %2153 = getelementptr inbounds i8, i8* %1816, i64 8
  %2154 = bitcast i8* %2153 to i32*
  store i32 13, i32* %2154, align 4, !tbaa !1
  %2155 = getelementptr inbounds i8, i8* %1816, i64 12
  %2156 = bitcast i8* %2155 to i32*
  store i32 15, i32* %2156, align 4, !tbaa !1
  %2157 = getelementptr inbounds i8, i8* %1816, i64 16
  %2158 = bitcast i8* %2157 to i32*
  store i32 18, i32* %2158, align 4, !tbaa !1
  %2159 = getelementptr inbounds i8, i8* %1816, i64 20
  %2160 = bitcast i8* %2159 to i32*
  store i32 21, i32* %2160, align 4, !tbaa !1
  %2161 = getelementptr inbounds i8, i8* %1816, i64 24
  %2162 = bitcast i8* %2161 to i32*
  store i32 25, i32* %2162, align 4, !tbaa !1
  %2163 = getelementptr inbounds i8, i8* %1816, i64 28
  %2164 = bitcast i8* %2163 to i32*
  store i32 28, i32* %2164, align 4, !tbaa !1
  %2165 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2166 = mul i32 %2165, 7
  %2167 = add i32 %2166, 7
  %2168 = mul nsw i32 %2167, %1823
  %2169 = icmp sgt i32 %2168, 0
  br i1 %2169, label %.preheader108.loopexit, label %.preheader108

.preheader109:                                    ; preds = %._crit_edge201, %.preheader111
  %indvars.iv499 = phi i64 [ 0, %.preheader111 ], [ %indvars.iv.next500, %._crit_edge201 ]
  %2170 = shl i64 %indvars.iv499, 5
  %scevgep = getelementptr i8, i8* %1808, i64 %2170
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 32, i32 8, i1 false)
  br i1 %2127, label %._crit_edge201.loopexit, label %._crit_edge201

._crit_edge201.loopexit:                          ; preds = %.preheader109
  %2171 = mul i64 %2130, %indvars.iv499
  %scevgep619 = getelementptr i8, i8* %1813, i64 %2171
  call void @llvm.memset.p0i8.i64(i8* %scevgep619, i8 0, i64 %2135, i32 8, i1 false)
  br label %._crit_edge201

._crit_edge201:                                   ; preds = %._crit_edge201.loopexit, %.preheader109
  %indvars.iv.next500 = add nuw nsw i64 %indvars.iv499, 1
  %exitcond501 = icmp eq i64 %indvars.iv.next500, 8
  br i1 %exitcond501, label %2136, label %.preheader109

.preheader108.loopexit:                           ; preds = %2136
  %2172 = add i32 %1818, %1819
  %2173 = add i32 %2172, 1
  %2174 = sub i32 %2173, %1820
  %2175 = mul i32 %2174, %2167
  %2176 = sext i32 %2175 to i64
  %2177 = icmp sgt i64 %2176, 1
  %smax618 = select i1 %2177, i64 %2176, i64 1
  %2178 = shl nsw i64 %smax618, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %1830, i8 0, i64 %2178, i32 8, i1 false)
  %.pre18 = load i32, i32* %mzeta, align 4, !tbaa !1
  br label %.preheader108

.preheader108:                                    ; preds = %.preheader108.loopexit, %2136
  %2179 = phi i32 [ %.pre18, %.preheader108.loopexit ], [ %2165, %2136 ]
  %2180 = mul i32 %2179, 7
  %2181 = add i32 %2180, 7
  %2182 = mul nsw i32 %2181, %1823
  %2183 = icmp sgt i32 %2182, 0
  br i1 %2183, label %.preheader107.loopexit, label %.preheader107

.preheader107.loopexit:                           ; preds = %.preheader108
  %2184 = add i32 %1818, %1819
  %2185 = add i32 %2184, 1
  %2186 = sub i32 %2185, %1820
  %2187 = mul i32 %2186, %2181
  %2188 = sext i32 %2187 to i64
  %2189 = icmp sgt i64 %2188, 1
  %smax617 = select i1 %2189, i64 %2188, i64 1
  %2190 = shl nsw i64 %smax617, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %1837, i8 0, i64 %2190, i32 8, i1 false)
  br label %.preheader107

.preheader107:                                    ; preds = %.preheader107.loopexit, %.preheader108
  %2191 = icmp sgt i32 %1823, 0
  br i1 %2191, label %.lr.ph191.preheader, label %._crit_edge192

.lr.ph191.preheader:                              ; preds = %.preheader107
  br label %.lr.ph191

.lr.ph191:                                        ; preds = %.lr.ph191, %.lr.ph191.preheader
  %indvars.iv488 = phi i64 [ 0, %.lr.ph191.preheader ], [ %indvars.iv.next489, %.lr.ph191 ]
  %2192 = getelementptr inbounds double, double* %1842, i64 %indvars.iv488
  store double 0.000000e+00, double* %2192, align 8, !tbaa !190
  %2193 = getelementptr inbounds double, double* %1844, i64 %indvars.iv488
  store double 0.000000e+00, double* %2193, align 8, !tbaa !190
  %indvars.iv.next489 = add nuw nsw i64 %indvars.iv488, 1
  %2194 = icmp slt i64 %indvars.iv.next489, %1839
  br i1 %2194, label %.lr.ph191, label %._crit_edge192.loopexit

._crit_edge192.loopexit:                          ; preds = %.lr.ph191
  br label %._crit_edge192

._crit_edge192:                                   ; preds = %._crit_edge192.loopexit, %.preheader107
  %2195 = call noalias i8* @malloc(i64 48) #3
  %2196 = bitcast i8* %2195 to double*
  %2197 = icmp eq i8* %2195, null
  br i1 %2197, label %2198, label %2199

; <label>:2198                                    ; preds = %._crit_edge192
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.112, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 1941, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2199                                    ; preds = %._crit_edge192
  store double 1.234500e+04, double* %2196, align 8, !tbaa !190
  %2200 = getelementptr inbounds i8, i8* %2195, i64 8
  %2201 = bitcast i8* %2200 to double*
  store double 1.234500e+04, double* %2201, align 8, !tbaa !190
  %2202 = getelementptr inbounds i8, i8* %2195, i64 16
  %2203 = bitcast i8* %2202 to double*
  store double 1.234500e+04, double* %2203, align 8, !tbaa !190
  %2204 = getelementptr inbounds i8, i8* %2195, i64 24
  %2205 = bitcast i8* %2204 to double*
  store double 1.234500e+04, double* %2205, align 8, !tbaa !190
  %2206 = getelementptr inbounds i8, i8* %2195, i64 32
  %2207 = bitcast i8* %2206 to double*
  store double 1.234500e+04, double* %2207, align 8, !tbaa !190
  %2208 = getelementptr inbounds i8, i8* %2195, i64 40
  %2209 = bitcast i8* %2208 to double*
  store double 1.234500e+04, double* %2209, align 8, !tbaa !190
  call void @RngStream_ParInit(i32 %20, i32 %25, i32 0, i32 1, i32 1, double* %2196) #3
  %2210 = call %struct.RngStream_InfoState* @RngStream_CreateStream(i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.113, i64 0, i64 0), double* %2196) #3
  br i1 %1215, label %.lr.ph188.preheader, label %._crit_edge189

.lr.ph188.preheader:                              ; preds = %2199
  br label %.lr.ph188

.lr.ph188:                                        ; preds = %.lr.ph188.preheader, %.lr.ph188
  %indvars.iv484 = phi i64 [ %indvars.iv.next485, %.lr.ph188 ], [ 0, %.lr.ph188.preheader ]
  %2211 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2212 = getelementptr inbounds double, double* %1001, i64 %indvars.iv484
  store double %2211, double* %2212, align 8, !tbaa !190
  %2213 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2214 = getelementptr inbounds double, double* %1003, i64 %indvars.iv484
  store double %2213, double* %2214, align 8, !tbaa !190
  %2215 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2216 = getelementptr inbounds double, double* %1005, i64 %indvars.iv484
  store double %2215, double* %2216, align 8, !tbaa !190
  %2217 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2218 = getelementptr inbounds double, double* %1007, i64 %indvars.iv484
  store double %2217, double* %2218, align 8, !tbaa !190
  %2219 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2220 = getelementptr inbounds double, double* %1009, i64 %indvars.iv484
  store double %2219, double* %2220, align 8, !tbaa !190
  %2221 = call double @RngStream_RandU01(%struct.RngStream_InfoState* %2210) #3
  %2222 = getelementptr inbounds double, double* %1011, i64 %indvars.iv484
  store double %2221, double* %2222, align 8, !tbaa !190
  %indvars.iv.next485 = add nuw nsw i64 %indvars.iv484, 1
  %lftr.wideiv486 = trunc i64 %indvars.iv.next485 to i32
  %exitcond487 = icmp eq i32 %lftr.wideiv486, %391
  br i1 %exitcond487, label %._crit_edge189.loopexit, label %.lr.ph188

._crit_edge189.loopexit:                          ; preds = %.lr.ph188
  br label %._crit_edge189

._crit_edge189:                                   ; preds = %._crit_edge189.loopexit, %2199
  %2223 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %2224 = sitofp i32 %2223 to double
  %2225 = fdiv double 0x3FBA3F7C16D1D39C, %2224
  %2226 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %2227 = sitofp i32 %2226 to double
  %2228 = fmul double %2227, %2225
  %2229 = fadd double %2228, 1.281640e-03
  br i1 %1215, label %.lr.ph185.preheader, label %.preheader105

.lr.ph185.preheader:                              ; preds = %._crit_edge189
  br label %.lr.ph185

.preheader106:                                    ; preds = %.lr.ph185
  br i1 true, label %.lr.ph182.preheader, label %.preheader106..preheader105_crit_edge

.lr.ph182.preheader:                              ; preds = %.preheader106
  br label %.lr.ph182

.preheader106..preheader105_crit_edge:            ; preds = %.preheader106
  br label %.preheader105

.lr.ph185:                                        ; preds = %.lr.ph185.preheader, %.lr.ph185
  %indvars.iv480 = phi i64 [ %indvars.iv.next481, %.lr.ph185 ], [ 0, %.lr.ph185.preheader ]
  %2230 = getelementptr inbounds double, double* %1001, i64 %indvars.iv480
  %2231 = load double, double* %2230, align 8, !tbaa !190
  %2232 = fmul double %2225, %2231
  %2233 = fadd double %2229, %2232
  %2234 = call double @sqrt(double %2233) #3
  store double %2234, double* %2230, align 8, !tbaa !190
  %indvars.iv.next481 = add nuw nsw i64 %indvars.iv480, 1
  %lftr.wideiv482 = trunc i64 %indvars.iv.next481 to i32
  %exitcond483 = icmp eq i32 %lftr.wideiv482, %391
  br i1 %exitcond483, label %.preheader106, label %.lr.ph185

.preheader105.loopexit:                           ; preds = %.lr.ph182
  br label %.preheader105

.preheader105:                                    ; preds = %.preheader105.loopexit, %.preheader106..preheader105_crit_edge, %._crit_edge189
  br label %.preheader104

.lr.ph182:                                        ; preds = %.lr.ph182.preheader, %.lr.ph182
  %indvars.iv476 = phi i64 [ %indvars.iv.next477, %.lr.ph182 ], [ 0, %.lr.ph182.preheader ]
  %2235 = getelementptr inbounds double, double* %1003, i64 %indvars.iv476
  %2236 = load double, double* %2235, align 8, !tbaa !190
  %2237 = fadd double %2236, -5.000000e-01
  %2238 = fmul double %2237, 0x401921FB54442D18
  store double %2238, double* %2235, align 8, !tbaa !190
  %2239 = getelementptr inbounds double, double* %1015, i64 %indvars.iv476
  store double %2238, double* %2239, align 8, !tbaa !190
  %indvars.iv.next477 = add nuw nsw i64 %indvars.iv476, 1
  %lftr.wideiv478 = trunc i64 %indvars.iv.next477 to i32
  %exitcond479 = icmp eq i32 %lftr.wideiv478, %391
  br i1 %exitcond479, label %.preheader105.loopexit, label %.lr.ph182

.preheader104:                                    ; preds = %._crit_edge179, %.preheader105
  %i.45180 = phi i32 [ 0, %.preheader105 ], [ %2250, %._crit_edge179 ]
  br i1 %1215, label %.lr.ph178.preheader, label %._crit_edge179

.lr.ph178.preheader:                              ; preds = %.preheader104
  br label %.lr.ph178

.preheader103:                                    ; preds = %._crit_edge179
  br i1 %1215, label %.lr.ph176.preheader, label %._crit_edge168

.lr.ph176.preheader:                              ; preds = %.preheader103
  br label %.lr.ph176

.lr.ph178:                                        ; preds = %.lr.ph178.preheader, %.lr.ph178
  %indvars.iv471 = phi i64 [ %indvars.iv.next472, %.lr.ph178 ], [ 0, %.lr.ph178.preheader ]
  %2240 = getelementptr inbounds double, double* %1015, i64 %indvars.iv471
  %2241 = load double, double* %2240, align 8, !tbaa !190
  %2242 = getelementptr inbounds double, double* %1001, i64 %indvars.iv471
  %2243 = load double, double* %2242, align 8, !tbaa !190
  %2244 = fmul double %2243, 2.000000e+00
  %2245 = getelementptr inbounds double, double* %1003, i64 %indvars.iv471
  %2246 = load double, double* %2245, align 8, !tbaa !190
  %2247 = call double @sin(double %2246) #3
  %2248 = fmul double %2244, %2247
  %2249 = fsub double %2241, %2248
  store double %2249, double* %2245, align 8, !tbaa !190
  %indvars.iv.next472 = add nuw nsw i64 %indvars.iv471, 1
  %lftr.wideiv473 = trunc i64 %indvars.iv.next472 to i32
  %exitcond474 = icmp eq i32 %lftr.wideiv473, %391
  br i1 %exitcond474, label %._crit_edge179.loopexit, label %.lr.ph178

._crit_edge179.loopexit:                          ; preds = %.lr.ph178
  br label %._crit_edge179

._crit_edge179:                                   ; preds = %._crit_edge179.loopexit, %.preheader104
  %2250 = add nuw nsw i32 %i.45180, 1
  %exitcond475 = icmp eq i32 %2250, 10
  br i1 %exitcond475, label %.preheader103, label %.preheader104

.preheader102:                                    ; preds = %.lr.ph176
  br i1 true, label %.lr.ph174.preheader, label %.preheader102.._crit_edge168_crit_edge

.lr.ph174.preheader:                              ; preds = %.preheader102
  br label %.lr.ph174

.preheader102.._crit_edge168_crit_edge:           ; preds = %.preheader102
  br label %._crit_edge168

.lr.ph176:                                        ; preds = %.lr.ph176.preheader, %.lr.ph176
  %indvars.iv467 = phi i64 [ %indvars.iv.next468, %.lr.ph176 ], [ 0, %.lr.ph176.preheader ]
  %2251 = getelementptr inbounds double, double* %1003, i64 %indvars.iv467
  %2252 = load double, double* %2251, align 8, !tbaa !190
  %2253 = fmul double %2252, 0x3FC45F306DC9C883
  %2254 = fadd double %2253, 1.000000e+01
  %2255 = fptosi double %2254 to i32
  %2256 = sitofp i32 %2255 to double
  %2257 = fsub double %2254, %2256
  %2258 = fmul double %2257, 0x401921FB54442D18
  store double %2258, double* %2251, align 8, !tbaa !190
  %indvars.iv.next468 = add nuw nsw i64 %indvars.iv467, 1
  %lftr.wideiv469 = trunc i64 %indvars.iv.next468 to i32
  %exitcond470 = icmp eq i32 %lftr.wideiv469, %391
  br i1 %exitcond470, label %.preheader102, label %.lr.ph176

.preheader101:                                    ; preds = %2277
  br i1 true, label %.lr.ph172.preheader, label %.preheader101.._crit_edge168_crit_edge

.lr.ph172.preheader:                              ; preds = %.preheader101
  br label %.lr.ph172

.preheader101.._crit_edge168_crit_edge:           ; preds = %.preheader101
  br label %._crit_edge168

.lr.ph174:                                        ; preds = %.lr.ph174.preheader, %2277
  %indvars.iv463 = phi i64 [ %indvars.iv.next464, %2277 ], [ 0, %.lr.ph174.preheader ]
  %2259 = getelementptr inbounds double, double* %1007, i64 %indvars.iv463
  %2260 = load double, double* %2259, align 8, !tbaa !190
  %2261 = fadd double %2260, -5.000000e-01
  store double %2261, double* %2259, align 8, !tbaa !190
  %2262 = fcmp ogt double %2261, 0.000000e+00
  %2263 = select i1 %2262, double 1.000000e+00, double -1.000000e+00
  %2264 = getelementptr inbounds double, double* %1019, i64 %indvars.iv463
  store double %2263, double* %2264, align 8, !tbaa !190
  %2265 = load double, double* %2259, align 8, !tbaa !190
  %pow2 = fmul double %2265, %2265
  %2266 = fcmp olt double %pow2, 1.000000e-20
  %2267 = select i1 %2266, double 1.000000e-20, double %pow2
  %2268 = fdiv double 1.000000e+00, %2267
  %2269 = call double @log(double %2268) #3
  %2270 = fcmp olt double %2269, 1.000000e-20
  br i1 %2270, label %2277, label %2271

; <label>:2271                                    ; preds = %.lr.ph174
  %2272 = load double, double* %2259, align 8, !tbaa !190
  %pow264 = fmul double %2272, %2272
  %2273 = fcmp olt double %pow264, 1.000000e-20
  %2274 = select i1 %2273, double 1.000000e-20, double %pow264
  %2275 = fdiv double 1.000000e+00, %2274
  %2276 = call double @log(double %2275) #3
  br label %2277

; <label>:2277                                    ; preds = %2271, %.lr.ph174
  %2278 = phi double [ %2276, %2271 ], [ 1.000000e-20, %.lr.ph174 ]
  %2279 = call double @sqrt(double %2278) #3
  store double %2279, double* %2259, align 8, !tbaa !190
  %2280 = fmul double %2279, 8.028530e-01
  %2281 = fadd double %2280, 2.515517e+00
  %pow266 = fmul double %2279, %2279
  %2282 = fmul double %pow266, 1.032800e-02
  %2283 = fadd double %2281, %2282
  %2284 = fmul double %2279, 1.432788e+00
  %2285 = fadd double %2284, 1.000000e+00
  %2286 = fmul double %pow266, 1.892690e-01
  %2287 = fadd double %2285, %2286
  %2288 = call double @pow(double %2279, double 3.000000e+00) #3
  %2289 = fmul double %2288, 1.308000e-03
  %2290 = fadd double %2287, %2289
  %2291 = fdiv double %2283, %2290
  %2292 = fsub double %2279, %2291
  %2293 = fcmp ogt double %2292, 4.000000e+00
  %storemerge = select i1 %2293, double %2260, double %2292
  store double %storemerge, double* %2259, align 8, !tbaa !190
  %indvars.iv.next464 = add nuw nsw i64 %indvars.iv463, 1
  %lftr.wideiv465 = trunc i64 %indvars.iv.next464 to i32
  %exitcond466 = icmp eq i32 %lftr.wideiv465, %391
  br i1 %exitcond466, label %.preheader101, label %.lr.ph174

.preheader100:                                    ; preds = %2325
  br i1 true, label %.lr.ph170, label %.preheader100.._crit_edge168_crit_edge

.preheader100.._crit_edge168_crit_edge:           ; preds = %.preheader100
  br label %._crit_edge168

.lr.ph170:                                        ; preds = %.preheader100
  %2294 = fmul double %171, 5.000000e-01
  %2295 = fmul double %171, %2294
  br label %2329

.lr.ph172:                                        ; preds = %.lr.ph172.preheader, %2325
  %indvars.iv459 = phi i64 [ %indvars.iv.next460, %2325 ], [ 0, %.lr.ph172.preheader ]
  %2296 = getelementptr inbounds double, double* %1005, i64 %indvars.iv459
  %2297 = load double, double* %2296, align 8, !tbaa !190
  %2298 = fmul double %125, %2297
  %2299 = fadd double %120, %2298
  store double %2299, double* %2296, align 8, !tbaa !190
  %2300 = getelementptr inbounds double, double* %1019, i64 %indvars.iv459
  %2301 = load double, double* %2300, align 8, !tbaa !190
  %2302 = getelementptr inbounds double, double* %1007, i64 %indvars.iv459
  %2303 = load double, double* %2302, align 8, !tbaa !190
  %2304 = fcmp ogt double %2303, 4.000000e+00
  %.82 = select i1 %2304, double 4.000000e+00, double %2303
  %2305 = fmul double %2301, %.82
  store double %2305, double* %2302, align 8, !tbaa !190
  %2306 = getelementptr inbounds double, double* %1009, i64 %indvars.iv459
  %2307 = load double, double* %2306, align 8, !tbaa !190
  %2308 = fadd double %2307, -5.000000e-01
  %2309 = fmul double %2308, 2.000000e-03
  %2310 = getelementptr inbounds double, double* %1003, i64 %indvars.iv459
  %2311 = load double, double* %2310, align 8, !tbaa !190
  %2312 = call double @cos(double %2311) #3
  %2313 = fadd double %2312, 1.000000e+00
  %2314 = fmul double %2309, %2313
  store double %2314, double* %2306, align 8, !tbaa !190
  %2315 = getelementptr inbounds double, double* %1011, i64 %indvars.iv459
  %2316 = load double, double* %2315, align 8, !tbaa !190
  %2317 = fcmp olt double %2316, 1.000000e-20
  %2318 = select i1 %2317, double 1.000000e-20, double %2316
  %2319 = call double @log(double %2318) #3
  %2320 = fmul double %2319, -2.000000e+00
  %2321 = fcmp ogt double %2320, 3.200000e+01
  br i1 %2321, label %2325, label %2322

; <label>:2322                                    ; preds = %.lr.ph172
  %2323 = call double @log(double %2318) #3
  %2324 = fmul double %2323, -2.000000e+00
  br label %2325

; <label>:2325                                    ; preds = %2322, %.lr.ph172
  %2326 = phi double [ %2324, %2322 ], [ 3.200000e+01, %.lr.ph172 ]
  %2327 = fcmp olt double %2326, 2.000000e-20
  %2328 = select i1 %2327, double 2.000000e-20, double %2326
  store double %2328, double* %2315, align 8, !tbaa !190
  %indvars.iv.next460 = add nuw nsw i64 %indvars.iv459, 1
  %lftr.wideiv461 = trunc i64 %indvars.iv.next460 to i32
  %exitcond462 = icmp eq i32 %lftr.wideiv461, %391
  br i1 %exitcond462, label %.preheader100, label %.lr.ph172

.preheader99:                                     ; preds = %2329
  br i1 true, label %.lr.ph167.preheader, label %.preheader99.._crit_edge168_crit_edge

.lr.ph167.preheader:                              ; preds = %.preheader99
  br label %.lr.ph167

.preheader99.._crit_edge168_crit_edge:            ; preds = %.preheader99
  br label %._crit_edge168

; <label>:2329                                    ; preds = %2329, %.lr.ph170
  %indvars.iv455 = phi i64 [ 0, %.lr.ph170 ], [ %indvars.iv.next456, %2329 ]
  %2330 = getelementptr inbounds double, double* %1001, i64 %indvars.iv455
  %2331 = load double, double* %2330, align 8, !tbaa !190
  %2332 = getelementptr inbounds double, double* %1003, i64 %indvars.iv455
  %2333 = load double, double* %2332, align 8, !tbaa !190
  %2334 = call double @cos(double %2333) #3
  %2335 = fmul double %2331, %2334
  %2336 = fadd double %2335, 1.000000e+00
  %2337 = fdiv double 1.000000e+00, %2336
  %2338 = getelementptr inbounds double, double* %1013, i64 %indvars.iv455
  store double %2337, double* %2338, align 8, !tbaa !190
  %2339 = load double, double* %2330, align 8, !tbaa !190
  %2340 = fmul double %2339, 5.000000e-01
  %2341 = fmul double %2339, %2340
  store double %2341, double* %2330, align 8, !tbaa !190
  %2342 = getelementptr inbounds double, double* %1007, i64 %indvars.iv455
  %2343 = load double, double* %2342, align 8, !tbaa !190
  %2344 = fmul double %171, %2343
  %2345 = load double, double* %2338, align 8, !tbaa !190
  %2346 = fdiv double %2344, %2345
  store double %2346, double* %2342, align 8, !tbaa !190
  %2347 = getelementptr inbounds double, double* %1011, i64 %indvars.iv455
  %2348 = load double, double* %2347, align 8, !tbaa !190
  %2349 = fmul double %2295, %2348
  %2350 = load double, double* %2338, align 8, !tbaa !190
  %2351 = fdiv double %2349, %2350
  %2352 = call double @sqrt(double %2351) #3
  store double %2352, double* %2347, align 8, !tbaa !190
  %indvars.iv.next456 = add nuw nsw i64 %indvars.iv455, 1
  %lftr.wideiv457 = trunc i64 %indvars.iv.next456 to i32
  %exitcond458 = icmp eq i32 %lftr.wideiv457, %391
  br i1 %exitcond458, label %.preheader99, label %2329

.lr.ph167:                                        ; preds = %.lr.ph167.preheader, %.lr.ph167
  %indvars.iv453 = phi i64 [ %indvars.iv.next454, %.lr.ph167 ], [ 0, %.lr.ph167.preheader ]
  %2353 = getelementptr inbounds double, double* %1023, i64 %indvars.iv453
  store double 1.000000e+00, double* %2353, align 8, !tbaa !190
  %indvars.iv.next454 = add nuw nsw i64 %indvars.iv453, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next454 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %391
  br i1 %exitcond, label %._crit_edge168.loopexit, label %.lr.ph167

._crit_edge168.loopexit:                          ; preds = %.lr.ph167
  br label %._crit_edge168

._crit_edge168:                                   ; preds = %._crit_edge168.loopexit, %.preheader100.._crit_edge168_crit_edge, %.preheader101.._crit_edge168_crit_edge, %.preheader102.._crit_edge168_crit_edge, %.preheader99.._crit_edge168_crit_edge, %.preheader103
  %2354 = fdiv double 1.000000e+00, %285
  %2355 = fdiv double 1.000000e+00, %127
  %2356 = fdiv double 1.000000e+00, %171
  %2357 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2358 = icmp slt i32 %2357, 0
  br i1 %2358, label %.preheader98, label %.lr.ph165

.lr.ph165:                                        ; preds = %._crit_edge168
  %2359 = sext i32 %2357 to i64
  br label %2364

.preheader98.loopexit:                            ; preds = %2364
  br label %.preheader98

.preheader98:                                     ; preds = %.preheader98.loopexit, %._crit_edge168
  %2360 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2361 = add nsw i32 %2360, 1
  %2362 = mul nsw i32 %2361, %582
  %2363 = icmp sgt i32 %2362, 0
  br i1 %2363, label %._crit_edge162.loopexit, label %._crit_edge162

; <label>:2364                                    ; preds = %2364, %.lr.ph165
  %indvars.iv451 = phi i64 [ %indvars.iv.next452, %2364 ], [ 0, %.lr.ph165 ]
  %2365 = getelementptr inbounds double, double* %197, i64 %indvars.iv451
  %2366 = load double, double* %2365, align 8, !tbaa !190
  %2367 = fdiv double 0x401921FB54442D18, %2366
  %2368 = getelementptr inbounds double, double* %260, i64 %indvars.iv451
  store double %2367, double* %2368, align 8, !tbaa !190
  %indvars.iv.next452 = add nuw nsw i64 %indvars.iv451, 1
  %2369 = icmp slt i64 %indvars.iv451, %2359
  br i1 %2369, label %2364, label %.preheader98.loopexit

._crit_edge162.loopexit:                          ; preds = %.preheader98
  %2370 = add i32 %580, 1
  %2371 = sub i32 %2370, %574
  %2372 = mul i32 %2371, %2361
  %2373 = sext i32 %2372 to i64
  %2374 = icmp sgt i64 %2373, 1
  %smax = select i1 %2374, i64 %2373, i64 1
  %2375 = shl nsw i64 %smax, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull %875, i8 0, i64 %2375, i32 8, i1 false)
  br label %._crit_edge162

._crit_edge162:                                   ; preds = %._crit_edge162.loopexit, %.preheader98
  %2376 = mul i32 %582, 65
  %2377 = mul nsw i32 %2360, %2376
  %2378 = sext i32 %2377 to i64
  %2379 = shl nsw i64 %2378, 2
  %2380 = call fastcc i8* @_mm_malloc(i64 %2379)
  %2381 = bitcast i8* %2380 to i32*
  %2382 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2383 = mul nsw i32 %2382, %2376
  %2384 = sext i32 %2383 to i64
  %2385 = shl nsw i64 %2384, 3
  %2386 = call fastcc i8* @_mm_malloc(i64 %2385)
  %2387 = bitcast i8* %2386 to double*
  %2388 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2389 = mul nsw i32 %2388, %582
  %2390 = sext i32 %2389 to i64
  %2391 = shl nsw i64 %2390, 2
  %2392 = call fastcc i8* @_mm_malloc(i64 %2391)
  %2393 = bitcast i8* %2392 to i32*
  %2394 = icmp eq i8* %2380, null
  br i1 %2394, label %2395, label %2396

; <label>:2395                                    ; preds = %._crit_edge162
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.114, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2120, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2396                                    ; preds = %._crit_edge162
  %2397 = icmp eq i8* %2386, null
  br i1 %2397, label %2398, label %2399

; <label>:2398                                    ; preds = %2396
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.115, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2121, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2399                                    ; preds = %2396
  %2400 = icmp eq i8* %2392, null
  br i1 %2400, label %2404, label %.preheader97

.preheader97:                                     ; preds = %2399
  %2401 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2402 = mul nsw i32 %2401, %582
  %2403 = icmp sgt i32 %2402, 0
  br i1 %2403, label %.lr.ph159.preheader, label %.preheader96

.lr.ph159.preheader:                              ; preds = %.preheader97
  br label %.lr.ph159

; <label>:2404                                    ; preds = %2399
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2122, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

.preheader96.loopexit:                            ; preds = %.lr.ph159
  br label %.preheader96

.preheader96:                                     ; preds = %.preheader96.loopexit, %.preheader97
  %2405 = phi i32 [ %2401, %.preheader97 ], [ %2409, %.preheader96.loopexit ]
  %2406 = mul i32 %2376, %2405
  %2407 = icmp sgt i32 %2406, 0
  br i1 %2407, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader96
  br label %.lr.ph

.lr.ph159:                                        ; preds = %.lr.ph159.preheader, %.lr.ph159
  %indvars.iv447 = phi i64 [ %indvars.iv.next448, %.lr.ph159 ], [ 0, %.lr.ph159.preheader ]
  %2408 = getelementptr inbounds i32, i32* %2393, i64 %indvars.iv447
  store i32 0, i32* %2408, align 4, !tbaa !1
  %indvars.iv.next448 = add nuw nsw i64 %indvars.iv447, 1
  %2409 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2410 = mul nsw i32 %2409, %582
  %2411 = sext i32 %2410 to i64
  %2412 = icmp slt i64 %indvars.iv.next448, %2411
  br i1 %2412, label %.lr.ph159, label %.preheader96.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv445 = phi i64 [ %indvars.iv.next446, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %2413 = getelementptr inbounds double, double* %2387, i64 %indvars.iv445
  store double 0.000000e+00, double* %2413, align 8, !tbaa !190
  %2414 = getelementptr inbounds i32, i32* %2381, i64 %indvars.iv445
  store i32 0, i32* %2414, align 4, !tbaa !1
  %indvars.iv.next446 = add nuw nsw i64 %indvars.iv445, 1
  %2415 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2416 = mul i32 %2376, %2415
  %2417 = sext i32 %2416 to i64
  %2418 = icmp slt i64 %indvars.iv.next446, %2417
  br i1 %2418, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader96
  %2419 = sdiv i32 %391, 5
  %2420 = mul nsw i32 %2419, 12
  %2421 = sext i32 %2420 to i64
  %2422 = shl nsw i64 %2421, 3
  %2423 = call fastcc i8* @_mm_malloc(i64 %2422)
  %2424 = icmp eq i8* %2423, null
  br i1 %2424, label %2425, label %2426

; <label>:2425                                    ; preds = %._crit_edge
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.117, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2145, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2426                                    ; preds = %._crit_edge
  %2427 = call fastcc i8* @_mm_malloc(i64 %2422)
  %2428 = icmp eq i8* %2427, null
  br i1 %2428, label %2429, label %2430

; <label>:2429                                    ; preds = %2426
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.118, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2149, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2430                                    ; preds = %2426
  br i1 %94, label %2431, label %2444

; <label>:2431                                    ; preds = %2430
  %2432 = call %struct._IO_FILE* @fopen(i8* nonnull getelementptr inbounds ([64 x i8], [64 x i8]* @.str.119, i64 0, i64 0), i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.15, i64 0, i64 0))
  %2433 = icmp eq %struct._IO_FILE* %2432, null
  br i1 %2433, label %2434, label %.preheader.preheader

; <label>:2434                                    ; preds = %2431
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @str.27, i64 0, i64 0))
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %2431, %2434
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %.preheader.preheader ]
  %2435 = getelementptr inbounds double, double* %1049, i64 %indvars.iv
  %2436 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %2432, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.121, i64 0, i64 0), double* %2435) #3
  %2437 = icmp eq i32 %2436, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %2437, label %.preheader, label %2438

; <label>:2438                                    ; preds = %.preheader
  %2439 = trunc i64 %indvars.iv to i32
  %2440 = icmp eq i32 %2439, 100001
  br i1 %2440, label %2442, label %2441

; <label>:2441                                    ; preds = %2438
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i32 2162, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.setup, i64 0, i64 0)) #15
  unreachable

; <label>:2442                                    ; preds = %2438
  %2443 = call i32 @fclose(%struct._IO_FILE* %2432)
  br label %2444

; <label>:2444                                    ; preds = %2442, %2430
  %2445 = call i32 @MPI_Bcast(i8* nonnull %1048, i32 100001, i32 1275070475, i32 0, i32 1140850688) #3
  %2446 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 73
  %2447 = load double, double* %2446, align 8, !tbaa !191
  %2448 = fcmp ogt double %2447, 0.000000e+00
  br i1 %2448, label %2449, label %2456

; <label>:2449                                    ; preds = %2444
  %2450 = fmul double %2447, 0x4120AF9B3527C768
  store double %2450, double* %2446, align 8, !tbaa !191
  br i1 %94, label %2451, label %2456

; <label>:2451                                    ; preds = %2449
  %2452 = fmul double %171, %2450
  %2453 = fmul double %2452, 0x3FB3632C79520906
  %2454 = fdiv double 1.400000e+00, %2453
  %2455 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.123, i64 0, i64 0), double %2450, double %2454, double 1.400000e+00)
  br label %2456

; <label>:2456                                    ; preds = %2451, %2449, %2444
  %2457 = getelementptr inbounds i8, i8* %1050, i64 256
  %2458 = getelementptr inbounds i8, i8* %1050, i64 512
  %2459 = getelementptr inbounds i8, i8* %1050, i64 768
  %2460 = getelementptr inbounds i8, i8* %1051, i64 256
  %2461 = getelementptr inbounds i8, i8* %1051, i64 512
  %2462 = or i32 %27, %20
  %2463 = icmp eq i32 %2462, 0
  br i1 %2463, label %2464, label %2516

; <label>:2464                                    ; preds = %2456
  %2465 = call %struct._IO_FILE* @fopen(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.124, i64 0, i64 0), i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i64 0, i64 0))
  %2466 = icmp eq %struct._IO_FILE* %2465, null
  br i1 %2466, label %2467, label %2470

; <label>:2467                                    ; preds = %2464
  %2468 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.126, i64 0, i64 0))
  %2469 = call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  br label %2470

; <label>:2470                                    ; preds = %2467, %2464
  %2471 = bitcast i32* %nbyte to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2471) #3
  store i32 20, i32* %nbyte, align 4, !tbaa !1
  %2472 = bitcast i32* %nbyte1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2472) #3
  %2473 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2474 = mul i32 %2473, 12
  %2475 = add i32 %2474, 12
  store i32 %2475, i32* %nbyte1, align 4, !tbaa !1
  %2476 = bitcast i32* %nbyte2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2476) #3
  %2477 = shl i32 %2473, 4
  %2478 = add i32 %2477, 16
  store i32 %2478, i32* %nbyte2, align 4, !tbaa !1
  %2479 = call i64 @fwrite(i8* %2471, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2480 = call i64 @fwrite(i8* %2, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2481 = call i64 @fwrite(i8* %4, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2482 = call i64 @fwrite(i8* %3, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2483 = call i64 @fwrite(i8* %5, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2484 = call i64 @fwrite(i8* %1, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2485 = call i64 @fwrite(i8* %2471, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2486 = call i64 @fwrite(i8* %2472, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2487 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2488 = add nsw i32 %2487, 1
  %2489 = sext i32 %2488 to i64
  %2490 = shl nsw i64 %2489, 2
  %2491 = call i64 @fwrite(i8* %190, i64 %2490, i64 1, %struct._IO_FILE* %2465)
  %2492 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2493 = add nsw i32 %2492, 1
  %2494 = sext i32 %2493 to i64
  %2495 = shl nsw i64 %2494, 2
  %2496 = call i64 @fwrite(i8* %214, i64 %2495, i64 1, %struct._IO_FILE* %2465)
  %2497 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2498 = add nsw i32 %2497, 1
  %2499 = sext i32 %2498 to i64
  %2500 = shl nsw i64 %2499, 2
  %2501 = call i64 @fwrite(i8* %184, i64 %2500, i64 1, %struct._IO_FILE* %2465)
  %2502 = call i64 @fwrite(i8* %2472, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2503 = call i64 @fwrite(i8* %2476, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2504 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2505 = add nsw i32 %2504, 1
  %2506 = sext i32 %2505 to i64
  %2507 = shl nsw i64 %2506, 3
  %2508 = call i64 @fwrite(i8* %178, i64 %2507, i64 1, %struct._IO_FILE* %2465)
  %2509 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2510 = add nsw i32 %2509, 1
  %2511 = sext i32 %2510 to i64
  %2512 = shl nsw i64 %2511, 3
  %2513 = call i64 @fwrite(i8* %196, i64 %2512, i64 1, %struct._IO_FILE* %2465)
  %2514 = call i64 @fwrite(i8* %2476, i64 4, i64 1, %struct._IO_FILE* %2465)
  %2515 = call i32 @fclose(%struct._IO_FILE* %2465)
  call void @llvm.lifetime.end(i64 4, i8* %2476) #3
  call void @llvm.lifetime.end(i64 4, i8* %2472) #3
  call void @llvm.lifetime.end(i64 4, i8* %2471) #3
  br label %2516

; <label>:2516                                    ; preds = %2470, %2456
  store i32 %29, i32* %28, align 8, !tbaa !150
  %2517 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  store i32 %391, i32* %2517, align 8, !tbaa !192
  %2518 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 1
  store i32 %392, i32* %2518, align 4, !tbaa !193
  %2519 = load i32, i32* %mpsi, align 4, !tbaa !1
  store i32 %2519, i32* %32, align 4, !tbaa !152
  %2520 = load i32, i32* %mgrid, align 4, !tbaa !1
  %2521 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 2
  store i32 %2520, i32* %2521, align 8, !tbaa !194
  %2522 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 67
  store double %124, double* %2522, align 8, !tbaa !195
  %2523 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  store double %120, double* %2523, align 8, !tbaa !196
  store i32 %35, i32* %34, align 8, !tbaa !153
  %2524 = load i32, i32* %mzetamax, align 4, !tbaa !1
  store i32 %2524, i32* %36, align 8, !tbaa !154
  %2525 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2526 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  store i32 %2525, i32* %2526, align 4, !tbaa !197
  %2527 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 82
  store double %2356, double* %2527, align 8, !tbaa !198
  %2528 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 9
  store i32 %895, i32* %2528, align 4, !tbaa !199
  %2529 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 10
  store i32 16, i32* %2529, align 8, !tbaa !200
  %2530 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 11
  store i32 8, i32* %2530, align 4, !tbaa !201
  %2531 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 12
  store double 5.000000e-01, double* %2531, align 8, !tbaa !202
  store double 3.580000e-01, double* %49, align 8, !tbaa !162
  store double 3.580000e-02, double* %50, align 8, !tbaa !163
  store double 3.222000e-01, double* %51, align 8, !tbaa !164
  store double 1.000000e+00, double* %57, align 8, !tbaa !170
  %2532 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  store double %2354, double* %2532, align 8, !tbaa !203
  %2533 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 84
  store double %2355, double* %2533, align 8, !tbaa !204
  store double 8.540000e-01, double* %52, align 8, !tbaa !165
  store double 0.000000e+00, double* %53, align 8, !tbaa !166
  store double 2.184000e+00, double* %54, align 8, !tbaa !167
  store double 1.000000e+00, double* %58, align 8, !tbaa !171
  store double 1.790000e-01, double* %55, align 8, !tbaa !168
  store double %67, double* %65, align 8, !tbaa !177
  store double 0x4023F3BDCDBD6522, double* %56, align 8, !tbaa !169
  store double 1.910000e+04, double* %68, align 8, !tbaa !178
  store double 2.500000e+03, double* %69, align 8, !tbaa !179
  store double 4.000000e+00, double* %71, align 8, !tbaa !181
  %2534 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 85
  store double 0x3FC45F306DC9C883, double* %2534, align 8, !tbaa !205
  %2535 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 30
  store i32 %361, i32* %2535, align 4, !tbaa !206
  %2536 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 65
  store double %285, double* %2536, align 8, !tbaa !207
  store i32 1, i32* %46, align 8, !tbaa !159
  %2537 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  store double %171, double* %2537, align 8, !tbaa !208
  %2538 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 66
  store double %127, double* %2538, align 8, !tbaa !209
  %2539 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 8
  store i32 0, i32* %2539, align 8, !tbaa !210
  %2540 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 7
  store i32 %391, i32* %2540, align 4, !tbaa !211
  store double %173, double* %47, align 8, !tbaa !160
  %2541 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  store double 0x400921FB54442D18, double* %2541, align 8, !tbaa !212
  %2542 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 44
  store i32 1, i32* %2542, align 4, !tbaa !213
  %2543 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 45
  store i32 1, i32* %2543, align 8, !tbaa !214
  br i1 %94, label %2544, label %2547

; <label>:2544                                    ; preds = %2516
  %2545 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %2546 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2545, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.135, i64 0, i64 0), i32 1)
  br label %2547

; <label>:2547                                    ; preds = %2544, %2516
  %2548 = bitcast %struct.gtc_aux_particle_data_t* %14 to i8**
  store i8* %1040, i8** %2548, align 8, !tbaa !101
  %2549 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 3
  %2550 = bitcast double** %2549 to i8**
  store i8* %1028, i8** %2550, align 8, !tbaa !104
  %2551 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 4
  %2552 = bitcast double** %2551 to i8**
  store i8* %1033, i8** %2552, align 8, !tbaa !105
  %2553 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 1
  %2554 = bitcast i32** %2553 to i8**
  store i8* %1043, i8** %2554, align 8, !tbaa !102
  %2555 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 2
  %2556 = bitcast i32** %2555 to i8**
  store i8* %1045, i8** %2556, align 8, !tbaa !103
  %2557 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 5
  %2558 = bitcast double** %2557 to i8**
  store i8* %1035, i8** %2558, align 8, !tbaa !106
  %2559 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 6
  %2560 = bitcast double** %2559 to i8**
  store i8* %1037, i8** %2560, align 8, !tbaa !107
  %2561 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %2562 = bitcast i32** %2561 to i8**
  store i8* %1047, i8** %2562, align 8, !tbaa !108
  %2563 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %2564 = bitcast double** %2563 to i8**
  store i8* %1794, i8** %2564, align 8, !tbaa !121
  %2565 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 3
  %2566 = bitcast double** %2565 to i8**
  store i8* %1795, i8** %2566, align 8, !tbaa !122
  %2567 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 4
  %2568 = bitcast double** %2567 to i8**
  store i8* %1797, i8** %2568, align 8, !tbaa !123
  %2569 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 5
  %2570 = bitcast double** %2569 to i8**
  store i8* %1799, i8** %2570, align 8, !tbaa !124
  %2571 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 6
  %2572 = bitcast double** %2571 to i8**
  store i8* %1801, i8** %2572, align 8, !tbaa !125
  %2573 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 7
  %2574 = bitcast double** %2573 to i8**
  store i8* %1803, i8** %2574, align 8, !tbaa !126
  %2575 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 8
  %2576 = bitcast double** %2575 to i8**
  store i8* %1805, i8** %2576, align 8, !tbaa !127
  %2577 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 9
  %2578 = bitcast double** %2577 to i8**
  store i8* %1807, i8** %2578, align 8, !tbaa !128
  %2579 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 10
  %2580 = bitcast double** %2579 to i8**
  store i8* %1808, i8** %2580, align 8, !tbaa !129
  %2581 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 11
  %2582 = bitcast double** %2581 to i8**
  store i8* %1813, i8** %2582, align 8, !tbaa !130
  %2583 = bitcast %struct.gtc_diagnosis_data_t* %16 to i8**
  store i8* %1814, i8** %2583, align 8, !tbaa !131
  %2584 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 1
  %2585 = bitcast i32** %2584 to i8**
  store i8* %1816, i8** %2585, align 8, !tbaa !132
  %2586 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 18
  store i32 %1820, i32* %2586, align 8, !tbaa !215
  %2587 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 19
  store i32 %ipsi_in.0.lcssa626, i32* %2587, align 4, !tbaa !216
  %2588 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 20
  store i32 %ipsi_out.0.lcssa627, i32* %2588, align 8, !tbaa !217
  %2589 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 21
  store i32 %1823, i32* %2589, align 4, !tbaa !218
  %2590 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 14
  %2591 = bitcast double** %2590 to i8**
  store i8* %1830, i8** %2591, align 8, !tbaa !133
  %2592 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 15
  %2593 = bitcast double** %2592 to i8**
  store i8* %1837, i8** %2593, align 8, !tbaa !134
  %2594 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 16
  %2595 = bitcast double** %2594 to i8**
  store i8* %1841, i8** %2595, align 8, !tbaa !135
  %2596 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 17
  %2597 = bitcast double** %2596 to i8**
  store i8* %1843, i8** %2597, align 8, !tbaa !136
  %2598 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 22
  %2599 = bitcast i32** %2598 to i8**
  store i8* %1984, i8** %2599, align 8, !tbaa !137
  %2600 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 23
  %2601 = bitcast i32** %2600 to i8**
  store i8* %1986, i8** %2601, align 8, !tbaa !138
  %2602 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 24
  %2603 = bitcast i32** %2602 to i8**
  store i8* %1988, i8** %2603, align 8, !tbaa !139
  %2604 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 25
  %2605 = bitcast double** %2604 to i8**
  store i8* %2048, i8** %2605, align 8, !tbaa !140
  %2606 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 26
  store i32 %ghost_moments_comm_num.0.lcssa, i32* %2606, align 8, !tbaa !219
  %2607 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 27
  store i32 %ghost_moments_bufsize.0.lcssa, i32* %2607, align 4, !tbaa !220
  %2608 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 28
  %2609 = bitcast i32** %2608 to i8**
  store i8* %1902, i8** %2609, align 8, !tbaa !141
  %2610 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 29
  %2611 = bitcast i32** %2610 to i8**
  store i8* %1904, i8** %2611, align 8, !tbaa !142
  %2612 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 30
  %2613 = bitcast i32** %2612 to i8**
  store i8* %1906, i8** %2613, align 8, !tbaa !143
  %2614 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 31
  %2615 = bitcast double** %2614 to i8**
  store i8* %1966, i8** %2615, align 8, !tbaa !144
  %2616 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 32
  store i32 %nghost_moments_comm_num.0.lcssa, i32* %2616, align 8, !tbaa !221
  %2617 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 33
  store i32 %nghost_moments_bufsize.0.lcssa, i32* %2617, align 4, !tbaa !222
  %2618 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %2619 = bitcast i32** %2618 to i8**
  store i8* %214, i8** %2619, align 8, !tbaa !29
  %2620 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %2621 = bitcast double** %2620 to i8**
  store i8* %259, i8** %2621, align 8, !tbaa !36
  %2622 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %2623 = bitcast double** %2622 to i8**
  store i8* %178, i8** %2623, align 8, !tbaa !30
  %2624 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %2625 = bitcast i32** %2624 to i8**
  store i8* %190, i8** %2625, align 8, !tbaa !31
  %2626 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 24
  %2627 = bitcast double** %2626 to i8**
  store i8* %860, i8** %2627, align 8, !tbaa !32
  %2628 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 25
  %2629 = bitcast double** %2628 to i8**
  store i8* %862, i8** %2629, align 8, !tbaa !33
  %2630 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %2631 = bitcast double** %2630 to i8**
  store i8* %875, i8** %2631, align 8, !tbaa !34
  %2632 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 16
  %2633 = bitcast double** %2632 to i8**
  store i8* %882, i8** %2633, align 8, !tbaa !35
  %2634 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 29
  %2635 = bitcast double** %2634 to i8**
  store i8* %918, i8** %2635, align 8, !tbaa !42
  %2636 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 7
  %2637 = bitcast double** %2636 to i8**
  store i8* %202, i8** %2637, align 8, !tbaa !39
  %2638 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 18
  %2639 = bitcast double** %2638 to i8**
  store i8* %269, i8** %2639, align 8, !tbaa !40
  %2640 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 17
  %2641 = bitcast double** %2640 to i8**
  store i8* %275, i8** %2641, align 8, !tbaa !41
  %2642 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 0
  store i32 22, i32* %2642, align 8, !tbaa !223
  %2643 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 1
  %2644 = bitcast i32** %2643 to i8**
  store i8* %184, i8** %2644, align 8, !tbaa !44
  %2645 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 3
  %2646 = bitcast i32** %2645 to i8**
  store i8* %924, i8** %2646, align 8, !tbaa !47
  %2647 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 4
  %2648 = bitcast i32** %2647 to i8**
  store i8* %930, i8** %2648, align 8, !tbaa !48
  %2649 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 8
  %2650 = bitcast double** %2649 to i8**
  store i8* %208, i8** %2650, align 8, !tbaa !45
  %2651 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 11
  %2652 = bitcast double** %2651 to i8**
  store i8* %248, i8** %2652, align 8, !tbaa !56
  %2653 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 26
  %2654 = bitcast double** %2653 to i8**
  store i8* %948, i8** %2654, align 8, !tbaa !59
  %2655 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 30
  %2656 = bitcast double** %2655 to i8**
  store i8* %936, i8** %2656, align 8, !tbaa !49
  %2657 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 31
  %2658 = bitcast double** %2657 to i8**
  store i8* %942, i8** %2658, align 8, !tbaa !50
  %2659 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 50
  %2660 = bitcast i32** %2659 to i8**
  store i8* %2380, i8** %2660, align 8, !tbaa !66
  %2661 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 51
  %2662 = bitcast i32** %2661 to i8**
  store i8* %2392, i8** %2662, align 8, !tbaa !67
  %2663 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 52
  %2664 = bitcast double** %2663 to i8**
  store i8* %2386, i8** %2664, align 8, !tbaa !68
  %2665 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 33
  %2666 = bitcast double** %2665 to i8**
  store i8* %892, i8** %2666, align 8, !tbaa !58
  %2667 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 34
  %2668 = bitcast double** %2667 to i8**
  store i8* %893, i8** %2668, align 8, !tbaa !57
  %2669 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 19
  %2670 = bitcast double** %2669 to i8**
  store i8* %888, i8** %2670, align 8, !tbaa !46
  %2671 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 27
  %2672 = bitcast double** %2671 to i8**
  store i8* %954, i8** %2672, align 8, !tbaa !43
  %2673 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 20
  %2674 = bitcast double** %2673 to i8**
  store i8* %243, i8** %2674, align 8, !tbaa !53
  %2675 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 21
  %2676 = bitcast double** %2675 to i8**
  store i8* %261, i8** %2676, align 8, !tbaa !54
  %2677 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 22
  %2678 = bitcast double** %2677 to i8**
  store i8* %263, i8** %2678, align 8, !tbaa !55
  %2679 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 13
  %2680 = bitcast double** %2679 to i8**
  store i8* %281, i8** %2680, align 8, !tbaa !38
  %2681 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %2682 = bitcast double** %2681 to i8**
  store i8* %910, i8** %2682, align 8, !tbaa !60
  %2683 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 10
  %2684 = bitcast double** %2683 to i8**
  store i8* %220, i8** %2684, align 8, !tbaa !61
  %2685 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 46
  %2686 = bitcast double** %2685 to i8**
  store i8* %231, i8** %2686, align 8, !tbaa !37
  %2687 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 5
  %2688 = bitcast double** %2687 to i8**
  store i8* %226, i8** %2688, align 8, !tbaa !62
  %2689 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 6
  %2690 = bitcast double** %2689 to i8**
  store i8* %237, i8** %2690, align 8, !tbaa !63
  %2691 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 12
  %2692 = bitcast double** %2691 to i8**
  store i8* %254, i8** %2692, align 8, !tbaa !64
  %2693 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 23
  %2694 = bitcast double** %2693 to i8**
  store i8* %868, i8** %2694, align 8, !tbaa !51
  %2695 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 49
  %2696 = bitcast double** %2695 to i8**
  store i8* %196, i8** %2696, align 8, !tbaa !65
  %2697 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 53
  %2698 = bitcast double** %2697 to i8**
  store i8* %956, i8** %2698, align 8, !tbaa !79
  %2699 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 54
  %2700 = bitcast double** %2699 to i8**
  store i8* %958, i8** %2700, align 8, !tbaa !80
  %2701 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 55
  %2702 = bitcast i32** %2701 to i8**
  store i8* %961, i8** %2702, align 8, !tbaa !81
  %2703 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 56
  %2704 = bitcast i32** %2703 to i8**
  store i8* %963, i8** %2704, align 8, !tbaa !82
  %2705 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 57
  %2706 = bitcast i32** %2705 to i8**
  store i8* %965, i8** %2706, align 8, !tbaa !83
  %2707 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 58
  %2708 = bitcast i32** %2707 to i8**
  store i8* %967, i8** %2708, align 8, !tbaa !84
  %2709 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 39
  %2710 = bitcast double** %2709 to i8**
  store i8* %969, i8** %2710, align 8, !tbaa !70
  %2711 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 40
  %2712 = bitcast double** %2711 to i8**
  store i8* %973, i8** %2712, align 8, !tbaa !72
  %2713 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 37
  %2714 = bitcast double** %2713 to i8**
  store i8* %971, i8** %2714, align 8, !tbaa !69
  %2715 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 38
  %2716 = bitcast double** %2715 to i8**
  store i8* %975, i8** %2716, align 8, !tbaa !71
  %2717 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 35
  %2718 = bitcast double** %2717 to i8**
  store i8* %980, i8** %2718, align 8, !tbaa !73
  %2719 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 36
  %2720 = bitcast double** %2719 to i8**
  store i8* %982, i8** %2720, align 8, !tbaa !74
  %2721 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 41
  %2722 = bitcast double** %2721 to i8**
  store i8* %984, i8** %2722, align 8, !tbaa !75
  %2723 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 42
  %2724 = bitcast double** %2723 to i8**
  store i8* %986, i8** %2724, align 8, !tbaa !76
  %2725 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 43
  %2726 = bitcast double** %2725 to i8**
  store i8* %990, i8** %2726, align 8, !tbaa !77
  %2727 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 44
  %2728 = bitcast double** %2727 to i8**
  store i8* %997, i8** %2728, align 8, !tbaa !52
  %2729 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 45
  %2730 = bitcast double** %2729 to i8**
  store i8* %988, i8** %2730, align 8, !tbaa !78
  %2731 = bitcast %struct.gtc_particle_data_t* %15 to i8**
  store i8* %1000, i8** %2731, align 8, !tbaa !85
  %2732 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %2733 = bitcast double** %2732 to i8**
  store i8* %1002, i8** %2733, align 8, !tbaa !86
  %2734 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %2735 = bitcast double** %2734 to i8**
  store i8* %1004, i8** %2735, align 8, !tbaa !87
  %2736 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %2737 = bitcast double** %2736 to i8**
  store i8* %1006, i8** %2737, align 8, !tbaa !88
  %2738 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %2739 = bitcast double** %2738 to i8**
  store i8* %1008, i8** %2739, align 8, !tbaa !89
  %2740 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %2741 = bitcast double** %2740 to i8**
  store i8* %1010, i8** %2741, align 8, !tbaa !90
  %2742 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %2743 = bitcast double** %2742 to i8**
  store i8* %1012, i8** %2743, align 8, !tbaa !91
  %2744 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %2745 = bitcast double** %2744 to i8**
  store i8* %1014, i8** %2745, align 8, !tbaa !92
  %2746 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %2747 = bitcast double** %2746 to i8**
  store i8* %1016, i8** %2747, align 8, !tbaa !93
  %2748 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %2749 = bitcast double** %2748 to i8**
  store i8* %1018, i8** %2749, align 8, !tbaa !94
  %2750 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %2751 = bitcast double** %2750 to i8**
  store i8* %1020, i8** %2751, align 8, !tbaa !95
  %2752 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %2753 = bitcast double** %2752 to i8**
  store i8* %1022, i8** %2753, align 8, !tbaa !96
  %2754 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 12
  %2755 = bitcast double** %2754 to i8**
  store i8* %1024, i8** %2755, align 8, !tbaa !97
  %2756 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 13
  %2757 = bitcast double** %2756 to i8**
  store i8* %1026, i8** %2757, align 8, !tbaa !98
  %2758 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 14
  %2759 = bitcast i32** %2758 to i8**
  store i8* %901, i8** %2759, align 8, !tbaa !99
  %2760 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 15
  %2761 = bitcast i32** %2760 to i8**
  store i8* %903, i8** %2761, align 8, !tbaa !100
  %2762 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 12
  store i32 1, i32* %2762, align 8, !tbaa !224
  %2763 = load i32, i32* %ntoroidal, align 4, !tbaa !1
  store i32 %2763, i32* %21, align 8, !tbaa !148
  %2764 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 3
  store i32 %npartdom.0, i32* %2764, align 4, !tbaa !225
  %2765 = load i32, i32* %nproc_partd, align 4, !tbaa !1
  %2766 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 4
  store i32 %2765, i32* %2766, align 8, !tbaa !226
  %2767 = load i32, i32* %myrank_partd, align 4, !tbaa !1
  %2768 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 5
  store i32 %2767, i32* %2768, align 4, !tbaa !227
  %2769 = load i32, i32* %nproc_toroidal, align 4, !tbaa !1
  %2770 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 6
  store i32 %2769, i32* %2770, align 8, !tbaa !228
  %2771 = load i32, i32* %myrank_toroidal, align 4, !tbaa !1
  %2772 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  store i32 %2771, i32* %2772, align 4, !tbaa !229
  %2773 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  store i32 %159, i32* %2773, align 8, !tbaa !230
  %2774 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  store i32 %161, i32* %2774, align 4, !tbaa !231
  %2775 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 10
  store i32 %113, i32* %2775, align 8, !tbaa !232
  %2776 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 11
  store i32 %112, i32* %2776, align 4, !tbaa !233
  %2777 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 15
  %2778 = bitcast double** %2777 to i8**
  store i8* %2423, i8** %2778, align 8, !tbaa !109
  %2779 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 16
  store i32 %2419, i32* %2779, align 8, !tbaa !234
  %2780 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 17
  %2781 = bitcast double** %2780 to i8**
  store i8* %2427, i8** %2781, align 8, !tbaa !110
  %2782 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 18
  store i32 %2419, i32* %2782, align 8, !tbaa !235
  %2783 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 0
  store i32 %ipsi_nover_in.2, i32* %2783, align 8, !tbaa !236
  %2784 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 1
  store i32 %ipsi_nover_out.3, i32* %2784, align 4, !tbaa !237
  %2785 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  store i32 %ipsi_in.3, i32* %2785, align 8, !tbaa !238
  %2786 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  store i32 %ipsi_out.2, i32* %2786, align 4, !tbaa !239
  %2787 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 4
  store i32 %ipsi_in.0.lcssa626, i32* %2787, align 8, !tbaa !240
  %2788 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 5
  store i32 %ipsi_out.0.lcssa627, i32* %2788, align 4, !tbaa !241
  %2789 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  store i32 %574, i32* %2789, align 8, !tbaa !242
  %2790 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 7
  store i32 %580, i32* %2790, align 4, !tbaa !243
  %2791 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 8
  store i32 %497, i32* %2791, align 8, !tbaa !244
  %2792 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 9
  store i32 %503, i32* %2792, align 4, !tbaa !245
  %2793 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 10
  store i32 %584, i32* %2793, align 8, !tbaa !246
  %2794 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  store i32 %582, i32* %2794, align 4, !tbaa !247
  %2795 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 12
  store i32 %ipsi_nover_in_radiald.2, i32* %2795, align 8, !tbaa !248
  %2796 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 13
  store i32 %ipsi_nover_out_radiald.3, i32* %2796, align 4, !tbaa !249
  %2797 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 14
  store i32 %850, i32* %2797, align 8, !tbaa !250
  %2798 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 15
  store i32 %856, i32* %2798, align 4, !tbaa !251
  %2799 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 16
  store double %410, double* %2799, align 8, !tbaa !252
  %2800 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 17
  store double %419, double* %2800, align 8, !tbaa !253
  %2801 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 18
  store double %a_in.0, double* %2801, align 8, !tbaa !254
  %2802 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 19
  store double %a_out.0, double* %2802, align 8, !tbaa !255
  %2803 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 20
  store double %548, double* %2803, align 8, !tbaa !256
  %2804 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 21
  %2805 = bitcast i32** %2804 to i8**
  store i8* %451, i8** %2805, align 8, !tbaa !111
  %2806 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 22
  %2807 = bitcast i32** %2806 to i8**
  store i8* %588, i8** %2807, align 8, !tbaa !112
  store i32 %80, i32* %79, align 8, !tbaa !186
  %2808 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 24
  store i32 %150, i32* %2808, align 4, !tbaa !257
  %2809 = load i32, i32* %myrank_radiald, align 4, !tbaa !1
  %2810 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  store i32 %2809, i32* %2810, align 4, !tbaa !258
  %2811 = load i32, i32* %nproc_radiald, align 4, !tbaa !1
  %2812 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 25
  store i32 %2811, i32* %2812, align 8, !tbaa !259
  %2813 = load i32, i32* %myrank_radial_partd, align 4, !tbaa !1
  %2814 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 28
  store i32 %2813, i32* %2814, align 4, !tbaa !260
  %2815 = load i32, i32* %nproc_radial_partd, align 4, !tbaa !1
  %2816 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 27
  store i32 %2815, i32* %2816, align 8, !tbaa !261
  %2817 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 29
  store i32 %left_radial_pe.0, i32* %2817, align 8, !tbaa !262
  %2818 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 30
  store i32 %.70, i32* %2818, align 4, !tbaa !263
  %2819 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 31
  store i32 %115, i32* %2819, align 8, !tbaa !264
  %2820 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 32
  store i32 %114, i32* %2820, align 4, !tbaa !265
  %2821 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 35
  %2822 = bitcast i32** %2821 to i8**
  store i8* %768, i8** %2822, align 8, !tbaa !113
  %2823 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 36
  %2824 = bitcast i32** %2823 to i8**
  store i8* %770, i8** %2824, align 8, !tbaa !114
  %2825 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 37
  %2826 = bitcast i32** %2825 to i8**
  store i8* %772, i8** %2826, align 8, !tbaa !115
  %2827 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 38
  store i32 %ghost_comm_num.0.lcssa, i32* %2827, align 8, !tbaa !266
  %2828 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 39
  %2829 = bitcast double** %2828 to i8**
  store i8* %832, i8** %2829, align 8, !tbaa !116
  %2830 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 40
  store i32 %ghost_bufsize.0.lcssa, i32* %2830, align 8, !tbaa !267
  %2831 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 41
  %2832 = bitcast i32** %2831 to i8**
  store i8* %686, i8** %2832, align 8, !tbaa !117
  %2833 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 42
  %2834 = bitcast i32** %2833 to i8**
  store i8* %688, i8** %2834, align 8, !tbaa !118
  %2835 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 43
  %2836 = bitcast i32** %2835 to i8**
  store i8* %690, i8** %2836, align 8, !tbaa !119
  %2837 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 44
  store i32 %nghost_comm_num.0.lcssa, i32* %2837, align 8, !tbaa !268
  %2838 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 45
  %2839 = bitcast double** %2838 to i8**
  store i8* %750, i8** %2839, align 8, !tbaa !120
  %2840 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 46
  store i32 %nghost_bufsize.0.lcssa, i32* %2840, align 8, !tbaa !269
  %2841 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 3
  %2842 = bitcast double** %2841 to i8**
  store i8* %1048, i8** %2842, align 8, !tbaa !145
  %2843 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 4
  %2844 = bitcast double** %2843 to i8**
  store i8* %1050, i8** %2844, align 8, !tbaa !146
  %2845 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 6
  %2846 = bitcast double** %2845 to i8**
  store i8* %1050, i8** %2846, align 8, !tbaa !270
  %2847 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 7
  %2848 = bitcast double** %2847 to i8**
  store i8* %2457, i8** %2848, align 8, !tbaa !271
  %2849 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 8
  %2850 = bitcast double** %2849 to i8**
  store i8* %2458, i8** %2850, align 8, !tbaa !272
  %2851 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 9
  %2852 = bitcast double** %2851 to i8**
  store i8* %2459, i8** %2852, align 8, !tbaa !273
  %2853 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 5
  %2854 = bitcast double** %2853 to i8**
  store i8* %1051, i8** %2854, align 8, !tbaa !147
  %2855 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 10
  %2856 = bitcast double** %2855 to i8**
  store i8* %1051, i8** %2856, align 8, !tbaa !274
  %2857 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 11
  %2858 = bitcast double** %2857 to i8**
  store i8* %2460, i8** %2858, align 8, !tbaa !275
  %2859 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 12
  %2860 = bitcast double** %2859 to i8**
  store i8* %2461, i8** %2860, align 8, !tbaa !276
  %2861 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.136, i64 0, i64 0), i32 %582)
  %2862 = load i32, i32* %mzeta, align 4, !tbaa !1
  %2863 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.137, i64 0, i64 0), i32 %2862)
  %2864 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i64 0, i64 0), i32 5)
  %2865 = load i32, i32* %mpsi, align 4, !tbaa !1
  %2866 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i64 0, i64 0), i32 %2865)
  call void @RngStream_DeleteStream(%struct.RngStream_InfoState* %2210) #3
  call void @free(i8* %2195) #3
  call fastcc void @_mm_free(i8* nonnull %1409)
  call fastcc void @_mm_free(i8* %457)
  call fastcc void @_mm_free(i8* %508)
  call fastcc void @_mm_free(i8* %514)
  call fastcc void @_mm_free(i8* %609)
  call fastcc void @_mm_free(i8* %614)
  call fastcc void @_mm_free(i8* %620)
  call fastcc void @_mm_free(i8* %626)
  call void @llvm.lifetime.end(i64 4, i8* %13) #3
  call void @llvm.lifetime.end(i64 4, i8* %12) #3
  call void @llvm.lifetime.end(i64 4, i8* %11) #3
  call void @llvm.lifetime.end(i64 4, i8* %10) #3
  call void @llvm.lifetime.end(i64 4, i8* %9) #3
  call void @llvm.lifetime.end(i64 4, i8* %8) #3
  call void @llvm.lifetime.end(i64 4, i8* %7) #3
  call void @llvm.lifetime.end(i64 4, i8* %6) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %5) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %4) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %3) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %2) #3
  call void @llvm.lifetime.end(i64 4, i8* %1) #3
  ret i32 0
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare i32 @MPI_Comm_split(i32, i32, i32, i32*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

; Function Attrs: nounwind
declare i32 @posix_memalign(i8**, i64, i64) #4

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #4

declare i32 @MPI_Allreduce(i8*, i8*, i32, i32, i32, i32) #1

declare i32 @MPI_Allgather(i8*, i32, i32, i8*, i32, i32, i32) #1

; Function Attrs: nounwind
declare double @cos(double) #4

; Function Attrs: nounwind readnone
declare double @floor(double) #9

; Function Attrs: nounwind
declare double @sin(double) #4

; Function Attrs: nounwind
declare double @log(double) #4

; Function Attrs: nounwind
declare double @pow(double, double) #4

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: inlinehint norecurse nounwind readnone uwtable
define i32 @abs_min_int(i32 %arg1, i32 %arg2) #10 {
  %1 = icmp slt i32 %arg1, %arg2
  %2 = select i1 %1, i32 %arg1, i32 %arg2
  %3 = icmp sgt i32 %2, 0
  %4 = select i1 %3, i32 %2, i32 0
  ret i32 %4
}

; Function Attrs: inlinehint norecurse nounwind readnone uwtable
define double @abs_min_real(double %arg1, double %arg2) #10 {
  %1 = fcmp olt double %arg1, %arg2
  %2 = select i1 %1, double %arg1, double %arg2
  %3 = fcmp ogt double %2, 0.000000e+00
  %4 = select i1 %3, double %2, double 0.000000e+00
  ret double %4
}

; Function Attrs: nounwind uwtable
define i32 @chargei(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %istatus = alloca %struct.MPI_Status, align 4
  %wpiont = alloca [4 x double], align 16
  %wtion0t = alloca [4 x double], align 16
  %wtion1t = alloca [4 x double], align 16
  %jtion0t = alloca [4 x i32], align 16
  %jtion1t = alloca [4 x i32], align 16
  %1 = bitcast %struct.MPI_Status* %istatus to i8*
  call void @llvm.lifetime.start(i64 20, i8* %1) #3
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %3 = load i32, i32* %2, align 4, !tbaa !197
  %4 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !152
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !192
  %8 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %9 = load double, double* %8, align 8, !tbaa !212
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %11 = load double, double* %10, align 8, !tbaa !196
  %12 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 24
  %13 = load i32, i32* %12, align 4, !tbaa !277
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %15 = load double, double* %14, align 8, !tbaa !164
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %17 = load double, double* %16, align 8, !tbaa !163
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  %19 = load double, double* %18, align 8, !tbaa !203
  %20 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 84
  %21 = load double, double* %20, align 8, !tbaa !204
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 82
  %23 = load double, double* %22, align 8, !tbaa !198
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %25 = load double*, double** %24, align 8, !tbaa !85
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %27 = load double*, double** %26, align 8, !tbaa !86
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %29 = load double*, double** %28, align 8, !tbaa !87
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %31 = load double*, double** %30, align 8, !tbaa !89
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %33 = load double*, double** %32, align 8, !tbaa !90
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 1
  %35 = load i32*, i32** %34, align 8, !tbaa !102
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 2
  %37 = load i32*, i32** %36, align 8, !tbaa !103
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 5
  %39 = load double*, double** %38, align 8, !tbaa !106
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 6
  %41 = load double*, double** %40, align 8, !tbaa !107
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 4
  %43 = load double*, double** %42, align 8, !tbaa !105
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %45 = load double*, double** %44, align 8, !tbaa !34
  %46 = bitcast double* %45 to i8*
  %47 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 16
  %48 = load double*, double** %47, align 8, !tbaa !35
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 24
  %50 = load double*, double** %49, align 8, !tbaa !32
  %51 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 25
  %52 = load double*, double** %51, align 8, !tbaa !33
  %53 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %54 = load i32*, i32** %53, align 8, !tbaa !29
  %55 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %56 = load double*, double** %55, align 8, !tbaa !36
  %57 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %58 = load double*, double** %57, align 8, !tbaa !30
  %59 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %60 = load i32*, i32** %59, align 8, !tbaa !31
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 33
  %62 = load double*, double** %61, align 8, !tbaa !58
  %63 = bitcast double* %62 to i8*
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 58
  %65 = load i32*, i32** %64, align 8, !tbaa !84
  %66 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 34
  %67 = load double*, double** %66, align 8, !tbaa !57
  %68 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 19
  %69 = load double*, double** %68, align 8, !tbaa !46
  %70 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 11
  %71 = load double*, double** %70, align 8, !tbaa !56
  %72 = bitcast double* %71 to i8*
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 23
  %74 = load double*, double** %73, align 8, !tbaa !51
  %75 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 10
  %76 = load double*, double** %75, align 8, !tbaa !61
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %78 = load i32, i32* %77, align 4, !tbaa !247
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %80 = bitcast i32* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = trunc i64 %81 to i32
  %83 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %84 = lshr i64 %81, 32
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 4
  %87 = bitcast i32* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 5
  %91 = lshr i64 %88, 32
  %92 = trunc i64 %91 to i32
  %93 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 0
  %94 = bitcast i32* %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = trunc i64 %95 to i32
  %97 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 1
  %98 = lshr i64 %95, 32
  %99 = trunc i64 %98 to i32
  %100 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %101 = load i32, i32* %100, align 8, !tbaa !242
  %102 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 20
  %103 = load double, double* %102, align 8, !tbaa !256
  %104 = fdiv double 1.000000e+00, %9
  %105 = fmul double %104, 5.000000e-01
  %106 = fsub double %15, %17
  %107 = add nsw i32 %5, -1
  %108 = sitofp i32 %5 to double
  %109 = fdiv double %106, %108
  %110 = add i32 %3, 1
  %111 = mul i32 %78, %110
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %.preheader49.loopexit, label %.preheader49

.preheader49.loopexit:                            ; preds = %0
  %113 = bitcast double* %48 to i8*
  %114 = add i32 %111, -1
  %115 = zext i32 %114 to i64
  %116 = shl nuw nsw i64 %115, 3
  %117 = add nuw nsw i64 %116, 8
  call void @llvm.memset.p0i8.i64(i8* %113, i8 0, i64 %117, i32 8, i1 false)
  call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 %117, i32 8, i1 false)
  br label %.preheader49

.preheader49:                                     ; preds = %.preheader49.loopexit, %0
  %118 = icmp sgt i32 %7, 0
  br i1 %118, label %.lr.ph126, label %.preheader48

.lr.ph126:                                        ; preds = %.preheader49
  %119 = bitcast [4 x double]* %wpiont to i8*
  %120 = bitcast [4 x double]* %wtion0t to i8*
  %121 = bitcast [4 x double]* %wtion1t to i8*
  %122 = bitcast [4 x i32]* %jtion0t to i8*
  %123 = bitcast [4 x i32]* %jtion1t to i8*
  %124 = add nsw i32 %3, -1
  %125 = bitcast [4 x double]* %wpiont to i64*
  %126 = getelementptr inbounds [4 x double], [4 x double]* %wpiont, i64 0, i64 1
  %127 = bitcast double* %126 to i64*
  %128 = getelementptr inbounds [4 x double], [4 x double]* %wpiont, i64 0, i64 2
  %129 = bitcast double* %128 to i64*
  %130 = getelementptr inbounds [4 x double], [4 x double]* %wpiont, i64 0, i64 3
  %131 = bitcast double* %130 to i64*
  %132 = bitcast [4 x double]* %wtion0t to i64*
  %133 = getelementptr inbounds [4 x double], [4 x double]* %wtion0t, i64 0, i64 1
  %134 = bitcast double* %133 to i64*
  %135 = getelementptr inbounds [4 x double], [4 x double]* %wtion0t, i64 0, i64 2
  %136 = bitcast double* %135 to i64*
  %137 = getelementptr inbounds [4 x double], [4 x double]* %wtion0t, i64 0, i64 3
  %138 = bitcast double* %137 to i64*
  %139 = bitcast [4 x double]* %wtion1t to i64*
  %140 = getelementptr inbounds [4 x double], [4 x double]* %wtion1t, i64 0, i64 1
  %141 = bitcast double* %140 to i64*
  %142 = getelementptr inbounds [4 x double], [4 x double]* %wtion1t, i64 0, i64 2
  %143 = bitcast double* %142 to i64*
  %144 = getelementptr inbounds [4 x double], [4 x double]* %wtion1t, i64 0, i64 3
  %145 = bitcast double* %144 to i64*
  %146 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion0t, i64 0, i64 0
  %147 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion0t, i64 0, i64 1
  %148 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion0t, i64 0, i64 2
  %149 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion0t, i64 0, i64 3
  %150 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion1t, i64 0, i64 0
  %151 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion1t, i64 0, i64 1
  %152 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion1t, i64 0, i64 2
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion1t, i64 0, i64 3
  %154 = sext i32 %7 to i64
  br label %155

.preheader48.loopexit:                            ; preds = %424
  br label %.preheader48

.preheader48:                                     ; preds = %.preheader48.loopexit, %.preheader49
  br i1 %112, label %.preheader47.lr.ph, label %._crit_edge121

.preheader47.lr.ph:                               ; preds = %.preheader48
  br label %.preheader47

; <label>:155                                     ; preds = %424, %.lr.ph126
  %indvars.iv211 = phi i64 [ 0, %.lr.ph126 ], [ %indvars.iv.next212, %424 ]
  call void @llvm.lifetime.start(i64 32, i8* %119) #3
  call void @llvm.lifetime.start(i64 32, i8* %120) #3
  call void @llvm.lifetime.start(i64 32, i8* %121) #3
  call void @llvm.lifetime.start(i64 16, i8* %122) #3
  call void @llvm.lifetime.start(i64 16, i8* %123) #3
  %156 = getelementptr inbounds double, double* %27, i64 %indvars.iv211
  %157 = load double, double* %156, align 8, !tbaa !190
  %158 = getelementptr inbounds double, double* %29, i64 %indvars.iv211
  %159 = load double, double* %158, align 8, !tbaa !190
  %160 = getelementptr inbounds double, double* %31, i64 %indvars.iv211
  %161 = load double, double* %160, align 8, !tbaa !190
  %162 = getelementptr inbounds double, double* %33, i64 %indvars.iv211
  %163 = load double, double* %162, align 8, !tbaa !190
  %164 = fmul double %23, %163
  %165 = fcmp oeq double %159, 1.000000e+08
  br i1 %165, label %424, label %166

; <label>:166                                     ; preds = %155
  %167 = getelementptr inbounds double, double* %25, i64 %indvars.iv211
  %168 = load double, double* %167, align 8, !tbaa !190
  %169 = fmul double %168, 2.000000e+00
  %170 = tail call double @sqrt(double %169) #3
  %171 = fsub double %170, %17
  %172 = fmul double %19, %171
  %173 = fadd double %172, 5.000000e-01
  %174 = fptosi double %173 to i32
  %175 = tail call i32 @abs_min_int(i32 %5, i32 %174)
  %176 = icmp slt i32 %175, %89
  br i1 %176, label %177, label %178

; <label>:177                                     ; preds = %166
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.120, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 286, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:178                                     ; preds = %166
  %179 = icmp sgt i32 %175, %92
  br i1 %179, label %180, label %181

; <label>:180                                     ; preds = %178
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.122, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 287, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:181                                     ; preds = %178
  %182 = fmul double %105, %157
  %183 = sext i32 %175 to i64
  %184 = getelementptr inbounds double, double* %56, i64 %183
  %185 = load double, double* %184, align 8, !tbaa !190
  %186 = fmul double %182, %185
  %187 = fadd double %186, 5.000000e-01
  %188 = fptosi double %187 to i32
  %189 = getelementptr inbounds i32, i32* %60, i64 %183
  %190 = load i32, i32* %189, align 4, !tbaa !1
  %191 = tail call i32 @abs_min_int(i32 %190, i32 %188)
  %192 = getelementptr inbounds i32, i32* %54, i64 %183
  %193 = load i32, i32* %192, align 4, !tbaa !1
  %194 = fsub double %159, %11
  %195 = fmul double %21, %194
  %196 = fptosi double %195 to i32
  %197 = tail call i32 @abs_min_int(i32 %124, i32 %196)
  %198 = sitofp i32 %197 to double
  %199 = fsub double %195, %198
  %200 = fmul double %161, %199
  %201 = fsub double %161, %200
  %202 = sub i32 %191, %101
  %203 = add i32 %202, %193
  %204 = shl i32 %203, 2
  %205 = sext i32 %204 to i64
  br label %206

; <label>:206                                     ; preds = %231, %181
  %indvars.iv209 = phi i64 [ 0, %181 ], [ %indvars.iv.next210, %231 ]
  %rhoi.0123 = phi double [ %164, %181 ], [ %rhoi.1, %231 ]
  %207 = add nuw nsw i64 %indvars.iv209, %205
  %208 = getelementptr inbounds double, double* %50, i64 %207
  %209 = load double, double* %208, align 8, !tbaa !190
  %210 = fmul double %rhoi.0123, %209
  %211 = tail call double @fabs(double %210) #16
  %212 = fcmp ogt double %211, %103
  br i1 %212, label %213, label %220

; <label>:213                                     ; preds = %206
  %214 = fdiv double %210, %211
  %215 = fmul double %103, %214
  %216 = fdiv double %215, %209
  %217 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3.123, i64 0, i64 0), double %216, double %210)
  %218 = load double, double* %208, align 8, !tbaa !190
  %219 = fdiv double %215, %218
  br label %220

; <label>:220                                     ; preds = %213, %206
  %rhotmp.0 = phi double [ %215, %213 ], [ %210, %206 ]
  %rhoi.1 = phi double [ %219, %213 ], [ %rhoi.0123, %206 ]
  %221 = fadd double %171, %rhotmp.0
  %222 = tail call double @abs_min_real(double %106, double %221)
  %223 = fmul double %19, %222
  %224 = fptosi double %223 to i32
  %225 = tail call i32 @abs_min_int(i32 %107, i32 %224)
  %226 = icmp slt i32 %225, %82
  br i1 %226, label %227, label %228

; <label>:227                                     ; preds = %220
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4.124, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 355, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:228                                     ; preds = %220
  %229 = icmp slt i32 %225, %85
  br i1 %229, label %231, label %230

; <label>:230                                     ; preds = %228
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5.125, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 356, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:231                                     ; preds = %228
  %232 = sitofp i32 %225 to double
  %233 = fsub double %223, %232
  %234 = fsub double 1.000000e+00, %233
  %235 = getelementptr inbounds double, double* %52, i64 %207
  %236 = load double, double* %235, align 8, !tbaa !190
  %237 = fmul double %rhoi.1, %236
  %238 = fadd double %157, %237
  %239 = add nsw i32 %225, 1
  %240 = sext i32 %225 to i64
  %241 = getelementptr inbounds double, double* %58, i64 %240
  %242 = load double, double* %241, align 8, !tbaa !190
  %243 = fmul double %159, %242
  %244 = fsub double %238, %243
  %245 = fmul double %105, %244
  %246 = fadd double %245, 1.000000e+01
  %247 = sext i32 %239 to i64
  %248 = getelementptr inbounds double, double* %58, i64 %247
  %249 = load double, double* %248, align 8, !tbaa !190
  %250 = fmul double %159, %249
  %251 = fsub double %238, %250
  %252 = fmul double %105, %251
  %253 = fadd double %252, 1.000000e+01
  %254 = fptosi double %246 to i32
  %255 = sitofp i32 %254 to double
  %256 = fsub double %246, %255
  %257 = getelementptr inbounds double, double* %56, i64 %240
  %258 = load double, double* %257, align 8, !tbaa !190
  %259 = fmul double %258, %256
  %260 = fptosi double %253 to i32
  %261 = sitofp i32 %260 to double
  %262 = fsub double %253, %261
  %263 = getelementptr inbounds double, double* %56, i64 %247
  %264 = load double, double* %263, align 8, !tbaa !190
  %265 = fmul double %264, %262
  %266 = getelementptr inbounds i32, i32* %60, i64 %240
  %267 = load i32, i32* %266, align 4, !tbaa !1
  %268 = add nsw i32 %267, -1
  %269 = fptosi double %259 to i32
  %270 = tail call i32 @abs_min_int(i32 %268, i32 %269)
  %271 = getelementptr inbounds i32, i32* %60, i64 %247
  %272 = load i32, i32* %271, align 4, !tbaa !1
  %273 = add nsw i32 %272, -1
  %274 = fptosi double %265 to i32
  %275 = tail call i32 @abs_min_int(i32 %273, i32 %274)
  %276 = getelementptr inbounds i32, i32* %54, i64 %240
  %277 = load i32, i32* %276, align 4, !tbaa !1
  %278 = add nsw i32 %277, %270
  %279 = getelementptr inbounds i32, i32* %54, i64 %247
  %280 = load i32, i32* %279, align 4, !tbaa !1
  %281 = add nsw i32 %280, %275
  %282 = sitofp i32 %270 to double
  %283 = fsub double %259, %282
  %284 = sitofp i32 %275 to double
  %285 = fsub double %265, %284
  %286 = fmul double %234, %283
  %287 = fsub double %234, %286
  %288 = fmul double %233, %285
  %289 = fsub double %233, %288
  %290 = sub nsw i32 %278, %101
  %291 = mul nsw i32 %290, %110
  %292 = add nsw i32 %291, %197
  %293 = sub nsw i32 %281, %101
  %294 = mul nsw i32 %293, %110
  %295 = add nsw i32 %294, %197
  %296 = sext i32 %292 to i64
  %297 = getelementptr inbounds double, double* %48, i64 %296
  %298 = load double, double* %297, align 8, !tbaa !190
  %299 = add nsw i32 %292, 1
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds double, double* %48, i64 %300
  %302 = load double, double* %301, align 8, !tbaa !190
  %303 = add nsw i32 %292, %3
  %304 = add nsw i32 %303, 1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds double, double* %48, i64 %305
  %307 = load double, double* %306, align 8, !tbaa !190
  %308 = add nsw i32 %303, 2
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds double, double* %48, i64 %309
  %311 = load double, double* %310, align 8, !tbaa !190
  %312 = sext i32 %295 to i64
  %313 = getelementptr inbounds double, double* %48, i64 %312
  %314 = load double, double* %313, align 8, !tbaa !190
  %315 = add nsw i32 %295, 1
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds double, double* %48, i64 %316
  %318 = load double, double* %317, align 8, !tbaa !190
  %319 = add nsw i32 %295, %3
  %320 = add nsw i32 %319, 1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds double, double* %48, i64 %321
  %323 = load double, double* %322, align 8, !tbaa !190
  %324 = add nsw i32 %319, 2
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds double, double* %48, i64 %325
  %327 = load double, double* %326, align 8, !tbaa !190
  %328 = fmul double %201, %287
  %329 = fadd double %298, %328
  %330 = fmul double %200, %287
  %331 = fadd double %302, %330
  %332 = fmul double %201, %286
  %333 = fadd double %332, %307
  %334 = fmul double %200, %286
  %335 = fadd double %334, %311
  %336 = fmul double %201, %289
  %337 = fadd double %336, %314
  %338 = fmul double %200, %289
  %339 = fadd double %338, %318
  %340 = fmul double %201, %288
  %341 = fadd double %340, %323
  %342 = fmul double %200, %288
  %343 = fadd double %342, %327
  store double %329, double* %297, align 8, !tbaa !190
  store double %331, double* %301, align 8, !tbaa !190
  store double %333, double* %306, align 8, !tbaa !190
  store double %335, double* %310, align 8, !tbaa !190
  store double %337, double* %313, align 8, !tbaa !190
  store double %339, double* %317, align 8, !tbaa !190
  store double %341, double* %322, align 8, !tbaa !190
  store double %343, double* %326, align 8, !tbaa !190
  %344 = getelementptr inbounds [4 x double], [4 x double]* %wpiont, i64 0, i64 %indvars.iv209
  store double %233, double* %344, align 8, !tbaa !190
  %345 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion0t, i64 0, i64 %indvars.iv209
  store i32 %278, i32* %345, align 4, !tbaa !1
  %346 = getelementptr inbounds [4 x i32], [4 x i32]* %jtion1t, i64 0, i64 %indvars.iv209
  store i32 %281, i32* %346, align 4, !tbaa !1
  %347 = getelementptr inbounds [4 x double], [4 x double]* %wtion0t, i64 0, i64 %indvars.iv209
  store double %283, double* %347, align 8, !tbaa !190
  %348 = getelementptr inbounds [4 x double], [4 x double]* %wtion1t, i64 0, i64 %indvars.iv209
  store double %285, double* %348, align 8, !tbaa !190
  %indvars.iv.next210 = add nuw nsw i64 %indvars.iv209, 1
  %349 = icmp slt i64 %indvars.iv.next210, 4
  br i1 %349, label %206, label %350

; <label>:350                                     ; preds = %231
  %351 = trunc i64 %indvars.iv211 to i32
  %352 = shl nsw i32 %351, 2
  %353 = load i64, i64* %125, align 16, !tbaa !190
  %354 = sext i32 %352 to i64
  %355 = getelementptr inbounds double, double* %43, i64 %354
  %356 = bitcast double* %355 to i64*
  store i64 %353, i64* %356, align 8, !tbaa !190
  %357 = load i64, i64* %127, align 8, !tbaa !190
  %358 = or i32 %352, 1
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds double, double* %43, i64 %359
  %361 = bitcast double* %360 to i64*
  store i64 %357, i64* %361, align 8, !tbaa !190
  %362 = load i64, i64* %129, align 16, !tbaa !190
  %363 = or i32 %352, 2
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds double, double* %43, i64 %364
  %366 = bitcast double* %365 to i64*
  store i64 %362, i64* %366, align 8, !tbaa !190
  %367 = load i64, i64* %131, align 8, !tbaa !190
  %368 = or i32 %352, 3
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds double, double* %43, i64 %369
  %371 = bitcast double* %370 to i64*
  store i64 %367, i64* %371, align 8, !tbaa !190
  %372 = load i64, i64* %132, align 16, !tbaa !190
  %373 = getelementptr inbounds double, double* %39, i64 %354
  %374 = bitcast double* %373 to i64*
  store i64 %372, i64* %374, align 8, !tbaa !190
  %375 = load i64, i64* %134, align 8, !tbaa !190
  %376 = getelementptr inbounds double, double* %39, i64 %359
  %377 = bitcast double* %376 to i64*
  store i64 %375, i64* %377, align 8, !tbaa !190
  %378 = load i64, i64* %136, align 16, !tbaa !190
  %379 = getelementptr inbounds double, double* %39, i64 %364
  %380 = bitcast double* %379 to i64*
  store i64 %378, i64* %380, align 8, !tbaa !190
  %381 = load i64, i64* %138, align 8, !tbaa !190
  %382 = getelementptr inbounds double, double* %39, i64 %369
  %383 = bitcast double* %382 to i64*
  store i64 %381, i64* %383, align 8, !tbaa !190
  %384 = load i64, i64* %139, align 16, !tbaa !190
  %385 = getelementptr inbounds double, double* %41, i64 %354
  %386 = bitcast double* %385 to i64*
  store i64 %384, i64* %386, align 8, !tbaa !190
  %387 = load i64, i64* %141, align 8, !tbaa !190
  %388 = getelementptr inbounds double, double* %41, i64 %359
  %389 = bitcast double* %388 to i64*
  store i64 %387, i64* %389, align 8, !tbaa !190
  %390 = load i64, i64* %143, align 16, !tbaa !190
  %391 = getelementptr inbounds double, double* %41, i64 %364
  %392 = bitcast double* %391 to i64*
  store i64 %390, i64* %392, align 8, !tbaa !190
  %393 = load i64, i64* %145, align 8, !tbaa !190
  %394 = getelementptr inbounds double, double* %41, i64 %369
  %395 = bitcast double* %394 to i64*
  store i64 %393, i64* %395, align 8, !tbaa !190
  %396 = bitcast i32* %146 to i64*
  %397 = load i64, i64* %396, align 16
  %398 = trunc i64 %397 to i32
  %399 = getelementptr inbounds i32, i32* %35, i64 %354
  store i32 %398, i32* %399, align 4, !tbaa !1
  %400 = lshr i64 %397, 32
  %401 = trunc i64 %400 to i32
  %402 = getelementptr inbounds i32, i32* %35, i64 %359
  store i32 %401, i32* %402, align 4, !tbaa !1
  %403 = bitcast i32* %148 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = trunc i64 %404 to i32
  %406 = getelementptr inbounds i32, i32* %35, i64 %364
  store i32 %405, i32* %406, align 4, !tbaa !1
  %407 = lshr i64 %404, 32
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %35, i64 %369
  store i32 %408, i32* %409, align 4, !tbaa !1
  %410 = bitcast i32* %150 to i64*
  %411 = load i64, i64* %410, align 16
  %412 = trunc i64 %411 to i32
  %413 = getelementptr inbounds i32, i32* %37, i64 %354
  store i32 %412, i32* %413, align 4, !tbaa !1
  %414 = lshr i64 %411, 32
  %415 = trunc i64 %414 to i32
  %416 = getelementptr inbounds i32, i32* %37, i64 %359
  store i32 %415, i32* %416, align 4, !tbaa !1
  %417 = bitcast i32* %152 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = trunc i64 %418 to i32
  %420 = getelementptr inbounds i32, i32* %37, i64 %364
  store i32 %419, i32* %420, align 4, !tbaa !1
  %421 = lshr i64 %418, 32
  %422 = trunc i64 %421 to i32
  %423 = getelementptr inbounds i32, i32* %37, i64 %369
  store i32 %422, i32* %423, align 4, !tbaa !1
  br label %424

; <label>:424                                     ; preds = %350, %155
  call void @llvm.lifetime.end(i64 16, i8* %123) #3
  call void @llvm.lifetime.end(i64 16, i8* %122) #3
  call void @llvm.lifetime.end(i64 32, i8* %121) #3
  call void @llvm.lifetime.end(i64 32, i8* %120) #3
  call void @llvm.lifetime.end(i64 32, i8* %119) #3
  %indvars.iv.next212 = add nuw nsw i64 %indvars.iv211, 1
  %425 = icmp slt i64 %indvars.iv.next212, %154
  br i1 %425, label %155, label %.preheader48.loopexit

.preheader47:                                     ; preds = %.preheader47, %.preheader47.lr.ph
  %indvars.iv205 = phi i64 [ 0, %.preheader47.lr.ph ], [ %indvars.iv.next206, %.preheader47 ]
  %426 = getelementptr inbounds double, double* %48, i64 %indvars.iv205
  %427 = load double, double* %426, align 8, !tbaa !190
  %428 = fadd double %427, 0.000000e+00
  %429 = getelementptr inbounds double, double* %45, i64 %indvars.iv205
  store double %428, double* %429, align 8, !tbaa !190
  %indvars.iv.next206 = add nuw nsw i64 %indvars.iv205, 1
  %lftr.wideiv207 = trunc i64 %indvars.iv.next206 to i32
  %exitcond208 = icmp eq i32 %lftr.wideiv207, %111
  br i1 %exitcond208, label %._crit_edge121.loopexit, label %.preheader47

._crit_edge121.loopexit:                          ; preds = %.preheader47
  br label %._crit_edge121

._crit_edge121:                                   ; preds = %._crit_edge121.loopexit, %.preheader48
  %430 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 3
  %431 = load i32, i32* %430, align 4, !tbaa !225
  %432 = icmp sgt i32 %431, 1
  br i1 %432, label %433, label %.preheader44

; <label>:433                                     ; preds = %._crit_edge121
  %434 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 27
  %435 = load i32, i32* %434, align 8, !tbaa !261
  %436 = icmp sgt i32 %435, 1
  br i1 %436, label %.preheader46, label %452

.preheader46:                                     ; preds = %433
  %437 = icmp sgt i32 %78, 0
  br i1 %437, label %.preheader45.lr.ph, label %._crit_edge117

.preheader45.lr.ph:                               ; preds = %.preheader46
  %438 = icmp slt i32 %3, 0
  %439 = sext i32 %110 to i64
  br label %.preheader45

.preheader45:                                     ; preds = %._crit_edge114, %.preheader45.lr.ph
  %indvars.iv199 = phi i64 [ 0, %.preheader45.lr.ph ], [ %indvars.iv.next200, %._crit_edge114 ]
  br i1 %438, label %._crit_edge114, label %.lr.ph113

.lr.ph113:                                        ; preds = %.preheader45
  %440 = mul nsw i64 %indvars.iv199, %439
  br label %445

._crit_edge117.loopexit:                          ; preds = %._crit_edge114
  br label %._crit_edge117

._crit_edge117:                                   ; preds = %._crit_edge117.loopexit, %.preheader46
  %441 = bitcast double* %69 to i8*
  %442 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 34
  %443 = load i32, i32* %442, align 4, !tbaa !278
  %444 = tail call i32 @MPI_Allreduce(i8* %441, i8* %46, i32 %111, i32 1275070475, i32 1476395011, i32 %443) #3
  br label %452

._crit_edge114.loopexit:                          ; preds = %445
  br label %._crit_edge114

._crit_edge114:                                   ; preds = %._crit_edge114.loopexit, %.preheader45
  %indvars.iv.next200 = add nuw nsw i64 %indvars.iv199, 1
  %lftr.wideiv201 = trunc i64 %indvars.iv.next200 to i32
  %exitcond202 = icmp eq i32 %lftr.wideiv201, %78
  br i1 %exitcond202, label %._crit_edge117.loopexit, label %.preheader45

; <label>:445                                     ; preds = %445, %.lr.ph113
  %indvars.iv195 = phi i64 [ %indvars.iv.next196, %445 ], [ 0, %.lr.ph113 ]
  %446 = add nsw i64 %indvars.iv195, %440
  %447 = getelementptr inbounds double, double* %45, i64 %446
  %448 = bitcast double* %447 to i64*
  %449 = load i64, i64* %448, align 8, !tbaa !190
  %450 = getelementptr inbounds double, double* %69, i64 %446
  %451 = bitcast double* %450 to i64*
  store i64 %449, i64* %451, align 8, !tbaa !190
  store double 0.000000e+00, double* %447, align 8, !tbaa !190
  %indvars.iv.next196 = add nuw nsw i64 %indvars.iv195, 1
  %lftr.wideiv197 = trunc i64 %indvars.iv.next196 to i32
  %exitcond198 = icmp eq i32 %lftr.wideiv197, %110
  br i1 %exitcond198, label %._crit_edge114.loopexit, label %445

; <label>:452                                     ; preds = %._crit_edge117, %433
  %453 = tail call i32 @sum_plane(%struct.gtc_bench_data_t* nonnull %gtc_input) #3
  br label %.preheader44

.preheader44:                                     ; preds = %452, %._crit_edge121
  %454 = icmp sgt i32 %82, %85
  br i1 %454, label %.preheader43, label %.lr.ph111

.lr.ph111:                                        ; preds = %.preheader44
  %455 = icmp slt i32 %3, 0
  %456 = sext i32 %82 to i64
  %457 = sext i32 %85 to i64
  br label %460

.preheader43.loopexit:                            ; preds = %._crit_edge109
  br label %.preheader43

.preheader43:                                     ; preds = %.preheader43.loopexit, %.preheader44
  %458 = icmp sgt i32 %78, 0
  br i1 %458, label %.lr.ph104.preheader, label %._crit_edge105

.lr.ph104.preheader:                              ; preds = %.preheader43
  %459 = sext i32 %110 to i64
  br label %.lr.ph104

; <label>:460                                     ; preds = %._crit_edge109, %.lr.ph111
  %indvars.iv193 = phi i64 [ %indvars.iv.next194, %._crit_edge109 ], [ %456, %.lr.ph111 ]
  br i1 %455, label %._crit_edge109, label %.lr.ph108

.lr.ph108:                                        ; preds = %460
  %461 = getelementptr inbounds i32, i32* %54, i64 %indvars.iv193
  %462 = load i32, i32* %461, align 4
  %463 = sub i32 %462, %101
  %464 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv193
  %465 = load i32, i32* %464, align 4, !tbaa !1
  %466 = add i32 %463, %465
  %467 = mul nsw i32 %463, %110
  %468 = mul nsw i32 %466, %110
  %469 = sext i32 %468 to i64
  %470 = sext i32 %467 to i64
  br label %472

._crit_edge109.loopexit:                          ; preds = %472
  br label %._crit_edge109

._crit_edge109:                                   ; preds = %._crit_edge109.loopexit, %460
  %471 = icmp slt i64 %indvars.iv193, %457
  %indvars.iv.next194 = add nsw i64 %indvars.iv193, 1
  br i1 %471, label %460, label %.preheader43.loopexit

; <label>:472                                     ; preds = %472, %.lr.ph108
  %indvars.iv189 = phi i64 [ %indvars.iv.next190, %472 ], [ 0, %.lr.ph108 ]
  %473 = add nsw i64 %470, %indvars.iv189
  %474 = getelementptr inbounds double, double* %45, i64 %473
  %475 = load double, double* %474, align 8, !tbaa !190
  %476 = add nsw i64 %indvars.iv189, %469
  %477 = getelementptr inbounds double, double* %45, i64 %476
  %478 = load double, double* %477, align 8, !tbaa !190
  %479 = fadd double %475, %478
  store double %479, double* %477, align 8, !tbaa !190
  %indvars.iv.next190 = add nuw nsw i64 %indvars.iv189, 1
  %lftr.wideiv191 = trunc i64 %indvars.iv.next190 to i32
  %exitcond192 = icmp eq i32 %lftr.wideiv191, %110
  br i1 %exitcond192, label %._crit_edge109.loopexit, label %472

._crit_edge105.loopexit:                          ; preds = %.lr.ph104
  br label %._crit_edge105

._crit_edge105:                                   ; preds = %._crit_edge105.loopexit, %.preheader43
  %480 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %481 = bitcast i32* %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = trunc i64 %482 to i32
  %484 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %485 = lshr i64 %482, 32
  %486 = trunc i64 %485 to i32
  %487 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %488 = load i32, i32* %487, align 4, !tbaa !229
  %489 = bitcast double* %67 to i8*
  %490 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %491 = load i32, i32* %490, align 8, !tbaa !279
  %492 = call i32 @MPI_Sendrecv(i8* %489, i32 %78, i32 1275070475, i32 %483, i32 %488, i8* %63, i32 %78, i32 1275070475, i32 %486, i32 %486, i32 %491, %struct.MPI_Status* nonnull %istatus) #3
  br i1 %458, label %.lr.ph102.preheader, label %.preheader42

.lr.ph102.preheader:                              ; preds = %._crit_edge105
  %493 = sext i32 %110 to i64
  %494 = sext i32 %3 to i64
  br label %.lr.ph102

.lr.ph104:                                        ; preds = %.lr.ph104, %.lr.ph104.preheader
  %indvars.iv185 = phi i64 [ 0, %.lr.ph104.preheader ], [ %indvars.iv.next186, %.lr.ph104 ]
  %495 = mul nsw i64 %indvars.iv185, %459
  %496 = getelementptr inbounds double, double* %45, i64 %495
  %497 = bitcast double* %496 to i64*
  %498 = load i64, i64* %497, align 8, !tbaa !190
  %499 = getelementptr inbounds double, double* %67, i64 %indvars.iv185
  %500 = bitcast double* %499 to i64*
  store i64 %498, i64* %500, align 8, !tbaa !190
  %501 = getelementptr inbounds double, double* %62, i64 %indvars.iv185
  store double 0.000000e+00, double* %501, align 8, !tbaa !190
  %indvars.iv.next186 = add nuw nsw i64 %indvars.iv185, 1
  %lftr.wideiv187 = trunc i64 %indvars.iv.next186 to i32
  %exitcond188 = icmp eq i32 %lftr.wideiv187, %78
  br i1 %exitcond188, label %._crit_edge105.loopexit, label %.lr.ph104

.preheader42.loopexit:                            ; preds = %.lr.ph102
  br label %.preheader42

.preheader42:                                     ; preds = %.preheader42.loopexit, %._crit_edge105
  %502 = icmp sgt i32 %13, 0
  br i1 %502, label %.lr.ph99, label %.preheader36

.lr.ph99:                                         ; preds = %.preheader42
  %503 = icmp slt i32 %3, 0
  %504 = sitofp i32 %13 to double
  %505 = sext i32 %110 to i64
  %506 = sext i32 %85 to i64
  %507 = sext i32 %5 to i64
  %508 = sext i32 %82 to i64
  br label %521

.lr.ph102:                                        ; preds = %.lr.ph102, %.lr.ph102.preheader
  %indvars.iv181 = phi i64 [ 0, %.lr.ph102.preheader ], [ %indvars.iv.next182, %.lr.ph102 ]
  %509 = getelementptr inbounds i32, i32* %65, i64 %indvars.iv181
  %510 = load i32, i32* %509, align 4, !tbaa !1
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds double, double* %62, i64 %511
  %513 = load double, double* %512, align 8, !tbaa !190
  %514 = mul nsw i64 %indvars.iv181, %493
  %515 = add nsw i64 %514, %494
  %516 = getelementptr inbounds double, double* %45, i64 %515
  %517 = load double, double* %516, align 8, !tbaa !190
  %518 = fadd double %513, %517
  store double %518, double* %516, align 8, !tbaa !190
  %indvars.iv.next182 = add nuw nsw i64 %indvars.iv181, 1
  %lftr.wideiv183 = trunc i64 %indvars.iv.next182 to i32
  %exitcond184 = icmp eq i32 %lftr.wideiv183, %78
  br i1 %exitcond184, label %.preheader42.loopexit, label %.lr.ph102

.preheader36.loopexit:                            ; preds = %.loopexit40
  br label %.preheader36

.preheader36:                                     ; preds = %.preheader36.loopexit, %.preheader42
  %519 = add i32 %5, 1
  %520 = icmp slt i32 %5, 0
  br i1 %520, label %.preheader35, label %.preheader35.loopexit

; <label>:521                                     ; preds = %.loopexit40, %.lr.ph99
  %indvars.iv177 = phi i64 [ 0, %.lr.ph99 ], [ %indvars.iv.next178, %.loopexit40 ]
  %522 = icmp slt i64 %indvars.iv177, %508
  %523 = icmp sgt i64 %indvars.iv177, %506
  %or.cond = or i1 %522, %523
  br i1 %or.cond, label %.loopexit41, label %524

; <label>:524                                     ; preds = %521
  %525 = getelementptr inbounds i32, i32* %54, i64 %indvars.iv177
  %526 = load i32, i32* %525, align 4, !tbaa !1
  %527 = sub i32 %526, %101
  %528 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv177
  %529 = load i32, i32* %528, align 4, !tbaa !1
  %530 = add i32 %527, %529
  %531 = icmp slt i32 %527, %530
  br i1 %531, label %.preheader38.lr.ph, label %.loopexit41

.preheader38.lr.ph:                               ; preds = %524
  %532 = trunc i64 %indvars.iv177 to i32
  %533 = sitofp i32 %532 to double
  %534 = fdiv double %533, %504
  %535 = sext i32 %527 to i64
  br label %.preheader38

.loopexit39.loopexit:                             ; preds = %537
  br label %.loopexit39

.loopexit39:                                      ; preds = %.loopexit39.loopexit, %.preheader38
  %lftr.wideiv167 = trunc i64 %indvars.iv.next166 to i32
  %exitcond168 = icmp eq i32 %lftr.wideiv167, %530
  br i1 %exitcond168, label %.loopexit41.loopexit, label %.preheader38

.preheader38:                                     ; preds = %.loopexit39, %.preheader38.lr.ph
  %indvars.iv165 = phi i64 [ %535, %.preheader38.lr.ph ], [ %indvars.iv.next166, %.loopexit39 ]
  %indvars.iv.next166 = add nsw i64 %indvars.iv165, 1
  br i1 %503, label %.loopexit39, label %.lr.ph91

.lr.ph91:                                         ; preds = %.preheader38
  %536 = mul nsw i64 %indvars.iv.next166, %505
  br label %537

; <label>:537                                     ; preds = %537, %.lr.ph91
  %indvars.iv161 = phi i64 [ %indvars.iv.next162, %537 ], [ 0, %.lr.ph91 ]
  %538 = add nsw i64 %indvars.iv161, %536
  %539 = getelementptr inbounds double, double* %45, i64 %538
  %540 = load double, double* %539, align 8, !tbaa !190
  %541 = fmul double %534, %540
  store double %541, double* %539, align 8, !tbaa !190
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %lftr.wideiv163 = trunc i64 %indvars.iv.next162 to i32
  %exitcond164 = icmp eq i32 %lftr.wideiv163, %110
  br i1 %exitcond164, label %.loopexit39.loopexit, label %537

.loopexit41.loopexit:                             ; preds = %.loopexit39
  br label %.loopexit41

.loopexit41:                                      ; preds = %.loopexit41.loopexit, %524, %521
  %542 = sub nsw i64 %507, %indvars.iv177
  %543 = icmp sgt i64 %542, %506
  %544 = icmp slt i64 %542, %508
  %or.cond29 = or i1 %543, %544
  br i1 %or.cond29, label %.loopexit40, label %545

; <label>:545                                     ; preds = %.loopexit41
  %546 = getelementptr inbounds i32, i32* %54, i64 %542
  %547 = load i32, i32* %546, align 4, !tbaa !1
  %548 = sub i32 %547, %101
  %549 = getelementptr inbounds i32, i32* %60, i64 %542
  %550 = load i32, i32* %549, align 4, !tbaa !1
  %551 = add i32 %548, %550
  %552 = icmp slt i32 %548, %551
  br i1 %552, label %.preheader37.lr.ph, label %.loopexit40

.preheader37.lr.ph:                               ; preds = %545
  %553 = trunc i64 %indvars.iv177 to i32
  %554 = sitofp i32 %553 to double
  %555 = fdiv double %554, %504
  %556 = sext i32 %548 to i64
  br label %.preheader37

.loopexit.loopexit:                               ; preds = %558
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader37
  %lftr.wideiv175 = trunc i64 %indvars.iv.next174 to i32
  %exitcond176 = icmp eq i32 %lftr.wideiv175, %551
  br i1 %exitcond176, label %.loopexit40.loopexit, label %.preheader37

.preheader37:                                     ; preds = %.loopexit, %.preheader37.lr.ph
  %indvars.iv173 = phi i64 [ %556, %.preheader37.lr.ph ], [ %indvars.iv.next174, %.loopexit ]
  %indvars.iv.next174 = add nsw i64 %indvars.iv173, 1
  br i1 %503, label %.loopexit, label %.lr.ph95

.lr.ph95:                                         ; preds = %.preheader37
  %557 = mul nsw i64 %indvars.iv.next174, %505
  br label %558

; <label>:558                                     ; preds = %558, %.lr.ph95
  %indvars.iv169 = phi i64 [ %indvars.iv.next170, %558 ], [ 0, %.lr.ph95 ]
  %559 = add nsw i64 %indvars.iv169, %557
  %560 = getelementptr inbounds double, double* %45, i64 %559
  %561 = load double, double* %560, align 8, !tbaa !190
  %562 = fmul double %555, %561
  store double %562, double* %560, align 8, !tbaa !190
  %indvars.iv.next170 = add nuw nsw i64 %indvars.iv169, 1
  %lftr.wideiv171 = trunc i64 %indvars.iv.next170 to i32
  %exitcond172 = icmp eq i32 %lftr.wideiv171, %110
  br i1 %exitcond172, label %.loopexit.loopexit, label %558

.loopexit40.loopexit:                             ; preds = %.loopexit
  br label %.loopexit40

.loopexit40:                                      ; preds = %.loopexit40.loopexit, %545, %.loopexit41
  %indvars.iv.next178 = add nuw nsw i64 %indvars.iv177, 1
  %lftr.wideiv179 = trunc i64 %indvars.iv.next178 to i32
  %exitcond180 = icmp eq i32 %lftr.wideiv179, %13
  br i1 %exitcond180, label %.preheader36.loopexit, label %521

.preheader35.loopexit:                            ; preds = %.preheader36
  %563 = zext i32 %5 to i64
  %564 = shl nuw nsw i64 %563, 3
  %565 = add nuw nsw i64 %564, 8
  call void @llvm.memset.p0i8.i64(i8* %72, i8 0, i64 %565, i32 8, i1 false)
  br label %.preheader35

.preheader35:                                     ; preds = %.preheader35.loopexit, %.preheader36
  br i1 %454, label %._crit_edge86, label %.preheader34.lr.ph

.preheader34.lr.ph:                               ; preds = %.preheader35
  %566 = icmp slt i32 %3, 1
  %567 = sext i32 %82 to i64
  %568 = sext i32 %99 to i64
  %569 = sext i32 %96 to i64
  %570 = sext i32 %85 to i64
  br label %.preheader34

.preheader34:                                     ; preds = %._crit_edge83, %.preheader34.lr.ph
  %indvars.iv155 = phi i64 [ %indvars.iv.next156, %._crit_edge83 ], [ %567, %.preheader34.lr.ph ]
  %571 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv155
  %572 = load i32, i32* %571, align 4, !tbaa !1
  %573 = icmp slt i32 %572, 1
  br i1 %573, label %._crit_edge83, label %.preheader33.lr.ph

.preheader33.lr.ph:                               ; preds = %.preheader34
  %574 = getelementptr inbounds i32, i32* %54, i64 %indvars.iv155
  %575 = icmp slt i64 %indvars.iv155, %569
  %576 = icmp sgt i64 %indvars.iv155, %568
  %or.cond30 = or i1 %575, %576
  %577 = getelementptr inbounds double, double* %71, i64 %indvars.iv155
  br label %.preheader33

._crit_edge86.loopexit:                           ; preds = %._crit_edge83
  br label %._crit_edge86

._crit_edge86:                                    ; preds = %._crit_edge86.loopexit, %.preheader35
  %578 = sext i32 %519 to i64
  %579 = shl nsw i64 %578, 3
  %580 = call fastcc i8* @_mm_malloc.126(i64 %579)
  %581 = bitcast i8* %580 to double*
  %582 = call fastcc i8* @_mm_malloc.126(i64 %579)
  %583 = icmp eq i8* %580, null
  br i1 %583, label %610, label %611

.preheader33:                                     ; preds = %._crit_edge80, %.preheader33.lr.ph
  %j13.081 = phi i32 [ 1, %.preheader33.lr.ph ], [ %592, %._crit_edge80 ]
  br i1 %566, label %._crit_edge80, label %.lr.ph79

.lr.ph79:                                         ; preds = %.preheader33
  %584 = load i32, i32* %574, align 4
  %585 = sub i32 %j13.081, %101
  %586 = add i32 %585, %584
  %587 = mul nsw i32 %586, %110
  %588 = mul nsw i32 %586, %3
  %589 = sext i32 %587 to i64
  %590 = sext i32 %588 to i64
  br label %594

._crit_edge83.loopexit:                           ; preds = %._crit_edge80
  br label %._crit_edge83

._crit_edge83:                                    ; preds = %._crit_edge83.loopexit, %.preheader34
  %591 = icmp slt i64 %indvars.iv155, %570
  %indvars.iv.next156 = add nsw i64 %indvars.iv155, 1
  br i1 %591, label %.preheader34, label %._crit_edge86.loopexit

._crit_edge80.loopexit:                           ; preds = %602
  br label %._crit_edge80

._crit_edge80:                                    ; preds = %._crit_edge80.loopexit, %.preheader33
  %592 = add nuw nsw i32 %j13.081, 1
  %593 = icmp slt i32 %j13.081, %572
  br i1 %593, label %.preheader33, label %._crit_edge83.loopexit

; <label>:594                                     ; preds = %602, %.lr.ph79
  %indvars.iv151 = phi i64 [ %indvars.iv.next152, %602 ], [ 1, %.lr.ph79 ]
  br i1 %or.cond30, label %._crit_edge1, label %595

._crit_edge1:                                     ; preds = %594
  %.pre2 = add nsw i64 %589, %indvars.iv151
  %.pre4 = getelementptr inbounds double, double* %45, i64 %.pre2
  br label %602

; <label>:595                                     ; preds = %594
  %596 = add nsw i64 %589, %indvars.iv151
  %597 = getelementptr inbounds double, double* %45, i64 %596
  %598 = load double, double* %597, align 8, !tbaa !190
  %599 = fmul double %598, 2.500000e-01
  %600 = load double, double* %577, align 8, !tbaa !190
  %601 = fadd double %600, %599
  store double %601, double* %577, align 8, !tbaa !190
  br label %602

; <label>:602                                     ; preds = %._crit_edge1, %595
  %.pre-phi5 = phi double* [ %.pre4, %._crit_edge1 ], [ %597, %595 ]
  %.pre-phi3 = phi i64 [ %.pre2, %._crit_edge1 ], [ %596, %595 ]
  %603 = load double, double* %.pre-phi5, align 8, !tbaa !190
  %604 = fmul double %603, 2.500000e-01
  %605 = add nsw i64 %indvars.iv151, -1
  %606 = add nsw i64 %605, %590
  %607 = getelementptr inbounds double, double* %74, i64 %606
  %608 = load double, double* %607, align 8, !tbaa !190
  %609 = fmul double %604, %608
  store double %609, double* %.pre-phi5, align 8, !tbaa !190
  %indvars.iv.next152 = add nuw nsw i64 %indvars.iv151, 1
  %lftr.wideiv153 = trunc i64 %indvars.iv.next152 to i32
  %exitcond154 = icmp eq i32 %lftr.wideiv153, %110
  br i1 %exitcond154, label %._crit_edge80.loopexit, label %594

; <label>:610                                     ; preds = %._crit_edge86
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.127, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 652, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:611                                     ; preds = %._crit_edge86
  %612 = icmp eq i8* %582, null
  br i1 %612, label %613, label %614

; <label>:613                                     ; preds = %611
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7.128, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 653, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @__PRETTY_FUNCTION__.chargei, i64 0, i64 0)) #15
  unreachable

; <label>:614                                     ; preds = %611
  %615 = load i32, i32* %490, align 8, !tbaa !279
  %616 = call i32 @MPI_Allreduce(i8* %72, i8* nonnull %582, i32 %519, i32 1275070475, i32 1476395011, i32 %615) #3
  %617 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 13
  %618 = load i32, i32* %617, align 4, !tbaa !280
  %619 = call i32 @MPI_Allreduce(i8* nonnull %582, i8* nonnull %580, i32 %519, i32 1275070475, i32 1476395011, i32 %618) #3
  br i1 %520, label %._crit_edge77, label %.lr.ph76.preheader

.lr.ph76.preheader:                               ; preds = %614
  br label %.lr.ph76

._crit_edge77.loopexit:                           ; preds = %.lr.ph76
  br label %._crit_edge77

._crit_edge77:                                    ; preds = %._crit_edge77.loopexit, %614
  call fastcc void @_mm_free.129(i8* nonnull %580)
  call fastcc void @_mm_free.129(i8* nonnull %582)
  br i1 %454, label %.preheader, label %.preheader32.lr.ph

.preheader32.lr.ph:                               ; preds = %._crit_edge77
  %620 = icmp slt i32 %3, 1
  %621 = sext i32 %82 to i64
  %622 = sext i32 %85 to i64
  br label %.preheader32

.lr.ph76:                                         ; preds = %.lr.ph76, %.lr.ph76.preheader
  %indvars.iv147 = phi i64 [ 0, %.lr.ph76.preheader ], [ %indvars.iv.next148, %.lr.ph76 ]
  %623 = getelementptr inbounds double, double* %581, i64 %indvars.iv147
  %624 = load double, double* %623, align 8, !tbaa !190
  %625 = getelementptr inbounds double, double* %76, i64 %indvars.iv147
  %626 = load double, double* %625, align 8, !tbaa !190
  %627 = fmul double %624, %626
  %628 = getelementptr inbounds double, double* %71, i64 %indvars.iv147
  store double %627, double* %628, align 8, !tbaa !190
  %indvars.iv.next148 = add nuw nsw i64 %indvars.iv147, 1
  %lftr.wideiv149 = trunc i64 %indvars.iv.next148 to i32
  %exitcond150 = icmp eq i32 %lftr.wideiv149, %519
  br i1 %exitcond150, label %._crit_edge77.loopexit, label %.lr.ph76

.preheader32:                                     ; preds = %._crit_edge72, %.preheader32.lr.ph
  %indvars.iv145 = phi i64 [ %indvars.iv.next146, %._crit_edge72 ], [ %621, %.preheader32.lr.ph ]
  %629 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv145
  %630 = load i32, i32* %629, align 4, !tbaa !1
  %631 = icmp slt i32 %630, 1
  br i1 %631, label %.preheader32.._crit_edge66_crit_edge, label %.preheader31.lr.ph

.preheader32.._crit_edge66_crit_edge:             ; preds = %.preheader32
  %.pre = getelementptr inbounds i32, i32* %54, i64 %indvars.iv145
  br label %._crit_edge66

.preheader31.lr.ph:                               ; preds = %.preheader32
  %632 = getelementptr inbounds i32, i32* %54, i64 %indvars.iv145
  %633 = getelementptr inbounds double, double* %71, i64 %indvars.iv145
  br label %.preheader31

.preheader.loopexit:                              ; preds = %._crit_edge72
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %._crit_edge77
  %634 = icmp sgt i32 %5, 1
  br i1 %634, label %.lr.ph58.preheader, label %._crit_edge

.lr.ph58.preheader:                               ; preds = %.preheader
  br label %.lr.ph58

.preheader31:                                     ; preds = %._crit_edge63, %.preheader31.lr.ph
  %j18.064 = phi i32 [ 1, %.preheader31.lr.ph ], [ %645, %._crit_edge63 ]
  br i1 %620, label %._crit_edge63, label %.lr.ph62

.lr.ph62:                                         ; preds = %.preheader31
  %635 = load i32, i32* %632, align 4
  %636 = sub i32 %j18.064, %101
  %637 = add i32 %636, %635
  %638 = mul nsw i32 %637, %110
  br label %647

._crit_edge66.loopexit:                           ; preds = %._crit_edge63
  br label %._crit_edge66

._crit_edge66:                                    ; preds = %._crit_edge66.loopexit, %.preheader32.._crit_edge66_crit_edge
  %.pre-phi = phi i32* [ %.pre, %.preheader32.._crit_edge66_crit_edge ], [ %632, %._crit_edge66.loopexit ]
  %639 = load i32, i32* %.pre-phi, align 4, !tbaa !1
  br i1 %620, label %._crit_edge72, label %.lr.ph71

.lr.ph71:                                         ; preds = %._crit_edge66
  %640 = sub i32 %630, %101
  %641 = add i32 %640, %639
  %642 = sub nsw i32 %639, %101
  %643 = mul nsw i32 %641, %110
  %644 = mul nsw i32 %642, %110
  br label %656

._crit_edge63.loopexit:                           ; preds = %647
  br label %._crit_edge63

._crit_edge63:                                    ; preds = %._crit_edge63.loopexit, %.preheader31
  %645 = add nuw nsw i32 %j18.064, 1
  %646 = icmp slt i32 %j18.064, %630
  br i1 %646, label %.preheader31, label %._crit_edge66.loopexit

; <label>:647                                     ; preds = %647, %.lr.ph62
  %k19.061 = phi i32 [ 1, %.lr.ph62 ], [ %654, %647 ]
  %648 = load double, double* %633, align 8, !tbaa !190
  %649 = add nsw i32 %638, %k19.061
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds double, double* %45, i64 %650
  %652 = load double, double* %651, align 8, !tbaa !190
  %653 = fsub double %652, %648
  store double %653, double* %651, align 8, !tbaa !190
  %654 = add nuw nsw i32 %k19.061, 1
  %exitcond141 = icmp eq i32 %654, %110
  br i1 %exitcond141, label %._crit_edge63.loopexit, label %647

._crit_edge72.loopexit:                           ; preds = %656
  br label %._crit_edge72

._crit_edge72:                                    ; preds = %._crit_edge72.loopexit, %._crit_edge66
  %655 = icmp slt i64 %indvars.iv145, %622
  %indvars.iv.next146 = add nsw i64 %indvars.iv145, 1
  br i1 %655, label %.preheader32, label %.preheader.loopexit

; <label>:656                                     ; preds = %656, %.lr.ph71
  %j23.069 = phi i32 [ 1, %.lr.ph71 ], [ %666, %656 ]
  %657 = add nsw i32 %j23.069, %643
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds double, double* %45, i64 %658
  %660 = bitcast double* %659 to i64*
  %661 = load i64, i64* %660, align 8, !tbaa !190
  %662 = add nsw i32 %j23.069, %644
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds double, double* %45, i64 %663
  %665 = bitcast double* %664 to i64*
  store i64 %661, i64* %665, align 8, !tbaa !190
  %666 = add nuw nsw i32 %j23.069, 1
  %exitcond144 = icmp eq i32 %666, %110
  br i1 %exitcond144, label %._crit_edge72.loopexit, label %656

._crit_edge59:                                    ; preds = %.lr.ph58
  %667 = fdiv double %676, %672
  br i1 true, label %.lr.ph.preheader, label %._crit_edge59.._crit_edge_crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge59
  br label %.lr.ph

._crit_edge59.._crit_edge_crit_edge:              ; preds = %._crit_edge59
  br label %._crit_edge

.lr.ph58:                                         ; preds = %.lr.ph58.preheader, %.lr.ph58
  %indvars.iv135 = phi i64 [ %indvars.iv.next136, %.lr.ph58 ], [ 1, %.lr.ph58.preheader ]
  %tdum25.056 = phi double [ %676, %.lr.ph58 ], [ 0.000000e+00, %.lr.ph58.preheader ]
  %rdum24.055 = phi double [ %672, %.lr.ph58 ], [ 0.000000e+00, %.lr.ph58.preheader ]
  %668 = trunc i64 %indvars.iv135 to i32
  %669 = sitofp i32 %668 to double
  %670 = fmul double %109, %669
  %671 = fadd double %17, %670
  %672 = fadd double %rdum24.055, %671
  %673 = getelementptr inbounds double, double* %71, i64 %indvars.iv135
  %674 = load double, double* %673, align 8, !tbaa !190
  %675 = fmul double %671, %674
  %676 = fadd double %tdum25.056, %675
  %indvars.iv.next136 = add nuw nsw i64 %indvars.iv135, 1
  %lftr.wideiv137 = trunc i64 %indvars.iv.next136 to i32
  %exitcond138 = icmp eq i32 %lftr.wideiv137, %5
  br i1 %exitcond138, label %._crit_edge59, label %.lr.ph58

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge59.._crit_edge_crit_edge, %.preheader
  call void @llvm.lifetime.end(i64 20, i8* %1) #3
  ret i32 0

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 1, %.lr.ph.preheader ]
  %677 = getelementptr inbounds double, double* %71, i64 %indvars.iv
  %678 = load double, double* %677, align 8, !tbaa !190
  %679 = fsub double %678, %667
  store double %679, double* %677, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %5
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #9

declare i32 @MPI_Sendrecv(i8*, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, %struct.MPI_Status*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc.126(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free.129(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @chargei_init(%struct.gtc_bench_data_t* readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %2 = load i32, i32* %1, align 4, !tbaa !152
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %4 = load double, double* %3, align 8, !tbaa !163
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %6 = load double, double* %5, align 8, !tbaa !164
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  %8 = load double, double* %7, align 8, !tbaa !203
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 84
  %10 = load double, double* %9, align 8, !tbaa !204
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 82
  %12 = load double, double* %11, align 8, !tbaa !198
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %14 = load double, double* %13, align 8, !tbaa !196
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 85
  %16 = load double, double* %15, align 8, !tbaa !205
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 8, !tbaa !192
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 0
  %20 = load i32*, i32** %19, align 8, !tbaa !101
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 3
  %22 = load double*, double** %21, align 8, !tbaa !104
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 4
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 1
  %25 = load i32*, i32** %24, align 8, !tbaa !102
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 2
  %27 = load i32*, i32** %26, align 8, !tbaa !103
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 5
  %29 = load double*, double** %28, align 8, !tbaa !106
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 6
  %31 = load double*, double** %30, align 8, !tbaa !107
  %32 = load double*, double** %23, align 8, !tbaa !105
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %34 = load i32*, i32** %33, align 8, !tbaa !29
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %36 = load double*, double** %35, align 8, !tbaa !30
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %38 = load i32*, i32** %37, align 8, !tbaa !31
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %40 = load double*, double** %39, align 8, !tbaa !36
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 24
  %42 = load double*, double** %41, align 8, !tbaa !32
  %43 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 25
  %44 = load double*, double** %43, align 8, !tbaa !33
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %46 = load double*, double** %45, align 8, !tbaa !85
  %47 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %48 = load double*, double** %47, align 8, !tbaa !86
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %50 = load double*, double** %49, align 8, !tbaa !87
  %51 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %52 = load double*, double** %51, align 8, !tbaa !90
  %53 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %54 = bitcast i32* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %58 = lshr i64 %55, 32
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 4
  %61 = bitcast i32* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 5
  %65 = lshr i64 %62, 32
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 20
  %68 = load double, double* %67, align 8, !tbaa !256
  %69 = fsub double %6, %4
  %70 = add nsw i32 %2, -1
  %71 = icmp sgt i32 %18, 0
  br i1 %71, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %72 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %73 = load i32, i32* %72, align 8, !tbaa !242
  %74 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %75 = load i32, i32* %74, align 4, !tbaa !197
  %76 = add nsw i32 %75, -1
  %77 = sext i32 %18 to i64
  br label %78

; <label>:78                                      ; preds = %214, %.lr.ph
  %indvars.iv4 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next5, %214 ]
  %79 = getelementptr inbounds double, double* %46, i64 %indvars.iv4
  %80 = load double, double* %79, align 8, !tbaa !190
  %81 = getelementptr inbounds double, double* %48, i64 %indvars.iv4
  %82 = load double, double* %81, align 8, !tbaa !190
  %83 = getelementptr inbounds double, double* %50, i64 %indvars.iv4
  %84 = load double, double* %83, align 8, !tbaa !190
  %85 = getelementptr inbounds double, double* %52, i64 %indvars.iv4
  %86 = load double, double* %85, align 8, !tbaa !190
  %87 = fmul double %12, %86
  %88 = fmul double %80, 2.000000e+00
  %89 = tail call double @sqrt(double %88) #3
  %90 = fsub double %89, %4
  %91 = fmul double %8, %90
  %92 = fadd double %91, 5.000000e-01
  %93 = fptosi double %92 to i32
  %94 = tail call i32 @abs_min_int(i32 %2, i32 %93)
  %95 = icmp slt i32 %94, %63
  br i1 %95, label %96, label %97

; <label>:96                                      ; preds = %78
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.120, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 824, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.chargei_init, i64 0, i64 0)) #15
  unreachable

; <label>:97                                      ; preds = %78
  %98 = icmp sgt i32 %94, %66
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %97
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.122, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 825, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.chargei_init, i64 0, i64 0)) #15
  unreachable

; <label>:100                                     ; preds = %97
  %101 = fmul double %16, %82
  %102 = sext i32 %94 to i64
  %103 = getelementptr inbounds double, double* %40, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !190
  %105 = fmul double %101, %104
  %106 = fadd double %105, 5.000000e-01
  %107 = fptosi double %106 to i32
  %108 = getelementptr inbounds i32, i32* %38, i64 %102
  %109 = load i32, i32* %108, align 4, !tbaa !1
  %110 = tail call i32 @abs_min_int(i32 %109, i32 %107)
  %111 = getelementptr inbounds i32, i32* %34, i64 %102
  %112 = load i32, i32* %111, align 4, !tbaa !1
  %113 = fsub double %84, %14
  %114 = fmul double %10, %113
  %115 = fptosi double %114 to i32
  %116 = tail call i32 @abs_min_int(i32 %76, i32 %115)
  %117 = getelementptr inbounds i32, i32* %20, i64 %indvars.iv4
  store i32 %116, i32* %117, align 4, !tbaa !1
  %118 = sitofp i32 %116 to double
  %119 = fsub double %114, %118
  %120 = getelementptr inbounds double, double* %22, i64 %indvars.iv4
  store double %119, double* %120, align 8, !tbaa !190
  %121 = trunc i64 %indvars.iv4 to i32
  %122 = shl i32 %121, 2
  %123 = sub i32 %110, %73
  %124 = add i32 %123, %112
  %125 = shl i32 %124, 2
  %126 = sext i32 %125 to i64
  %127 = sext i32 %122 to i64
  br label %128

; <label>:128                                     ; preds = %154, %100
  %indvars.iv = phi i64 [ 0, %100 ], [ %indvars.iv.next, %154 ]
  %rhoi.02 = phi double [ %87, %100 ], [ %rhoi.1, %154 ]
  %129 = add nsw i64 %indvars.iv, %127
  %130 = add nuw nsw i64 %indvars.iv, %126
  %131 = getelementptr inbounds double, double* %42, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !190
  %133 = fmul double %rhoi.02, %132
  %134 = tail call double @fabs(double %133) #16
  %135 = fcmp ogt double %134, %68
  br i1 %135, label %136, label %143

; <label>:136                                     ; preds = %128
  %137 = fdiv double %133, %134
  %138 = fmul double %68, %137
  %139 = fdiv double %138, %132
  %140 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3.123, i64 0, i64 0), double %139, double %133)
  %141 = load double, double* %131, align 8, !tbaa !190
  %142 = fdiv double %138, %141
  br label %143

; <label>:143                                     ; preds = %136, %128
  %rhotmp.0 = phi double [ %138, %136 ], [ %133, %128 ]
  %rhoi.1 = phi double [ %142, %136 ], [ %rhoi.02, %128 ]
  %144 = fadd double %90, %rhotmp.0
  %145 = tail call double @abs_min_real(double %69, double %144)
  %146 = fmul double %8, %145
  %147 = fptosi double %146 to i32
  %148 = tail call i32 @abs_min_int(i32 %70, i32 %147)
  %149 = icmp slt i32 %148, %56
  br i1 %149, label %150, label %151

; <label>:150                                     ; preds = %143
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4.124, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 855, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.chargei_init, i64 0, i64 0)) #15
  unreachable

; <label>:151                                     ; preds = %143
  %152 = icmp slt i32 %148, %59
  br i1 %152, label %154, label %153

; <label>:153                                     ; preds = %151
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5.125, i64 0, i64 0), i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1.121, i64 0, i64 0), i32 856, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.chargei_init, i64 0, i64 0)) #15
  unreachable

; <label>:154                                     ; preds = %151
  %155 = sitofp i32 %148 to double
  %156 = fsub double %146, %155
  %157 = getelementptr inbounds double, double* %44, i64 %130
  %158 = load double, double* %157, align 8, !tbaa !190
  %159 = fmul double %rhoi.1, %158
  %160 = fadd double %82, %159
  %161 = add nsw i32 %148, 1
  %162 = sext i32 %148 to i64
  %163 = getelementptr inbounds double, double* %36, i64 %162
  %164 = load double, double* %163, align 8, !tbaa !190
  %165 = fmul double %84, %164
  %166 = fsub double %160, %165
  %167 = fmul double %16, %166
  %168 = fadd double %167, 1.000000e+01
  %169 = sext i32 %161 to i64
  %170 = getelementptr inbounds double, double* %36, i64 %169
  %171 = load double, double* %170, align 8, !tbaa !190
  %172 = fmul double %84, %171
  %173 = fsub double %160, %172
  %174 = fmul double %16, %173
  %175 = fadd double %174, 1.000000e+01
  %176 = fptosi double %168 to i32
  %177 = sitofp i32 %176 to double
  %178 = fsub double %168, %177
  %179 = getelementptr inbounds double, double* %40, i64 %162
  %180 = load double, double* %179, align 8, !tbaa !190
  %181 = fmul double %180, %178
  %182 = fptosi double %175 to i32
  %183 = sitofp i32 %182 to double
  %184 = fsub double %175, %183
  %185 = getelementptr inbounds double, double* %40, i64 %169
  %186 = load double, double* %185, align 8, !tbaa !190
  %187 = fmul double %186, %184
  %188 = getelementptr inbounds i32, i32* %38, i64 %162
  %189 = load i32, i32* %188, align 4, !tbaa !1
  %190 = add nsw i32 %189, -1
  %191 = fptosi double %181 to i32
  %192 = tail call i32 @abs_min_int(i32 %190, i32 %191)
  %193 = getelementptr inbounds i32, i32* %38, i64 %169
  %194 = load i32, i32* %193, align 4, !tbaa !1
  %195 = add nsw i32 %194, -1
  %196 = fptosi double %187 to i32
  %197 = tail call i32 @abs_min_int(i32 %195, i32 %196)
  %198 = getelementptr inbounds i32, i32* %34, i64 %162
  %199 = load i32, i32* %198, align 4, !tbaa !1
  %200 = add nsw i32 %199, %192
  %201 = getelementptr inbounds i32, i32* %34, i64 %169
  %202 = load i32, i32* %201, align 4, !tbaa !1
  %203 = add nsw i32 %202, %197
  %204 = sitofp i32 %192 to double
  %205 = fsub double %181, %204
  %206 = sitofp i32 %197 to double
  %207 = fsub double %187, %206
  %208 = getelementptr inbounds double, double* %32, i64 %129
  store double %156, double* %208, align 8, !tbaa !190
  %209 = getelementptr inbounds i32, i32* %25, i64 %129
  store i32 %200, i32* %209, align 4, !tbaa !1
  %210 = getelementptr inbounds i32, i32* %27, i64 %129
  store i32 %203, i32* %210, align 4, !tbaa !1
  %211 = getelementptr inbounds double, double* %29, i64 %129
  store double %205, double* %211, align 8, !tbaa !190
  %212 = getelementptr inbounds double, double* %31, i64 %129
  store double %207, double* %212, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %213 = icmp slt i64 %indvars.iv.next, 4
  br i1 %213, label %128, label %214

; <label>:214                                     ; preds = %154
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %215 = icmp slt i64 %indvars.iv.next5, %77
  br i1 %215, label %78, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %214
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @smooth(i32 %iflag, %struct.gtc_bench_data_t* %gtc_input) #0 {
  %istatus = alloca %struct.MPI_Status, align 4
  %efield = alloca double, align 8
  %tmp1 = alloca double, align 8
  %1 = bitcast %struct.MPI_Status* %istatus to i8*
  call void @llvm.lifetime.start(i64 20, i8* %1) #3
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %3 = load i32, i32* %2, align 4, !tbaa !197
  %4 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !152
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %7 = load double, double* %6, align 8, !tbaa !171
  %8 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %9 = load double, double* %8, align 8, !tbaa !163
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 65
  %11 = load double, double* %10, align 8, !tbaa !207
  %12 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %13 = load double, double* %12, align 8, !tbaa !208
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 46
  %15 = load double, double* %14, align 8, !tbaa !157
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %17 = load i32*, i32** %16, align 8, !tbaa !29
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %19 = load i32*, i32** %18, align 8, !tbaa !31
  %20 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %21 = load double*, double** %20, align 8, !tbaa !34
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %23 = load double*, double** %22, align 8, !tbaa !60
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 6
  %25 = load double*, double** %24, align 8, !tbaa !63
  %26 = bitcast double* %25 to i8*
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 44
  %28 = load double*, double** %27, align 8, !tbaa !52
  %29 = bitcast double* %28 to i8*
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 11
  %31 = load double*, double** %30, align 8, !tbaa !56
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 5
  %33 = load double*, double** %32, align 8, !tbaa !62
  %34 = bitcast double* %33 to i8*
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 46
  %36 = load double*, double** %35, align 8, !tbaa !37
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 38
  %38 = load double*, double** %37, align 8, !tbaa !71
  %39 = bitcast double* %38 to i8*
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 40
  %41 = load double*, double** %40, align 8, !tbaa !72
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 39
  %43 = load double*, double** %42, align 8, !tbaa !70
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 37
  %45 = load double*, double** %44, align 8, !tbaa !69
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 30
  %47 = load double*, double** %46, align 8, !tbaa !49
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 31
  %49 = load double*, double** %48, align 8, !tbaa !50
  %50 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 3
  %51 = load i32*, i32** %50, align 8, !tbaa !47
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 4
  %53 = load i32*, i32** %52, align 8, !tbaa !48
  %54 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 57
  %55 = load i32*, i32** %54, align 8, !tbaa !83
  %56 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 58
  %57 = load i32*, i32** %56, align 8, !tbaa !84
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %59 = load i32, i32* %58, align 4, !tbaa !247
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %61 = bitcast i32* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %65 = lshr i64 %62, 32
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %68 = load i32, i32* %67, align 8, !tbaa !242
  %69 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 0
  %70 = bitcast i32* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = trunc i64 %71 to i32
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 1
  %74 = lshr i64 %71, 32
  %75 = trunc i64 %74 to i32
  %76 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 12
  %77 = bitcast i32* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = trunc i64 %78 to i32
  %80 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 13
  %81 = lshr i64 %78, 32
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %63, 0
  %. = select i1 %83, i32 1, i32 %63
  %84 = icmp eq i32 %66, %5
  %85 = add i32 %5, -1
  %ipsi_out1.0 = select i1 %84, i32 %85, i32 %66
  %86 = sext i32 %. to i64
  %87 = getelementptr inbounds i32, i32* %17, i64 %86
  %88 = load i32, i32* %87, align 4, !tbaa !1
  %89 = sext i32 %ipsi_out1.0 to i64
  %90 = getelementptr inbounds i32, i32* %17, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !1
  %92 = getelementptr inbounds i32, i32* %19, i64 %89
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = sub i32 %88, %68
  %95 = sub i32 %91, %68
  %96 = add i32 %95, %93
  %97 = icmp eq i32 %79, 0
  %.46 = select i1 %97, i32 1, i32 %79
  %98 = icmp eq i32 %82, %5
  %ipsi_nover_out1.0 = select i1 %98, i32 %85, i32 %82
  %99 = sext i32 %.46 to i64
  %100 = getelementptr inbounds i32, i32* %17, i64 %99
  %101 = load i32, i32* %100, align 4, !tbaa !1
  %102 = sext i32 %ipsi_nover_out1.0 to i64
  %103 = getelementptr inbounds i32, i32* %17, i64 %102
  %104 = load i32, i32* %103, align 4, !tbaa !1
  %105 = getelementptr inbounds i32, i32* %19, i64 %102
  %106 = load i32, i32* %105, align 4, !tbaa !1
  %107 = sub i32 %101, %68
  %108 = sub i32 %104, %68
  %109 = add i32 %108, %106
  %110 = sext i32 %59 to i64
  %111 = shl nsw i64 %110, 3
  %112 = tail call fastcc i8* @_mm_malloc.134(i64 %111)
  %113 = bitcast i8* %112 to double*
  %114 = icmp eq i8* %112, null
  br i1 %114, label %118, label %.preheader89

.preheader89:                                     ; preds = %0
  %115 = add i32 %3, 1
  %116 = mul i32 %59, %115
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %._crit_edge205.loopexit, label %._crit_edge205

; <label>:118                                     ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.140, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.141, i64 0, i64 0), i32 131, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @__PRETTY_FUNCTION__.smooth, i64 0, i64 0)) #15
  unreachable

._crit_edge205.loopexit:                          ; preds = %.preheader89
  %119 = add i32 %116, -1
  %120 = zext i32 %119 to i64
  %121 = shl nuw nsw i64 %120, 3
  %122 = add nuw nsw i64 %121, 8
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 %122, i32 8, i1 false)
  br label %._crit_edge205

._crit_edge205:                                   ; preds = %._crit_edge205.loopexit, %.preheader89
  %123 = icmp eq i32 %iflag, 0
  br i1 %123, label %.preheader84, label %137

.preheader84:                                     ; preds = %._crit_edge205
  %124 = icmp sgt i32 %59, 0
  br i1 %124, label %.preheader83.lr.ph, label %.loopexit85

.preheader83.lr.ph:                               ; preds = %.preheader84
  %125 = icmp slt i32 %3, 1
  br label %.preheader83

.preheader83:                                     ; preds = %._crit_edge195, %.preheader83.lr.ph
  %i1.0196 = phi i32 [ 0, %.preheader83.lr.ph ], [ %127, %._crit_edge195 ]
  br i1 %125, label %._crit_edge195, label %.lr.ph194

.lr.ph194:                                        ; preds = %.preheader83
  %126 = mul nsw i32 %i1.0196, %115
  br label %128

._crit_edge195.loopexit:                          ; preds = %128
  br label %._crit_edge195

._crit_edge195:                                   ; preds = %._crit_edge195.loopexit, %.preheader83
  %127 = add nuw nsw i32 %i1.0196, 1
  %exitcond336 = icmp eq i32 %127, %59
  br i1 %exitcond336, label %.loopexit85.loopexit, label %.preheader83

; <label>:128                                     ; preds = %128, %.lr.ph194
  %j.0193 = phi i32 [ 1, %.lr.ph194 ], [ %136, %128 ]
  %129 = add nsw i32 %j.0193, %126
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double, double* %21, i64 %130
  %132 = bitcast double* %131 to i64*
  %133 = load i64, i64* %132, align 8, !tbaa !190
  %134 = getelementptr inbounds double, double* %28, i64 %130
  %135 = bitcast double* %134 to i64*
  store i64 %133, i64* %135, align 8, !tbaa !190
  %136 = add nuw nsw i32 %j.0193, 1
  %exitcond335 = icmp eq i32 %j.0193, %3
  br i1 %exitcond335, label %._crit_edge195.loopexit, label %128

; <label>:137                                     ; preds = %._crit_edge205
  %138 = icmp eq i32 %iflag, 3
  br i1 %138, label %.preheader87, label %152

.preheader87:                                     ; preds = %137
  %139 = icmp sgt i32 %59, 0
  br i1 %139, label %.preheader86.lr.ph, label %.loopexit85

.preheader86.lr.ph:                               ; preds = %.preheader87
  %140 = icmp slt i32 %3, 1
  br label %.preheader86

.preheader86:                                     ; preds = %._crit_edge200, %.preheader86.lr.ph
  %i2.0201 = phi i32 [ 0, %.preheader86.lr.ph ], [ %142, %._crit_edge200 ]
  br i1 %140, label %._crit_edge200, label %.lr.ph199

.lr.ph199:                                        ; preds = %.preheader86
  %141 = mul nsw i32 %i2.0201, %115
  br label %143

._crit_edge200.loopexit:                          ; preds = %143
  br label %._crit_edge200

._crit_edge200:                                   ; preds = %._crit_edge200.loopexit, %.preheader86
  %142 = add nuw nsw i32 %i2.0201, 1
  %exitcond340 = icmp eq i32 %142, %59
  br i1 %exitcond340, label %.loopexit85.loopexit4, label %.preheader86

; <label>:143                                     ; preds = %143, %.lr.ph199
  %j3.0198 = phi i32 [ 1, %.lr.ph199 ], [ %151, %143 ]
  %144 = add nsw i32 %j3.0198, %141
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds double, double* %23, i64 %145
  %147 = bitcast double* %146 to i64*
  %148 = load i64, i64* %147, align 8, !tbaa !190
  %149 = getelementptr inbounds double, double* %28, i64 %145
  %150 = bitcast double* %149 to i64*
  store i64 %148, i64* %150, align 8, !tbaa !190
  %151 = add nuw nsw i32 %j3.0198, 1
  %exitcond339 = icmp eq i32 %j3.0198, %3
  br i1 %exitcond339, label %._crit_edge200.loopexit, label %143

; <label>:152                                     ; preds = %137
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %154 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2.142, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %153) #13
  tail call void @exit(i32 1) #15
  unreachable

.loopexit85.loopexit:                             ; preds = %._crit_edge195
  br label %.loopexit85

.loopexit85.loopexit4:                            ; preds = %._crit_edge200
  br label %.loopexit85

.loopexit85:                                      ; preds = %.loopexit85.loopexit4, %.loopexit85.loopexit, %.preheader87, %.preheader84
  %155 = fcmp olt double %15, 5.000000e-01
  %ismooth.0 = select i1 %155, i32 1, i32 2
  br i1 %155, label %.preheader70, label %.preheader82.lr.ph

.preheader82.lr.ph:                               ; preds = %.loopexit85
  %156 = icmp sgt i32 %., %ipsi_out1.0
  %157 = icmp slt i32 %3, 1
  %158 = icmp slt i32 %109, %107
  %159 = sub nsw i32 %109, %107
  %160 = add nsw i32 %159, 1
  %161 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %162 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %163 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %164 = sext i32 %107 to i64
  %165 = getelementptr inbounds double, double* %43, i64 %164
  %166 = bitcast double* %165 to i8*
  %167 = getelementptr inbounds double, double* %38, i64 %164
  %168 = bitcast double* %167 to i8*
  %169 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %170 = getelementptr inbounds double, double* %45, i64 %164
  %171 = bitcast double* %170 to i8*
  %172 = getelementptr inbounds double, double* %41, i64 %164
  %173 = bitcast double* %172 to i8*
  %174 = icmp eq i32 %3, 1
  %175 = icmp sgt i32 %.46, %ipsi_nover_out1.0
  %176 = sub i32 1, %68
  %177 = xor i32 %68, -1
  %178 = sub i32 2, %68
  %179 = icmp sgt i32 %59, 0
  %180 = icmp slt i32 %3, 0
  %181 = icmp ugt i32 %63, 1
  %umax304 = select i1 %181, i32 %63, i32 1
  %182 = sext i32 %umax304 to i64
  %183 = sext i32 %109 to i64
  %184 = icmp ugt i32 %79, 1
  %umax313 = select i1 %184, i32 %79, i32 1
  %185 = sext i32 %umax313 to i64
  %186 = sext i32 %115 to i64
  %187 = add i32 %59, -1
  %188 = zext i32 %187 to i64
  %189 = shl nuw nsw i64 %188, 3
  %190 = add nuw nsw i64 %189, 8
  br label %.preheader82

.preheader82:                                     ; preds = %._crit_edge191, %.preheader82.lr.ph
  %ip.0192 = phi i32 [ 1, %.preheader82.lr.ph ], [ %552, %._crit_edge191 ]
  br i1 %156, label %.preheader81, label %.preheader78.preheader

.preheader78.preheader:                           ; preds = %.preheader82
  br label %.preheader78

.preheader70.loopexit:                            ; preds = %._crit_edge191
  br label %.preheader70

.preheader70:                                     ; preds = %.preheader70.loopexit, %.loopexit85
  %191 = icmp sgt i32 %59, 0
  br i1 %191, label %.lr.ph155.preheader, label %._crit_edge156

.lr.ph155.preheader:                              ; preds = %.preheader70
  %192 = sext i32 %115 to i64
  %193 = sext i32 %3 to i64
  br label %.lr.ph155

.preheader81.loopexit:                            ; preds = %._crit_edge159
  br label %.preheader81

.preheader81:                                     ; preds = %.preheader81.loopexit, %.preheader82
  br i1 %157, label %.preheader80, label %.preheader77.preheader

.preheader77.preheader:                           ; preds = %.preheader81
  br label %.preheader77

.preheader78:                                     ; preds = %.preheader78.preheader, %._crit_edge159
  %indvars.iv305 = phi i64 [ %indvars.iv.next306, %._crit_edge159 ], [ %182, %.preheader78.preheader ]
  br i1 %180, label %._crit_edge159, label %.lr.ph158

.lr.ph158:                                        ; preds = %.preheader78
  %194 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv305
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv305
  %197 = load i32, i32* %196, align 4
  %198 = sub i32 %195, %68
  %199 = add i32 %198, %197
  %200 = mul nsw i32 %199, %115
  %201 = mul nsw i32 %198, %115
  %202 = sext i32 %201 to i64
  %203 = sext i32 %200 to i64
  br label %205

._crit_edge159.loopexit:                          ; preds = %205
  br label %._crit_edge159

._crit_edge159:                                   ; preds = %._crit_edge159.loopexit, %.preheader78
  %204 = icmp slt i64 %indvars.iv305, %89
  %indvars.iv.next306 = add nsw i64 %indvars.iv305, 1
  br i1 %204, label %.preheader78, label %.preheader81.loopexit

; <label>:205                                     ; preds = %205, %.lr.ph158
  %indvars.iv300 = phi i64 [ %indvars.iv.next301, %205 ], [ 0, %.lr.ph158 ]
  %206 = add nsw i64 %203, %indvars.iv300
  %207 = getelementptr inbounds double, double* %28, i64 %206
  %208 = bitcast double* %207 to i64*
  %209 = load i64, i64* %208, align 8, !tbaa !190
  %210 = add nsw i64 %202, %indvars.iv300
  %211 = getelementptr inbounds double, double* %28, i64 %210
  %212 = bitcast double* %211 to i64*
  store i64 %209, i64* %212, align 8, !tbaa !190
  %indvars.iv.next301 = add nuw nsw i64 %indvars.iv300, 1
  %lftr.wideiv302 = trunc i64 %indvars.iv.next301 to i32
  %exitcond303 = icmp eq i32 %lftr.wideiv302, %115
  br i1 %exitcond303, label %._crit_edge159.loopexit, label %205

.preheader80.loopexit:                            ; preds = %._crit_edge169
  br label %.preheader80

.preheader80:                                     ; preds = %.preheader80.loopexit, %.preheader81
  br i1 %157, label %.preheader79, label %.preheader73.preheader

.preheader73.preheader:                           ; preds = %.preheader80
  br label %.preheader73

.preheader77:                                     ; preds = %.preheader77.preheader, %._crit_edge169
  %k5.0170 = phi i32 [ %324, %._crit_edge169 ], [ 1, %.preheader77.preheader ]
  br i1 %179, label %.preheader76.loopexit, label %.preheader76

.preheader76.loopexit:                            ; preds = %.preheader77
  call void @llvm.memset.p0i8.i64(i8* nonnull %112, i8 0, i64 %190, i32 8, i1 false)
  br label %.preheader76

.preheader76:                                     ; preds = %.preheader76.loopexit, %.preheader77
  br i1 %158, label %.preheader75, label %.lr.ph164

.lr.ph164:                                        ; preds = %.preheader76
  %213 = shl i32 %k5.0170, 1
  %214 = add i32 %213, -2
  %215 = mul nsw i32 %214, %59
  br label %216

.preheader75.loopexit:                            ; preds = %216
  br label %.preheader75

.preheader75:                                     ; preds = %.preheader75.loopexit, %.preheader76
  br i1 %175, label %.preheader74, label %.lr.ph166.preheader

.lr.ph166.preheader:                              ; preds = %.preheader75
  br label %.lr.ph166

; <label>:216                                     ; preds = %216, %.lr.ph164
  %indvars.iv311 = phi i64 [ %indvars.iv.next312, %216 ], [ %164, %.lr.ph164 ]
  %ij.0163 = phi i32 [ %308, %216 ], [ %107, %.lr.ph164 ]
  %217 = shl nsw i32 %ij.0163, 1
  %218 = add nsw i32 %217, %215
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds double, double* %47, i64 %219
  %221 = load double, double* %220, align 8, !tbaa !190
  %222 = fsub double 1.000000e+00, %221
  %223 = getelementptr inbounds i32, i32* %51, i64 %219
  %224 = load i32, i32* %223, align 4, !tbaa !1
  %225 = sub nsw i32 %224, %68
  %226 = mul nsw i32 %225, %115
  %227 = add nsw i32 %226, %k5.0170
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds double, double* %28, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !190
  %231 = fmul double %222, %230
  %232 = add i32 %176, %224
  %233 = mul nsw i32 %232, %115
  %234 = add nsw i32 %233, %k5.0170
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds double, double* %28, i64 %235
  %237 = load double, double* %236, align 8, !tbaa !190
  %238 = fmul double %221, %237
  %239 = fadd double %231, %238
  %240 = or i32 %218, 1
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds double, double* %47, i64 %241
  %243 = load double, double* %242, align 8, !tbaa !190
  %244 = fsub double 1.000000e+00, %243
  %245 = getelementptr inbounds i32, i32* %51, i64 %241
  %246 = load i32, i32* %245, align 4, !tbaa !1
  %247 = sub nsw i32 %246, %68
  %248 = mul nsw i32 %247, %115
  %249 = add nsw i32 %248, %k5.0170
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds double, double* %28, i64 %250
  %252 = load double, double* %251, align 8, !tbaa !190
  %253 = fmul double %244, %252
  %254 = fadd double %239, %253
  %255 = add i32 %176, %246
  %256 = mul nsw i32 %255, %115
  %257 = add nsw i32 %256, %k5.0170
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %28, i64 %258
  %260 = load double, double* %259, align 8, !tbaa !190
  %261 = fmul double %243, %260
  %262 = fadd double %254, %261
  %263 = fmul double %262, 2.500000e-01
  %264 = getelementptr inbounds double, double* %49, i64 %219
  %265 = load double, double* %264, align 8, !tbaa !190
  %266 = fsub double 1.000000e+00, %265
  %267 = getelementptr inbounds i32, i32* %53, i64 %219
  %268 = load i32, i32* %267, align 4, !tbaa !1
  %269 = sub nsw i32 %268, %68
  %270 = mul nsw i32 %269, %115
  %271 = add nsw i32 %270, %k5.0170
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds double, double* %28, i64 %272
  %274 = load double, double* %273, align 8, !tbaa !190
  %275 = fmul double %266, %274
  %276 = add i32 %176, %268
  %277 = mul nsw i32 %276, %115
  %278 = add nsw i32 %277, %k5.0170
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds double, double* %28, i64 %279
  %281 = load double, double* %280, align 8, !tbaa !190
  %282 = fmul double %265, %281
  %283 = fadd double %275, %282
  %284 = getelementptr inbounds double, double* %49, i64 %241
  %285 = load double, double* %284, align 8, !tbaa !190
  %286 = fsub double 1.000000e+00, %285
  %287 = getelementptr inbounds i32, i32* %53, i64 %241
  %288 = load i32, i32* %287, align 4, !tbaa !1
  %289 = sub nsw i32 %288, %68
  %290 = mul nsw i32 %289, %115
  %291 = add nsw i32 %290, %k5.0170
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds double, double* %28, i64 %292
  %294 = load double, double* %293, align 8, !tbaa !190
  %295 = fmul double %286, %294
  %296 = fadd double %283, %295
  %297 = add i32 %176, %288
  %298 = mul nsw i32 %297, %115
  %299 = add nsw i32 %298, %k5.0170
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds double, double* %28, i64 %300
  %302 = load double, double* %301, align 8, !tbaa !190
  %303 = fmul double %285, %302
  %304 = fadd double %296, %303
  %305 = fmul double %304, 6.250000e-02
  %306 = fsub double %263, %305
  %307 = getelementptr inbounds double, double* %113, i64 %indvars.iv311
  store double %306, double* %307, align 8, !tbaa !190
  %308 = add nsw i32 %ij.0163, 1
  %309 = icmp slt i64 %indvars.iv311, %183
  %indvars.iv.next312 = add nsw i64 %indvars.iv311, 1
  br i1 %309, label %216, label %.preheader75.loopexit

.preheader74.loopexit:                            ; preds = %.lr.ph166
  br label %.preheader74

.preheader74:                                     ; preds = %.preheader74.loopexit, %.preheader75
  br i1 %158, label %._crit_edge169, label %.lr.ph168.preheader

.lr.ph168.preheader:                              ; preds = %.preheader74
  br label %.lr.ph168

.lr.ph166:                                        ; preds = %.lr.ph166.preheader, %.lr.ph166
  %indvars.iv314 = phi i64 [ %indvars.iv.next315, %.lr.ph166 ], [ %185, %.lr.ph166.preheader ]
  %310 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv314
  %311 = load i32, i32* %310, align 4, !tbaa !1
  %312 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv314
  %313 = load i32, i32* %312, align 4, !tbaa !1
  %314 = sub i32 %311, %68
  %315 = add i32 %314, %313
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds double, double* %113, i64 %316
  %318 = bitcast double* %317 to i64*
  %319 = load i64, i64* %318, align 8, !tbaa !190
  %320 = sext i32 %314 to i64
  %321 = getelementptr inbounds double, double* %113, i64 %320
  %322 = bitcast double* %321 to i64*
  store i64 %319, i64* %322, align 8, !tbaa !190
  %323 = icmp slt i64 %indvars.iv314, %102
  %indvars.iv.next315 = add nsw i64 %indvars.iv314, 1
  br i1 %323, label %.lr.ph166, label %.preheader74.loopexit

._crit_edge169.loopexit:                          ; preds = %.lr.ph168
  br label %._crit_edge169

._crit_edge169:                                   ; preds = %._crit_edge169.loopexit, %.preheader74
  %324 = add nuw nsw i32 %k5.0170, 1
  %exitcond318 = icmp eq i32 %k5.0170, %3
  br i1 %exitcond318, label %.preheader80.loopexit, label %.preheader77

.lr.ph168:                                        ; preds = %.lr.ph168.preheader, %.lr.ph168
  %indvars.iv316 = phi i64 [ %indvars.iv.next317, %.lr.ph168 ], [ %164, %.lr.ph168.preheader ]
  %ij8.0167 = phi i32 [ %334, %.lr.ph168 ], [ %107, %.lr.ph168.preheader ]
  %325 = mul nsw i32 %ij8.0167, %115
  %326 = add nsw i32 %325, %k5.0170
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds double, double* %28, i64 %327
  %329 = load double, double* %328, align 8, !tbaa !190
  %330 = fmul double %329, 6.250000e-01
  %331 = getelementptr inbounds double, double* %113, i64 %indvars.iv316
  %332 = load double, double* %331, align 8, !tbaa !190
  %333 = fadd double %330, %332
  store double %333, double* %328, align 8, !tbaa !190
  store double 0.000000e+00, double* %331, align 8, !tbaa !190
  %334 = add nsw i32 %ij8.0167, 1
  %335 = icmp slt i64 %indvars.iv316, %183
  %indvars.iv.next317 = add nsw i64 %indvars.iv316, 1
  br i1 %335, label %.lr.ph168, label %._crit_edge169.loopexit

.preheader79.loopexit:                            ; preds = %._crit_edge178
  br label %.preheader79

.preheader79:                                     ; preds = %.preheader79.loopexit, %.preheader80
  br i1 %158, label %._crit_edge183, label %.lr.ph182.preheader

.lr.ph182.preheader:                              ; preds = %.preheader79
  br label %.lr.ph182

.preheader73:                                     ; preds = %.preheader73.preheader, %._crit_edge178
  %k9.0179 = phi i32 [ %376, %._crit_edge178 ], [ 1, %.preheader73.preheader ]
  br i1 %158, label %.preheader72, label %.lr.ph173.preheader

.lr.ph173.preheader:                              ; preds = %.preheader73
  br label %.lr.ph173

.preheader72.loopexit:                            ; preds = %.lr.ph173
  br label %.preheader72

.preheader72:                                     ; preds = %.preheader72.loopexit, %.preheader73
  br i1 %158, label %.preheader71, label %.lr.ph175.preheader

.lr.ph175.preheader:                              ; preds = %.preheader72
  br label %.lr.ph175

.lr.ph173:                                        ; preds = %.lr.ph173.preheader, %.lr.ph173
  %indvars.iv319 = phi i64 [ %indvars.iv.next320, %.lr.ph173 ], [ %164, %.lr.ph173.preheader ]
  %ij10.0172 = phi i32 [ %344, %.lr.ph173 ], [ %107, %.lr.ph173.preheader ]
  %336 = mul nsw i32 %ij10.0172, %115
  %337 = add nsw i32 %336, %k9.0179
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, double* %28, i64 %338
  %340 = bitcast double* %339 to i64*
  %341 = load i64, i64* %340, align 8, !tbaa !190
  %342 = getelementptr inbounds double, double* %113, i64 %indvars.iv319
  %343 = bitcast double* %342 to i64*
  store i64 %341, i64* %343, align 8, !tbaa !190
  %344 = add nsw i32 %ij10.0172, 1
  %345 = icmp slt i64 %indvars.iv319, %183
  %indvars.iv.next320 = add nsw i64 %indvars.iv319, 1
  br i1 %345, label %.lr.ph173, label %.preheader72.loopexit

.preheader71.loopexit:                            ; preds = %.lr.ph175
  br label %.preheader71

.preheader71:                                     ; preds = %.preheader71.loopexit, %.preheader72
  br i1 %175, label %._crit_edge178, label %.lr.ph177.preheader

.lr.ph177.preheader:                              ; preds = %.preheader71
  br label %.lr.ph177

.lr.ph175:                                        ; preds = %.lr.ph175.preheader, %.lr.ph175
  %indvars.iv321 = phi i64 [ %indvars.iv.next322, %.lr.ph175 ], [ %164, %.lr.ph175.preheader ]
  %ij11.0174 = phi i32 [ %353, %.lr.ph175 ], [ %107, %.lr.ph175.preheader ]
  %346 = getelementptr inbounds double, double* %113, i64 %indvars.iv321
  %347 = load double, double* %346, align 8, !tbaa !190
  %348 = fmul double %347, 6.250000e-01
  %349 = add nsw i32 %ij11.0174, -1
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds double, double* %113, i64 %350
  %352 = load double, double* %351, align 8, !tbaa !190
  %353 = add nsw i32 %ij11.0174, 1
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds double, double* %113, i64 %354
  %356 = load double, double* %355, align 8, !tbaa !190
  %357 = fadd double %352, %356
  %358 = fmul double %357, 2.500000e-01
  %359 = fadd double %348, %358
  %360 = add nsw i32 %ij11.0174, -2
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds double, double* %113, i64 %361
  %363 = load double, double* %362, align 8, !tbaa !190
  %364 = add nsw i32 %ij11.0174, 2
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds double, double* %113, i64 %365
  %367 = load double, double* %366, align 8, !tbaa !190
  %368 = fadd double %363, %367
  %369 = fmul double %368, 6.250000e-02
  %370 = fsub double %359, %369
  %371 = mul nsw i32 %ij11.0174, %115
  %372 = add nsw i32 %371, %k9.0179
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds double, double* %28, i64 %373
  store double %370, double* %374, align 8, !tbaa !190
  %375 = icmp slt i64 %indvars.iv321, %183
  %indvars.iv.next322 = add nsw i64 %indvars.iv321, 1
  br i1 %375, label %.lr.ph175, label %.preheader71.loopexit

._crit_edge178.loopexit:                          ; preds = %.lr.ph177
  br label %._crit_edge178

._crit_edge178:                                   ; preds = %._crit_edge178.loopexit, %.preheader71
  %376 = add nuw nsw i32 %k9.0179, 1
  %exitcond326 = icmp eq i32 %k9.0179, %3
  br i1 %exitcond326, label %.preheader79.loopexit, label %.preheader73

.lr.ph177:                                        ; preds = %.lr.ph177.preheader, %.lr.ph177
  %indvars.iv324 = phi i64 [ %indvars.iv.next325, %.lr.ph177 ], [ %185, %.lr.ph177.preheader ]
  %377 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv324
  %378 = load i32, i32* %377, align 4, !tbaa !1
  %379 = add i32 %176, %378
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds double, double* %113, i64 %380
  %382 = load double, double* %381, align 8, !tbaa !190
  %383 = fmul double %382, 6.250000e-01
  %384 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv324
  %385 = load i32, i32* %384, align 4, !tbaa !1
  %386 = add nsw i32 %385, %378
  %387 = sub nsw i32 %386, %68
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds double, double* %113, i64 %388
  %390 = load double, double* %389, align 8, !tbaa !190
  %391 = add nsw i32 %379, 1
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds double, double* %113, i64 %392
  %394 = load double, double* %393, align 8, !tbaa !190
  %395 = fadd double %390, %394
  %396 = fmul double %395, 2.500000e-01
  %397 = fadd double %383, %396
  %398 = add i32 %386, %177
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds double, double* %113, i64 %399
  %401 = load double, double* %400, align 8, !tbaa !190
  %402 = add nsw i32 %379, 2
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds double, double* %113, i64 %403
  %405 = load double, double* %404, align 8, !tbaa !190
  %406 = fadd double %401, %405
  %407 = fmul double %406, 6.250000e-02
  %408 = fsub double %397, %407
  %409 = mul nsw i32 %379, %115
  %410 = add nsw i32 %409, %k9.0179
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %28, i64 %411
  store double %408, double* %412, align 8, !tbaa !190
  %413 = load i32, i32* %377, align 4, !tbaa !1
  %414 = add i32 %178, %413
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds double, double* %113, i64 %415
  %417 = load double, double* %416, align 8, !tbaa !190
  %418 = fmul double %417, 6.250000e-01
  %419 = add nsw i32 %414, -1
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds double, double* %113, i64 %420
  %422 = load double, double* %421, align 8, !tbaa !190
  %423 = add nsw i32 %414, 1
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds double, double* %113, i64 %424
  %426 = load double, double* %425, align 8, !tbaa !190
  %427 = fadd double %422, %426
  %428 = fmul double %427, 2.500000e-01
  %429 = fadd double %418, %428
  %430 = load i32, i32* %384, align 4, !tbaa !1
  %431 = sub i32 %413, %68
  %432 = add i32 %431, %430
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds double, double* %113, i64 %433
  %435 = load double, double* %434, align 8, !tbaa !190
  %436 = add nsw i32 %414, 2
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds double, double* %113, i64 %437
  %439 = load double, double* %438, align 8, !tbaa !190
  %440 = fadd double %435, %439
  %441 = fmul double %440, 6.250000e-02
  %442 = fsub double %429, %441
  %443 = mul nsw i32 %414, %115
  %444 = add nsw i32 %443, %k9.0179
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds double, double* %28, i64 %445
  store double %442, double* %446, align 8, !tbaa !190
  %447 = load i32, i32* %377, align 4, !tbaa !1
  %448 = load i32, i32* %384, align 4, !tbaa !1
  %449 = sub i32 %447, %68
  %450 = add i32 %449, %448
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds double, double* %113, i64 %451
  %453 = load double, double* %452, align 8, !tbaa !190
  %454 = fmul double %453, 6.250000e-01
  %455 = add nsw i32 %450, -1
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds double, double* %113, i64 %456
  %458 = load double, double* %457, align 8, !tbaa !190
  %459 = add i32 %176, %447
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds double, double* %113, i64 %460
  %462 = load double, double* %461, align 8, !tbaa !190
  %463 = fadd double %458, %462
  %464 = fmul double %463, 2.500000e-01
  %465 = fadd double %454, %464
  %466 = add nsw i32 %450, -2
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %113, i64 %467
  %469 = load double, double* %468, align 8, !tbaa !190
  %470 = add i32 %178, %447
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds double, double* %113, i64 %471
  %473 = load double, double* %472, align 8, !tbaa !190
  %474 = fadd double %469, %473
  %475 = fmul double %474, 6.250000e-02
  %476 = fsub double %465, %475
  %477 = mul nsw i32 %450, %115
  %478 = add nsw i32 %477, %k9.0179
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds double, double* %28, i64 %479
  store double %476, double* %480, align 8, !tbaa !190
  %481 = load i32, i32* %377, align 4, !tbaa !1
  %482 = load i32, i32* %384, align 4, !tbaa !1
  %483 = add i32 %481, %177
  %484 = add i32 %483, %482
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds double, double* %113, i64 %485
  %487 = load double, double* %486, align 8, !tbaa !190
  %488 = fmul double %487, 6.250000e-01
  %489 = add nsw i32 %484, -1
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds double, double* %113, i64 %490
  %492 = load double, double* %491, align 8, !tbaa !190
  %493 = add nsw i32 %484, 1
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds double, double* %113, i64 %494
  %496 = load double, double* %495, align 8, !tbaa !190
  %497 = fadd double %492, %496
  %498 = fmul double %497, 2.500000e-01
  %499 = fadd double %488, %498
  %500 = add nsw i32 %484, -2
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds double, double* %113, i64 %501
  %503 = load double, double* %502, align 8, !tbaa !190
  %504 = add i32 %176, %481
  %505 = sext i32 %504 to i64
  %506 = getelementptr inbounds double, double* %113, i64 %505
  %507 = load double, double* %506, align 8, !tbaa !190
  %508 = fadd double %503, %507
  %509 = fmul double %508, 6.250000e-02
  %510 = fsub double %499, %509
  %511 = mul nsw i32 %484, %115
  %512 = add nsw i32 %511, %k9.0179
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds double, double* %28, i64 %513
  store double %510, double* %514, align 8, !tbaa !190
  %515 = icmp slt i64 %indvars.iv324, %102
  %indvars.iv.next325 = add nsw i64 %indvars.iv324, 1
  br i1 %515, label %.lr.ph177, label %._crit_edge178.loopexit

._crit_edge183.loopexit:                          ; preds = %.lr.ph182
  br label %._crit_edge183

._crit_edge183:                                   ; preds = %._crit_edge183.loopexit, %.preheader79
  %516 = load i32, i32* %161, align 4, !tbaa !231
  %517 = load i32, i32* %162, align 8, !tbaa !230
  %518 = load i32, i32* %163, align 4, !tbaa !229
  %519 = load i32, i32* %169, align 8, !tbaa !279
  %520 = call i32 @MPI_Sendrecv(i8* %166, i32 %160, i32 1275070475, i32 %516, i32 %518, i8* %168, i32 %160, i32 1275070475, i32 %517, i32 %517, i32 %519, %struct.MPI_Status* nonnull %istatus) #3
  br i1 %158, label %._crit_edge187, label %.lr.ph186.preheader

.lr.ph186.preheader:                              ; preds = %._crit_edge183
  br label %.lr.ph186

.lr.ph182:                                        ; preds = %.lr.ph182.preheader, %.lr.ph182
  %indvars.iv327 = phi i64 [ %indvars.iv.next328, %.lr.ph182 ], [ %164, %.lr.ph182.preheader ]
  %i14.0181 = phi i32 [ %530, %.lr.ph182 ], [ %107, %.lr.ph182.preheader ]
  %521 = mul nsw i32 %i14.0181, %115
  %522 = add nsw i32 %521, %3
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds double, double* %28, i64 %523
  %525 = bitcast double* %524 to i64*
  %526 = load i64, i64* %525, align 8, !tbaa !190
  %527 = getelementptr inbounds double, double* %43, i64 %indvars.iv327
  %528 = bitcast double* %527 to i64*
  store i64 %526, i64* %528, align 8, !tbaa !190
  %529 = getelementptr inbounds double, double* %38, i64 %indvars.iv327
  store double 0.000000e+00, double* %529, align 8, !tbaa !190
  %530 = add nsw i32 %i14.0181, 1
  %531 = icmp slt i64 %indvars.iv327, %183
  %indvars.iv.next328 = add nsw i64 %indvars.iv327, 1
  br i1 %531, label %.lr.ph182, label %._crit_edge183.loopexit

._crit_edge187.loopexit:                          ; preds = %.lr.ph186
  br label %._crit_edge187

._crit_edge187:                                   ; preds = %._crit_edge187.loopexit, %._crit_edge183
  %532 = bitcast i32* %162 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = trunc i64 %533 to i32
  %535 = lshr i64 %533, 32
  %536 = trunc i64 %535 to i32
  %537 = load i32, i32* %163, align 4, !tbaa !229
  %538 = load i32, i32* %169, align 8, !tbaa !279
  %539 = call i32 @MPI_Sendrecv(i8* %171, i32 %160, i32 1275070475, i32 %534, i32 %537, i8* %173, i32 %160, i32 1275070475, i32 %536, i32 %536, i32 %538, %struct.MPI_Status* nonnull %istatus) #3
  br i1 %158, label %._crit_edge191, label %.lr.ph190.preheader

.lr.ph190.preheader:                              ; preds = %._crit_edge187
  br label %.lr.ph190

.lr.ph186:                                        ; preds = %.lr.ph186.preheader, %.lr.ph186
  %indvars.iv329 = phi i64 [ %indvars.iv.next330, %.lr.ph186 ], [ %164, %.lr.ph186.preheader ]
  %i15.0184 = phi i32 [ %549, %.lr.ph186 ], [ %107, %.lr.ph186.preheader ]
  %540 = mul nsw i32 %i15.0184, %115
  %541 = add nsw i32 %540, 1
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds double, double* %28, i64 %542
  %544 = bitcast double* %543 to i64*
  %545 = load i64, i64* %544, align 8, !tbaa !190
  %546 = getelementptr inbounds double, double* %45, i64 %indvars.iv329
  %547 = bitcast double* %546 to i64*
  store i64 %545, i64* %547, align 8, !tbaa !190
  %548 = getelementptr inbounds double, double* %41, i64 %indvars.iv329
  store double 0.000000e+00, double* %548, align 8, !tbaa !190
  %549 = add nsw i32 %i15.0184, 1
  %550 = icmp slt i64 %indvars.iv329, %183
  %indvars.iv.next330 = add nsw i64 %indvars.iv329, 1
  br i1 %550, label %.lr.ph186, label %._crit_edge187.loopexit

._crit_edge191.loopexit:                          ; preds = %574
  br label %._crit_edge191

._crit_edge191:                                   ; preds = %._crit_edge191.loopexit, %._crit_edge187
  %551 = call i32 @fix_radial_ghosts(%struct.gtc_bench_data_t* %gtc_input, double* %28, i32 1, i32 1) #3
  %552 = add nuw nsw i32 %ip.0192, 1
  %553 = icmp slt i32 %552, %ismooth.0
  br i1 %553, label %.preheader82, label %.preheader70.loopexit

.lr.ph190:                                        ; preds = %.lr.ph190.preheader, %574
  %indvars.iv331 = phi i64 [ %indvars.iv.next332, %574 ], [ %164, %.lr.ph190.preheader ]
  br i1 %174, label %554, label %573

; <label>:554                                     ; preds = %.lr.ph190
  %555 = mul nsw i64 %indvars.iv331, %186
  %556 = add nsw i64 %555, 1
  %557 = getelementptr inbounds double, double* %28, i64 %556
  %558 = load double, double* %557, align 8, !tbaa !190
  %559 = fmul double %558, 5.000000e-01
  %560 = getelementptr inbounds i32, i32* %57, i64 %indvars.iv331
  %561 = load i32, i32* %560, align 4, !tbaa !1
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds double, double* %41, i64 %562
  %564 = load double, double* %563, align 8, !tbaa !190
  %565 = getelementptr inbounds i32, i32* %55, i64 %indvars.iv331
  %566 = load i32, i32* %565, align 4, !tbaa !1
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds double, double* %38, i64 %567
  %569 = load double, double* %568, align 8, !tbaa !190
  %570 = fadd double %564, %569
  %571 = fmul double %570, 2.500000e-01
  %572 = fadd double %559, %571
  store double %572, double* %557, align 8, !tbaa !190
  br label %574

; <label>:573                                     ; preds = %.lr.ph190
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @str.143, i64 0, i64 0))
  br label %574

; <label>:574                                     ; preds = %573, %554
  %575 = icmp slt i64 %indvars.iv331, %183
  %indvars.iv.next332 = add nsw i64 %indvars.iv331, 1
  br i1 %575, label %.lr.ph190, label %._crit_edge191.loopexit

._crit_edge156.loopexit:                          ; preds = %.lr.ph155
  br label %._crit_edge156

._crit_edge156:                                   ; preds = %._crit_edge156.loopexit, %.preheader70
  %576 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %577 = load i32, i32* %576, align 4, !tbaa !231
  %578 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %579 = load i32, i32* %578, align 8, !tbaa !230
  %580 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %581 = load i32, i32* %580, align 4, !tbaa !229
  %582 = bitcast double* %43 to i8*
  %583 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %584 = load i32, i32* %583, align 8, !tbaa !279
  %585 = call i32 @MPI_Sendrecv(i8* %582, i32 %59, i32 1275070475, i32 %577, i32 %581, i8* %39, i32 %59, i32 1275070475, i32 %579, i32 %579, i32 %584, %struct.MPI_Status* nonnull %istatus) #3
  %586 = icmp sgt i32 %94, %96
  br i1 %586, label %.preheader69, label %.lr.ph153.preheader

.lr.ph153.preheader:                              ; preds = %._crit_edge156
  %587 = sext i32 %94 to i64
  %588 = sext i32 %96 to i64
  br label %.lr.ph153

.lr.ph155:                                        ; preds = %.lr.ph155, %.lr.ph155.preheader
  %indvars.iv296 = phi i64 [ 0, %.lr.ph155.preheader ], [ %indvars.iv.next297, %.lr.ph155 ]
  %589 = mul nsw i64 %indvars.iv296, %192
  %590 = add nsw i64 %589, %193
  %591 = getelementptr inbounds double, double* %28, i64 %590
  %592 = bitcast double* %591 to i64*
  %593 = load i64, i64* %592, align 8, !tbaa !190
  %594 = getelementptr inbounds double, double* %43, i64 %indvars.iv296
  %595 = bitcast double* %594 to i64*
  store i64 %593, i64* %595, align 8, !tbaa !190
  %596 = getelementptr inbounds double, double* %38, i64 %indvars.iv296
  store double 0.000000e+00, double* %596, align 8, !tbaa !190
  %indvars.iv.next297 = add nuw nsw i64 %indvars.iv296, 1
  %lftr.wideiv298 = trunc i64 %indvars.iv.next297 to i32
  %exitcond299 = icmp eq i32 %lftr.wideiv298, %59
  br i1 %exitcond299, label %._crit_edge156.loopexit, label %.lr.ph155

.preheader69.loopexit:                            ; preds = %.lr.ph153
  br label %.preheader69

.preheader69:                                     ; preds = %.preheader69.loopexit, %._crit_edge156
  %597 = icmp sgt i32 %., %ipsi_out1.0
  br i1 %597, label %._crit_edge150, label %.preheader68.lr.ph

.preheader68.lr.ph:                               ; preds = %.preheader69
  %598 = icmp slt i32 %3, 0
  %599 = icmp ugt i32 %63, 1
  %umax = select i1 %599, i32 %63, i32 1
  %600 = sext i32 %umax to i64
  br label %.preheader68

.lr.ph153:                                        ; preds = %.lr.ph153, %.lr.ph153.preheader
  %indvars.iv294 = phi i64 [ %587, %.lr.ph153.preheader ], [ %indvars.iv.next295, %.lr.ph153 ]
  %ij18.0151 = phi i32 [ %94, %.lr.ph153.preheader ], [ %611, %.lr.ph153 ]
  %601 = getelementptr inbounds i32, i32* %55, i64 %indvars.iv294
  %602 = load i32, i32* %601, align 4, !tbaa !1
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds double, double* %38, i64 %603
  %605 = bitcast double* %604 to i64*
  %606 = load i64, i64* %605, align 8, !tbaa !190
  %607 = mul nsw i32 %ij18.0151, %115
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds double, double* %28, i64 %608
  %610 = bitcast double* %609 to i64*
  store i64 %606, i64* %610, align 8, !tbaa !190
  %611 = add nsw i32 %ij18.0151, 1
  %612 = icmp slt i64 %indvars.iv294, %588
  %indvars.iv.next295 = add nsw i64 %indvars.iv294, 1
  br i1 %612, label %.lr.ph153, label %.preheader69.loopexit

.preheader68:                                     ; preds = %._crit_edge148, %.preheader68.lr.ph
  %indvars.iv292 = phi i64 [ %indvars.iv.next293, %._crit_edge148 ], [ %600, %.preheader68.lr.ph ]
  br i1 %598, label %._crit_edge148, label %.lr.ph147

.lr.ph147:                                        ; preds = %.preheader68
  %613 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv292
  %614 = load i32, i32* %613, align 4
  %615 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv292
  %616 = load i32, i32* %615, align 4
  %617 = sub i32 %614, %68
  %618 = add i32 %617, %616
  %619 = mul nsw i32 %618, %115
  %620 = mul nsw i32 %617, %115
  %621 = sext i32 %620 to i64
  %622 = sext i32 %619 to i64
  br label %624

._crit_edge150.loopexit:                          ; preds = %._crit_edge148
  br label %._crit_edge150

._crit_edge150:                                   ; preds = %._crit_edge150.loopexit, %.preheader69
  br i1 %83, label %632, label %.loopexit67

._crit_edge148.loopexit:                          ; preds = %624
  br label %._crit_edge148

._crit_edge148:                                   ; preds = %._crit_edge148.loopexit, %.preheader68
  %623 = icmp slt i64 %indvars.iv292, %89
  %indvars.iv.next293 = add nsw i64 %indvars.iv292, 1
  br i1 %623, label %.preheader68, label %._crit_edge150.loopexit

; <label>:624                                     ; preds = %624, %.lr.ph147
  %indvars.iv288 = phi i64 [ %indvars.iv.next289, %624 ], [ 0, %.lr.ph147 ]
  %625 = add nsw i64 %622, %indvars.iv288
  %626 = getelementptr inbounds double, double* %28, i64 %625
  %627 = bitcast double* %626 to i64*
  %628 = load i64, i64* %627, align 8, !tbaa !190
  %629 = add nsw i64 %621, %indvars.iv288
  %630 = getelementptr inbounds double, double* %28, i64 %629
  %631 = bitcast double* %630 to i64*
  store i64 %628, i64* %631, align 8, !tbaa !190
  %indvars.iv.next289 = add nuw nsw i64 %indvars.iv288, 1
  %lftr.wideiv290 = trunc i64 %indvars.iv.next289 to i32
  %exitcond291 = icmp eq i32 %lftr.wideiv290, %115
  br i1 %exitcond291, label %._crit_edge148.loopexit, label %624

; <label>:632                                     ; preds = %._crit_edge150
  %633 = load i32, i32* %19, align 4, !tbaa !1
  %634 = icmp slt i32 %633, 0
  br i1 %634, label %.loopexit67, label %.preheader66.lr.ph

.preheader66.lr.ph:                               ; preds = %632
  %635 = load i32, i32* %17, align 4
  %636 = icmp slt i32 %3, 0
  %637 = add nsw i32 %633, %635
  %638 = sext i32 %635 to i64
  %639 = sext i32 %637 to i64
  %640 = sext i32 %115 to i64
  %641 = sext i32 %68 to i64
  %642 = sub nsw i64 %638, %641
  %643 = zext i32 %3 to i64
  %644 = shl nuw nsw i64 %643, 3
  %645 = add nuw nsw i64 %644, 8
  br label %.preheader66

.preheader66:                                     ; preds = %._crit_edge144, %.preheader66.lr.ph
  %indvar346 = phi i64 [ %indvar.next347, %._crit_edge144 ], [ 0, %.preheader66.lr.ph ]
  %indvars.iv286 = phi i64 [ %indvars.iv.next287, %._crit_edge144 ], [ %638, %.preheader66.lr.ph ]
  br i1 %636, label %._crit_edge144, label %._crit_edge144.loopexit

._crit_edge144.loopexit:                          ; preds = %.preheader66
  %646 = add i64 %642, %indvar346
  %647 = mul i64 %646, %640
  %scevgep348 = getelementptr double, double* %28, i64 %647
  %scevgep348349 = bitcast double* %scevgep348 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep348349, i8 0, i64 %645, i32 8, i1 false)
  br label %._crit_edge144

._crit_edge144:                                   ; preds = %._crit_edge144.loopexit, %.preheader66
  %648 = icmp slt i64 %indvars.iv286, %639
  %indvars.iv.next287 = add nsw i64 %indvars.iv286, 1
  %indvar.next347 = add i64 %indvar346, 1
  br i1 %648, label %.preheader66, label %.loopexit67.loopexit

.loopexit67.loopexit:                             ; preds = %._crit_edge144
  br label %.loopexit67

.loopexit67:                                      ; preds = %.loopexit67.loopexit, %632, %._crit_edge150
  br i1 %84, label %649, label %.loopexit65

; <label>:649                                     ; preds = %.loopexit67
  %650 = sext i32 %5 to i64
  %651 = getelementptr inbounds i32, i32* %19, i64 %650
  %652 = load i32, i32* %651, align 4, !tbaa !1
  %653 = icmp slt i32 %652, 0
  br i1 %653, label %.loopexit65, label %.preheader64.lr.ph

.preheader64.lr.ph:                               ; preds = %649
  %654 = getelementptr inbounds i32, i32* %17, i64 %650
  %655 = load i32, i32* %654, align 4
  %656 = icmp slt i32 %3, 0
  %657 = add nsw i32 %652, %655
  %658 = sext i32 %655 to i64
  %659 = sext i32 %657 to i64
  %660 = sext i32 %115 to i64
  %661 = sext i32 %68 to i64
  %662 = sub nsw i64 %658, %661
  %663 = zext i32 %3 to i64
  %664 = shl nuw nsw i64 %663, 3
  %665 = add nuw nsw i64 %664, 8
  br label %.preheader64

.preheader64:                                     ; preds = %._crit_edge140, %.preheader64.lr.ph
  %indvar = phi i64 [ %indvar.next, %._crit_edge140 ], [ 0, %.preheader64.lr.ph ]
  %indvars.iv280 = phi i64 [ %indvars.iv.next281, %._crit_edge140 ], [ %658, %.preheader64.lr.ph ]
  br i1 %656, label %._crit_edge140, label %._crit_edge140.loopexit

._crit_edge140.loopexit:                          ; preds = %.preheader64
  %666 = add i64 %662, %indvar
  %667 = mul i64 %666, %660
  %scevgep = getelementptr double, double* %28, i64 %667
  %scevgep345 = bitcast double* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep345, i8 0, i64 %665, i32 8, i1 false)
  br label %._crit_edge140

._crit_edge140:                                   ; preds = %._crit_edge140.loopexit, %.preheader64
  %668 = icmp slt i64 %indvars.iv280, %659
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, 1
  %indvar.next = add i64 %indvar, 1
  br i1 %668, label %.preheader64, label %.loopexit65.loopexit

.loopexit65.loopexit:                             ; preds = %._crit_edge140
  br label %.loopexit65

.loopexit65:                                      ; preds = %.loopexit65.loopexit, %649, %.loopexit67
  br i1 %123, label %.preheader60, label %674

.preheader60:                                     ; preds = %.loopexit65
  br i1 %117, label %.lr.ph135.preheader, label %.thread

.lr.ph135.preheader:                              ; preds = %.preheader60
  br label %.lr.ph135

.lr.ph135:                                        ; preds = %.lr.ph135, %.lr.ph135.preheader
  %indvars.iv268 = phi i64 [ 0, %.lr.ph135.preheader ], [ %indvars.iv.next269, %.lr.ph135 ]
  %669 = getelementptr inbounds double, double* %28, i64 %indvars.iv268
  %670 = bitcast double* %669 to i64*
  %671 = load i64, i64* %670, align 8, !tbaa !190
  %672 = getelementptr inbounds double, double* %21, i64 %indvars.iv268
  %673 = bitcast double* %672 to i64*
  store i64 %671, i64* %673, align 8, !tbaa !190
  %indvars.iv.next269 = add nuw nsw i64 %indvars.iv268, 1
  %lftr.wideiv270 = trunc i64 %indvars.iv.next269 to i32
  %exitcond271 = icmp eq i32 %lftr.wideiv270, %116
  br i1 %exitcond271, label %.loopexit61.loopexit, label %.lr.ph135

; <label>:674                                     ; preds = %.loopexit65
  %675 = icmp eq i32 %iflag, 3
  br i1 %675, label %.preheader62, label %681

.preheader62:                                     ; preds = %674
  br i1 %117, label %.lr.ph137.preheader, label %.preheader59

.lr.ph137.preheader:                              ; preds = %.preheader62
  br label %.lr.ph137

.lr.ph137:                                        ; preds = %.lr.ph137, %.lr.ph137.preheader
  %indvars.iv272 = phi i64 [ 0, %.lr.ph137.preheader ], [ %indvars.iv.next273, %.lr.ph137 ]
  %676 = getelementptr inbounds double, double* %28, i64 %indvars.iv272
  %677 = bitcast double* %676 to i64*
  %678 = load i64, i64* %677, align 8, !tbaa !190
  %679 = getelementptr inbounds double, double* %23, i64 %indvars.iv272
  %680 = bitcast double* %679 to i64*
  store i64 %678, i64* %680, align 8, !tbaa !190
  %indvars.iv.next273 = add nuw nsw i64 %indvars.iv272, 1
  %lftr.wideiv274 = trunc i64 %indvars.iv.next273 to i32
  %exitcond275 = icmp eq i32 %lftr.wideiv274, %116
  br i1 %exitcond275, label %.loopexit61.loopexit3, label %.lr.ph137

; <label>:681                                     ; preds = %674
  %682 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %683 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2.142, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %682) #13
  call void @exit(i32 1) #15
  unreachable

.loopexit61.loopexit:                             ; preds = %.lr.ph135
  br label %.loopexit61

.loopexit61.loopexit3:                            ; preds = %.lr.ph137
  br label %.loopexit61

.loopexit61:                                      ; preds = %.loopexit61.loopexit3, %.loopexit61.loopexit
  %684 = icmp eq i32 %iflag, 3
  br i1 %684, label %.preheader59, label %.thread

.preheader59:                                     ; preds = %.loopexit61, %.preheader62
  %685 = icmp slt i32 %5, 0
  br i1 %685, label %._crit_edge133, label %.lr.ph132.preheader

.lr.ph132.preheader:                              ; preds = %.preheader59
  %686 = add i32 %5, 1
  br label %.lr.ph132

._crit_edge133.loopexit:                          ; preds = %.lr.ph132
  br label %._crit_edge133

._crit_edge133:                                   ; preds = %._crit_edge133.loopexit, %.preheader59
  %687 = bitcast double* %25 to i64*
  %688 = load i64, i64* %687, align 8, !tbaa !190
  %689 = bitcast double* %36 to i64*
  store i64 %688, i64* %689, align 8, !tbaa !190
  %690 = sext i32 %5 to i64
  %691 = getelementptr inbounds double, double* %25, i64 %690
  %692 = bitcast double* %691 to i64*
  %693 = load i64, i64* %692, align 8, !tbaa !190
  %694 = getelementptr inbounds double, double* %36, i64 %690
  %695 = bitcast double* %694 to i64*
  store i64 %693, i64* %695, align 8, !tbaa !190
  %696 = getelementptr inbounds double, double* %25, i64 3
  %697 = bitcast double* %696 to i64*
  %698 = load i64, i64* %697, align 8, !tbaa !190
  %699 = getelementptr inbounds double, double* %36, i64 1
  %700 = bitcast double* %699 to i64*
  store i64 %698, i64* %700, align 8, !tbaa !190
  %701 = add nsw i32 %5, -3
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds double, double* %25, i64 %702
  %704 = bitcast double* %703 to i64*
  %705 = load i64, i64* %704, align 8, !tbaa !190
  %706 = sext i32 %85 to i64
  %707 = getelementptr inbounds double, double* %36, i64 %706
  %708 = bitcast double* %707 to i64*
  store i64 %705, i64* %708, align 8, !tbaa !190
  %709 = icmp sgt i32 %85, 2
  br i1 %709, label %.lr.ph130.preheader, label %.preheader58

.lr.ph130.preheader:                              ; preds = %._crit_edge133
  br label %.lr.ph130

.lr.ph132:                                        ; preds = %.lr.ph132, %.lr.ph132.preheader
  %indvars.iv264 = phi i64 [ 0, %.lr.ph132.preheader ], [ %indvars.iv.next265, %.lr.ph132 ]
  %710 = getelementptr inbounds double, double* %31, i64 %indvars.iv264
  %711 = load double, double* %710, align 8, !tbaa !190
  %712 = fmul double %7, %711
  %713 = getelementptr inbounds double, double* %25, i64 %indvars.iv264
  store double %712, double* %713, align 8, !tbaa !190
  %indvars.iv.next265 = add nuw nsw i64 %indvars.iv264, 1
  %lftr.wideiv266 = trunc i64 %indvars.iv.next265 to i32
  %exitcond267 = icmp eq i32 %lftr.wideiv266, %686
  br i1 %exitcond267, label %._crit_edge133.loopexit, label %.lr.ph132

.preheader58.loopexit:                            ; preds = %.lr.ph130
  br label %.preheader58

.preheader58:                                     ; preds = %.preheader58.loopexit, %._crit_edge133
  %714 = icmp sgt i32 %5, 1
  br i1 %714, label %.lr.ph127.preheader, label %.preheader57

.lr.ph127.preheader:                              ; preds = %.preheader58
  br label %.lr.ph127

.lr.ph130:                                        ; preds = %.lr.ph130, %.lr.ph130.preheader
  %indvars.iv260 = phi i64 [ 2, %.lr.ph130.preheader ], [ %indvars.iv.next261, %.lr.ph130 ]
  %715 = add nsw i64 %indvars.iv260, -2
  %716 = getelementptr inbounds double, double* %25, i64 %715
  %717 = load double, double* %716, align 8, !tbaa !190
  %718 = add nuw nsw i64 %indvars.iv260, 2
  %719 = getelementptr inbounds double, double* %25, i64 %718
  %720 = load double, double* %719, align 8, !tbaa !190
  %721 = fadd double %717, %720
  %722 = getelementptr inbounds double, double* %36, i64 %indvars.iv260
  store double %721, double* %722, align 8, !tbaa !190
  %indvars.iv.next261 = add nuw nsw i64 %indvars.iv260, 1
  %lftr.wideiv262 = trunc i64 %indvars.iv.next261 to i32
  %exitcond263 = icmp eq i32 %lftr.wideiv262, %85
  br i1 %exitcond263, label %.preheader58.loopexit, label %.lr.ph130

.preheader57.loopexit:                            ; preds = %.lr.ph127
  br label %.preheader57

.preheader57:                                     ; preds = %.preheader57.loopexit, %.preheader58
  br i1 %685, label %.loopexit, label %.preheader56

.lr.ph127:                                        ; preds = %.lr.ph127.preheader, %.lr.ph127
  %indvars.iv256 = phi i64 [ %indvars.iv.next257, %.lr.ph127 ], [ 1, %.lr.ph127.preheader ]
  %723 = getelementptr inbounds double, double* %25, i64 %indvars.iv256
  %724 = load double, double* %723, align 8, !tbaa !190
  %725 = fmul double %724, 6.250000e-01
  %726 = add nsw i64 %indvars.iv256, -1
  %727 = getelementptr inbounds double, double* %25, i64 %726
  %728 = load double, double* %727, align 8, !tbaa !190
  %indvars.iv.next257 = add nuw nsw i64 %indvars.iv256, 1
  %729 = getelementptr inbounds double, double* %25, i64 %indvars.iv.next257
  %730 = load double, double* %729, align 8, !tbaa !190
  %731 = fadd double %728, %730
  %732 = fmul double %731, 2.500000e-01
  %733 = fadd double %725, %732
  %734 = getelementptr inbounds double, double* %36, i64 %indvars.iv256
  %735 = load double, double* %734, align 8, !tbaa !190
  %736 = fmul double %735, 6.250000e-02
  %737 = fsub double %733, %736
  store double %737, double* %734, align 8, !tbaa !190
  %lftr.wideiv258 = trunc i64 %indvars.iv.next257 to i32
  %exitcond259 = icmp eq i32 %lftr.wideiv258, %5
  br i1 %exitcond259, label %.preheader57.loopexit, label %.lr.ph127

.preheader56:                                     ; preds = %.preheader57
  %738 = zext i32 %5 to i64
  %739 = shl nuw nsw i64 %738, 3
  %740 = add nuw nsw i64 %739, 8
  call void @llvm.memset.p0i8.i64(i8* nonnull %26, i8 0, i64 %740, i32 8, i1 false)
  %741 = icmp slt i32 %5, 1
  br i1 %741, label %.preheader56..lr.ph121.preheader_crit_edge, label %.lr.ph123

.preheader56..lr.ph121.preheader_crit_edge:       ; preds = %.preheader56
  %.pre2 = add i32 %5, 1
  br label %.lr.ph121.preheader

.lr.ph123:                                        ; preds = %.preheader56
  %742 = fmul double %11, 5.000000e-01
  %743 = add i32 %5, 1
  %.pre = load double, double* %25, align 8, !tbaa !190
  br label %744

.preheader55:                                     ; preds = %744
  br i1 false, label %.preheader55..loopexit_crit_edge, label %.lr.ph121.preheader

.preheader55..loopexit_crit_edge:                 ; preds = %.preheader55
  br label %.loopexit

.lr.ph121.preheader:                              ; preds = %.preheader56..lr.ph121.preheader_crit_edge, %.preheader55
  %.pre-phi = phi i32 [ %.pre2, %.preheader56..lr.ph121.preheader_crit_edge ], [ %743, %.preheader55 ]
  br label %.lr.ph121

; <label>:744                                     ; preds = %744, %.lr.ph123
  %745 = phi double [ %761, %744 ], [ %.pre, %.lr.ph123 ]
  %indvars.iv248 = phi i64 [ %indvars.iv.next249, %744 ], [ 1, %.lr.ph123 ]
  %746 = trunc i64 %indvars.iv248 to i32
  %747 = sitofp i32 %746 to double
  %748 = fmul double %11, %747
  %749 = fadd double %9, %748
  %750 = add nsw i64 %indvars.iv248, -1
  %751 = getelementptr inbounds double, double* %25, i64 %750
  %752 = fsub double %749, %11
  %753 = getelementptr inbounds double, double* %36, i64 %750
  %754 = load double, double* %753, align 8, !tbaa !190
  %755 = fmul double %752, %754
  %756 = getelementptr inbounds double, double* %36, i64 %indvars.iv248
  %757 = load double, double* %756, align 8, !tbaa !190
  %758 = fmul double %749, %757
  %759 = fadd double %755, %758
  %760 = fmul double %742, %759
  %761 = fadd double %745, %760
  %762 = getelementptr inbounds double, double* %25, i64 %indvars.iv248
  store double %761, double* %762, align 8, !tbaa !190
  %indvars.iv.next249 = add nuw nsw i64 %indvars.iv248, 1
  %lftr.wideiv250 = trunc i64 %indvars.iv.next249 to i32
  %exitcond251 = icmp eq i32 %lftr.wideiv250, %743
  br i1 %exitcond251, label %.preheader55, label %744

.preheader54:                                     ; preds = %.lr.ph121
  br i1 false, label %.preheader54..loopexit_crit_edge, label %.lr.ph119.preheader

.preheader54..loopexit_crit_edge:                 ; preds = %.preheader54
  br label %.loopexit

.lr.ph119.preheader:                              ; preds = %.preheader54
  br label %.lr.ph119

.lr.ph121:                                        ; preds = %.lr.ph121, %.lr.ph121.preheader
  %indvars.iv244 = phi i64 [ 0, %.lr.ph121.preheader ], [ %indvars.iv.next245, %.lr.ph121 ]
  %763 = trunc i64 %indvars.iv244 to i32
  %764 = sitofp i32 %763 to double
  %765 = fmul double %11, %764
  %766 = fadd double %9, %765
  %767 = getelementptr inbounds double, double* %25, i64 %indvars.iv244
  %768 = load double, double* %767, align 8, !tbaa !190
  %769 = fsub double -0.000000e+00, %768
  %770 = fdiv double %769, %766
  store double %770, double* %767, align 8, !tbaa !190
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %lftr.wideiv246 = trunc i64 %indvars.iv.next245 to i32
  %exitcond247 = icmp eq i32 %lftr.wideiv246, %.pre-phi
  br i1 %exitcond247, label %.preheader54, label %.lr.ph121

.preheader53:                                     ; preds = %.lr.ph119
  br i1 %714, label %.lr.ph117.preheader, label %.preheader52

.lr.ph117.preheader:                              ; preds = %.preheader53
  br label %.lr.ph117

.lr.ph119:                                        ; preds = %.lr.ph119, %.lr.ph119.preheader
  %indvars.iv240 = phi i64 [ 0, %.lr.ph119.preheader ], [ %indvars.iv.next241, %.lr.ph119 ]
  %771 = getelementptr inbounds double, double* %36, i64 %indvars.iv240
  %772 = load double, double* %771, align 8, !tbaa !190
  %773 = fmul double %13, %772
  %774 = fmul double %13, %773
  %775 = getelementptr inbounds double, double* %33, i64 %indvars.iv240
  store double %774, double* %775, align 8, !tbaa !190
  %indvars.iv.next241 = add nuw nsw i64 %indvars.iv240, 1
  %lftr.wideiv242 = trunc i64 %indvars.iv.next241 to i32
  %exitcond243 = icmp eq i32 %lftr.wideiv242, %.pre-phi
  br i1 %exitcond243, label %.preheader53, label %.lr.ph119

.preheader52.loopexit:                            ; preds = %.lr.ph117
  br label %.preheader52

.preheader52:                                     ; preds = %.preheader52.loopexit, %.preheader53
  br i1 false, label %.preheader52..loopexit_crit_edge, label %.preheader51

.preheader52..loopexit_crit_edge:                 ; preds = %.preheader52
  br label %.loopexit

.lr.ph117:                                        ; preds = %.lr.ph117.preheader, %.lr.ph117
  %indvars.iv236 = phi i64 [ %indvars.iv.next237, %.lr.ph117 ], [ 1, %.lr.ph117.preheader ]
  %776 = getelementptr inbounds double, double* %25, i64 %indvars.iv236
  %777 = load double, double* %776, align 8, !tbaa !190
  %indvars.iv.next237 = add nuw nsw i64 %indvars.iv236, 1
  %778 = getelementptr inbounds double, double* %33, i64 %indvars.iv.next237
  %779 = load double, double* %778, align 8, !tbaa !190
  %780 = add nsw i64 %indvars.iv236, -1
  %781 = getelementptr inbounds double, double* %33, i64 %780
  %782 = load double, double* %781, align 8, !tbaa !190
  %783 = fsub double %779, %782
  %784 = fmul double %783, 5.000000e-01
  %785 = fdiv double %784, %11
  %786 = fadd double %777, %785
  store double %786, double* %776, align 8, !tbaa !190
  %lftr.wideiv238 = trunc i64 %indvars.iv.next237 to i32
  %exitcond239 = icmp eq i32 %lftr.wideiv238, %5
  br i1 %exitcond239, label %.preheader52.loopexit, label %.lr.ph117

.preheader51:                                     ; preds = %.preheader52
  call void @llvm.memset.p0i8.i64(i8* nonnull %34, i8 0, i64 %740, i32 8, i1 false)
  br i1 %741, label %._crit_edge113, label %.lr.ph112

.lr.ph112:                                        ; preds = %.preheader51
  %787 = fmul double %11, 5.000000e-01
  %.pre1 = load double, double* %33, align 8, !tbaa !190
  br label %791

._crit_edge113.loopexit:                          ; preds = %791
  br label %._crit_edge113

._crit_edge113:                                   ; preds = %._crit_edge113.loopexit, %.preheader51
  %788 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 23
  %789 = load i32, i32* %788, align 8, !tbaa !159
  %790 = icmp ne i32 %789, 0
  br i1 %790, label %.loopexit, label %.loopexit.loopexit

; <label>:791                                     ; preds = %791, %.lr.ph112
  %792 = phi double [ %801, %791 ], [ %.pre1, %.lr.ph112 ]
  %indvars.iv228 = phi i64 [ %indvars.iv.next229, %791 ], [ 1, %.lr.ph112 ]
  %793 = add nsw i64 %indvars.iv228, -1
  %794 = getelementptr inbounds double, double* %33, i64 %793
  %795 = getelementptr inbounds double, double* %25, i64 %793
  %796 = load double, double* %795, align 8, !tbaa !190
  %797 = getelementptr inbounds double, double* %25, i64 %indvars.iv228
  %798 = load double, double* %797, align 8, !tbaa !190
  %799 = fadd double %796, %798
  %800 = fmul double %787, %799
  %801 = fadd double %792, %800
  %802 = getelementptr inbounds double, double* %33, i64 %indvars.iv228
  store double %801, double* %802, align 8, !tbaa !190
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %lftr.wideiv230 = trunc i64 %indvars.iv.next229 to i32
  %exitcond231 = icmp eq i32 %lftr.wideiv230, %.pre-phi
  br i1 %exitcond231, label %._crit_edge113.loopexit, label %791

.loopexit.loopexit:                               ; preds = %._crit_edge113
  call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 %740, i32 8, i1 false)
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader52..loopexit_crit_edge, %.preheader54..loopexit_crit_edge, %.preheader55..loopexit_crit_edge, %.loopexit.loopexit, %._crit_edge113, %.preheader57
  %803 = load i32, i32* @idiag, align 4
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %805, label %.thread

; <label>:805                                     ; preds = %.loopexit
  %806 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %807 = bitcast double** %806 to i8**
  %808 = load i8*, i8** %807, align 8
  call void @llvm.memset.p0i8.i64(i8* %808, i8 0, i64 144, i32 8, i1 false)
  %809 = load double*, double** %806, align 8, !tbaa !121
  %810 = getelementptr inbounds double, double* %809, i64 18
  store double 1.000000e+00, double* %810, align 8, !tbaa !190
  %811 = icmp slt i32 %5, 1
  br i1 %811, label %._crit_edge106, label %.lr.ph105.preheader

.lr.ph105.preheader:                              ; preds = %805
  %812 = add i32 %5, 1
  br label %.lr.ph105

._crit_edge106.loopexit:                          ; preds = %.lr.ph105
  br label %._crit_edge106

._crit_edge106:                                   ; preds = %._crit_edge106.loopexit, %805
  %sum_phip00.0.lcssa = phi double [ 0.000000e+00, %805 ], [ %826, %._crit_edge106.loopexit ]
  %813 = sitofp i32 %5 to double
  %814 = fdiv double %sum_phip00.0.lcssa, %813
  %815 = call double @sqrt(double %814) #3
  %816 = fdiv double %815, %13
  %817 = bitcast double* %efield to i8*
  call void @llvm.lifetime.start(i64 8, i8* %817) #3
  store double 0.000000e+00, double* %efield, align 8, !tbaa !190
  %818 = icmp sgt i32 %72, %75
  br i1 %818, label %.preheader, label %.lr.ph101

.lr.ph101:                                        ; preds = %._crit_edge106
  %819 = sub i32 1, %68
  %820 = icmp slt i32 %3, 1
  %821 = sext i32 %72 to i64
  %822 = sext i32 %75 to i64
  br label %828

.lr.ph105:                                        ; preds = %.lr.ph105, %.lr.ph105.preheader
  %indvars.iv217 = phi i64 [ 1, %.lr.ph105.preheader ], [ %indvars.iv.next218, %.lr.ph105 ]
  %sum_phip00.0102 = phi double [ 0.000000e+00, %.lr.ph105.preheader ], [ %826, %.lr.ph105 ]
  %823 = getelementptr inbounds double, double* %25, i64 %indvars.iv217
  %824 = load double, double* %823, align 8, !tbaa !190
  %825 = fmul double %824, %824
  %826 = fadd double %sum_phip00.0102, %825
  %indvars.iv.next218 = add nuw nsw i64 %indvars.iv217, 1
  %lftr.wideiv219 = trunc i64 %indvars.iv.next218 to i32
  %exitcond220 = icmp eq i32 %lftr.wideiv219, %812
  br i1 %exitcond220, label %._crit_edge106.loopexit, label %.lr.ph105

.preheader.loopexit:                              ; preds = %._crit_edge98
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %._crit_edge106
  br i1 %685, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader
  %827 = add i32 %5, 1
  br label %.lr.ph

; <label>:828                                     ; preds = %._crit_edge98, %.lr.ph101
  %829 = phi double [ %839, %._crit_edge98 ], [ 0.000000e+00, %.lr.ph101 ]
  %indvars.iv215 = phi i64 [ %indvars.iv.next216, %._crit_edge98 ], [ %821, %.lr.ph101 ]
  %830 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv215
  %831 = load i32, i32* %830, align 4, !tbaa !1
  %832 = add i32 %819, %831
  %833 = icmp slt i32 %819, %832
  br i1 %833, label %.preheader48.lr.ph, label %._crit_edge98

.preheader48.lr.ph:                               ; preds = %828
  %834 = getelementptr inbounds i32, i32* %17, i64 %indvars.iv215
  br label %.preheader48

.preheader48:                                     ; preds = %._crit_edge95, %.preheader48.lr.ph
  %835 = phi double [ %829, %.preheader48.lr.ph ], [ %841, %._crit_edge95 ]
  %j42.096 = phi i32 [ %819, %.preheader48.lr.ph ], [ %842, %._crit_edge95 ]
  br i1 %820, label %._crit_edge95, label %.lr.ph94

.lr.ph94:                                         ; preds = %.preheader48
  %836 = load i32, i32* %834, align 4
  %837 = add nsw i32 %836, %j42.096
  %838 = mul nsw i32 %837, %115
  br label %844

._crit_edge98.loopexit:                           ; preds = %._crit_edge95
  br label %._crit_edge98

._crit_edge98:                                    ; preds = %._crit_edge98.loopexit, %828
  %839 = phi double [ %829, %828 ], [ %841, %._crit_edge98.loopexit ]
  %840 = icmp slt i64 %indvars.iv215, %822
  %indvars.iv.next216 = add nsw i64 %indvars.iv215, 1
  br i1 %840, label %828, label %.preheader.loopexit

._crit_edge95.loopexit:                           ; preds = %844
  br label %._crit_edge95

._crit_edge95:                                    ; preds = %._crit_edge95.loopexit, %.preheader48
  %841 = phi double [ %835, %.preheader48 ], [ %851, %._crit_edge95.loopexit ]
  %842 = add nsw i32 %j42.096, 1
  %843 = icmp slt i32 %842, %832
  br i1 %843, label %.preheader48, label %._crit_edge98.loopexit

; <label>:844                                     ; preds = %844, %.lr.ph94
  %845 = phi double [ %835, %.lr.ph94 ], [ %851, %844 ]
  %k43.093 = phi i32 [ 1, %.lr.ph94 ], [ %852, %844 ]
  %846 = add nsw i32 %838, %k43.093
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds double, double* %23, i64 %847
  %849 = load double, double* %848, align 8, !tbaa !190
  %850 = fmul double %849, %849
  %851 = fadd double %845, %850
  store double %851, double* %efield, align 8, !tbaa !190
  %852 = add nuw nsw i32 %k43.093, 1
  %exitcond214 = icmp eq i32 %k43.093, %3
  br i1 %exitcond214, label %._crit_edge95.loopexit, label %844

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %sum_mtheta.0.lcssa = phi i32 [ 0, %.preheader ], [ %870, %._crit_edge.loopexit ]
  %853 = bitcast double* %tmp1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %853) #3
  store double 0.000000e+00, double* %tmp1, align 8, !tbaa !190
  %854 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 13
  %855 = load i32, i32* %854, align 4, !tbaa !280
  %856 = call i32 @MPI_Allreduce(i8* %817, i8* %853, i32 1, i32 1275070475, i32 1476395011, i32 %855) #3
  %857 = load double, double* %tmp1, align 8, !tbaa !190
  %858 = fmul double %13, %13
  %859 = fmul double %858, %858
  %860 = mul nsw i32 %sum_mtheta.0.lcssa, %3
  %861 = sitofp i32 %860 to double
  %862 = fmul double %859, %861
  %863 = fdiv double %857, %862
  %864 = load double*, double** %806, align 8, !tbaa !121
  %865 = getelementptr inbounds double, double* %864, i64 10
  store double %863, double* %865, align 8, !tbaa !190
  %866 = load double*, double** %806, align 8, !tbaa !121
  %867 = getelementptr inbounds double, double* %866, i64 11
  store double %816, double* %867, align 8, !tbaa !190
  call void @llvm.lifetime.end(i64 8, i8* %853) #3
  call void @llvm.lifetime.end(i64 8, i8* %817) #3
  br label %.thread

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %sum_mtheta.091 = phi i32 [ 0, %.lr.ph.preheader ], [ %870, %.lr.ph ]
  %868 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv
  %869 = load i32, i32* %868, align 4, !tbaa !1
  %870 = add nsw i32 %869, %sum_mtheta.091
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %827
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

.thread:                                          ; preds = %._crit_edge, %.loopexit, %.loopexit61, %.preheader60
  call fastcc void @_mm_free.144(i8* nonnull %112)
  call void @llvm.lifetime.end(i64 20, i8* %1) #3
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc.134(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #8

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free.144(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @pushi(%struct.gtc_bench_data_t* readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %2 = load i32, i32* %1, align 4, !tbaa !197
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4, !tbaa !152
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !192
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %8 = load double, double* %7, align 8, !tbaa !212
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 24
  %10 = load i32, i32* %9, align 4, !tbaa !277
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %12 = load double, double* %11, align 8, !tbaa !164
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %14 = load double, double* %13, align 8, !tbaa !163
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 50
  %16 = load double, double* %15, align 8, !tbaa !162
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %18 = load double, double* %17, align 8, !tbaa !171
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  %20 = load double, double* %19, align 8, !tbaa !170
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %22 = load double, double* %21, align 8, !tbaa !208
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 33
  %24 = load i32, i32* %23, align 8, !tbaa !182
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 46
  %26 = load double, double* %25, align 8, !tbaa !157
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  %28 = load double, double* %27, align 8, !tbaa !203
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 51
  %30 = load double, double* %29, align 8, !tbaa !165
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 52
  %32 = load double, double* %31, align 8, !tbaa !166
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 53
  %34 = load double, double* %33, align 8, !tbaa !167
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 71
  %36 = load double, double* %35, align 8, !tbaa !168
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 72
  %38 = load double, double* %37, align 8, !tbaa !169
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 47
  %40 = load double, double* %39, align 8, !tbaa !158
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 56
  %42 = load double, double* %41, align 8, !tbaa !172
  %43 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 58
  %44 = load double, double* %43, align 8, !tbaa !175
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 59
  %46 = load double, double* %45, align 8, !tbaa !281
  %47 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 60
  %48 = load double, double* %47, align 8, !tbaa !282
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 61
  %50 = load double, double* %49, align 8, !tbaa !283
  %51 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %52 = load double, double* %51, align 8, !tbaa !196
  %53 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 84
  %54 = load double, double* %53, align 8, !tbaa !204
  %55 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 14
  %56 = load i32, i32* %55, align 4, !tbaa !155
  %57 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %58 = load double*, double** %57, align 8, !tbaa !85
  %59 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %60 = load double*, double** %59, align 8, !tbaa !86
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %62 = load double*, double** %61, align 8, !tbaa !87
  %63 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %64 = load double*, double** %63, align 8, !tbaa !88
  %65 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %66 = load double*, double** %65, align 8, !tbaa !89
  %67 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %68 = load double*, double** %67, align 8, !tbaa !90
  %69 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %70 = load double*, double** %69, align 8, !tbaa !91
  %71 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %72 = load double*, double** %71, align 8, !tbaa !92
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %74 = load double*, double** %73, align 8, !tbaa !93
  %75 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %76 = load double*, double** %75, align 8, !tbaa !94
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %78 = load double*, double** %77, align 8, !tbaa !95
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %80 = load double*, double** %79, align 8, !tbaa !96
  %81 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 1
  %82 = load i32*, i32** %81, align 8, !tbaa !102
  %83 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 2
  %84 = load i32*, i32** %83, align 8, !tbaa !103
  %85 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 5
  %86 = load double*, double** %85, align 8, !tbaa !106
  %87 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 6
  %88 = load double*, double** %87, align 8, !tbaa !107
  %89 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 4
  %90 = load double*, double** %89, align 8, !tbaa !105
  %91 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 29
  %92 = load double*, double** %91, align 8, !tbaa !42
  %93 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 18
  %94 = load double*, double** %93, align 8, !tbaa !40
  %95 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 17
  %96 = load double*, double** %95, align 8, !tbaa !41
  %97 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 7
  %98 = load double*, double** %97, align 8, !tbaa !39
  %99 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 21
  %100 = load double*, double** %99, align 8, !tbaa !54
  %101 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 22
  %102 = load double*, double** %101, align 8, !tbaa !55
  %103 = bitcast double* %102 to i8*
  %104 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %105 = load i32, i32* %104, align 8, !tbaa !242
  %106 = fdiv double 1.000000e+00, %8
  %107 = fmul double %106, 5.000000e-01
  %108 = add i32 %4, 1
  %109 = mul nsw i32 %24, 6
  %110 = add nsw i32 %109, %108
  %111 = sext i32 %110 to i64
  %112 = shl nsw i64 %111, 3
  %113 = tail call fastcc i8* @_mm_malloc.147(i64 %112)
  %114 = bitcast i8* %113 to double*
  %115 = sext i32 %108 to i64
  %116 = getelementptr inbounds double, double* %114, i64 %115
  %117 = add nsw i32 %24, %108
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %114, i64 %118
  %120 = shl nsw i32 %24, 1
  %121 = add nsw i32 %120, %108
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds double, double* %114, i64 %122
  %124 = mul nsw i32 %24, 3
  %125 = add nsw i32 %124, %108
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds double, double* %114, i64 %126
  %128 = shl nsw i32 %24, 2
  %129 = add nsw i32 %128, %108
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double, double* %114, i64 %130
  %132 = mul i32 %24, 5
  %133 = add nsw i32 %132, %108
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double, double* %114, i64 %134
  %136 = icmp eq i8* %113, null
  br i1 %136, label %137, label %138

; <label>:137                                     ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.148, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.149, i64 0, i64 0), i32 188, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.pushi, i64 0, i64 0)) #15
  unreachable

; <label>:138                                     ; preds = %0
  %139 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 4
  %140 = load double*, double** %139, align 8, !tbaa !123
  %141 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 3
  %142 = load double*, double** %141, align 8, !tbaa !122
  %143 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 7
  %144 = load double*, double** %143, align 8, !tbaa !126
  %145 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 20
  %146 = load double*, double** %145, align 8, !tbaa !53
  %147 = bitcast double* %146 to i8*
  %148 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 10
  %149 = load double*, double** %148, align 8, !tbaa !61
  %150 = icmp sgt i32 %24, 0
  br i1 %150, label %.lr.ph118.preheader, label %.preheader46

.lr.ph118.preheader:                              ; preds = %138
  br label %.lr.ph118

.preheader46.loopexit:                            ; preds = %.lr.ph118
  br label %.preheader46

.preheader46:                                     ; preds = %.preheader46.loopexit, %138
  %151 = icmp slt i32 %4, 0
  br i1 %151, label %._crit_edge115, label %.lr.ph114.preheader

.lr.ph114.preheader:                              ; preds = %.preheader46
  br label %.lr.ph114

.lr.ph118:                                        ; preds = %.lr.ph118.preheader, %.lr.ph118
  %indvars.iv181 = phi i64 [ %indvars.iv.next182, %.lr.ph118 ], [ 0, %.lr.ph118.preheader ]
  %152 = getelementptr inbounds double, double* %140, i64 %indvars.iv181
  store double 0.000000e+00, double* %152, align 8, !tbaa !190
  %153 = getelementptr inbounds double, double* %142, i64 %indvars.iv181
  store double 0.000000e+00, double* %153, align 8, !tbaa !190
  %154 = getelementptr inbounds double, double* %116, i64 %indvars.iv181
  store double 0.000000e+00, double* %154, align 8, !tbaa !190
  %155 = getelementptr inbounds double, double* %123, i64 %indvars.iv181
  store double 0.000000e+00, double* %155, align 8, !tbaa !190
  %156 = getelementptr inbounds double, double* %119, i64 %indvars.iv181
  store double 0.000000e+00, double* %156, align 8, !tbaa !190
  %157 = getelementptr inbounds double, double* %127, i64 %indvars.iv181
  store double 0.000000e+00, double* %157, align 8, !tbaa !190
  %158 = getelementptr inbounds double, double* %131, i64 %indvars.iv181
  store double 0.000000e+00, double* %158, align 8, !tbaa !190
  %159 = getelementptr inbounds double, double* %135, i64 %indvars.iv181
  store double 0.000000e+00, double* %159, align 8, !tbaa !190
  %indvars.iv.next182 = add nuw nsw i64 %indvars.iv181, 1
  %lftr.wideiv183 = trunc i64 %indvars.iv.next182 to i32
  %exitcond184 = icmp eq i32 %lftr.wideiv183, %24
  br i1 %exitcond184, label %.preheader46.loopexit, label %.lr.ph118

.lr.ph114:                                        ; preds = %.lr.ph114, %.lr.ph114.preheader
  %indvars.iv177 = phi i64 [ 0, %.lr.ph114.preheader ], [ %indvars.iv.next178, %.lr.ph114 ]
  %160 = getelementptr inbounds double, double* %146, i64 %indvars.iv177
  store double 0.000000e+00, double* %160, align 8, !tbaa !190
  %161 = getelementptr inbounds double, double* %114, i64 %indvars.iv177
  store double 0.000000e+00, double* %161, align 8, !tbaa !190
  %indvars.iv.next178 = add nuw nsw i64 %indvars.iv177, 1
  %lftr.wideiv179 = trunc i64 %indvars.iv.next178 to i32
  %exitcond180 = icmp eq i32 %lftr.wideiv179, %108
  br i1 %exitcond180, label %._crit_edge115.loopexit, label %.lr.ph114

._crit_edge115.loopexit:                          ; preds = %.lr.ph114
  br label %._crit_edge115

._crit_edge115:                                   ; preds = %._crit_edge115.loopexit, %.preheader46
  %162 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %163 = load double*, double** %162, align 8, !tbaa !121
  %164 = icmp eq i32 %10, 0
  %. = select i1 %164, double 0.000000e+00, double 1.000000e+00
  %165 = fmul double %12, 5.000000e-01
  %166 = fmul double %12, %165
  %167 = fmul double %14, 5.000000e-01
  %168 = fmul double %14, %167
  %169 = fdiv double %18, %20
  %170 = fdiv double 1.000000e+00, %18
  %171 = tail call double @fabs(double %18) #16
  %172 = fmul double %22, %171
  %173 = fdiv double %172, %20
  %174 = sitofp i32 %24 to double
  %175 = fsub double %12, %14
  %176 = fdiv double %174, %175
  %177 = fmul double %20, %173
  %178 = fmul double %173, %177
  %179 = fdiv double 1.000000e+00, %178
  br i1 %151, label %._crit_edge112, label %.lr.ph111.preheader

.lr.ph111.preheader:                              ; preds = %._crit_edge115
  br label %.lr.ph111

.lr.ph111:                                        ; preds = %.lr.ph111, %.lr.ph111.preheader
  %indvars.iv173 = phi i64 [ 0, %.lr.ph111.preheader ], [ %indvars.iv.next174, %.lr.ph111 ]
  %180 = getelementptr inbounds double, double* %94, i64 %indvars.iv173
  store double 1.000000e+00, double* %180, align 8, !tbaa !190
  %181 = getelementptr inbounds double, double* %96, i64 %indvars.iv173
  store double 0.000000e+00, double* %181, align 8, !tbaa !190
  %182 = load double, double* %180, align 8, !tbaa !190
  %183 = getelementptr inbounds double, double* %98, i64 %indvars.iv173
  %184 = load double, double* %183, align 8, !tbaa !190
  %185 = fmul double %182, %184
  %186 = fmul double %20, %185
  %187 = fmul double %173, %186
  %188 = fmul double %173, %187
  %189 = fdiv double 1.000000e+00, %188
  store double %189, double* %180, align 8, !tbaa !190
  %indvars.iv.next174 = add nuw nsw i64 %indvars.iv173, 1
  %lftr.wideiv175 = trunc i64 %indvars.iv.next174 to i32
  %exitcond176 = icmp eq i32 %lftr.wideiv175, %108
  br i1 %exitcond176, label %._crit_edge112.loopexit, label %.lr.ph111

._crit_edge112.loopexit:                          ; preds = %.lr.ph111
  br label %._crit_edge112

._crit_edge112:                                   ; preds = %._crit_edge112.loopexit, %._crit_edge115
  %190 = fdiv double 1.000000e+00, %16
  %191 = load i32, i32* @irk, align 4, !tbaa !1
  %192 = icmp eq i32 %191, 1
  %193 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 55
  %194 = load double, double* %193, align 8, !tbaa !160
  br i1 %192, label %195, label %231

; <label>:195                                     ; preds = %._crit_edge112
  %196 = fmul double %194, 5.000000e-01
  br i1 %150, label %.preheader42.loopexit, label %.preheader42

.preheader42.loopexit:                            ; preds = %195
  %197 = add i32 %24, -1
  %198 = zext i32 %197 to i64
  %199 = shl nuw nsw i64 %198, 3
  %200 = add nuw nsw i64 %199, 8
  call void @llvm.memset.p0i8.i64(i8* %103, i8 0, i64 %200, i32 8, i1 false)
  br label %.preheader42

.preheader42:                                     ; preds = %.preheader42.loopexit, %195
  %201 = icmp sgt i32 %6, 0
  br i1 %201, label %.lr.ph103.preheader, label %.loopexit43

.lr.ph103.preheader:                              ; preds = %.preheader42
  br label %.lr.ph103

.lr.ph103:                                        ; preds = %.lr.ph103.preheader, %230
  %indvars.iv161 = phi i64 [ %indvars.iv.next162, %230 ], [ 0, %.lr.ph103.preheader ]
  %202 = getelementptr inbounds double, double* %62, i64 %indvars.iv161
  %203 = load double, double* %202, align 8, !tbaa !190
  %204 = fcmp oeq double %203, 1.000000e+08
  br i1 %204, label %230, label %205

; <label>:205                                     ; preds = %.lr.ph103
  %206 = getelementptr inbounds double, double* %58, i64 %indvars.iv161
  %207 = bitcast double* %206 to i64*
  %208 = load i64, i64* %207, align 8, !tbaa !190
  %209 = getelementptr inbounds double, double* %70, i64 %indvars.iv161
  %210 = bitcast double* %209 to i64*
  store i64 %208, i64* %210, align 8, !tbaa !190
  %211 = getelementptr inbounds double, double* %60, i64 %indvars.iv161
  %212 = bitcast double* %211 to i64*
  %213 = load i64, i64* %212, align 8, !tbaa !190
  %214 = getelementptr inbounds double, double* %72, i64 %indvars.iv161
  %215 = bitcast double* %214 to i64*
  store i64 %213, i64* %215, align 8, !tbaa !190
  %216 = bitcast double* %202 to i64*
  %217 = load i64, i64* %216, align 8, !tbaa !190
  %218 = getelementptr inbounds double, double* %74, i64 %indvars.iv161
  %219 = bitcast double* %218 to i64*
  store i64 %217, i64* %219, align 8, !tbaa !190
  %220 = getelementptr inbounds double, double* %64, i64 %indvars.iv161
  %221 = bitcast double* %220 to i64*
  %222 = load i64, i64* %221, align 8, !tbaa !190
  %223 = getelementptr inbounds double, double* %76, i64 %indvars.iv161
  %224 = bitcast double* %223 to i64*
  store i64 %222, i64* %224, align 8, !tbaa !190
  %225 = getelementptr inbounds double, double* %66, i64 %indvars.iv161
  %226 = bitcast double* %225 to i64*
  %227 = load i64, i64* %226, align 8, !tbaa !190
  %228 = getelementptr inbounds double, double* %78, i64 %indvars.iv161
  %229 = bitcast double* %228 to i64*
  store i64 %227, i64* %229, align 8, !tbaa !190
  br label %230

; <label>:230                                     ; preds = %205, %.lr.ph103
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %lftr.wideiv163 = trunc i64 %indvars.iv.next162 to i32
  %exitcond164 = icmp eq i32 %lftr.wideiv163, %6
  br i1 %exitcond164, label %.loopexit43.loopexit, label %.lr.ph103

; <label>:231                                     ; preds = %._crit_edge112
  %232 = fcmp olt double %26, 5.000000e-01
  br i1 %232, label %233, label %.preheader44

.preheader44:                                     ; preds = %231
  br i1 %150, label %.lr.ph108.preheader, label %.loopexit43

.lr.ph108.preheader:                              ; preds = %.preheader44
  br label %.lr.ph108

; <label>:233                                     ; preds = %231
  %234 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %235 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2.150, i64 0, i64 0), i64 60, i64 1, %struct._IO_FILE* %234) #13
  tail call void @exit(i32 1) #15
  unreachable

.lr.ph108:                                        ; preds = %.lr.ph108.preheader, %.lr.ph108
  %indvars.iv169 = phi i64 [ %indvars.iv.next170, %.lr.ph108 ], [ 0, %.lr.ph108.preheader ]
  %236 = getelementptr inbounds double, double* %100, i64 %indvars.iv169
  %237 = bitcast double* %236 to i64*
  %238 = load i64, i64* %237, align 8, !tbaa !190
  %239 = getelementptr inbounds double, double* %102, i64 %indvars.iv169
  %240 = bitcast double* %239 to i64*
  store i64 %238, i64* %240, align 8, !tbaa !190
  %indvars.iv.next170 = add nuw nsw i64 %indvars.iv169, 1
  %lftr.wideiv171 = trunc i64 %indvars.iv.next170 to i32
  %exitcond172 = icmp eq i32 %lftr.wideiv171, %24
  br i1 %exitcond172, label %.loopexit43.loopexit1, label %.lr.ph108

.loopexit43.loopexit:                             ; preds = %230
  br label %.loopexit43

.loopexit43.loopexit1:                            ; preds = %.lr.ph108
  br label %.loopexit43

.loopexit43:                                      ; preds = %.loopexit43.loopexit1, %.loopexit43.loopexit, %.preheader44, %.preheader42
  %dtime.0 = phi double [ %196, %.preheader42 ], [ %194, %.preheader44 ], [ %196, %.loopexit43.loopexit ], [ %194, %.loopexit43.loopexit1 ]
  %241 = shl nsw i64 %134, 3
  %242 = tail call fastcc i8* @_mm_malloc.147(i64 %241)
  %243 = bitcast i8* %242 to double*
  %244 = sext i32 %24 to i64
  %245 = getelementptr inbounds double, double* %243, i64 %244
  %246 = sext i32 %120 to i64
  %247 = getelementptr inbounds double, double* %243, i64 %246
  %248 = sext i32 %124 to i64
  %249 = getelementptr inbounds double, double* %243, i64 %248
  %250 = sext i32 %128 to i64
  %251 = getelementptr inbounds double, double* %243, i64 %250
  %252 = sext i32 %132 to i64
  %253 = getelementptr inbounds double, double* %243, i64 %252
  %254 = icmp eq i8* %242, null
  br i1 %254, label %255, label %.preheader41

.preheader41:                                     ; preds = %.loopexit43
  br i1 %150, label %.lr.ph101.preheader, label %.preheader40

.lr.ph101.preheader:                              ; preds = %.preheader41
  br label %.lr.ph101

; <label>:255                                     ; preds = %.loopexit43
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.151, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.149, i64 0, i64 0), i32 323, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.pushi, i64 0, i64 0)) #15
  unreachable

.preheader40.loopexit:                            ; preds = %.lr.ph101
  br label %.preheader40

.preheader40:                                     ; preds = %.preheader40.loopexit, %.preheader41
  br i1 %151, label %.preheader39, label %.preheader39.loopexit

.lr.ph101:                                        ; preds = %.lr.ph101.preheader, %.lr.ph101
  %indvars.iv157 = phi i64 [ %indvars.iv.next158, %.lr.ph101 ], [ 0, %.lr.ph101.preheader ]
  %256 = getelementptr inbounds double, double* %243, i64 %indvars.iv157
  store double 0.000000e+00, double* %256, align 8, !tbaa !190
  %257 = getelementptr inbounds double, double* %245, i64 %indvars.iv157
  store double 0.000000e+00, double* %257, align 8, !tbaa !190
  %258 = getelementptr inbounds double, double* %247, i64 %indvars.iv157
  store double 0.000000e+00, double* %258, align 8, !tbaa !190
  %259 = getelementptr inbounds double, double* %249, i64 %indvars.iv157
  store double 0.000000e+00, double* %259, align 8, !tbaa !190
  %260 = getelementptr inbounds double, double* %251, i64 %indvars.iv157
  store double 0.000000e+00, double* %260, align 8, !tbaa !190
  %indvars.iv.next158 = add nuw nsw i64 %indvars.iv157, 1
  %lftr.wideiv159 = trunc i64 %indvars.iv.next158 to i32
  %exitcond160 = icmp eq i32 %lftr.wideiv159, %24
  br i1 %exitcond160, label %.preheader40.loopexit, label %.lr.ph101

.preheader39.loopexit:                            ; preds = %.preheader40
  %261 = shl nsw i64 %252, 3
  %scevgep = getelementptr i8, i8* %242, i64 %261
  %262 = zext i32 %4 to i64
  %263 = shl nuw nsw i64 %262, 3
  %264 = add nuw nsw i64 %263, 8
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 0, i64 %264, i32 8, i1 false)
  br label %.preheader39

.preheader39:                                     ; preds = %.preheader39.loopexit, %.preheader40
  %265 = icmp sgt i32 %6, 0
  br i1 %265, label %.lr.ph87, label %._crit_edge88

.lr.ph87:                                         ; preds = %.preheader39
  %266 = icmp eq i32 %2, 1
  %267 = add nsw i32 %4, -1
  %268 = add nsw i32 %24, -1
  %269 = fmul double %20, 5.000000e-01
  %270 = fsub double 1.000000e+00, %.
  %271 = fmul double %166, 1.000000e-08
  %272 = fmul double %8, 2.000000e+00
  %273 = fmul double %20, 1.500000e+00
  %274 = fmul double %273, %173
  %275 = fmul double %173, %274
  %276 = fcmp ogt double %26, 5.000000e-01
  %277 = fcmp olt double %40, 5.000000e-01
  %or.cond = and i1 %276, %277
  %278 = sext i32 %6 to i64
  br label %279

; <label>:279                                     ; preds = %780, %.lr.ph87
  %indvars.iv151 = phi i64 [ 0, %.lr.ph87 ], [ %indvars.iv.next152, %780 ]
  %efluxi.084 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %efluxi.2, %780 ]
  %pfluxi.083 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %pfluxi.2, %780 ]
  %dflowi.082 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %dflowi.2, %780 ]
  %entropyi.081 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %entropyi.2, %780 ]
  %sum_of_weights.080 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %sum_of_weights.2, %780 ]
  %sum_of_f0.079 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %sum_of_f0.2, %780 ]
  %max_of_f0.078 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %max_of_f0.2, %780 ]
  %min_of_f0.077 = phi double [ 1.000000e+00, %.lr.ph87 ], [ %min_of_f0.2, %780 ]
  %particles_energy.sroa.6.076 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %particles_energy.sroa.6.2, %780 ]
  %particles_energy.sroa.0.075 = phi double [ 0.000000e+00, %.lr.ph87 ], [ %particles_energy.sroa.0.2, %780 ]
  %280 = getelementptr inbounds double, double* %62, i64 %indvars.iv151
  %281 = load double, double* %280, align 8, !tbaa !190
  %282 = fcmp oeq double %281, 1.000000e+08
  br i1 %282, label %780, label %283

; <label>:283                                     ; preds = %279
  %284 = getelementptr inbounds double, double* %58, i64 %indvars.iv151
  %285 = load double, double* %284, align 8, !tbaa !190
  %286 = getelementptr inbounds double, double* %60, i64 %indvars.iv151
  %287 = load double, double* %286, align 8, !tbaa !190
  %288 = getelementptr inbounds double, double* %64, i64 %indvars.iv151
  %289 = load double, double* %288, align 8, !tbaa !190
  %290 = getelementptr inbounds double, double* %66, i64 %indvars.iv151
  %291 = load double, double* %290, align 8, !tbaa !190
  %292 = getelementptr inbounds double, double* %68, i64 %indvars.iv151
  %293 = load double, double* %292, align 8, !tbaa !190
  br i1 %266, label %295, label %294

; <label>:294                                     ; preds = %283
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.152, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.149, i64 0, i64 0), i32 364, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.pushi, i64 0, i64 0)) #15
  unreachable

; <label>:295                                     ; preds = %283
  %296 = fsub double %281, %52
  %297 = fmul double %54, %296
  %298 = fsub double 1.000000e+00, %297
  %299 = trunc i64 %indvars.iv151 to i32
  %300 = shl i32 %299, 2
  %301 = sext i32 %300 to i64
  br label %302

; <label>:302                                     ; preds = %302, %295
  %indvars.iv148 = phi i64 [ 0, %295 ], [ %indvars.iv.next149, %302 ]
  %e1.074 = phi double [ 0.000000e+00, %295 ], [ %441, %302 ]
  %e2.073 = phi double [ 0.000000e+00, %295 ], [ %461, %302 ]
  %e3.072 = phi double [ 0.000000e+00, %295 ], [ %481, %302 ]
  %303 = add nsw i64 %indvars.iv148, %301
  %304 = getelementptr inbounds i32, i32* %82, i64 %303
  %305 = load i32, i32* %304, align 4, !tbaa !1
  %306 = sub nsw i32 %305, %105
  %307 = getelementptr inbounds i32, i32* %84, i64 %303
  %308 = load i32, i32* %307, align 4, !tbaa !1
  %309 = sub nsw i32 %308, %105
  %310 = getelementptr inbounds double, double* %90, i64 %303
  %311 = load double, double* %310, align 8, !tbaa !190
  %312 = fsub double 1.000000e+00, %311
  %313 = getelementptr inbounds double, double* %86, i64 %303
  %314 = load double, double* %313, align 8, !tbaa !190
  %315 = fsub double 1.000000e+00, %314
  %316 = getelementptr inbounds double, double* %88, i64 %303
  %317 = load double, double* %316, align 8, !tbaa !190
  %318 = fsub double 1.000000e+00, %317
  %319 = fsub double 1.000000e+00, %312
  %320 = fsub double 1.000000e+00, %315
  %321 = fsub double 1.000000e+00, %318
  %322 = fmul double %312, %315
  %323 = fmul double %312, %320
  %324 = fmul double %319, %318
  %325 = fmul double %319, %321
  %326 = mul nsw i32 %306, 6
  %327 = mul nsw i32 %309, 6
  %328 = sext i32 %326 to i64
  %329 = getelementptr inbounds double, double* %92, i64 %328
  %330 = load double, double* %329, align 8, !tbaa !190
  %331 = or i32 %326, 1
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds double, double* %92, i64 %332
  %334 = load double, double* %333, align 8, !tbaa !190
  %335 = add nsw i32 %326, 2
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds double, double* %92, i64 %336
  %338 = load double, double* %337, align 8, !tbaa !190
  %339 = add nsw i32 %326, 3
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds double, double* %92, i64 %340
  %342 = load double, double* %341, align 8, !tbaa !190
  %343 = add nsw i32 %326, 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds double, double* %92, i64 %344
  %346 = load double, double* %345, align 8, !tbaa !190
  %347 = add nsw i32 %326, 5
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds double, double* %92, i64 %348
  %350 = load double, double* %349, align 8, !tbaa !190
  %351 = add nsw i32 %326, 6
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds double, double* %92, i64 %352
  %354 = load double, double* %353, align 8, !tbaa !190
  %355 = add nsw i32 %326, 7
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds double, double* %92, i64 %356
  %358 = load double, double* %357, align 8, !tbaa !190
  %359 = add nsw i32 %326, 8
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds double, double* %92, i64 %360
  %362 = load double, double* %361, align 8, !tbaa !190
  %363 = add nsw i32 %326, 9
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds double, double* %92, i64 %364
  %366 = load double, double* %365, align 8, !tbaa !190
  %367 = add nsw i32 %326, 10
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds double, double* %92, i64 %368
  %370 = load double, double* %369, align 8, !tbaa !190
  %371 = add nsw i32 %326, 11
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, double* %92, i64 %372
  %374 = load double, double* %373, align 8, !tbaa !190
  %375 = sext i32 %327 to i64
  %376 = getelementptr inbounds double, double* %92, i64 %375
  %377 = load double, double* %376, align 8, !tbaa !190
  %378 = or i32 %327, 1
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds double, double* %92, i64 %379
  %381 = load double, double* %380, align 8, !tbaa !190
  %382 = add nsw i32 %327, 2
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds double, double* %92, i64 %383
  %385 = load double, double* %384, align 8, !tbaa !190
  %386 = add nsw i32 %327, 3
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds double, double* %92, i64 %387
  %389 = load double, double* %388, align 8, !tbaa !190
  %390 = add nsw i32 %327, 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds double, double* %92, i64 %391
  %393 = load double, double* %392, align 8, !tbaa !190
  %394 = add nsw i32 %327, 5
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds double, double* %92, i64 %395
  %397 = load double, double* %396, align 8, !tbaa !190
  %398 = add nsw i32 %327, 6
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds double, double* %92, i64 %399
  %401 = load double, double* %400, align 8, !tbaa !190
  %402 = add nsw i32 %327, 7
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds double, double* %92, i64 %403
  %405 = load double, double* %404, align 8, !tbaa !190
  %406 = add nsw i32 %327, 8
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds double, double* %92, i64 %407
  %409 = load double, double* %408, align 8, !tbaa !190
  %410 = add nsw i32 %327, 9
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %92, i64 %411
  %413 = load double, double* %412, align 8, !tbaa !190
  %414 = add nsw i32 %327, 10
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds double, double* %92, i64 %415
  %417 = load double, double* %416, align 8, !tbaa !190
  %418 = add nsw i32 %327, 11
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds double, double* %92, i64 %419
  %421 = load double, double* %420, align 8, !tbaa !190
  %422 = fmul double %298, %330
  %423 = fmul double %297, %342
  %424 = fadd double %422, %423
  %425 = fmul double %322, %424
  %426 = fadd double %e1.074, %425
  %427 = fmul double %298, %354
  %428 = fmul double %297, %366
  %429 = fadd double %427, %428
  %430 = fmul double %323, %429
  %431 = fadd double %426, %430
  %432 = fmul double %298, %377
  %433 = fmul double %297, %389
  %434 = fadd double %432, %433
  %435 = fmul double %324, %434
  %436 = fadd double %431, %435
  %437 = fmul double %298, %401
  %438 = fmul double %297, %413
  %439 = fadd double %437, %438
  %440 = fmul double %325, %439
  %441 = fadd double %436, %440
  %442 = fmul double %298, %334
  %443 = fmul double %297, %346
  %444 = fadd double %442, %443
  %445 = fmul double %322, %444
  %446 = fadd double %e2.073, %445
  %447 = fmul double %298, %358
  %448 = fmul double %297, %370
  %449 = fadd double %447, %448
  %450 = fmul double %323, %449
  %451 = fadd double %446, %450
  %452 = fmul double %298, %381
  %453 = fmul double %297, %393
  %454 = fadd double %452, %453
  %455 = fmul double %324, %454
  %456 = fadd double %451, %455
  %457 = fmul double %298, %405
  %458 = fmul double %297, %417
  %459 = fadd double %457, %458
  %460 = fmul double %325, %459
  %461 = fadd double %456, %460
  %462 = fmul double %298, %338
  %463 = fmul double %297, %350
  %464 = fadd double %462, %463
  %465 = fmul double %322, %464
  %466 = fadd double %e3.072, %465
  %467 = fmul double %298, %362
  %468 = fmul double %297, %374
  %469 = fadd double %467, %468
  %470 = fmul double %323, %469
  %471 = fadd double %466, %470
  %472 = fmul double %298, %385
  %473 = fmul double %297, %397
  %474 = fadd double %472, %473
  %475 = fmul double %324, %474
  %476 = fadd double %471, %475
  %477 = fmul double %298, %409
  %478 = fmul double %297, %421
  %479 = fadd double %477, %478
  %480 = fmul double %325, %479
  %481 = fadd double %476, %480
  %indvars.iv.next149 = add nuw nsw i64 %indvars.iv148, 1
  %exitcond150 = icmp eq i64 %indvars.iv.next149, 4
  br i1 %exitcond150, label %482, label %302

; <label>:482                                     ; preds = %302
  %483 = fmul double %441, 2.500000e-01
  %484 = fmul double %461, 2.500000e-01
  %485 = fmul double %481, 2.500000e-01
  %486 = load i32, i32* @irk, align 4, !tbaa !1
  %487 = icmp eq i32 %486, 1
  br i1 %487, label %499, label %488

; <label>:488                                     ; preds = %482
  %489 = getelementptr inbounds double, double* %70, i64 %indvars.iv151
  %490 = load double, double* %489, align 8, !tbaa !190
  %491 = getelementptr inbounds double, double* %72, i64 %indvars.iv151
  %492 = load double, double* %491, align 8, !tbaa !190
  %493 = getelementptr inbounds double, double* %74, i64 %indvars.iv151
  %494 = load double, double* %493, align 8, !tbaa !190
  %495 = getelementptr inbounds double, double* %76, i64 %indvars.iv151
  %496 = load double, double* %495, align 8, !tbaa !190
  %497 = getelementptr inbounds double, double* %78, i64 %indvars.iv151
  %498 = load double, double* %497, align 8, !tbaa !190
  br label %499

; <label>:499                                     ; preds = %488, %482
  %zion04m.0 = phi double [ %498, %488 ], [ %291, %482 ]
  %zion03m.0 = phi double [ %496, %488 ], [ %289, %482 ]
  %zion02m.0 = phi double [ %494, %488 ], [ %281, %482 ]
  %zion01m.0 = phi double [ %492, %488 ], [ %287, %482 ]
  %zion00m.0 = phi double [ %490, %488 ], [ %285, %482 ]
  %500 = fmul double %285, 2.000000e+00
  %501 = tail call double @sqrt(double %500) #3
  %502 = fdiv double 1.000000e+00, %501
  %503 = fsub double %501, %14
  %504 = fmul double %28, %503
  %505 = fptosi double %504 to i32
  %506 = tail call i32 @abs_min_int(i32 %267, i32 %505) #3
  %507 = fmul double %176, %503
  %508 = fptosi double %507 to i32
  %509 = tail call i32 @abs_min_int(i32 %268, i32 %508) #3
  %510 = add nsw i32 %506, 1
  %511 = sitofp i32 %510 to double
  %512 = fsub double %511, %504
  %513 = fsub double 1.000000e+00, %512
  %514 = sext i32 %506 to i64
  %515 = getelementptr inbounds double, double* %94, i64 %514
  %516 = load double, double* %515, align 8, !tbaa !190
  %517 = fmul double %516, %512
  %518 = sext i32 %510 to i64
  %519 = getelementptr inbounds double, double* %94, i64 %518
  %520 = load double, double* %519, align 8, !tbaa !190
  %521 = fmul double %520, %513
  %522 = fadd double %517, %521
  %523 = fmul double %32, %501
  %524 = fmul double %190, %523
  %525 = fadd double %30, %524
  %526 = fmul double %34, %501
  %527 = fmul double %501, %526
  %528 = fmul double %190, %527
  %529 = fmul double %190, %528
  %530 = fadd double %525, %529
  %531 = fdiv double 1.000000e+00, %530
  %532 = tail call double @cos(double %287) #3
  %533 = tail call double @sin(double %287) #3
  %534 = fmul double %501, %532
  %535 = fadd double %534, 1.000000e+00
  %536 = fdiv double 1.000000e+00, %535
  %537 = fmul double %536, %536
  %538 = fmul double %532, %537
  %539 = fmul double %502, %538
  %540 = fsub double -0.000000e+00, %539
  %541 = fmul double %501, %537
  %542 = fmul double %533, %541
  %543 = fmul double %289, %289
  %544 = fmul double %18, %543
  %545 = fmul double %544, %536
  %546 = fmul double %169, %545
  %547 = fmul double %293, %293
  %548 = fadd double %547, %546
  %549 = fmul double %170, %548
  %550 = fadd double %530, 0.000000e+00
  %551 = fmul double %289, 0.000000e+00
  %552 = fadd double %551, %550
  %553 = fdiv double 1.000000e+00, %552
  %554 = fmul double %289, %536
  %555 = fmul double %169, %554
  %556 = fmul double %269, %555
  %557 = fmul double %555, %556
  %558 = fmul double %547, %536
  %559 = fadd double %558, %557
  %560 = fsub double %501, %36
  %561 = fmul double %38, %560
  %562 = fmul double %561, %561
  %563 = fmul double %562, %562
  %564 = fmul double %562, %563
  %565 = fsub double -0.000000e+00, %564
  %566 = tail call double @exp(double %565) #3
  %567 = fmul double %., %566
  %568 = fadd double %270, %567
  %569 = fmul double %522, %559
  %570 = fadd double %569, -1.500000e+00
  %571 = fmul double %42, %570
  %572 = fadd double %44, %571
  %573 = fmul double %568, %572
  %574 = fmul double %502, %573
  %575 = fmul double %484, %531
  %576 = fsub double %485, %575
  %577 = fmul double %485, %536
  %578 = fmul double %530, %577
  %579 = fmul double %553, %578
  %580 = sext i32 %509 to i64
  %581 = getelementptr inbounds double, double* %102, i64 %580
  %582 = load double, double* %581, align 8, !tbaa !190
  %583 = fadd double %484, %582
  %584 = fmul double %576, 0.000000e+00
  %585 = fsub double %584, %583
  %586 = fmul double %530, %585
  %587 = fmul double %553, %586
  %588 = fmul double %587, %574
  %589 = getelementptr inbounds double, double* %96, i64 %514
  %590 = load double, double* %589, align 8, !tbaa !190
  %591 = fsub double %555, %590
  %592 = fmul double %579, %591
  %593 = fmul double %18, %592
  %594 = fmul double %522, %593
  %595 = fmul double %483, %542
  %596 = fmul double %583, %540
  %597 = fsub double %595, %596
  %598 = fmul double %539, -0.000000e+00
  %599 = fmul double %576, %598
  %600 = fadd double %597, %599
  %601 = fmul double %530, %600
  %602 = fmul double %553, %601
  %603 = fmul double %549, %602
  %604 = fmul double %18, %603
  %605 = fmul double %522, %604
  %606 = getelementptr inbounds double, double* %80, i64 %indvars.iv151
  %607 = load double, double* %606, align 8, !tbaa !190
  %608 = fmul double %40, %291
  %609 = fsub double %607, %608
  %610 = fsub double %588, %594
  %611 = fadd double %605, %610
  %612 = fmul double %609, %611
  %613 = fmul double %26, %483
  %614 = fmul double %48, %501
  %615 = fmul double %190, %614
  %616 = fadd double %46, %615
  %617 = fmul double %50, %501
  %618 = fmul double %501, %617
  %619 = fmul double %190, %618
  %620 = fmul double %190, %619
  %621 = fadd double %616, %620
  %622 = fmul double %22, %621
  %623 = fadd double %613, %622
  %624 = fmul double %26, %583
  %625 = fmul double %26, %576
  %626 = fmul double %542, %549
  %627 = fsub double -0.000000e+00, %626
  %628 = fsub double %627, %624
  %629 = fmul double %625, 0.000000e+00
  %630 = fadd double %629, %628
  %631 = fmul double %530, %630
  %632 = fmul double %553, %631
  %633 = fmul double %536, %555
  %634 = fmul double %530, 0.000000e+00
  %635 = fmul double %289, %634
  %636 = fsub double 1.000000e+00, %635
  %637 = fmul double %636, %633
  %638 = fmul double %549, %540
  %639 = fadd double %623, %638
  %640 = fmul double %530, %639
  %641 = fadd double %637, %640
  %642 = fmul double %553, %641
  %643 = fmul double %530, %633
  %644 = fadd double %551, 1.000000e+00
  %645 = fmul double %644, %643
  %646 = fmul double %634, %639
  %647 = fsub double %645, %646
  %648 = fmul double %553, %647
  %649 = fadd double %551, -1.000000e+00
  %650 = fmul double %40, %624
  %651 = fadd double %650, %626
  %652 = fmul double %649, %651
  %653 = fmul double %40, %530
  %654 = fmul double %644, %653
  %655 = fmul double %654, %625
  %656 = fsub double %652, %655
  %657 = fmul double %553, %656
  %658 = fmul double %dtime.0, %632
  %659 = fadd double %zion00m.0, %658
  %660 = fcmp ogt double %271, %659
  %.33 = select i1 %660, double %271, double %659
  store double %.33, double* %284, align 8, !tbaa !190
  %661 = fmul double %dtime.0, %642
  %662 = fadd double %zion01m.0, %661
  %663 = fmul double %dtime.0, %648
  %664 = fadd double %zion02m.0, %663
  %665 = fmul double %dtime.0, %657
  %666 = fadd double %zion03m.0, %665
  store double %666, double* %288, align 8, !tbaa !190
  %667 = fmul double %dtime.0, %612
  %668 = fadd double %zion04m.0, %667
  store double %668, double* %290, align 8, !tbaa !190
  %669 = fmul double %107, %662
  %670 = fadd double %669, 1.000000e+01
  %671 = fptosi double %670 to i32
  %672 = sitofp i32 %671 to double
  %673 = fsub double %670, %672
  %674 = fmul double %272, %673
  store double %674, double* %286, align 8, !tbaa !190
  %675 = fmul double %107, %664
  %676 = fadd double %675, 1.000000e+01
  %677 = fptosi double %676 to i32
  %678 = sitofp i32 %677 to double
  %679 = fsub double %676, %678
  %680 = fmul double %272, %679
  store double %680, double* %280, align 8, !tbaa !190
  %681 = load i32, i32* @irk, align 4, !tbaa !1
  %682 = icmp eq i32 %681, 2
  br i1 %682, label %683, label %692

; <label>:683                                     ; preds = %499
  %684 = load double, double* %284, align 8, !tbaa !190
  %685 = fcmp ogt double %684, %166
  br i1 %685, label %686, label %688

; <label>:686                                     ; preds = %683
  store double %zion00m.0, double* %284, align 8, !tbaa !190
  %687 = fsub double %272, %zion01m.0
  store double %687, double* %286, align 8, !tbaa !190
  store double %zion02m.0, double* %280, align 8, !tbaa !190
  store double %zion03m.0, double* %288, align 8, !tbaa !190
  store double %zion04m.0, double* %290, align 8, !tbaa !190
  br label %692

; <label>:688                                     ; preds = %683
  %689 = fcmp olt double %684, %168
  br i1 %689, label %690, label %692

; <label>:690                                     ; preds = %688
  store double %zion00m.0, double* %284, align 8, !tbaa !190
  %691 = fsub double %272, %zion01m.0
  store double %691, double* %286, align 8, !tbaa !190
  store double %zion02m.0, double* %280, align 8, !tbaa !190
  store double %zion03m.0, double* %288, align 8, !tbaa !190
  store double %zion04m.0, double* %290, align 8, !tbaa !190
  br label %692

; <label>:692                                     ; preds = %690, %688, %686, %499
  %693 = load i32, i32* @idiag, align 4, !tbaa !1
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %695, label %742

; <label>:695                                     ; preds = %692
  %696 = fadd double %504, 5.000000e-01
  %697 = fptosi double %696 to i32
  %698 = tail call i32 @abs_min_int(i32 %4, i32 %697) #3
  %699 = fmul double %502, %587
  %700 = sext i32 %698 to i64
  %701 = getelementptr inbounds double, double* %98, i64 %700
  %702 = load double, double* %701, align 8, !tbaa !190
  %703 = fmul double %275, %702
  %704 = fsub double %559, %703
  %705 = fmul double %699, %704
  %706 = fmul double %zion04m.0, %705
  %707 = getelementptr inbounds double, double* %253, i64 %700
  %708 = load double, double* %707, align 8, !tbaa !190
  %709 = fadd double %708, %706
  store double %709, double* %707, align 8, !tbaa !190
  %710 = getelementptr inbounds double, double* %243, i64 %580
  %711 = load double, double* %710, align 8, !tbaa !190
  %712 = fadd double %711, 1.000000e+00
  store double %712, double* %710, align 8, !tbaa !190
  %713 = getelementptr inbounds double, double* %245, i64 %580
  %714 = load double, double* %713, align 8, !tbaa !190
  %715 = fadd double %706, %714
  store double %715, double* %713, align 8, !tbaa !190
  %716 = fadd double %efluxi.084, %706
  %717 = fmul double %zion04m.0, %699
  %718 = fadd double %pfluxi.083, %717
  %719 = fmul double %zion03m.0, %536
  %720 = fmul double %zion04m.0, %719
  %721 = fadd double %dflowi.082, %720
  %722 = fmul double %zion04m.0, %zion04m.0
  %723 = fadd double %entropyi.081, %722
  %724 = fmul double %zion04m.0, %559
  %725 = fadd double %particles_energy.sroa.0.075, %724
  %726 = fadd double %particles_energy.sroa.6.076, %559
  %727 = getelementptr inbounds double, double* %247, i64 %580
  %728 = load double, double* %727, align 8, !tbaa !190
  %729 = fmul double %501, %699
  %730 = fadd double %729, %728
  store double %730, double* %727, align 8, !tbaa !190
  %731 = getelementptr inbounds double, double* %249, i64 %580
  %732 = load double, double* %731, align 8, !tbaa !190
  %733 = fadd double %732, 1.000000e+00
  store double %733, double* %731, align 8, !tbaa !190
  %734 = getelementptr inbounds double, double* %78, i64 %indvars.iv151
  %735 = load double, double* %734, align 8, !tbaa !190
  %736 = fadd double %sum_of_weights.080, %735
  %737 = load double, double* %606, align 8, !tbaa !190
  %738 = fadd double %sum_of_f0.079, %737
  %739 = fcmp ogt double %max_of_f0.078, %735
  %max_of_f0.0. = select i1 %739, double %max_of_f0.078, double %735
  %740 = fcmp olt double %min_of_f0.077, %735
  %741 = select i1 %740, double %min_of_f0.077, double %735
  br label %742

; <label>:742                                     ; preds = %695, %692
  %particles_energy.sroa.0.1 = phi double [ %particles_energy.sroa.0.075, %692 ], [ %725, %695 ]
  %particles_energy.sroa.6.1 = phi double [ %particles_energy.sroa.6.076, %692 ], [ %726, %695 ]
  %min_of_f0.1 = phi double [ %min_of_f0.077, %692 ], [ %741, %695 ]
  %max_of_f0.1 = phi double [ %max_of_f0.078, %692 ], [ %max_of_f0.0., %695 ]
  %sum_of_f0.1 = phi double [ %sum_of_f0.079, %692 ], [ %738, %695 ]
  %sum_of_weights.1 = phi double [ %sum_of_weights.080, %692 ], [ %736, %695 ]
  %entropyi.1 = phi double [ %entropyi.081, %692 ], [ %723, %695 ]
  %dflowi.1 = phi double [ %dflowi.082, %692 ], [ %721, %695 ]
  %pfluxi.1 = phi double [ %pfluxi.083, %692 ], [ %718, %695 ]
  %efluxi.1 = phi double [ %efluxi.084, %692 ], [ %716, %695 ]
  br i1 %or.cond, label %743, label %780

; <label>:743                                     ; preds = %742
  %744 = load i32, i32* @istep, align 4, !tbaa !1
  %745 = srem i32 %744, %56
  %746 = icmp eq i32 %745, 0
  %747 = load i32, i32* @irk, align 4
  %748 = icmp eq i32 %747, 2
  %or.cond26 = and i1 %746, %748
  br i1 %or.cond26, label %749, label %780

; <label>:749                                     ; preds = %743
  %750 = load double, double* %284, align 8, !tbaa !190
  %751 = load double, double* %286, align 8, !tbaa !190
  %752 = load double, double* %288, align 8, !tbaa !190
  %753 = load double, double* %290, align 8, !tbaa !190
  %754 = load double, double* %292, align 8, !tbaa !190
  %755 = fmul double %750, 2.000000e+00
  %756 = tail call double @sqrt(double %755) #3
  %757 = fsub double %756, %14
  %758 = fmul double %176, %757
  %759 = fptosi double %758 to i32
  %760 = tail call i32 @abs_min_int(i32 %268, i32 %759) #3
  %761 = tail call double @cos(double %751) #3
  %762 = fmul double %756, %761
  %763 = fadd double %762, 1.000000e+00
  %764 = fdiv double 1.000000e+00, %763
  %765 = fmul double %752, %764
  %766 = fmul double %169, %765
  %767 = fmul double %269, %766
  %768 = fmul double %766, %767
  %769 = fmul double %754, %754
  %770 = fmul double %769, %764
  %771 = fadd double %770, %768
  %772 = sext i32 %760 to i64
  %773 = getelementptr inbounds double, double* %249, i64 %772
  %774 = load double, double* %773, align 8, !tbaa !190
  %775 = fadd double %774, 1.000000e+00
  store double %775, double* %773, align 8, !tbaa !190
  %776 = getelementptr inbounds double, double* %251, i64 %772
  %777 = load double, double* %776, align 8, !tbaa !190
  %778 = fmul double %753, %771
  %779 = fadd double %777, %778
  store double %779, double* %776, align 8, !tbaa !190
  br label %780

; <label>:780                                     ; preds = %749, %743, %742, %279
  %particles_energy.sroa.0.2 = phi double [ %particles_energy.sroa.0.075, %279 ], [ %particles_energy.sroa.0.1, %749 ], [ %particles_energy.sroa.0.1, %743 ], [ %particles_energy.sroa.0.1, %742 ]
  %particles_energy.sroa.6.2 = phi double [ %particles_energy.sroa.6.076, %279 ], [ %particles_energy.sroa.6.1, %749 ], [ %particles_energy.sroa.6.1, %743 ], [ %particles_energy.sroa.6.1, %742 ]
  %min_of_f0.2 = phi double [ %min_of_f0.077, %279 ], [ %min_of_f0.1, %749 ], [ %min_of_f0.1, %743 ], [ %min_of_f0.1, %742 ]
  %max_of_f0.2 = phi double [ %max_of_f0.078, %279 ], [ %max_of_f0.1, %749 ], [ %max_of_f0.1, %743 ], [ %max_of_f0.1, %742 ]
  %sum_of_f0.2 = phi double [ %sum_of_f0.079, %279 ], [ %sum_of_f0.1, %749 ], [ %sum_of_f0.1, %743 ], [ %sum_of_f0.1, %742 ]
  %sum_of_weights.2 = phi double [ %sum_of_weights.080, %279 ], [ %sum_of_weights.1, %749 ], [ %sum_of_weights.1, %743 ], [ %sum_of_weights.1, %742 ]
  %entropyi.2 = phi double [ %entropyi.081, %279 ], [ %entropyi.1, %749 ], [ %entropyi.1, %743 ], [ %entropyi.1, %742 ]
  %dflowi.2 = phi double [ %dflowi.082, %279 ], [ %dflowi.1, %749 ], [ %dflowi.1, %743 ], [ %dflowi.1, %742 ]
  %pfluxi.2 = phi double [ %pfluxi.083, %279 ], [ %pfluxi.1, %749 ], [ %pfluxi.1, %743 ], [ %pfluxi.1, %742 ]
  %efluxi.2 = phi double [ %efluxi.084, %279 ], [ %efluxi.1, %749 ], [ %efluxi.1, %743 ], [ %efluxi.1, %742 ]
  %indvars.iv.next152 = add nuw nsw i64 %indvars.iv151, 1
  %781 = icmp slt i64 %indvars.iv.next152, %278
  br i1 %781, label %279, label %._crit_edge88.loopexit

._crit_edge88.loopexit:                           ; preds = %780
  br label %._crit_edge88

._crit_edge88:                                    ; preds = %._crit_edge88.loopexit, %.preheader39
  %efluxi.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %efluxi.2, %._crit_edge88.loopexit ]
  %pfluxi.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %pfluxi.2, %._crit_edge88.loopexit ]
  %dflowi.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %dflowi.2, %._crit_edge88.loopexit ]
  %entropyi.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %entropyi.2, %._crit_edge88.loopexit ]
  %sum_of_weights.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %sum_of_weights.2, %._crit_edge88.loopexit ]
  %sum_of_f0.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %sum_of_f0.2, %._crit_edge88.loopexit ]
  %max_of_f0.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %max_of_f0.2, %._crit_edge88.loopexit ]
  %min_of_f0.0.lcssa = phi double [ 1.000000e+00, %.preheader39 ], [ %min_of_f0.2, %._crit_edge88.loopexit ]
  %particles_energy.sroa.6.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %particles_energy.sroa.6.2, %._crit_edge88.loopexit ]
  %particles_energy.sroa.0.0.lcssa = phi double [ 0.000000e+00, %.preheader39 ], [ %particles_energy.sroa.0.2, %._crit_edge88.loopexit ]
  %782 = load i32, i32* @idiag, align 4, !tbaa !1
  %783 = icmp eq i32 %782, 0
  br i1 %783, label %.preheader38, label %839

.preheader38:                                     ; preds = %._crit_edge88
  br i1 %150, label %.lr.ph70.preheader, label %.preheader37

.lr.ph70.preheader:                               ; preds = %.preheader38
  br label %.lr.ph70

.preheader37.loopexit:                            ; preds = %.lr.ph70
  br label %.preheader37

.preheader37:                                     ; preds = %.preheader37.loopexit, %.preheader38
  br i1 %151, label %._crit_edge68, label %.lr.ph67.preheader

.lr.ph67.preheader:                               ; preds = %.preheader37
  br label %.lr.ph67

.lr.ph70:                                         ; preds = %.lr.ph70.preheader, %.lr.ph70
  %indvars.iv144 = phi i64 [ %indvars.iv.next145, %.lr.ph70 ], [ 0, %.lr.ph70.preheader ]
  %784 = getelementptr inbounds double, double* %140, i64 %indvars.iv144
  %785 = load double, double* %784, align 8, !tbaa !190
  %786 = getelementptr inbounds double, double* %243, i64 %indvars.iv144
  %787 = load double, double* %786, align 8, !tbaa !190
  %788 = fadd double %785, %787
  store double %788, double* %784, align 8, !tbaa !190
  %789 = getelementptr inbounds double, double* %142, i64 %indvars.iv144
  %790 = load double, double* %789, align 8, !tbaa !190
  %791 = getelementptr inbounds double, double* %245, i64 %indvars.iv144
  %792 = load double, double* %791, align 8, !tbaa !190
  %793 = fadd double %790, %792
  store double %793, double* %789, align 8, !tbaa !190
  %794 = getelementptr inbounds double, double* %123, i64 %indvars.iv144
  %795 = load double, double* %794, align 8, !tbaa !190
  %796 = getelementptr inbounds double, double* %247, i64 %indvars.iv144
  %797 = load double, double* %796, align 8, !tbaa !190
  %798 = fadd double %795, %797
  store double %798, double* %794, align 8, !tbaa !190
  %799 = getelementptr inbounds double, double* %116, i64 %indvars.iv144
  %800 = load double, double* %799, align 8, !tbaa !190
  %801 = getelementptr inbounds double, double* %249, i64 %indvars.iv144
  %802 = load double, double* %801, align 8, !tbaa !190
  %803 = fadd double %800, %802
  store double %803, double* %799, align 8, !tbaa !190
  %indvars.iv.next145 = add nuw nsw i64 %indvars.iv144, 1
  %lftr.wideiv146 = trunc i64 %indvars.iv.next145 to i32
  %exitcond147 = icmp eq i32 %lftr.wideiv146, %24
  br i1 %exitcond147, label %.preheader37.loopexit, label %.lr.ph70

.lr.ph67:                                         ; preds = %.lr.ph67, %.lr.ph67.preheader
  %indvars.iv140 = phi i64 [ 0, %.lr.ph67.preheader ], [ %indvars.iv.next141, %.lr.ph67 ]
  %804 = getelementptr inbounds double, double* %146, i64 %indvars.iv140
  %805 = load double, double* %804, align 8, !tbaa !190
  %806 = getelementptr inbounds double, double* %253, i64 %indvars.iv140
  %807 = load double, double* %806, align 8, !tbaa !190
  %808 = fadd double %805, %807
  store double %808, double* %804, align 8, !tbaa !190
  %indvars.iv.next141 = add nuw nsw i64 %indvars.iv140, 1
  %lftr.wideiv142 = trunc i64 %indvars.iv.next141 to i32
  %exitcond143 = icmp eq i32 %lftr.wideiv142, %108
  br i1 %exitcond143, label %._crit_edge68.loopexit, label %.lr.ph67

._crit_edge68.loopexit:                           ; preds = %.lr.ph67
  br label %._crit_edge68

._crit_edge68:                                    ; preds = %._crit_edge68.loopexit, %.preheader37
  %809 = load double, double* %163, align 8, !tbaa !190
  %810 = fadd double %efluxi.0.lcssa, %809
  store double %810, double* %163, align 8, !tbaa !190
  %811 = getelementptr inbounds double, double* %163, i64 2
  %812 = load double, double* %811, align 8, !tbaa !190
  %813 = fadd double %pfluxi.0.lcssa, %812
  store double %813, double* %811, align 8, !tbaa !190
  %814 = getelementptr inbounds double, double* %163, i64 6
  %815 = load double, double* %814, align 8, !tbaa !190
  %816 = fadd double %dflowi.0.lcssa, %815
  store double %816, double* %814, align 8, !tbaa !190
  %817 = getelementptr inbounds double, double* %163, i64 8
  %818 = load double, double* %817, align 8, !tbaa !190
  %819 = fadd double %entropyi.0.lcssa, %818
  store double %819, double* %817, align 8, !tbaa !190
  %820 = getelementptr inbounds double, double* %163, i64 12
  %821 = load double, double* %820, align 8, !tbaa !190
  %822 = fadd double %particles_energy.sroa.0.0.lcssa, %821
  store double %822, double* %820, align 8, !tbaa !190
  %823 = getelementptr inbounds double, double* %163, i64 13
  %824 = load double, double* %823, align 8, !tbaa !190
  %825 = fadd double %particles_energy.sroa.6.0.lcssa, %824
  store double %825, double* %823, align 8, !tbaa !190
  %826 = getelementptr inbounds double, double* %163, i64 15
  %827 = load double, double* %826, align 8, !tbaa !190
  %828 = fadd double %sum_of_weights.0.lcssa, %827
  store double %828, double* %826, align 8, !tbaa !190
  %829 = getelementptr inbounds double, double* %163, i64 16
  %830 = load double, double* %829, align 8, !tbaa !190
  %831 = fadd double %sum_of_f0.0.lcssa, %830
  store double %831, double* %829, align 8, !tbaa !190
  %832 = getelementptr inbounds double, double* %163, i64 17
  %833 = load double, double* %832, align 8, !tbaa !190
  %834 = fcmp ogt double %833, %max_of_f0.0.lcssa
  %.max_of_f0.0 = select i1 %834, double %833, double %max_of_f0.0.lcssa
  store double %.max_of_f0.0, double* %832, align 8, !tbaa !190
  %835 = getelementptr inbounds double, double* %163, i64 18
  %836 = load double, double* %835, align 8, !tbaa !190
  %837 = fcmp olt double %836, %min_of_f0.0.lcssa
  %838 = select i1 %837, double %836, double %min_of_f0.0.lcssa
  store double %838, double* %835, align 8, !tbaa !190
  br label %839

; <label>:839                                     ; preds = %._crit_edge68, %._crit_edge88
  %840 = fcmp ogt double %26, 5.000000e-01
  %841 = fcmp olt double %40, 5.000000e-01
  %or.cond20 = and i1 %840, %841
  br i1 %or.cond20, label %842, label %.loopexit36

; <label>:842                                     ; preds = %839
  %843 = load i32, i32* @istep, align 4, !tbaa !1
  %844 = srem i32 %843, %56
  %845 = icmp eq i32 %844, 0
  %846 = load i32, i32* @irk, align 4
  %847 = icmp eq i32 %846, 2
  %or.cond28 = and i1 %845, %847
  %or.cond119 = and i1 %or.cond28, %150
  br i1 %or.cond119, label %.lr.ph65.preheader, label %.loopexit36

.lr.ph65.preheader:                               ; preds = %842
  br label %.lr.ph65

.lr.ph65:                                         ; preds = %.lr.ph65.preheader, %.lr.ph65
  %indvars.iv136 = phi i64 [ %indvars.iv.next137, %.lr.ph65 ], [ 0, %.lr.ph65.preheader ]
  %848 = getelementptr inbounds double, double* %116, i64 %indvars.iv136
  %849 = load double, double* %848, align 8, !tbaa !190
  %850 = getelementptr inbounds double, double* %249, i64 %indvars.iv136
  %851 = load double, double* %850, align 8, !tbaa !190
  %852 = fadd double %849, %851
  store double %852, double* %848, align 8, !tbaa !190
  %853 = getelementptr inbounds double, double* %131, i64 %indvars.iv136
  %854 = load double, double* %853, align 8, !tbaa !190
  %855 = getelementptr inbounds double, double* %251, i64 %indvars.iv136
  %856 = load double, double* %855, align 8, !tbaa !190
  %857 = fadd double %854, %856
  store double %857, double* %853, align 8, !tbaa !190
  %indvars.iv.next137 = add nuw nsw i64 %indvars.iv136, 1
  %lftr.wideiv138 = trunc i64 %indvars.iv.next137 to i32
  %exitcond139 = icmp eq i32 %lftr.wideiv138, %24
  br i1 %exitcond139, label %.loopexit36.loopexit, label %.lr.ph65

.loopexit36.loopexit:                             ; preds = %.lr.ph65
  br label %.loopexit36

.loopexit36:                                      ; preds = %.loopexit36.loopexit, %842, %839
  tail call fastcc void @_mm_free.153(i8* nonnull %242)
  %858 = sitofp i32 %56 to double
  %859 = fmul double %858, 1.000000e-02
  %860 = load i32, i32* @idiag, align 4, !tbaa !1
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %862, label %.loopexit34

; <label>:862                                     ; preds = %.loopexit36
  %863 = tail call i32 @MPI_Allreduce(i8* %147, i8* nonnull %113, i32 %108, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 %151, label %._crit_edge, label %.lr.ph63.preheader

.lr.ph63.preheader:                               ; preds = %862
  br label %.lr.ph63

._crit_edge.loopexit:                             ; preds = %.lr.ph63
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %862
  %864 = bitcast double* %123 to i8*
  %865 = bitcast double* %127 to i8*
  %866 = tail call i32 @MPI_Allreduce(i8* %864, i8* %865, i32 %24, i32 1275070475, i32 1476395011, i32 1140850688) #3
  %867 = bitcast double* %116 to i8*
  %868 = bitcast double* %119 to i8*
  %869 = tail call i32 @MPI_Allreduce(i8* %867, i8* %868, i32 %24, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 %150, label %.lr.ph61, label %.loopexit34

.lr.ph61:                                         ; preds = %._crit_edge
  %870 = fsub double 1.000000e+00, %859
  br label %877

.lr.ph63:                                         ; preds = %.lr.ph63, %.lr.ph63.preheader
  %indvars.iv132 = phi i64 [ 0, %.lr.ph63.preheader ], [ %indvars.iv.next133, %.lr.ph63 ]
  %871 = getelementptr inbounds double, double* %114, i64 %indvars.iv132
  %872 = load double, double* %871, align 8, !tbaa !190
  %873 = getelementptr inbounds double, double* %149, i64 %indvars.iv132
  %874 = load double, double* %873, align 8, !tbaa !190
  %875 = fmul double %872, %874
  %876 = getelementptr inbounds double, double* %146, i64 %indvars.iv132
  store double %875, double* %876, align 8, !tbaa !190
  %indvars.iv.next133 = add nuw nsw i64 %indvars.iv132, 1
  %lftr.wideiv134 = trunc i64 %indvars.iv.next133 to i32
  %exitcond135 = icmp eq i32 %lftr.wideiv134, %108
  br i1 %exitcond135, label %._crit_edge.loopexit, label %.lr.ph63

; <label>:877                                     ; preds = %877, %.lr.ph61
  %indvars.iv128 = phi i64 [ 0, %.lr.ph61 ], [ %indvars.iv.next129, %877 ]
  %878 = getelementptr inbounds double, double* %127, i64 %indvars.iv128
  %879 = load double, double* %878, align 8, !tbaa !190
  %880 = getelementptr inbounds double, double* %119, i64 %indvars.iv128
  %881 = load double, double* %880, align 8, !tbaa !190
  %882 = fcmp olt double %881, 1.000000e+00
  %883 = select i1 %882, double 1.000000e+00, double %881
  %884 = fdiv double %879, %883
  %885 = getelementptr inbounds double, double* %123, i64 %indvars.iv128
  store double %884, double* %885, align 8, !tbaa !190
  %886 = getelementptr inbounds double, double* %100, i64 %indvars.iv128
  %887 = load double, double* %886, align 8, !tbaa !190
  %888 = fmul double %870, %887
  %889 = fmul double %859, %884
  %890 = fadd double %888, %889
  store double %890, double* %886, align 8, !tbaa !190
  %indvars.iv.next129 = add nuw nsw i64 %indvars.iv128, 1
  %lftr.wideiv130 = trunc i64 %indvars.iv.next129 to i32
  %exitcond131 = icmp eq i32 %lftr.wideiv130, %24
  br i1 %exitcond131, label %.loopexit34.loopexit, label %877

.loopexit34.loopexit:                             ; preds = %877
  br label %.loopexit34

.loopexit34:                                      ; preds = %.loopexit34.loopexit, %._crit_edge, %.loopexit36
  br i1 %or.cond20, label %891, label %.critedge

; <label>:891                                     ; preds = %.loopexit34
  %892 = load i32, i32* @istep, align 4, !tbaa !1
  %893 = srem i32 %892, %56
  %894 = icmp eq i32 %893, 0
  %895 = load i32, i32* @irk, align 4
  %896 = icmp eq i32 %895, 2
  %or.cond30 = and i1 %894, %896
  br i1 %or.cond30, label %897, label %.loopexit

; <label>:897                                     ; preds = %891
  %898 = bitcast double* %116 to i8*
  %899 = bitcast double* %119 to i8*
  %900 = tail call i32 @MPI_Allreduce(i8* %898, i8* %899, i32 %24, i32 1275070475, i32 1476395011, i32 1140850688) #3
  %901 = bitcast double* %131 to i8*
  %902 = bitcast double* %135 to i8*
  %903 = tail call i32 @MPI_Allreduce(i8* %901, i8* %902, i32 %24, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 %150, label %.lr.ph59, label %.loopexit

.lr.ph59:                                         ; preds = %897
  %904 = fsub double 1.000000e+00, %859
  br label %905

; <label>:905                                     ; preds = %905, %.lr.ph59
  %indvars.iv124 = phi i64 [ 0, %.lr.ph59 ], [ %indvars.iv.next125, %905 ]
  %906 = getelementptr inbounds double, double* %135, i64 %indvars.iv124
  %907 = load double, double* %906, align 8, !tbaa !190
  %908 = fmul double %179, %907
  %909 = getelementptr inbounds double, double* %119, i64 %indvars.iv124
  %910 = load double, double* %909, align 8, !tbaa !190
  %911 = fcmp olt double %910, 1.000000e+00
  %912 = select i1 %911, double 1.000000e+00, double %910
  %913 = fdiv double %908, %912
  %914 = getelementptr inbounds double, double* %131, i64 %indvars.iv124
  store double %913, double* %914, align 8, !tbaa !190
  %915 = getelementptr inbounds double, double* %144, i64 %indvars.iv124
  %916 = load double, double* %915, align 8, !tbaa !190
  %917 = fmul double %904, %916
  %918 = fmul double %859, %913
  %919 = fadd double %917, %918
  store double %919, double* %915, align 8, !tbaa !190
  %indvars.iv.next125 = add nuw nsw i64 %indvars.iv124, 1
  %lftr.wideiv126 = trunc i64 %indvars.iv.next125 to i32
  %exitcond127 = icmp eq i32 %lftr.wideiv126, %24
  br i1 %exitcond127, label %.loopexit.loopexit, label %905

.loopexit.loopexit:                               ; preds = %905
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %897, %891
  %920 = load i32, i32* @istep, align 4, !tbaa !1
  %921 = srem i32 %920, %56
  %922 = icmp eq i32 %921, 0
  %923 = load i32, i32* @irk, align 4
  %924 = icmp eq i32 %923, 2
  %or.cond32 = and i1 %922, %924
  %or.cond120 = and i1 %or.cond32, %265
  br i1 %or.cond120, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %.loopexit
  %925 = add nsw i32 %24, -1
  %926 = fmul double %20, 5.000000e-01
  br label %927

; <label>:927                                     ; preds = %970, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %970 ]
  %928 = getelementptr inbounds double, double* %62, i64 %indvars.iv
  %929 = load double, double* %928, align 8, !tbaa !190
  %930 = fcmp oeq double %929, 1.000000e+08
  br i1 %930, label %970, label %931

; <label>:931                                     ; preds = %927
  %932 = getelementptr inbounds double, double* %58, i64 %indvars.iv
  %933 = load double, double* %932, align 8, !tbaa !190
  %934 = getelementptr inbounds double, double* %60, i64 %indvars.iv
  %935 = load double, double* %934, align 8, !tbaa !190
  %936 = getelementptr inbounds double, double* %64, i64 %indvars.iv
  %937 = load double, double* %936, align 8, !tbaa !190
  %938 = getelementptr inbounds double, double* %66, i64 %indvars.iv
  %939 = load double, double* %938, align 8, !tbaa !190
  %940 = getelementptr inbounds double, double* %68, i64 %indvars.iv
  %941 = load double, double* %940, align 8, !tbaa !190
  %942 = fmul double %933, 2.000000e+00
  %943 = tail call double @sqrt(double %942) #3
  %944 = fsub double %943, %14
  %945 = fmul double %176, %944
  %946 = fptosi double %945 to i32
  %947 = tail call i32 @abs_min_int(i32 %925, i32 %946) #3
  %948 = tail call double @cos(double %935) #3
  %949 = fmul double %943, %948
  %950 = fadd double %949, 1.000000e+00
  %951 = fdiv double 1.000000e+00, %950
  %952 = fmul double %937, %951
  %953 = fmul double %169, %952
  %954 = fmul double %926, %953
  %955 = fmul double %953, %954
  %956 = fmul double %941, %941
  %957 = fmul double %956, %951
  %958 = fadd double %957, %955
  %959 = fmul double %40, %939
  %960 = fsub double 1.000000e+00, %959
  %961 = fmul double %179, %958
  %962 = fadd double %961, -1.500000e+00
  %963 = fmul double %960, %962
  %964 = sext i32 %947 to i64
  %965 = getelementptr inbounds double, double* %144, i64 %964
  %966 = load double, double* %965, align 8, !tbaa !190
  %967 = fmul double %966, %963
  %968 = fsub double %939, %967
  store double %968, double* %938, align 8, !tbaa !190
  %969 = getelementptr inbounds double, double* %78, i64 %indvars.iv
  store double %968, double* %969, align 8, !tbaa !190
  br label %970

; <label>:970                                     ; preds = %931, %927
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %6
  br i1 %exitcond, label %.critedge.loopexit, label %927

.critedge.loopexit:                               ; preds = %970
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %.loopexit, %.loopexit34
  tail call fastcc void @_mm_free.153(i8* nonnull %113)
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc.147(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

; Function Attrs: nounwind
declare double @exp(double) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free.153(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @radial_bin_particles(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %1 = load i32, i32* @istep, align 4, !tbaa !1
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 45
  %3 = load i32, i32* %2, align 8, !tbaa !214
  %4 = srem i32 %1, %3
  %5 = icmp ne i32 %4, 0
  %6 = load i32, i32* @irk, align 4
  %7 = icmp eq i32 %6, 1
  %or.cond = or i1 %5, %7
  br i1 %or.cond, label %203, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %10 = load double*, double** %9, align 8, !tbaa !85
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %12 = load double*, double** %11, align 8, !tbaa !86
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %14 = load double*, double** %13, align 8, !tbaa !87
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %16 = load double*, double** %15, align 8, !tbaa !88
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %18 = load double*, double** %17, align 8, !tbaa !89
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %20 = load double*, double** %19, align 8, !tbaa !90
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %22 = load double*, double** %21, align 8, !tbaa !91
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %24 = load double*, double** %23, align 8, !tbaa !92
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %26 = load double*, double** %25, align 8, !tbaa !93
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %28 = load double*, double** %27, align 8, !tbaa !94
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %30 = load double*, double** %29, align 8, !tbaa !95
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %32 = load double*, double** %31, align 8, !tbaa !96
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 14
  %34 = load i32*, i32** %33, align 8, !tbaa !99
  %35 = bitcast i32* %34 to i8*
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 15
  %37 = load i32*, i32** %36, align 8, !tbaa !100
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %39 = load i32*, i32** %38, align 8, !tbaa !108
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 12
  %41 = load double*, double** %40, align 8, !tbaa !97
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 13
  %43 = load double*, double** %42, align 8, !tbaa !98
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %45 = load i32, i32* %44, align 4, !tbaa !152
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %47 = load double, double* %46, align 8, !tbaa !163
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  %49 = load double, double* %48, align 8, !tbaa !203
  %50 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 8, !tbaa !192
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 4
  %53 = bitcast i32* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 5
  %57 = lshr i64 %54, 32
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 9
  %60 = load i32, i32* %59, align 4, !tbaa !199
  %61 = sub i32 1, %55
  %62 = add i32 %61, %58
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %.preheader8, label %65

.preheader8:                                      ; preds = %8
  %64 = icmp sgt i32 %60, 0
  br i1 %64, label %.lr.ph21.preheader, label %.preheader7

.lr.ph21.preheader:                               ; preds = %.preheader8
  br label %.lr.ph21

; <label>:65                                      ; preds = %8
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.156, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 263, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @__PRETTY_FUNCTION__.radial_bin_particles, i64 0, i64 0)) #15
  unreachable

.preheader7.loopexit:                             ; preds = %.lr.ph21
  br label %.preheader7

.preheader7:                                      ; preds = %.preheader7.loopexit, %.preheader8
  %66 = icmp sgt i32 %51, 0
  br i1 %66, label %.lr.ph19.preheader, label %.preheader6

.lr.ph19.preheader:                               ; preds = %.preheader7
  %67 = sext i32 %51 to i64
  br label %.lr.ph19

.lr.ph21:                                         ; preds = %.lr.ph21.preheader, %.lr.ph21
  %indvars.iv38 = phi i64 [ %indvars.iv.next39, %.lr.ph21 ], [ 0, %.lr.ph21.preheader ]
  %68 = getelementptr inbounds i32, i32* %34, i64 %indvars.iv38
  store i32 0, i32* %68, align 4, !tbaa !1
  %69 = getelementptr inbounds i32, i32* %37, i64 %indvars.iv38
  store i32 0, i32* %69, align 4, !tbaa !1
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %lftr.wideiv40 = trunc i64 %indvars.iv.next39 to i32
  %exitcond41 = icmp eq i32 %lftr.wideiv40, %60
  br i1 %exitcond41, label %.preheader7.loopexit, label %.lr.ph21

.preheader6.loopexit:                             ; preds = %96
  br label %.preheader6

.preheader6:                                      ; preds = %.preheader6.loopexit, %.preheader7
  %70 = add i32 %60, -1
  %71 = icmp sgt i32 %60, 1
  br i1 %71, label %.preheader5.preheader, label %.preheader4

.preheader5.preheader:                            ; preds = %.preheader6
  %.pre = load i32, i32* %37, align 4, !tbaa !1
  br label %.preheader5

.lr.ph19:                                         ; preds = %96, %.lr.ph19.preheader
  %indvars.iv36 = phi i64 [ 0, %.lr.ph19.preheader ], [ %indvars.iv.next37, %96 ]
  %72 = getelementptr inbounds double, double* %14, i64 %indvars.iv36
  %73 = load double, double* %72, align 8, !tbaa !190
  %74 = fcmp une double %73, 1.000000e+08
  br i1 %74, label %75, label %94

; <label>:75                                      ; preds = %.lr.ph19
  %76 = getelementptr inbounds double, double* %10, i64 %indvars.iv36
  %77 = load double, double* %76, align 8, !tbaa !190
  %78 = fcmp ogt double %77, 0.000000e+00
  br i1 %78, label %80, label %79

; <label>:79                                      ; preds = %75
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.158, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 298, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @__PRETTY_FUNCTION__.radial_bin_particles, i64 0, i64 0)) #15
  unreachable

; <label>:80                                      ; preds = %75
  %81 = fmul double %77, 2.000000e+00
  %82 = tail call double @sqrt(double %81) #3
  %83 = fsub double %82, %47
  %84 = fmul double %49, %83
  %85 = fadd double %84, 5.000000e-01
  %86 = fptosi double %85 to i32
  %87 = tail call i32 @abs_min_int(i32 %45, i32 %86) #3
  %88 = sub nsw i32 %87, %55
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %34, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !1
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 4, !tbaa !1
  %93 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv36
  store i32 %88, i32* %93, align 4, !tbaa !1
  br label %96

; <label>:94                                      ; preds = %.lr.ph19
  %95 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv36
  store i32 -1, i32* %95, align 4, !tbaa !1
  br label %96

; <label>:96                                      ; preds = %94, %80
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %97 = icmp slt i64 %indvars.iv.next37, %67
  br i1 %97, label %.lr.ph19, label %.preheader6.loopexit

.preheader5:                                      ; preds = %.preheader5, %.preheader5.preheader
  %98 = phi i32 [ %.pre, %.preheader5.preheader ], [ %102, %.preheader5 ]
  %indvars.iv32 = phi i64 [ 0, %.preheader5.preheader ], [ %indvars.iv.next33, %.preheader5 ]
  %99 = getelementptr inbounds i32, i32* %34, i64 %indvars.iv32
  %100 = load i32, i32* %99, align 4, !tbaa !1
  %101 = getelementptr inbounds i32, i32* %37, i64 %indvars.iv32
  %102 = add nsw i32 %98, %100
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %103 = getelementptr inbounds i32, i32* %37, i64 %indvars.iv.next33
  store i32 %102, i32* %103, align 4, !tbaa !1
  %lftr.wideiv34 = trunc i64 %indvars.iv.next33 to i32
  %exitcond35 = icmp eq i32 %lftr.wideiv34, %70
  br i1 %exitcond35, label %.preheader4.loopexit, label %.preheader5

.preheader4.loopexit:                             ; preds = %.preheader5
  br label %.preheader4

.preheader4:                                      ; preds = %.preheader4.loopexit, %.preheader6
  %104 = sext i32 %70 to i64
  %105 = getelementptr inbounds i32, i32* %37, i64 %104
  %106 = load i32, i32* %105, align 4, !tbaa !1
  %107 = getelementptr inbounds i32, i32* %34, i64 %104
  %108 = load i32, i32* %107, align 4, !tbaa !1
  %109 = add nsw i32 %108, %106
  %110 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 8
  %111 = load i32, i32* %110, align 8, !tbaa !210
  %112 = sub i32 %51, %111
  %113 = icmp eq i32 %109, %112
  br i1 %113, label %117, label %114

; <label>:114                                     ; preds = %.preheader4
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %116 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %115, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3.159, i64 0, i64 0), i32 %109, i32 %51) #13
  tail call void @exit(i32 1) #15
  unreachable

; <label>:117                                     ; preds = %.preheader4
  store i32 %109, i32* %50, align 8, !tbaa !192
  store i32 0, i32* %110, align 8, !tbaa !210
  br i1 %64, label %.preheader3.loopexit, label %.preheader3

.preheader3.loopexit:                             ; preds = %117
  %118 = zext i32 %70 to i64
  %119 = shl nuw nsw i64 %118, 2
  %120 = add nuw nsw i64 %119, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull %35, i8 0, i64 %120, i32 4, i1 false)
  br label %.preheader3

.preheader3:                                      ; preds = %.preheader3.loopexit, %117
  br i1 %66, label %.lr.ph11.preheader, label %.preheader

.lr.ph11.preheader:                               ; preds = %.preheader3
  br label %.lr.ph11

.preheader.loopexit:                              ; preds = %169
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader3
  %121 = icmp sgt i32 %109, 0
  br i1 %121, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %169
  %indvars.iv22 = phi i64 [ %indvars.iv.next23, %169 ], [ 0, %.lr.ph11.preheader ]
  %122 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv22
  %123 = load i32, i32* %122, align 4, !tbaa !1
  %124 = icmp eq i32 %123, -1
  br i1 %124, label %169, label %125

; <label>:125                                     ; preds = %.lr.ph11
  %126 = sext i32 %123 to i64
  %127 = getelementptr inbounds i32, i32* %37, i64 %126
  %128 = load i32, i32* %127, align 4, !tbaa !1
  %129 = getelementptr inbounds i32, i32* %34, i64 %126
  %130 = load i32, i32* %129, align 4, !tbaa !1
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %129, align 4, !tbaa !1
  %132 = add nsw i32 %130, %128
  %133 = getelementptr inbounds double, double* %10, i64 %indvars.iv22
  %134 = bitcast double* %133 to i64*
  %135 = load i64, i64* %134, align 8, !tbaa !190
  %136 = sext i32 %132 to i64
  %137 = getelementptr inbounds double, double* %22, i64 %136
  %138 = bitcast double* %137 to i64*
  store i64 %135, i64* %138, align 8, !tbaa !190
  %139 = getelementptr inbounds double, double* %12, i64 %indvars.iv22
  %140 = bitcast double* %139 to i64*
  %141 = load i64, i64* %140, align 8, !tbaa !190
  %142 = getelementptr inbounds double, double* %24, i64 %136
  %143 = bitcast double* %142 to i64*
  store i64 %141, i64* %143, align 8, !tbaa !190
  %144 = getelementptr inbounds double, double* %14, i64 %indvars.iv22
  %145 = bitcast double* %144 to i64*
  %146 = load i64, i64* %145, align 8, !tbaa !190
  %147 = getelementptr inbounds double, double* %26, i64 %136
  %148 = bitcast double* %147 to i64*
  store i64 %146, i64* %148, align 8, !tbaa !190
  %149 = getelementptr inbounds double, double* %16, i64 %indvars.iv22
  %150 = bitcast double* %149 to i64*
  %151 = load i64, i64* %150, align 8, !tbaa !190
  %152 = getelementptr inbounds double, double* %28, i64 %136
  %153 = bitcast double* %152 to i64*
  store i64 %151, i64* %153, align 8, !tbaa !190
  %154 = getelementptr inbounds double, double* %18, i64 %indvars.iv22
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8, !tbaa !190
  %157 = getelementptr inbounds double, double* %30, i64 %136
  %158 = bitcast double* %157 to i64*
  store i64 %156, i64* %158, align 8, !tbaa !190
  %159 = getelementptr inbounds double, double* %20, i64 %indvars.iv22
  %160 = bitcast double* %159 to i64*
  %161 = load i64, i64* %160, align 8, !tbaa !190
  %162 = getelementptr inbounds double, double* %41, i64 %136
  %163 = bitcast double* %162 to i64*
  store i64 %161, i64* %163, align 8, !tbaa !190
  %164 = getelementptr inbounds double, double* %32, i64 %indvars.iv22
  %165 = bitcast double* %164 to i64*
  %166 = load i64, i64* %165, align 8, !tbaa !190
  %167 = getelementptr inbounds double, double* %43, i64 %136
  %168 = bitcast double* %167 to i64*
  store i64 %166, i64* %168, align 8, !tbaa !190
  br label %169

; <label>:169                                     ; preds = %125, %.lr.ph11
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %lftr.wideiv24 = trunc i64 %indvars.iv.next23 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv24, %51
  br i1 %exitcond25, label %.preheader.loopexit, label %.lr.ph11

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %170 = getelementptr inbounds double, double* %22, i64 %indvars.iv
  %171 = bitcast double* %170 to i64*
  %172 = load i64, i64* %171, align 8, !tbaa !190
  %173 = getelementptr inbounds double, double* %10, i64 %indvars.iv
  %174 = bitcast double* %173 to i64*
  store i64 %172, i64* %174, align 8, !tbaa !190
  %175 = getelementptr inbounds double, double* %24, i64 %indvars.iv
  %176 = bitcast double* %175 to i64*
  %177 = load i64, i64* %176, align 8, !tbaa !190
  %178 = getelementptr inbounds double, double* %12, i64 %indvars.iv
  %179 = bitcast double* %178 to i64*
  store i64 %177, i64* %179, align 8, !tbaa !190
  %180 = getelementptr inbounds double, double* %26, i64 %indvars.iv
  %181 = bitcast double* %180 to i64*
  %182 = load i64, i64* %181, align 8, !tbaa !190
  %183 = getelementptr inbounds double, double* %14, i64 %indvars.iv
  %184 = bitcast double* %183 to i64*
  store i64 %182, i64* %184, align 8, !tbaa !190
  %185 = getelementptr inbounds double, double* %28, i64 %indvars.iv
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8, !tbaa !190
  %188 = getelementptr inbounds double, double* %16, i64 %indvars.iv
  %189 = bitcast double* %188 to i64*
  store i64 %187, i64* %189, align 8, !tbaa !190
  %190 = getelementptr inbounds double, double* %30, i64 %indvars.iv
  %191 = bitcast double* %190 to i64*
  %192 = load i64, i64* %191, align 8, !tbaa !190
  %193 = getelementptr inbounds double, double* %18, i64 %indvars.iv
  %194 = bitcast double* %193 to i64*
  store i64 %192, i64* %194, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %109
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %195 = bitcast double** %19 to i64*
  %196 = load i64, i64* %195, align 8, !tbaa !90
  %197 = bitcast double** %40 to i64*
  %198 = load i64, i64* %197, align 8, !tbaa !97
  store i64 %198, i64* %195, align 8, !tbaa !90
  store i64 %196, i64* %197, align 8, !tbaa !97
  %199 = bitcast double** %31 to i64*
  %200 = load i64, i64* %199, align 8, !tbaa !96
  %201 = bitcast double** %42 to i64*
  %202 = load i64, i64* %201, align 8, !tbaa !98
  store i64 %202, i64* %199, align 8, !tbaa !96
  store i64 %200, i64* %201, align 8, !tbaa !98
  br label %203

; <label>:203                                     ; preds = %._crit_edge, %0
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @shifti_toroidal(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %msend = alloca i32, align 4
  %mrecv = alloca i32, align 4
  %msendright = alloca i32, align 4
  %msendleft = alloca i32, align 4
  %mrecvleft = alloca i32, align 4
  %mrecvright = alloca i32, align 4
  %istatus1 = alloca %struct.MPI_Status, align 4
  %istatus2 = alloca %struct.MPI_Status, align 4
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %3 = bitcast i32* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 1
  %7 = lshr i64 %4, 32
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %10 = load double, double* %9, align 8, !tbaa !212
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 67
  %12 = load double, double* %11, align 8, !tbaa !195
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %14 = load double, double* %13, align 8, !tbaa !196
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %16 = load double*, double** %15, align 8, !tbaa !85
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %18 = load double*, double** %17, align 8, !tbaa !86
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %20 = load double*, double** %19, align 8, !tbaa !87
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %22 = load double*, double** %21, align 8, !tbaa !88
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %24 = load double*, double** %23, align 8, !tbaa !89
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %26 = load double*, double** %25, align 8, !tbaa !90
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %28 = load double*, double** %27, align 8, !tbaa !91
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %30 = load double*, double** %29, align 8, !tbaa !92
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %32 = load double*, double** %31, align 8, !tbaa !93
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %34 = load double*, double** %33, align 8, !tbaa !94
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %36 = load double*, double** %35, align 8, !tbaa !95
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %38 = load double*, double** %37, align 8, !tbaa !96
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %40 = load i32*, i32** %39, align 8, !tbaa !108
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 2
  %42 = load i32, i32* %41, align 8, !tbaa !148
  %43 = fdiv double 1.000000e+00, %10
  %44 = fmul double %10, 2.000000e+00
  %45 = icmp eq i32 %42, 1
  br i1 %45, label %604, label %46

; <label>:46                                      ; preds = %0
  %47 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 12
  %48 = load i32, i32* %47, align 8, !tbaa !224
  %49 = icmp slt i32 %48, 64
  %. = select i1 %49, i32 64, i32 %48
  %50 = shl nsw i32 %., 3
  %51 = sext i32 %50 to i64
  %52 = shl nsw i64 %51, 2
  %53 = tail call fastcc i8* @_mm_malloc.162(i64 %52)
  %54 = bitcast i8* %53 to i32*
  %55 = icmp eq i8* %53, null
  br i1 %55, label %82, label %.preheader9

.preheader9:                                      ; preds = %46
  %56 = bitcast i32* %msend to i8*
  %57 = bitcast i32* %mrecv to i8*
  %58 = bitcast i32* %msendright to i8*
  %59 = bitcast i32* %msendleft to i8*
  %60 = bitcast i32* %mrecvleft to i8*
  %61 = bitcast i32* %mrecvright to i8*
  %62 = bitcast %struct.MPI_Status* %istatus1 to i8*
  %63 = bitcast %struct.MPI_Status* %istatus2 to i8*
  %64 = icmp sgt i32 %., 0
  %65 = getelementptr inbounds i8, i8* %53, i64 16
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds i8, i8* %53, i64 12
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %53, i64 8
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr inbounds i8, i8* %53, i64 4
  %72 = bitcast i8* %71 to i32*
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 18
  %74 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 17
  %75 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %76 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %78 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 16
  %80 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 15
  %81 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 8
  br label %83

; <label>:82                                      ; preds = %46
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.163, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 490, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:83                                      ; preds = %594, %.preheader9
  %iteration.0 = phi i32 [ %195, %594 ], [ 0, %.preheader9 ]
  %m0.0 = phi i32 [ %m0.1, %594 ], [ 0, %.preheader9 ]
  %mi_end.0 = phi i32 [ %mi_end.1, %594 ], [ %5, %.preheader9 ]
  %84 = icmp sgt i32 %iteration.0, %42
  br i1 %84, label %595, label %85

; <label>:85                                      ; preds = %83
  call void @llvm.lifetime.start(i64 4, i8* %56) #3
  call void @llvm.lifetime.start(i64 4, i8* %57) #3
  call void @llvm.lifetime.start(i64 4, i8* %58) #3
  call void @llvm.lifetime.start(i64 4, i8* %59) #3
  call void @llvm.lifetime.start(i64 4, i8* %60) #3
  call void @llvm.lifetime.start(i64 4, i8* %61) #3
  call void @llvm.lifetime.start(i64 20, i8* %62) #3
  call void @llvm.lifetime.start(i64 20, i8* %63) #3
  store i32 0, i32* %msendleft, align 4, !tbaa !1
  store i32 0, i32* %msendright, align 4, !tbaa !1
  store i32 0, i32* %msend, align 4, !tbaa !1
  %86 = load i32, i32* %47, align 8, !tbaa !224
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %89, label %88

; <label>:88                                      ; preds = %85
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5.164, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 523, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:89                                      ; preds = %85
  br i1 %64, label %91, label %90

; <label>:90                                      ; preds = %89
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.165, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 524, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:91                                      ; preds = %89
  call void @llvm.memset.p0i8.i64(i8* nonnull %53, i8 0, i64 20, i32 4, i1 false)
  %92 = call noalias i8* @malloc(i64 262144) #3
  %93 = call noalias i8* @malloc(i64 262144) #3
  %94 = icmp eq i8* %92, null
  br i1 %94, label %95, label %96

; <label>:95                                      ; preds = %91
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7.166, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 532, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:96                                      ; preds = %91
  %97 = bitcast i8* %93 to i32*
  %98 = bitcast i8* %92 to i32*
  %99 = icmp eq i8* %93, null
  br i1 %99, label %103, label %.preheader8

.preheader8:                                      ; preds = %96
  %100 = icmp slt i32 %m0.0, %mi_end.0
  br i1 %100, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader8
  %101 = sext i32 %m0.0 to i64
  %102 = sext i32 %mi_end.0 to i64
  br label %.lr.ph

; <label>:103                                     ; preds = %96
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.167, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 533, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

.lr.ph:                                           ; preds = %162, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %101, %.lr.ph.preheader ], [ %indvars.iv.next, %162 ]
  %rstack.037 = phi i32* [ %97, %.lr.ph.preheader ], [ %rstack.2, %162 ]
  %lstack.036 = phi i32* [ %98, %.lr.ph.preheader ], [ %lstack.2, %162 ]
  %mrstack_max.035 = phi i32 [ 65536, %.lr.ph.preheader ], [ %mrstack_max.2, %162 ]
  %mlstack_max.034 = phi i32 [ 65536, %.lr.ph.preheader ], [ %mlstack_max.2, %162 ]
  %104 = getelementptr inbounds double, double* %20, i64 %indvars.iv
  %105 = load double, double* %104, align 8, !tbaa !190
  %106 = fcmp oeq double %105, 1.000000e+08
  br i1 %106, label %162, label %107

; <label>:107                                     ; preds = %.lr.ph
  %108 = fcmp olt double %44, %105
  %109 = select i1 %108, double %44, double %105
  %110 = fsub double %109, %12
  %111 = fsub double %105, %14
  %112 = fmul double %111, %110
  %113 = fcmp ogt double %112, 0.000000e+00
  br i1 %113, label %114, label %162

; <label>:114                                     ; preds = %107
  %115 = fmul double %110, 5.000000e-01
  %116 = fmul double %43, %115
  %117 = call double @floor(double %116) #16
  %118 = fsub double %116, %117
  %119 = load i32, i32* %54, align 4, !tbaa !1
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %54, align 4, !tbaa !1
  %121 = fcmp olt double %118, 5.000000e-01
  br i1 %121, label %122, label %142

; <label>:122                                     ; preds = %114
  %123 = load i32, i32* %72, align 4, !tbaa !1
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %72, align 4, !tbaa !1
  %125 = icmp eq i32 %123, %mrstack_max.035
  br i1 %125, label %126, label %138

; <label>:126                                     ; preds = %122
  %127 = shl nsw i32 %mrstack_max.035, 1
  %128 = sext i32 %127 to i64
  %129 = shl nsw i64 %128, 2
  %130 = call noalias i8* @malloc(i64 %129) #3
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %133

; <label>:132                                     ; preds = %126
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.168, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 565, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:133                                     ; preds = %126
  %134 = bitcast i8* %130 to i32*
  %135 = bitcast i32* %rstack.037 to i8*
  %136 = sext i32 %mrstack_max.035 to i64
  %137 = shl nsw i64 %136, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %130, i8* %135, i64 %137, i32 4, i1 false)
  call void @free(i8* %135) #3
  br label %138

; <label>:138                                     ; preds = %133, %122
  %mrstack_max.1 = phi i32 [ %127, %133 ], [ %mrstack_max.035, %122 ]
  %rstack.1 = phi i32* [ %134, %133 ], [ %rstack.037, %122 ]
  %139 = sext i32 %123 to i64
  %140 = getelementptr inbounds i32, i32* %rstack.1, i64 %139
  %141 = trunc i64 %indvars.iv to i32
  store i32 %141, i32* %140, align 4, !tbaa !1
  br label %162

; <label>:142                                     ; preds = %114
  %143 = load i32, i32* %70, align 4, !tbaa !1
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %70, align 4, !tbaa !1
  %145 = icmp eq i32 %143, %mlstack_max.034
  br i1 %145, label %146, label %158

; <label>:146                                     ; preds = %142
  %147 = shl nsw i32 %mlstack_max.034, 1
  %148 = sext i32 %147 to i64
  %149 = shl nsw i64 %148, 2
  %150 = call noalias i8* @malloc(i64 %149) #3
  %151 = icmp eq i8* %150, null
  br i1 %151, label %152, label %153

; <label>:152                                     ; preds = %146
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.168, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 584, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

; <label>:153                                     ; preds = %146
  %154 = bitcast i8* %150 to i32*
  %155 = bitcast i32* %lstack.036 to i8*
  %156 = sext i32 %mlstack_max.034 to i64
  %157 = shl nsw i64 %156, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %150, i8* %155, i64 %157, i32 4, i1 false)
  call void @free(i8* %155) #3
  br label %158

; <label>:158                                     ; preds = %153, %142
  %mlstack_max.1 = phi i32 [ %147, %153 ], [ %mlstack_max.034, %142 ]
  %lstack.1 = phi i32* [ %154, %153 ], [ %lstack.036, %142 ]
  %159 = sext i32 %143 to i64
  %160 = getelementptr inbounds i32, i32* %lstack.1, i64 %159
  %161 = trunc i64 %indvars.iv to i32
  store i32 %161, i32* %160, align 4, !tbaa !1
  br label %162

; <label>:162                                     ; preds = %158, %138, %107, %.lr.ph
  %mlstack_max.2 = phi i32 [ %mlstack_max.034, %.lr.ph ], [ %mlstack_max.034, %138 ], [ %mlstack_max.1, %158 ], [ %mlstack_max.034, %107 ]
  %mrstack_max.2 = phi i32 [ %mrstack_max.035, %.lr.ph ], [ %mrstack_max.1, %138 ], [ %mrstack_max.035, %158 ], [ %mrstack_max.035, %107 ]
  %lstack.2 = phi i32* [ %lstack.036, %.lr.ph ], [ %lstack.036, %138 ], [ %lstack.1, %158 ], [ %lstack.036, %107 ]
  %rstack.2 = phi i32* [ %rstack.037, %.lr.ph ], [ %rstack.1, %138 ], [ %rstack.037, %158 ], [ %rstack.037, %107 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %163 = icmp slt i64 %indvars.iv.next, %102
  br i1 %163, label %.lr.ph, label %.._crit_edge_crit_edge

.._crit_edge_crit_edge:                           ; preds = %162
  %.pre = load i32, i32* %72, align 4, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %.preheader8
  %164 = phi i32 [ 0, %.preheader8 ], [ %.pre, %.._crit_edge_crit_edge ]
  %rstack.0.lcssa = phi i32* [ %97, %.preheader8 ], [ %rstack.2, %.._crit_edge_crit_edge ]
  %lstack.0.lcssa = phi i32* [ %98, %.preheader8 ], [ %lstack.2, %.._crit_edge_crit_edge ]
  store i32 0, i32* %68, align 4, !tbaa !1
  store i32 0, i32* %66, align 4, !tbaa !1
  store i32 %164, i32* %msendright, align 4, !tbaa !1
  %165 = load i32, i32* %66, align 4, !tbaa !1
  %166 = load i32, i32* %70, align 4, !tbaa !1
  %167 = add nsw i32 %166, %165
  store i32 %167, i32* %msendleft, align 4, !tbaa !1
  %168 = add nsw i32 %167, %164
  store i32 %168, i32* %msend, align 4, !tbaa !1
  %169 = icmp slt i32 %168, %5
  br i1 %169, label %175, label %170

; <label>:170                                     ; preds = %._crit_edge
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %172 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %173 = load i32, i32* %172, align 8, !tbaa !27
  %174 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %171, i8* nonnull getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10.169, i64 0, i64 0), i32 %173, i32 %168, i32 %167, i32 %164, i32 %5) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:175                                     ; preds = %._crit_edge
  %176 = load i32, i32* %68, align 4, !tbaa !1
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32* %40, i64 %177
  %179 = bitcast i32* %178 to i8*
  %180 = bitcast i32* %rstack.0.lcssa to i8*
  %181 = load i32, i32* %72, align 4, !tbaa !1
  %182 = sext i32 %181 to i64
  %183 = shl nsw i64 %182, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %179, i8* %180, i64 %183, i32 4, i1 false)
  %184 = load i32, i32* %msendright, align 4, !tbaa !1
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %40, i64 %185
  %187 = load i32, i32* %66, align 4, !tbaa !1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %186, i64 %188
  %190 = bitcast i32* %189 to i8*
  %191 = bitcast i32* %lstack.0.lcssa to i8*
  %192 = load i32, i32* %70, align 4, !tbaa !1
  %193 = sext i32 %192 to i64
  %194 = shl nsw i64 %193, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %190, i8* %191, i64 %194, i32 4, i1 false)
  call void @free(i8* %191) #3
  call void @free(i8* %180) #3
  %195 = add nuw nsw i32 %iteration.0, 1
  %196 = icmp sgt i32 %iteration.0, 0
  br i1 %196, label %197, label %201

; <label>:197                                     ; preds = %175
  store i32 0, i32* %mrecv, align 4, !tbaa !1
  %198 = call i32 @MPI_Allreduce(i8* nonnull %56, i8* %57, i32 1, i32 1275069445, i32 1476395011, i32 1140850688) #3
  %199 = load i32, i32* %mrecv, align 4, !tbaa !1
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %594, label %201

; <label>:201                                     ; preds = %197, %175
  %202 = load i32, i32* %msendleft, align 4, !tbaa !1
  %203 = load i32, i32* %msendright, align 4, !tbaa !1
  %204 = add nsw i32 %203, %202
  %205 = load i32, i32* %73, align 8, !tbaa !235
  %206 = icmp slt i32 %204, %205
  br i1 %206, label %212, label %207

; <label>:207                                     ; preds = %201
  %208 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %209 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %210 = load i32, i32* %209, align 8, !tbaa !27
  %211 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %208, i8* nonnull getelementptr inbounds ([69 x i8], [69 x i8]* @.str.11.170, i64 0, i64 0), i32 %210, i32 %202, i32 %203, i32 %205) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:212                                     ; preds = %201
  %213 = load double*, double** %74, align 8, !tbaa !110
  %214 = mul nsw i32 %202, 12
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds double, double* %213, i64 %215
  %217 = icmp sgt i32 %203, 0
  br i1 %217, label %.lr.ph43, label %.preheader7

.lr.ph43:                                         ; preds = %212
  %218 = sext i32 %203 to i64
  br label %222

.preheader7.loopexit:                             ; preds = %222
  br label %.preheader7

.preheader7:                                      ; preds = %.preheader7.loopexit, %212
  %219 = icmp sgt i32 %202, 0
  br i1 %219, label %.lr.ph45, label %._crit_edge46

.lr.ph45:                                         ; preds = %.preheader7
  %220 = sext i32 %203 to i64
  %221 = sext i32 %202 to i64
  br label %316

; <label>:222                                     ; preds = %222, %.lr.ph43
  %indvars.iv73 = phi i64 [ 0, %.lr.ph43 ], [ %indvars.iv.next74, %222 ]
  %223 = getelementptr inbounds i32, i32* %40, i64 %indvars.iv73
  %224 = load i32, i32* %223, align 4, !tbaa !1
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds double, double* %16, i64 %225
  %227 = bitcast double* %226 to i64*
  %228 = load i64, i64* %227, align 8, !tbaa !190
  %229 = mul nuw nsw i64 %indvars.iv73, 12
  %230 = getelementptr inbounds double, double* %216, i64 %229
  %231 = bitcast double* %230 to i64*
  store i64 %228, i64* %231, align 8, !tbaa !190
  %232 = getelementptr inbounds double, double* %18, i64 %225
  %233 = bitcast double* %232 to i64*
  %234 = load i64, i64* %233, align 8, !tbaa !190
  %235 = or i64 %229, 1
  %236 = getelementptr inbounds double, double* %216, i64 %235
  %237 = bitcast double* %236 to i64*
  store i64 %234, i64* %237, align 8, !tbaa !190
  %238 = getelementptr inbounds double, double* %20, i64 %225
  %239 = bitcast double* %238 to i64*
  %240 = load i64, i64* %239, align 8, !tbaa !190
  %241 = or i64 %229, 2
  %242 = getelementptr inbounds double, double* %216, i64 %241
  %243 = bitcast double* %242 to i64*
  store i64 %240, i64* %243, align 8, !tbaa !190
  store double 1.000000e+08, double* %238, align 8, !tbaa !190
  %244 = getelementptr inbounds double, double* %22, i64 %225
  %245 = bitcast double* %244 to i64*
  %246 = load i64, i64* %245, align 8, !tbaa !190
  %247 = or i64 %229, 3
  %248 = getelementptr inbounds double, double* %216, i64 %247
  %249 = bitcast double* %248 to i64*
  store i64 %246, i64* %249, align 8, !tbaa !190
  %250 = getelementptr inbounds double, double* %24, i64 %225
  %251 = bitcast double* %250 to i64*
  %252 = load i64, i64* %251, align 8, !tbaa !190
  %253 = add nuw nsw i64 %229, 4
  %254 = getelementptr inbounds double, double* %216, i64 %253
  %255 = bitcast double* %254 to i64*
  store i64 %252, i64* %255, align 8, !tbaa !190
  %256 = getelementptr inbounds double, double* %26, i64 %225
  %257 = bitcast double* %256 to i64*
  %258 = load i64, i64* %257, align 8, !tbaa !190
  %259 = add nuw nsw i64 %229, 5
  %260 = getelementptr inbounds double, double* %216, i64 %259
  %261 = bitcast double* %260 to i64*
  store i64 %258, i64* %261, align 8, !tbaa !190
  %262 = getelementptr inbounds double, double* %28, i64 %225
  %263 = bitcast double* %262 to i64*
  %264 = load i64, i64* %263, align 8, !tbaa !190
  %265 = add nuw nsw i64 %229, 6
  %266 = getelementptr inbounds double, double* %216, i64 %265
  %267 = bitcast double* %266 to i64*
  store i64 %264, i64* %267, align 8, !tbaa !190
  %268 = getelementptr inbounds double, double* %30, i64 %225
  %269 = bitcast double* %268 to i64*
  %270 = load i64, i64* %269, align 8, !tbaa !190
  %271 = add nuw nsw i64 %229, 7
  %272 = getelementptr inbounds double, double* %216, i64 %271
  %273 = bitcast double* %272 to i64*
  store i64 %270, i64* %273, align 8, !tbaa !190
  %274 = getelementptr inbounds double, double* %32, i64 %225
  %275 = bitcast double* %274 to i64*
  %276 = load i64, i64* %275, align 8, !tbaa !190
  %277 = add nuw nsw i64 %229, 8
  %278 = getelementptr inbounds double, double* %216, i64 %277
  %279 = bitcast double* %278 to i64*
  store i64 %276, i64* %279, align 8, !tbaa !190
  store double 1.000000e+08, double* %274, align 8, !tbaa !190
  %280 = getelementptr inbounds double, double* %34, i64 %225
  %281 = bitcast double* %280 to i64*
  %282 = load i64, i64* %281, align 8, !tbaa !190
  %283 = add nuw nsw i64 %229, 9
  %284 = getelementptr inbounds double, double* %216, i64 %283
  %285 = bitcast double* %284 to i64*
  store i64 %282, i64* %285, align 8, !tbaa !190
  %286 = getelementptr inbounds double, double* %36, i64 %225
  %287 = bitcast double* %286 to i64*
  %288 = load i64, i64* %287, align 8, !tbaa !190
  %289 = add nuw nsw i64 %229, 10
  %290 = getelementptr inbounds double, double* %216, i64 %289
  %291 = bitcast double* %290 to i64*
  store i64 %288, i64* %291, align 8, !tbaa !190
  %292 = getelementptr inbounds double, double* %38, i64 %225
  %293 = bitcast double* %292 to i64*
  %294 = load i64, i64* %293, align 8, !tbaa !190
  %295 = add nuw nsw i64 %229, 11
  %296 = getelementptr inbounds double, double* %216, i64 %295
  %297 = bitcast double* %296 to i64*
  store i64 %294, i64* %297, align 8, !tbaa !190
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1
  %298 = icmp slt i64 %indvars.iv.next74, %218
  br i1 %298, label %222, label %.preheader7.loopexit

._crit_edge46.loopexit:                           ; preds = %316
  br label %._crit_edge46

._crit_edge46:                                    ; preds = %._crit_edge46.loopexit, %.preheader7
  %299 = load i32, i32* %75, align 4, !tbaa !229
  %300 = bitcast i32* %76 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = trunc i64 %301 to i32
  store i32 0, i32* %mrecvleft, align 4, !tbaa !1
  %303 = lshr i64 %301, 32
  %304 = trunc i64 %303 to i32
  %305 = load i32, i32* %78, align 8, !tbaa !279
  %306 = call i32 @MPI_Sendrecv(i8* nonnull %58, i32 1, i32 1275069445, i32 %304, i32 %299, i8* %60, i32 1, i32 1275069445, i32 %302, i32 %302, i32 %305, %struct.MPI_Status* nonnull %istatus1) #3
  %307 = load i32, i32* %77, align 4, !tbaa !231
  store i32 0, i32* %mrecvright, align 4, !tbaa !1
  %308 = load i32, i32* %76, align 8, !tbaa !230
  %309 = load i32, i32* %78, align 8, !tbaa !279
  %310 = call i32 @MPI_Sendrecv(i8* nonnull %59, i32 1, i32 1275069445, i32 %308, i32 %299, i8* %61, i32 1, i32 1275069445, i32 %307, i32 %307, i32 %309, %struct.MPI_Status* nonnull %istatus2) #3
  %311 = load i32, i32* %mrecvleft, align 4, !tbaa !1
  %312 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %313 = add nsw i32 %312, %311
  %314 = load i32, i32* %79, align 8, !tbaa !234
  %315 = icmp slt i32 %313, %314
  br i1 %315, label %399, label %394

; <label>:316                                     ; preds = %316, %.lr.ph45
  %indvars.iv75 = phi i64 [ 0, %.lr.ph45 ], [ %indvars.iv.next76, %316 ]
  %317 = add nsw i64 %220, %indvars.iv75
  %318 = getelementptr inbounds i32, i32* %40, i64 %317
  %319 = load i32, i32* %318, align 4, !tbaa !1
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds double, double* %16, i64 %320
  %322 = bitcast double* %321 to i64*
  %323 = load i64, i64* %322, align 8, !tbaa !190
  %324 = mul nuw nsw i64 %indvars.iv75, 12
  %325 = getelementptr inbounds double, double* %213, i64 %324
  %326 = bitcast double* %325 to i64*
  store i64 %323, i64* %326, align 8, !tbaa !190
  %327 = getelementptr inbounds double, double* %18, i64 %320
  %328 = bitcast double* %327 to i64*
  %329 = load i64, i64* %328, align 8, !tbaa !190
  %330 = or i64 %324, 1
  %331 = getelementptr inbounds double, double* %213, i64 %330
  %332 = bitcast double* %331 to i64*
  store i64 %329, i64* %332, align 8, !tbaa !190
  %333 = getelementptr inbounds double, double* %20, i64 %320
  %334 = bitcast double* %333 to i64*
  %335 = load i64, i64* %334, align 8, !tbaa !190
  %336 = or i64 %324, 2
  %337 = getelementptr inbounds double, double* %213, i64 %336
  %338 = bitcast double* %337 to i64*
  store i64 %335, i64* %338, align 8, !tbaa !190
  store double 1.000000e+08, double* %333, align 8, !tbaa !190
  %339 = getelementptr inbounds double, double* %22, i64 %320
  %340 = bitcast double* %339 to i64*
  %341 = load i64, i64* %340, align 8, !tbaa !190
  %342 = or i64 %324, 3
  %343 = getelementptr inbounds double, double* %213, i64 %342
  %344 = bitcast double* %343 to i64*
  store i64 %341, i64* %344, align 8, !tbaa !190
  %345 = getelementptr inbounds double, double* %24, i64 %320
  %346 = bitcast double* %345 to i64*
  %347 = load i64, i64* %346, align 8, !tbaa !190
  %348 = add nuw nsw i64 %324, 4
  %349 = getelementptr inbounds double, double* %213, i64 %348
  %350 = bitcast double* %349 to i64*
  store i64 %347, i64* %350, align 8, !tbaa !190
  %351 = getelementptr inbounds double, double* %26, i64 %320
  %352 = bitcast double* %351 to i64*
  %353 = load i64, i64* %352, align 8, !tbaa !190
  %354 = add nuw nsw i64 %324, 5
  %355 = getelementptr inbounds double, double* %213, i64 %354
  %356 = bitcast double* %355 to i64*
  store i64 %353, i64* %356, align 8, !tbaa !190
  %357 = getelementptr inbounds double, double* %28, i64 %320
  %358 = bitcast double* %357 to i64*
  %359 = load i64, i64* %358, align 8, !tbaa !190
  %360 = add nuw nsw i64 %324, 6
  %361 = getelementptr inbounds double, double* %213, i64 %360
  %362 = bitcast double* %361 to i64*
  store i64 %359, i64* %362, align 8, !tbaa !190
  %363 = getelementptr inbounds double, double* %30, i64 %320
  %364 = bitcast double* %363 to i64*
  %365 = load i64, i64* %364, align 8, !tbaa !190
  %366 = add nuw nsw i64 %324, 7
  %367 = getelementptr inbounds double, double* %213, i64 %366
  %368 = bitcast double* %367 to i64*
  store i64 %365, i64* %368, align 8, !tbaa !190
  %369 = getelementptr inbounds double, double* %32, i64 %320
  %370 = bitcast double* %369 to i64*
  %371 = load i64, i64* %370, align 8, !tbaa !190
  %372 = add nuw nsw i64 %324, 8
  %373 = getelementptr inbounds double, double* %213, i64 %372
  %374 = bitcast double* %373 to i64*
  store i64 %371, i64* %374, align 8, !tbaa !190
  store double 1.000000e+08, double* %369, align 8, !tbaa !190
  %375 = getelementptr inbounds double, double* %34, i64 %320
  %376 = bitcast double* %375 to i64*
  %377 = load i64, i64* %376, align 8, !tbaa !190
  %378 = add nuw nsw i64 %324, 9
  %379 = getelementptr inbounds double, double* %213, i64 %378
  %380 = bitcast double* %379 to i64*
  store i64 %377, i64* %380, align 8, !tbaa !190
  %381 = getelementptr inbounds double, double* %36, i64 %320
  %382 = bitcast double* %381 to i64*
  %383 = load i64, i64* %382, align 8, !tbaa !190
  %384 = add nuw nsw i64 %324, 10
  %385 = getelementptr inbounds double, double* %213, i64 %384
  %386 = bitcast double* %385 to i64*
  store i64 %383, i64* %386, align 8, !tbaa !190
  %387 = getelementptr inbounds double, double* %38, i64 %320
  %388 = bitcast double* %387 to i64*
  %389 = load i64, i64* %388, align 8, !tbaa !190
  %390 = add nuw nsw i64 %324, 11
  %391 = getelementptr inbounds double, double* %213, i64 %390
  %392 = bitcast double* %391 to i64*
  store i64 %389, i64* %392, align 8, !tbaa !190
  %indvars.iv.next76 = add nuw nsw i64 %indvars.iv75, 1
  %393 = icmp slt i64 %indvars.iv.next76, %221
  br i1 %393, label %316, label %._crit_edge46.loopexit

; <label>:394                                     ; preds = %._crit_edge46
  %395 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %396 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %397 = load i32, i32* %396, align 8, !tbaa !27
  %398 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %395, i8* nonnull getelementptr inbounds ([69 x i8], [69 x i8]* @.str.12.171, i64 0, i64 0), i32 %397, i32 %311, i32 %312, i32 %314) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:399                                     ; preds = %._crit_edge46
  %400 = load double*, double** %80, align 8, !tbaa !109
  %401 = mul nsw i32 %311, 12
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds double, double* %400, i64 %402
  %404 = load i64, i64* %300, align 8
  %405 = trunc i64 %404 to i32
  %406 = bitcast double* %216 to i8*
  %407 = load i32, i32* %msendright, align 4, !tbaa !1
  %408 = mul nsw i32 %407, 12
  %409 = lshr i64 %404, 32
  %410 = trunc i64 %409 to i32
  %411 = bitcast double* %400 to i8*
  %412 = load i32, i32* %78, align 8, !tbaa !279
  %413 = call i32 @MPI_Sendrecv(i8* %406, i32 %408, i32 1275070475, i32 %410, i32 %299, i8* %411, i32 %401, i32 1275070475, i32 %405, i32 %405, i32 %412, %struct.MPI_Status* nonnull %istatus1) #3
  %414 = load i32, i32* %77, align 4, !tbaa !231
  %415 = bitcast double* %213 to i8*
  %416 = load i32, i32* %msendleft, align 4, !tbaa !1
  %417 = mul nsw i32 %416, 12
  %418 = load i32, i32* %76, align 8, !tbaa !230
  %419 = bitcast double* %403 to i8*
  %420 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %421 = mul nsw i32 %420, 12
  %422 = load i32, i32* %78, align 8, !tbaa !279
  %423 = call i32 @MPI_Sendrecv(i8* %415, i32 %417, i32 1275070475, i32 %418, i32 %299, i8* %419, i32 %421, i32 1275070475, i32 %414, i32 %414, i32 %422, %struct.MPI_Status* nonnull %istatus2) #3
  %424 = load i32, i32* %mrecvleft, align 4, !tbaa !1
  %425 = add nsw i32 %424, %mi_end.0
  %426 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %427 = add nsw i32 %425, %426
  %428 = icmp slt i32 %427, %8
  br i1 %428, label %.preheader6, label %432

.preheader6:                                      ; preds = %399
  %429 = icmp sgt i32 %424, 0
  br i1 %429, label %.lr.ph48, label %.preheader

.lr.ph48:                                         ; preds = %.preheader6
  %430 = sext i32 %mi_end.0 to i64
  %431 = sext i32 %424 to i64
  br label %435

; <label>:432                                     ; preds = %399
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.13.172, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 780, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.shifti_toroidal, i64 0, i64 0)) #15
  unreachable

.preheader.loopexit:                              ; preds = %435
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader6
  %433 = icmp sgt i32 %426, 0
  br i1 %433, label %.lr.ph50, label %._crit_edge51

.lr.ph50:                                         ; preds = %.preheader
  %434 = sext i32 %426 to i64
  br label %516

; <label>:435                                     ; preds = %435, %.lr.ph48
  %indvars.iv77 = phi i64 [ 0, %.lr.ph48 ], [ %indvars.iv.next78, %435 ]
  %436 = add nsw i64 %indvars.iv77, %430
  %437 = mul nuw nsw i64 %indvars.iv77, 12
  %438 = getelementptr inbounds double, double* %400, i64 %437
  %439 = bitcast double* %438 to i64*
  %440 = load i64, i64* %439, align 8, !tbaa !190
  %441 = getelementptr inbounds double, double* %16, i64 %436
  %442 = bitcast double* %441 to i64*
  store i64 %440, i64* %442, align 8, !tbaa !190
  %443 = or i64 %437, 1
  %444 = getelementptr inbounds double, double* %400, i64 %443
  %445 = bitcast double* %444 to i64*
  %446 = load i64, i64* %445, align 8, !tbaa !190
  %447 = getelementptr inbounds double, double* %18, i64 %436
  %448 = bitcast double* %447 to i64*
  store i64 %446, i64* %448, align 8, !tbaa !190
  %449 = or i64 %437, 2
  %450 = getelementptr inbounds double, double* %400, i64 %449
  %451 = bitcast double* %450 to i64*
  %452 = load i64, i64* %451, align 8, !tbaa !190
  %453 = getelementptr inbounds double, double* %20, i64 %436
  %454 = bitcast double* %453 to i64*
  store i64 %452, i64* %454, align 8, !tbaa !190
  %455 = or i64 %437, 3
  %456 = getelementptr inbounds double, double* %400, i64 %455
  %457 = bitcast double* %456 to i64*
  %458 = load i64, i64* %457, align 8, !tbaa !190
  %459 = getelementptr inbounds double, double* %22, i64 %436
  %460 = bitcast double* %459 to i64*
  store i64 %458, i64* %460, align 8, !tbaa !190
  %461 = add nuw nsw i64 %437, 4
  %462 = getelementptr inbounds double, double* %400, i64 %461
  %463 = bitcast double* %462 to i64*
  %464 = load i64, i64* %463, align 8, !tbaa !190
  %465 = getelementptr inbounds double, double* %24, i64 %436
  %466 = bitcast double* %465 to i64*
  store i64 %464, i64* %466, align 8, !tbaa !190
  %467 = add nuw nsw i64 %437, 5
  %468 = getelementptr inbounds double, double* %400, i64 %467
  %469 = bitcast double* %468 to i64*
  %470 = load i64, i64* %469, align 8, !tbaa !190
  %471 = getelementptr inbounds double, double* %26, i64 %436
  %472 = bitcast double* %471 to i64*
  store i64 %470, i64* %472, align 8, !tbaa !190
  %473 = add nuw nsw i64 %437, 6
  %474 = getelementptr inbounds double, double* %400, i64 %473
  %475 = bitcast double* %474 to i64*
  %476 = load i64, i64* %475, align 8, !tbaa !190
  %477 = getelementptr inbounds double, double* %28, i64 %436
  %478 = bitcast double* %477 to i64*
  store i64 %476, i64* %478, align 8, !tbaa !190
  %479 = add nuw nsw i64 %437, 7
  %480 = getelementptr inbounds double, double* %400, i64 %479
  %481 = bitcast double* %480 to i64*
  %482 = load i64, i64* %481, align 8, !tbaa !190
  %483 = getelementptr inbounds double, double* %30, i64 %436
  %484 = bitcast double* %483 to i64*
  store i64 %482, i64* %484, align 8, !tbaa !190
  %485 = add nuw nsw i64 %437, 8
  %486 = getelementptr inbounds double, double* %400, i64 %485
  %487 = bitcast double* %486 to i64*
  %488 = load i64, i64* %487, align 8, !tbaa !190
  %489 = getelementptr inbounds double, double* %32, i64 %436
  %490 = bitcast double* %489 to i64*
  store i64 %488, i64* %490, align 8, !tbaa !190
  %491 = add nuw nsw i64 %437, 9
  %492 = getelementptr inbounds double, double* %400, i64 %491
  %493 = bitcast double* %492 to i64*
  %494 = load i64, i64* %493, align 8, !tbaa !190
  %495 = getelementptr inbounds double, double* %34, i64 %436
  %496 = bitcast double* %495 to i64*
  store i64 %494, i64* %496, align 8, !tbaa !190
  %497 = add nuw nsw i64 %437, 10
  %498 = getelementptr inbounds double, double* %400, i64 %497
  %499 = bitcast double* %498 to i64*
  %500 = load i64, i64* %499, align 8, !tbaa !190
  %501 = getelementptr inbounds double, double* %36, i64 %436
  %502 = bitcast double* %501 to i64*
  store i64 %500, i64* %502, align 8, !tbaa !190
  %503 = add nuw nsw i64 %437, 11
  %504 = getelementptr inbounds double, double* %400, i64 %503
  %505 = bitcast double* %504 to i64*
  %506 = load i64, i64* %505, align 8, !tbaa !190
  %507 = getelementptr inbounds double, double* %38, i64 %436
  %508 = bitcast double* %507 to i64*
  store i64 %506, i64* %508, align 8, !tbaa !190
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %509 = icmp slt i64 %indvars.iv.next78, %431
  br i1 %509, label %435, label %.preheader.loopexit

._crit_edge51.loopexit:                           ; preds = %516
  br label %._crit_edge51

._crit_edge51:                                    ; preds = %._crit_edge51.loopexit, %.preheader
  %510 = add nsw i32 %424, %426
  %511 = load i32, i32* %2, align 8, !tbaa !192
  %512 = add nsw i32 %510, %511
  store i32 %512, i32* %2, align 8, !tbaa !192
  %513 = load i32, i32* %msend, align 4, !tbaa !1
  %514 = load i32, i32* %81, align 8, !tbaa !210
  %515 = add nsw i32 %514, %513
  store i32 %515, i32* %81, align 8, !tbaa !210
  br label %594

; <label>:516                                     ; preds = %516, %.lr.ph50
  %indvars.iv79 = phi i64 [ 0, %.lr.ph50 ], [ %indvars.iv.next80, %516 ]
  %517 = trunc i64 %indvars.iv79 to i32
  %518 = add i32 %517, %mi_end.0
  %519 = add i32 %518, %424
  %520 = mul nuw nsw i64 %indvars.iv79, 12
  %521 = getelementptr inbounds double, double* %403, i64 %520
  %522 = bitcast double* %521 to i64*
  %523 = load i64, i64* %522, align 8, !tbaa !190
  %524 = sext i32 %519 to i64
  %525 = getelementptr inbounds double, double* %16, i64 %524
  %526 = bitcast double* %525 to i64*
  store i64 %523, i64* %526, align 8, !tbaa !190
  %527 = or i64 %520, 1
  %528 = getelementptr inbounds double, double* %403, i64 %527
  %529 = bitcast double* %528 to i64*
  %530 = load i64, i64* %529, align 8, !tbaa !190
  %531 = getelementptr inbounds double, double* %18, i64 %524
  %532 = bitcast double* %531 to i64*
  store i64 %530, i64* %532, align 8, !tbaa !190
  %533 = or i64 %520, 2
  %534 = getelementptr inbounds double, double* %403, i64 %533
  %535 = bitcast double* %534 to i64*
  %536 = load i64, i64* %535, align 8, !tbaa !190
  %537 = getelementptr inbounds double, double* %20, i64 %524
  %538 = bitcast double* %537 to i64*
  store i64 %536, i64* %538, align 8, !tbaa !190
  %539 = or i64 %520, 3
  %540 = getelementptr inbounds double, double* %403, i64 %539
  %541 = bitcast double* %540 to i64*
  %542 = load i64, i64* %541, align 8, !tbaa !190
  %543 = getelementptr inbounds double, double* %22, i64 %524
  %544 = bitcast double* %543 to i64*
  store i64 %542, i64* %544, align 8, !tbaa !190
  %545 = add nuw nsw i64 %520, 4
  %546 = getelementptr inbounds double, double* %403, i64 %545
  %547 = bitcast double* %546 to i64*
  %548 = load i64, i64* %547, align 8, !tbaa !190
  %549 = getelementptr inbounds double, double* %24, i64 %524
  %550 = bitcast double* %549 to i64*
  store i64 %548, i64* %550, align 8, !tbaa !190
  %551 = add nuw nsw i64 %520, 5
  %552 = getelementptr inbounds double, double* %403, i64 %551
  %553 = bitcast double* %552 to i64*
  %554 = load i64, i64* %553, align 8, !tbaa !190
  %555 = getelementptr inbounds double, double* %26, i64 %524
  %556 = bitcast double* %555 to i64*
  store i64 %554, i64* %556, align 8, !tbaa !190
  %557 = add nuw nsw i64 %520, 6
  %558 = getelementptr inbounds double, double* %403, i64 %557
  %559 = bitcast double* %558 to i64*
  %560 = load i64, i64* %559, align 8, !tbaa !190
  %561 = getelementptr inbounds double, double* %28, i64 %524
  %562 = bitcast double* %561 to i64*
  store i64 %560, i64* %562, align 8, !tbaa !190
  %563 = add nuw nsw i64 %520, 7
  %564 = getelementptr inbounds double, double* %403, i64 %563
  %565 = bitcast double* %564 to i64*
  %566 = load i64, i64* %565, align 8, !tbaa !190
  %567 = getelementptr inbounds double, double* %30, i64 %524
  %568 = bitcast double* %567 to i64*
  store i64 %566, i64* %568, align 8, !tbaa !190
  %569 = add nuw nsw i64 %520, 8
  %570 = getelementptr inbounds double, double* %403, i64 %569
  %571 = bitcast double* %570 to i64*
  %572 = load i64, i64* %571, align 8, !tbaa !190
  %573 = getelementptr inbounds double, double* %32, i64 %524
  %574 = bitcast double* %573 to i64*
  store i64 %572, i64* %574, align 8, !tbaa !190
  %575 = add nuw nsw i64 %520, 9
  %576 = getelementptr inbounds double, double* %403, i64 %575
  %577 = bitcast double* %576 to i64*
  %578 = load i64, i64* %577, align 8, !tbaa !190
  %579 = getelementptr inbounds double, double* %34, i64 %524
  %580 = bitcast double* %579 to i64*
  store i64 %578, i64* %580, align 8, !tbaa !190
  %581 = add nuw nsw i64 %520, 10
  %582 = getelementptr inbounds double, double* %403, i64 %581
  %583 = bitcast double* %582 to i64*
  %584 = load i64, i64* %583, align 8, !tbaa !190
  %585 = getelementptr inbounds double, double* %36, i64 %524
  %586 = bitcast double* %585 to i64*
  store i64 %584, i64* %586, align 8, !tbaa !190
  %587 = add nuw nsw i64 %520, 11
  %588 = getelementptr inbounds double, double* %403, i64 %587
  %589 = bitcast double* %588 to i64*
  %590 = load i64, i64* %589, align 8, !tbaa !190
  %591 = getelementptr inbounds double, double* %38, i64 %524
  %592 = bitcast double* %591 to i64*
  store i64 %590, i64* %592, align 8, !tbaa !190
  %indvars.iv.next80 = add nuw nsw i64 %indvars.iv79, 1
  %593 = icmp slt i64 %indvars.iv.next80, %434
  br i1 %593, label %516, label %._crit_edge51.loopexit

; <label>:594                                     ; preds = %._crit_edge51, %197
  %.05 = phi i1 [ true, %._crit_edge51 ], [ false, %197 ]
  %m0.1 = phi i32 [ %mi_end.0, %._crit_edge51 ], [ %m0.0, %197 ]
  %mi_end.1 = phi i32 [ %512, %._crit_edge51 ], [ %mi_end.0, %197 ]
  call void @llvm.lifetime.end(i64 20, i8* %63) #3
  call void @llvm.lifetime.end(i64 20, i8* %62) #3
  call void @llvm.lifetime.end(i64 4, i8* %61) #3
  call void @llvm.lifetime.end(i64 4, i8* %60) #3
  call void @llvm.lifetime.end(i64 4, i8* %59) #3
  call void @llvm.lifetime.end(i64 4, i8* %58) #3
  call void @llvm.lifetime.end(i64 4, i8* %57) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %56) #3
  br i1 %.05, label %83, label %595

; <label>:595                                     ; preds = %594, %83
  %iteration.1 = phi i32 [ %195, %594 ], [ %iteration.0, %83 ]
  %mi_end.2 = phi i32 [ %mi_end.1, %594 ], [ %mi_end.0, %83 ]
  %596 = add nsw i32 %42, 1
  %597 = icmp sgt i32 %iteration.1, %596
  br i1 %597, label %598, label %603

; <label>:598                                     ; preds = %595
  %599 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %600 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %601 = load i32, i32* %600, align 8, !tbaa !27
  %602 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %599, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14.173, i64 0, i64 0), i32 %601) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:603                                     ; preds = %595
  store i32 %mi_end.2, i32* %2, align 8, !tbaa !192
  call fastcc void @_mm_free.174(i8* nonnull %53)
  br label %604

; <label>:604                                     ; preds = %603, %0
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc.162(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free.174(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @shifti_radial(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %msend = alloca i32, align 4
  %mrecv = alloca i32, align 4
  %msendright = alloca i32, align 4
  %msendleft = alloca i32, align 4
  %mrecvleft = alloca i32, align 4
  %mrecvright = alloca i32, align 4
  %istatus1 = alloca %struct.MPI_Status, align 4
  %istatus2 = alloca %struct.MPI_Status, align 4
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %3 = bitcast i32* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 1
  %7 = lshr i64 %4, 32
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %10 = load double*, double** %9, align 8, !tbaa !85
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %12 = load double*, double** %11, align 8, !tbaa !86
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %14 = load double*, double** %13, align 8, !tbaa !87
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %16 = load double*, double** %15, align 8, !tbaa !88
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %18 = load double*, double** %17, align 8, !tbaa !89
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %20 = load double*, double** %19, align 8, !tbaa !90
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %22 = load double*, double** %21, align 8, !tbaa !91
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %24 = load double*, double** %23, align 8, !tbaa !92
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %26 = load double*, double** %25, align 8, !tbaa !93
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %28 = load double*, double** %27, align 8, !tbaa !94
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %30 = load double*, double** %29, align 8, !tbaa !95
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %32 = load double*, double** %31, align 8, !tbaa !96
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %34 = load i32*, i32** %33, align 8, !tbaa !108
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 24
  %36 = load i32, i32* %35, align 4, !tbaa !257
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  %38 = load i32, i32* %37, align 4, !tbaa !258
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 16
  %40 = load double, double* %39, align 8, !tbaa !252
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 17
  %42 = load double, double* %41, align 8, !tbaa !253
  %43 = icmp eq i32 %36, 1
  br i1 %43, label %600, label %44

; <label>:44                                      ; preds = %0
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 12
  %46 = load i32, i32* %45, align 8, !tbaa !224
  %47 = icmp slt i32 %46, 64
  %. = select i1 %47, i32 64, i32 %46
  %48 = shl nsw i32 %., 3
  %49 = sext i32 %48 to i64
  %50 = shl nsw i64 %49, 2
  %51 = tail call fastcc i8* @_mm_malloc.162(i64 %50)
  %52 = bitcast i8* %51 to i32*
  %53 = icmp eq i8* %51, null
  br i1 %53, label %83, label %.preheader12

.preheader12:                                     ; preds = %44
  %54 = bitcast i32* %msend to i8*
  %55 = bitcast i32* %mrecv to i8*
  %56 = bitcast i32* %msendright to i8*
  %57 = bitcast i32* %msendleft to i8*
  %58 = bitcast i32* %mrecvleft to i8*
  %59 = bitcast i32* %mrecvright to i8*
  %60 = bitcast %struct.MPI_Status* %istatus1 to i8*
  %61 = bitcast %struct.MPI_Status* %istatus2 to i8*
  %62 = icmp sgt i32 %., 0
  %63 = getelementptr inbounds i8, i8* %51, i64 16
  %64 = bitcast i8* %63 to i32*
  %65 = getelementptr inbounds i8, i8* %51, i64 12
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds i8, i8* %51, i64 8
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %51, i64 4
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 18
  %72 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 17
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 5
  %74 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 29
  %75 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 30
  %76 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 13
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 16
  %78 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 15
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 8
  %80 = icmp sgt i32 %38, 0
  %81 = add nsw i32 %36, -1
  %82 = icmp slt i32 %38, %81
  br label %84

; <label>:83                                      ; preds = %44
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.163, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 952, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:84                                      ; preds = %590, %.preheader12
  %iteration.0 = phi i32 [ %191, %590 ], [ 0, %.preheader12 ]
  %m0.0 = phi i32 [ %m0.1, %590 ], [ 0, %.preheader12 ]
  %mi_end.0 = phi i32 [ %mi_end.1, %590 ], [ %5, %.preheader12 ]
  %85 = icmp sgt i32 %iteration.0, %36
  br i1 %85, label %591, label %86

; <label>:86                                      ; preds = %84
  call void @llvm.lifetime.start(i64 4, i8* %54) #3
  call void @llvm.lifetime.start(i64 4, i8* %55) #3
  call void @llvm.lifetime.start(i64 4, i8* %56) #3
  call void @llvm.lifetime.start(i64 4, i8* %57) #3
  call void @llvm.lifetime.start(i64 4, i8* %58) #3
  call void @llvm.lifetime.start(i64 4, i8* %59) #3
  call void @llvm.lifetime.start(i64 20, i8* %60) #3
  call void @llvm.lifetime.start(i64 20, i8* %61) #3
  store i32 0, i32* %msendleft, align 4, !tbaa !1
  store i32 0, i32* %msendright, align 4, !tbaa !1
  store i32 0, i32* %msend, align 4, !tbaa !1
  %87 = load i32, i32* %45, align 8, !tbaa !224
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %90, label %89

; <label>:89                                      ; preds = %86
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5.164, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 984, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:90                                      ; preds = %86
  br i1 %62, label %92, label %91

; <label>:91                                      ; preds = %90
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6.165, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 985, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:92                                      ; preds = %90
  call void @llvm.memset.p0i8.i64(i8* nonnull %51, i8 0, i64 20, i32 4, i1 false)
  %93 = call noalias i8* @malloc(i64 131072) #3
  %94 = call noalias i8* @malloc(i64 131072) #3
  %95 = icmp eq i8* %93, null
  br i1 %95, label %96, label %97

; <label>:96                                      ; preds = %92
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7.166, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 993, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:97                                      ; preds = %92
  %98 = bitcast i8* %94 to i32*
  %99 = bitcast i8* %93 to i32*
  %100 = icmp eq i8* %94, null
  br i1 %100, label %104, label %.preheader11

.preheader11:                                     ; preds = %97
  %101 = icmp slt i32 %m0.0, %mi_end.0
  br i1 %101, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader11
  %102 = sext i32 %m0.0 to i64
  %103 = sext i32 %mi_end.0 to i64
  br label %.lr.ph

; <label>:104                                     ; preds = %97
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.167, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 994, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

.lr.ph:                                           ; preds = %158, %.lr.ph.preheader
  %indvars.iv = phi i64 [ %102, %.lr.ph.preheader ], [ %indvars.iv.next, %158 ]
  %mlstack_max.040 = phi i32 [ 32768, %.lr.ph.preheader ], [ %mlstack_max.2, %158 ]
  %mrstack_max.039 = phi i32 [ 32768, %.lr.ph.preheader ], [ %mrstack_max.2, %158 ]
  %rstack.038 = phi i32* [ %98, %.lr.ph.preheader ], [ %rstack.2, %158 ]
  %lstack.037 = phi i32* [ %99, %.lr.ph.preheader ], [ %lstack.2, %158 ]
  %105 = getelementptr inbounds double, double* %14, i64 %indvars.iv
  %106 = load double, double* %105, align 8, !tbaa !190
  %107 = fcmp oeq double %106, 1.000000e+08
  br i1 %107, label %158, label %108

; <label>:108                                     ; preds = %.lr.ph
  %109 = getelementptr inbounds double, double* %10, i64 %indvars.iv
  %110 = load double, double* %109, align 8, !tbaa !190
  %111 = fmul double %110, 2.000000e+00
  %112 = call double @sqrt(double %111) #3
  %113 = fcmp olt double %112, %40
  %or.cond = and i1 %80, %113
  %114 = fcmp ogt double %112, %42
  %or.cond8 = and i1 %82, %114
  %or.cond57 = or i1 %or.cond, %or.cond8
  br i1 %or.cond57, label %115, label %158

; <label>:115                                     ; preds = %108
  %116 = load i32, i32* %52, align 4, !tbaa !1
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %52, align 4, !tbaa !1
  br i1 %114, label %118, label %138

; <label>:118                                     ; preds = %115
  %119 = load i32, i32* %70, align 4, !tbaa !1
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %70, align 4, !tbaa !1
  %121 = icmp eq i32 %119, %mrstack_max.039
  br i1 %121, label %122, label %134

; <label>:122                                     ; preds = %118
  %123 = shl nsw i32 %mrstack_max.039, 1
  %124 = sext i32 %123 to i64
  %125 = shl nsw i64 %124, 2
  %126 = call noalias i8* @malloc(i64 %125) #3
  %127 = icmp eq i8* %126, null
  br i1 %127, label %128, label %129

; <label>:128                                     ; preds = %122
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.168, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 1028, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:129                                     ; preds = %122
  %130 = bitcast i8* %126 to i32*
  %131 = bitcast i32* %rstack.038 to i8*
  %132 = sext i32 %mrstack_max.039 to i64
  %133 = shl nsw i64 %132, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %126, i8* %131, i64 %133, i32 4, i1 false)
  call void @free(i8* %131) #3
  br label %134

; <label>:134                                     ; preds = %129, %118
  %rstack.1 = phi i32* [ %130, %129 ], [ %rstack.038, %118 ]
  %mrstack_max.1 = phi i32 [ %123, %129 ], [ %mrstack_max.039, %118 ]
  %135 = sext i32 %119 to i64
  %136 = getelementptr inbounds i32, i32* %rstack.1, i64 %135
  %137 = trunc i64 %indvars.iv to i32
  store i32 %137, i32* %136, align 4, !tbaa !1
  br label %158

; <label>:138                                     ; preds = %115
  %139 = load i32, i32* %68, align 4, !tbaa !1
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %68, align 4, !tbaa !1
  %141 = icmp eq i32 %139, %mrstack_max.039
  br i1 %141, label %142, label %154

; <label>:142                                     ; preds = %138
  %143 = shl nsw i32 %mlstack_max.040, 1
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 2
  %146 = call noalias i8* @malloc(i64 %145) #3
  %147 = icmp eq i8* %146, null
  br i1 %147, label %148, label %149

; <label>:148                                     ; preds = %142
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.168, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 1043, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

; <label>:149                                     ; preds = %142
  %150 = bitcast i8* %146 to i32*
  %151 = bitcast i32* %lstack.037 to i8*
  %152 = sext i32 %mlstack_max.040 to i64
  %153 = shl nsw i64 %152, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %146, i8* %151, i64 %153, i32 4, i1 false)
  call void @free(i8* %151) #3
  br label %154

; <label>:154                                     ; preds = %149, %138
  %lstack.1 = phi i32* [ %150, %149 ], [ %lstack.037, %138 ]
  %mlstack_max.1 = phi i32 [ %143, %149 ], [ %mlstack_max.040, %138 ]
  %155 = sext i32 %139 to i64
  %156 = getelementptr inbounds i32, i32* %lstack.1, i64 %155
  %157 = trunc i64 %indvars.iv to i32
  store i32 %157, i32* %156, align 4, !tbaa !1
  br label %158

; <label>:158                                     ; preds = %154, %134, %108, %.lr.ph
  %lstack.2 = phi i32* [ %lstack.037, %.lr.ph ], [ %lstack.037, %134 ], [ %lstack.1, %154 ], [ %lstack.037, %108 ]
  %rstack.2 = phi i32* [ %rstack.038, %.lr.ph ], [ %rstack.1, %134 ], [ %rstack.038, %154 ], [ %rstack.038, %108 ]
  %mrstack_max.2 = phi i32 [ %mrstack_max.039, %.lr.ph ], [ %mrstack_max.1, %134 ], [ %mrstack_max.039, %154 ], [ %mrstack_max.039, %108 ]
  %mlstack_max.2 = phi i32 [ %mlstack_max.040, %.lr.ph ], [ %mlstack_max.040, %134 ], [ %mlstack_max.1, %154 ], [ %mlstack_max.040, %108 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %159 = icmp slt i64 %indvars.iv.next, %103
  br i1 %159, label %.lr.ph, label %.._crit_edge_crit_edge

.._crit_edge_crit_edge:                           ; preds = %158
  %.pre = load i32, i32* %70, align 4, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %.preheader11
  %160 = phi i32 [ 0, %.preheader11 ], [ %.pre, %.._crit_edge_crit_edge ]
  %rstack.0.lcssa = phi i32* [ %98, %.preheader11 ], [ %rstack.2, %.._crit_edge_crit_edge ]
  %lstack.0.lcssa = phi i32* [ %99, %.preheader11 ], [ %lstack.2, %.._crit_edge_crit_edge ]
  store i32 0, i32* %66, align 4, !tbaa !1
  store i32 0, i32* %64, align 4, !tbaa !1
  store i32 %160, i32* %msendright, align 4, !tbaa !1
  %161 = load i32, i32* %64, align 4, !tbaa !1
  %162 = load i32, i32* %68, align 4, !tbaa !1
  %163 = add nsw i32 %162, %161
  store i32 %163, i32* %msendleft, align 4, !tbaa !1
  %164 = add nsw i32 %163, %160
  store i32 %164, i32* %msend, align 4, !tbaa !1
  %165 = icmp slt i32 %164, %5
  br i1 %165, label %171, label %166

; <label>:166                                     ; preds = %._crit_edge
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %168 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %169 = load i32, i32* %168, align 8, !tbaa !27
  %170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* nonnull getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10.169, i64 0, i64 0), i32 %169, i32 %164, i32 %163, i32 %160, i32 %5) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:171                                     ; preds = %._crit_edge
  %172 = load i32, i32* %66, align 4, !tbaa !1
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32* %34, i64 %173
  %175 = bitcast i32* %174 to i8*
  %176 = bitcast i32* %rstack.0.lcssa to i8*
  %177 = load i32, i32* %70, align 4, !tbaa !1
  %178 = sext i32 %177 to i64
  %179 = shl nsw i64 %178, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %176, i64 %179, i32 4, i1 false)
  %180 = load i32, i32* %msendright, align 4, !tbaa !1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, i32* %34, i64 %181
  %183 = load i32, i32* %64, align 4, !tbaa !1
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i32, i32* %182, i64 %184
  %186 = bitcast i32* %185 to i8*
  %187 = bitcast i32* %lstack.0.lcssa to i8*
  %188 = load i32, i32* %68, align 4, !tbaa !1
  %189 = sext i32 %188 to i64
  %190 = shl nsw i64 %189, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %186, i8* %187, i64 %190, i32 4, i1 false)
  call void @free(i8* %187) #3
  call void @free(i8* %176) #3
  %191 = add nuw nsw i32 %iteration.0, 1
  %192 = icmp sgt i32 %iteration.0, 0
  br i1 %192, label %193, label %197

; <label>:193                                     ; preds = %171
  store i32 0, i32* %mrecv, align 4, !tbaa !1
  %194 = call i32 @MPI_Allreduce(i8* nonnull %54, i8* %55, i32 1, i32 1275069445, i32 1476395011, i32 1140850688) #3
  %195 = load i32, i32* %mrecv, align 4, !tbaa !1
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %590, label %197

; <label>:197                                     ; preds = %193, %171
  %198 = load i32, i32* %msendleft, align 4, !tbaa !1
  %199 = load i32, i32* %msendright, align 4, !tbaa !1
  %200 = add nsw i32 %199, %198
  %201 = load i32, i32* %71, align 8, !tbaa !235
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %208, label %203

; <label>:203                                     ; preds = %197
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %205 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %206 = load i32, i32* %205, align 8, !tbaa !27
  %207 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %204, i8* nonnull getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15.177, i64 0, i64 0), i32 %206, i32 %198, i32 %199, i32 %201) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:208                                     ; preds = %197
  %209 = load double*, double** %72, align 8, !tbaa !110
  %210 = mul nsw i32 %198, 12
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds double, double* %209, i64 %211
  %213 = icmp sgt i32 %199, 0
  br i1 %213, label %.lr.ph46, label %.preheader10

.lr.ph46:                                         ; preds = %208
  %214 = sext i32 %199 to i64
  br label %218

.preheader10.loopexit:                            ; preds = %218
  br label %.preheader10

.preheader10:                                     ; preds = %.preheader10.loopexit, %208
  %215 = icmp sgt i32 %198, 0
  br i1 %215, label %.lr.ph48, label %._crit_edge49

.lr.ph48:                                         ; preds = %.preheader10
  %216 = sext i32 %199 to i64
  %217 = sext i32 %198 to i64
  br label %312

; <label>:218                                     ; preds = %218, %.lr.ph46
  %indvars.iv77 = phi i64 [ 0, %.lr.ph46 ], [ %indvars.iv.next78, %218 ]
  %219 = getelementptr inbounds i32, i32* %34, i64 %indvars.iv77
  %220 = load i32, i32* %219, align 4, !tbaa !1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds double, double* %10, i64 %221
  %223 = bitcast double* %222 to i64*
  %224 = load i64, i64* %223, align 8, !tbaa !190
  %225 = mul nuw nsw i64 %indvars.iv77, 12
  %226 = getelementptr inbounds double, double* %212, i64 %225
  %227 = bitcast double* %226 to i64*
  store i64 %224, i64* %227, align 8, !tbaa !190
  %228 = getelementptr inbounds double, double* %12, i64 %221
  %229 = bitcast double* %228 to i64*
  %230 = load i64, i64* %229, align 8, !tbaa !190
  %231 = or i64 %225, 1
  %232 = getelementptr inbounds double, double* %212, i64 %231
  %233 = bitcast double* %232 to i64*
  store i64 %230, i64* %233, align 8, !tbaa !190
  %234 = getelementptr inbounds double, double* %14, i64 %221
  %235 = bitcast double* %234 to i64*
  %236 = load i64, i64* %235, align 8, !tbaa !190
  %237 = or i64 %225, 2
  %238 = getelementptr inbounds double, double* %212, i64 %237
  %239 = bitcast double* %238 to i64*
  store i64 %236, i64* %239, align 8, !tbaa !190
  store double 1.000000e+08, double* %234, align 8, !tbaa !190
  %240 = getelementptr inbounds double, double* %16, i64 %221
  %241 = bitcast double* %240 to i64*
  %242 = load i64, i64* %241, align 8, !tbaa !190
  %243 = or i64 %225, 3
  %244 = getelementptr inbounds double, double* %212, i64 %243
  %245 = bitcast double* %244 to i64*
  store i64 %242, i64* %245, align 8, !tbaa !190
  %246 = getelementptr inbounds double, double* %18, i64 %221
  %247 = bitcast double* %246 to i64*
  %248 = load i64, i64* %247, align 8, !tbaa !190
  %249 = add nuw nsw i64 %225, 4
  %250 = getelementptr inbounds double, double* %212, i64 %249
  %251 = bitcast double* %250 to i64*
  store i64 %248, i64* %251, align 8, !tbaa !190
  %252 = getelementptr inbounds double, double* %20, i64 %221
  %253 = bitcast double* %252 to i64*
  %254 = load i64, i64* %253, align 8, !tbaa !190
  %255 = add nuw nsw i64 %225, 5
  %256 = getelementptr inbounds double, double* %212, i64 %255
  %257 = bitcast double* %256 to i64*
  store i64 %254, i64* %257, align 8, !tbaa !190
  %258 = getelementptr inbounds double, double* %22, i64 %221
  %259 = bitcast double* %258 to i64*
  %260 = load i64, i64* %259, align 8, !tbaa !190
  %261 = add nuw nsw i64 %225, 6
  %262 = getelementptr inbounds double, double* %212, i64 %261
  %263 = bitcast double* %262 to i64*
  store i64 %260, i64* %263, align 8, !tbaa !190
  %264 = getelementptr inbounds double, double* %24, i64 %221
  %265 = bitcast double* %264 to i64*
  %266 = load i64, i64* %265, align 8, !tbaa !190
  %267 = add nuw nsw i64 %225, 7
  %268 = getelementptr inbounds double, double* %212, i64 %267
  %269 = bitcast double* %268 to i64*
  store i64 %266, i64* %269, align 8, !tbaa !190
  %270 = getelementptr inbounds double, double* %26, i64 %221
  %271 = bitcast double* %270 to i64*
  %272 = load i64, i64* %271, align 8, !tbaa !190
  %273 = add nuw nsw i64 %225, 8
  %274 = getelementptr inbounds double, double* %212, i64 %273
  %275 = bitcast double* %274 to i64*
  store i64 %272, i64* %275, align 8, !tbaa !190
  store double 1.000000e+08, double* %270, align 8, !tbaa !190
  %276 = getelementptr inbounds double, double* %28, i64 %221
  %277 = bitcast double* %276 to i64*
  %278 = load i64, i64* %277, align 8, !tbaa !190
  %279 = add nuw nsw i64 %225, 9
  %280 = getelementptr inbounds double, double* %212, i64 %279
  %281 = bitcast double* %280 to i64*
  store i64 %278, i64* %281, align 8, !tbaa !190
  %282 = getelementptr inbounds double, double* %30, i64 %221
  %283 = bitcast double* %282 to i64*
  %284 = load i64, i64* %283, align 8, !tbaa !190
  %285 = add nuw nsw i64 %225, 10
  %286 = getelementptr inbounds double, double* %212, i64 %285
  %287 = bitcast double* %286 to i64*
  store i64 %284, i64* %287, align 8, !tbaa !190
  %288 = getelementptr inbounds double, double* %32, i64 %221
  %289 = bitcast double* %288 to i64*
  %290 = load i64, i64* %289, align 8, !tbaa !190
  %291 = add nuw nsw i64 %225, 11
  %292 = getelementptr inbounds double, double* %212, i64 %291
  %293 = bitcast double* %292 to i64*
  store i64 %290, i64* %293, align 8, !tbaa !190
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %294 = icmp slt i64 %indvars.iv.next78, %214
  br i1 %294, label %218, label %.preheader10.loopexit

._crit_edge49.loopexit:                           ; preds = %312
  br label %._crit_edge49

._crit_edge49:                                    ; preds = %._crit_edge49.loopexit, %.preheader10
  %295 = load i32, i32* %73, align 4, !tbaa !227
  %296 = bitcast i32* %74 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = trunc i64 %297 to i32
  store i32 0, i32* %mrecvleft, align 4, !tbaa !1
  %299 = lshr i64 %297, 32
  %300 = trunc i64 %299 to i32
  %301 = load i32, i32* %76, align 4, !tbaa !280
  %302 = call i32 @MPI_Sendrecv(i8* nonnull %56, i32 1, i32 1275069445, i32 %300, i32 %295, i8* %58, i32 1, i32 1275069445, i32 %298, i32 %298, i32 %301, %struct.MPI_Status* nonnull %istatus1) #3
  %303 = load i32, i32* %75, align 4, !tbaa !263
  store i32 0, i32* %mrecvright, align 4, !tbaa !1
  %304 = load i32, i32* %74, align 8, !tbaa !262
  %305 = load i32, i32* %76, align 4, !tbaa !280
  %306 = call i32 @MPI_Sendrecv(i8* nonnull %57, i32 1, i32 1275069445, i32 %304, i32 %295, i8* %59, i32 1, i32 1275069445, i32 %303, i32 %303, i32 %305, %struct.MPI_Status* nonnull %istatus2) #3
  %307 = load i32, i32* %mrecvleft, align 4, !tbaa !1
  %308 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %309 = add nsw i32 %308, %307
  %310 = load i32, i32* %77, align 8, !tbaa !234
  %311 = icmp slt i32 %309, %310
  br i1 %311, label %395, label %390

; <label>:312                                     ; preds = %312, %.lr.ph48
  %indvars.iv79 = phi i64 [ 0, %.lr.ph48 ], [ %indvars.iv.next80, %312 ]
  %313 = add nsw i64 %216, %indvars.iv79
  %314 = getelementptr inbounds i32, i32* %34, i64 %313
  %315 = load i32, i32* %314, align 4, !tbaa !1
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds double, double* %10, i64 %316
  %318 = bitcast double* %317 to i64*
  %319 = load i64, i64* %318, align 8, !tbaa !190
  %320 = mul nuw nsw i64 %indvars.iv79, 12
  %321 = getelementptr inbounds double, double* %209, i64 %320
  %322 = bitcast double* %321 to i64*
  store i64 %319, i64* %322, align 8, !tbaa !190
  %323 = getelementptr inbounds double, double* %12, i64 %316
  %324 = bitcast double* %323 to i64*
  %325 = load i64, i64* %324, align 8, !tbaa !190
  %326 = or i64 %320, 1
  %327 = getelementptr inbounds double, double* %209, i64 %326
  %328 = bitcast double* %327 to i64*
  store i64 %325, i64* %328, align 8, !tbaa !190
  %329 = getelementptr inbounds double, double* %14, i64 %316
  %330 = bitcast double* %329 to i64*
  %331 = load i64, i64* %330, align 8, !tbaa !190
  %332 = or i64 %320, 2
  %333 = getelementptr inbounds double, double* %209, i64 %332
  %334 = bitcast double* %333 to i64*
  store i64 %331, i64* %334, align 8, !tbaa !190
  store double 1.000000e+08, double* %329, align 8, !tbaa !190
  %335 = getelementptr inbounds double, double* %16, i64 %316
  %336 = bitcast double* %335 to i64*
  %337 = load i64, i64* %336, align 8, !tbaa !190
  %338 = or i64 %320, 3
  %339 = getelementptr inbounds double, double* %209, i64 %338
  %340 = bitcast double* %339 to i64*
  store i64 %337, i64* %340, align 8, !tbaa !190
  %341 = getelementptr inbounds double, double* %18, i64 %316
  %342 = bitcast double* %341 to i64*
  %343 = load i64, i64* %342, align 8, !tbaa !190
  %344 = add nuw nsw i64 %320, 4
  %345 = getelementptr inbounds double, double* %209, i64 %344
  %346 = bitcast double* %345 to i64*
  store i64 %343, i64* %346, align 8, !tbaa !190
  %347 = getelementptr inbounds double, double* %20, i64 %316
  %348 = bitcast double* %347 to i64*
  %349 = load i64, i64* %348, align 8, !tbaa !190
  %350 = add nuw nsw i64 %320, 5
  %351 = getelementptr inbounds double, double* %209, i64 %350
  %352 = bitcast double* %351 to i64*
  store i64 %349, i64* %352, align 8, !tbaa !190
  %353 = getelementptr inbounds double, double* %22, i64 %316
  %354 = bitcast double* %353 to i64*
  %355 = load i64, i64* %354, align 8, !tbaa !190
  %356 = add nuw nsw i64 %320, 6
  %357 = getelementptr inbounds double, double* %209, i64 %356
  %358 = bitcast double* %357 to i64*
  store i64 %355, i64* %358, align 8, !tbaa !190
  %359 = getelementptr inbounds double, double* %24, i64 %316
  %360 = bitcast double* %359 to i64*
  %361 = load i64, i64* %360, align 8, !tbaa !190
  %362 = add nuw nsw i64 %320, 7
  %363 = getelementptr inbounds double, double* %209, i64 %362
  %364 = bitcast double* %363 to i64*
  store i64 %361, i64* %364, align 8, !tbaa !190
  %365 = getelementptr inbounds double, double* %26, i64 %316
  %366 = bitcast double* %365 to i64*
  %367 = load i64, i64* %366, align 8, !tbaa !190
  %368 = add nuw nsw i64 %320, 8
  %369 = getelementptr inbounds double, double* %209, i64 %368
  %370 = bitcast double* %369 to i64*
  store i64 %367, i64* %370, align 8, !tbaa !190
  store double 1.000000e+08, double* %365, align 8, !tbaa !190
  %371 = getelementptr inbounds double, double* %28, i64 %316
  %372 = bitcast double* %371 to i64*
  %373 = load i64, i64* %372, align 8, !tbaa !190
  %374 = add nuw nsw i64 %320, 9
  %375 = getelementptr inbounds double, double* %209, i64 %374
  %376 = bitcast double* %375 to i64*
  store i64 %373, i64* %376, align 8, !tbaa !190
  %377 = getelementptr inbounds double, double* %30, i64 %316
  %378 = bitcast double* %377 to i64*
  %379 = load i64, i64* %378, align 8, !tbaa !190
  %380 = add nuw nsw i64 %320, 10
  %381 = getelementptr inbounds double, double* %209, i64 %380
  %382 = bitcast double* %381 to i64*
  store i64 %379, i64* %382, align 8, !tbaa !190
  %383 = getelementptr inbounds double, double* %32, i64 %316
  %384 = bitcast double* %383 to i64*
  %385 = load i64, i64* %384, align 8, !tbaa !190
  %386 = add nuw nsw i64 %320, 11
  %387 = getelementptr inbounds double, double* %209, i64 %386
  %388 = bitcast double* %387 to i64*
  store i64 %385, i64* %388, align 8, !tbaa !190
  %indvars.iv.next80 = add nuw nsw i64 %indvars.iv79, 1
  %389 = icmp slt i64 %indvars.iv.next80, %217
  br i1 %389, label %312, label %._crit_edge49.loopexit

; <label>:390                                     ; preds = %._crit_edge49
  %391 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %392 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %393 = load i32, i32* %392, align 8, !tbaa !27
  %394 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %391, i8* nonnull getelementptr inbounds ([67 x i8], [67 x i8]* @.str.16.178, i64 0, i64 0), i32 %393, i32 %307, i32 %308, i32 %310) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:395                                     ; preds = %._crit_edge49
  %396 = load double*, double** %78, align 8, !tbaa !109
  %397 = mul nsw i32 %307, 12
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds double, double* %396, i64 %398
  %400 = load i64, i64* %296, align 8
  %401 = trunc i64 %400 to i32
  %402 = bitcast double* %212 to i8*
  %403 = load i32, i32* %msendright, align 4, !tbaa !1
  %404 = mul nsw i32 %403, 12
  %405 = lshr i64 %400, 32
  %406 = trunc i64 %405 to i32
  %407 = bitcast double* %396 to i8*
  %408 = load i32, i32* %76, align 4, !tbaa !280
  %409 = call i32 @MPI_Sendrecv(i8* %402, i32 %404, i32 1275070475, i32 %406, i32 %295, i8* %407, i32 %397, i32 1275070475, i32 %401, i32 %401, i32 %408, %struct.MPI_Status* nonnull %istatus1) #3
  %410 = load i32, i32* %75, align 4, !tbaa !263
  %411 = bitcast double* %209 to i8*
  %412 = load i32, i32* %msendleft, align 4, !tbaa !1
  %413 = mul nsw i32 %412, 12
  %414 = load i32, i32* %74, align 8, !tbaa !262
  %415 = bitcast double* %399 to i8*
  %416 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %417 = mul nsw i32 %416, 12
  %418 = load i32, i32* %76, align 4, !tbaa !280
  %419 = call i32 @MPI_Sendrecv(i8* %411, i32 %413, i32 1275070475, i32 %414, i32 %295, i8* %415, i32 %417, i32 1275070475, i32 %410, i32 %410, i32 %418, %struct.MPI_Status* nonnull %istatus2) #3
  %420 = load i32, i32* %mrecvleft, align 4, !tbaa !1
  %421 = add nsw i32 %420, %mi_end.0
  %422 = load i32, i32* %mrecvright, align 4, !tbaa !1
  %423 = add nsw i32 %421, %422
  %424 = icmp slt i32 %423, %8
  br i1 %424, label %.preheader9, label %428

.preheader9:                                      ; preds = %395
  %425 = icmp sgt i32 %420, 0
  br i1 %425, label %.lr.ph51, label %.preheader

.lr.ph51:                                         ; preds = %.preheader9
  %426 = sext i32 %mi_end.0 to i64
  %427 = sext i32 %420 to i64
  br label %431

; <label>:428                                     ; preds = %395
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.13.172, i64 0, i64 0), i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.157, i64 0, i64 0), i32 1214, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.shifti_radial, i64 0, i64 0)) #15
  unreachable

.preheader.loopexit:                              ; preds = %431
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader9
  %429 = icmp sgt i32 %422, 0
  br i1 %429, label %.lr.ph53, label %._crit_edge54

.lr.ph53:                                         ; preds = %.preheader
  %430 = sext i32 %422 to i64
  br label %512

; <label>:431                                     ; preds = %431, %.lr.ph51
  %indvars.iv81 = phi i64 [ 0, %.lr.ph51 ], [ %indvars.iv.next82, %431 ]
  %432 = add nsw i64 %indvars.iv81, %426
  %433 = mul nuw nsw i64 %indvars.iv81, 12
  %434 = getelementptr inbounds double, double* %396, i64 %433
  %435 = bitcast double* %434 to i64*
  %436 = load i64, i64* %435, align 8, !tbaa !190
  %437 = getelementptr inbounds double, double* %10, i64 %432
  %438 = bitcast double* %437 to i64*
  store i64 %436, i64* %438, align 8, !tbaa !190
  %439 = or i64 %433, 1
  %440 = getelementptr inbounds double, double* %396, i64 %439
  %441 = bitcast double* %440 to i64*
  %442 = load i64, i64* %441, align 8, !tbaa !190
  %443 = getelementptr inbounds double, double* %12, i64 %432
  %444 = bitcast double* %443 to i64*
  store i64 %442, i64* %444, align 8, !tbaa !190
  %445 = or i64 %433, 2
  %446 = getelementptr inbounds double, double* %396, i64 %445
  %447 = bitcast double* %446 to i64*
  %448 = load i64, i64* %447, align 8, !tbaa !190
  %449 = getelementptr inbounds double, double* %14, i64 %432
  %450 = bitcast double* %449 to i64*
  store i64 %448, i64* %450, align 8, !tbaa !190
  %451 = or i64 %433, 3
  %452 = getelementptr inbounds double, double* %396, i64 %451
  %453 = bitcast double* %452 to i64*
  %454 = load i64, i64* %453, align 8, !tbaa !190
  %455 = getelementptr inbounds double, double* %16, i64 %432
  %456 = bitcast double* %455 to i64*
  store i64 %454, i64* %456, align 8, !tbaa !190
  %457 = add nuw nsw i64 %433, 4
  %458 = getelementptr inbounds double, double* %396, i64 %457
  %459 = bitcast double* %458 to i64*
  %460 = load i64, i64* %459, align 8, !tbaa !190
  %461 = getelementptr inbounds double, double* %18, i64 %432
  %462 = bitcast double* %461 to i64*
  store i64 %460, i64* %462, align 8, !tbaa !190
  %463 = add nuw nsw i64 %433, 5
  %464 = getelementptr inbounds double, double* %396, i64 %463
  %465 = bitcast double* %464 to i64*
  %466 = load i64, i64* %465, align 8, !tbaa !190
  %467 = getelementptr inbounds double, double* %20, i64 %432
  %468 = bitcast double* %467 to i64*
  store i64 %466, i64* %468, align 8, !tbaa !190
  %469 = add nuw nsw i64 %433, 6
  %470 = getelementptr inbounds double, double* %396, i64 %469
  %471 = bitcast double* %470 to i64*
  %472 = load i64, i64* %471, align 8, !tbaa !190
  %473 = getelementptr inbounds double, double* %22, i64 %432
  %474 = bitcast double* %473 to i64*
  store i64 %472, i64* %474, align 8, !tbaa !190
  %475 = add nuw nsw i64 %433, 7
  %476 = getelementptr inbounds double, double* %396, i64 %475
  %477 = bitcast double* %476 to i64*
  %478 = load i64, i64* %477, align 8, !tbaa !190
  %479 = getelementptr inbounds double, double* %24, i64 %432
  %480 = bitcast double* %479 to i64*
  store i64 %478, i64* %480, align 8, !tbaa !190
  %481 = add nuw nsw i64 %433, 8
  %482 = getelementptr inbounds double, double* %396, i64 %481
  %483 = bitcast double* %482 to i64*
  %484 = load i64, i64* %483, align 8, !tbaa !190
  %485 = getelementptr inbounds double, double* %26, i64 %432
  %486 = bitcast double* %485 to i64*
  store i64 %484, i64* %486, align 8, !tbaa !190
  %487 = add nuw nsw i64 %433, 9
  %488 = getelementptr inbounds double, double* %396, i64 %487
  %489 = bitcast double* %488 to i64*
  %490 = load i64, i64* %489, align 8, !tbaa !190
  %491 = getelementptr inbounds double, double* %28, i64 %432
  %492 = bitcast double* %491 to i64*
  store i64 %490, i64* %492, align 8, !tbaa !190
  %493 = add nuw nsw i64 %433, 10
  %494 = getelementptr inbounds double, double* %396, i64 %493
  %495 = bitcast double* %494 to i64*
  %496 = load i64, i64* %495, align 8, !tbaa !190
  %497 = getelementptr inbounds double, double* %30, i64 %432
  %498 = bitcast double* %497 to i64*
  store i64 %496, i64* %498, align 8, !tbaa !190
  %499 = add nuw nsw i64 %433, 11
  %500 = getelementptr inbounds double, double* %396, i64 %499
  %501 = bitcast double* %500 to i64*
  %502 = load i64, i64* %501, align 8, !tbaa !190
  %503 = getelementptr inbounds double, double* %32, i64 %432
  %504 = bitcast double* %503 to i64*
  store i64 %502, i64* %504, align 8, !tbaa !190
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %505 = icmp slt i64 %indvars.iv.next82, %427
  br i1 %505, label %431, label %.preheader.loopexit

._crit_edge54.loopexit:                           ; preds = %512
  br label %._crit_edge54

._crit_edge54:                                    ; preds = %._crit_edge54.loopexit, %.preheader
  %506 = add nsw i32 %420, %422
  %507 = load i32, i32* %2, align 8, !tbaa !192
  %508 = add nsw i32 %506, %507
  store i32 %508, i32* %2, align 8, !tbaa !192
  %509 = load i32, i32* %msend, align 4, !tbaa !1
  %510 = load i32, i32* %79, align 8, !tbaa !210
  %511 = add nsw i32 %510, %509
  store i32 %511, i32* %79, align 8, !tbaa !210
  br label %590

; <label>:512                                     ; preds = %512, %.lr.ph53
  %indvars.iv83 = phi i64 [ 0, %.lr.ph53 ], [ %indvars.iv.next84, %512 ]
  %513 = trunc i64 %indvars.iv83 to i32
  %514 = add i32 %513, %mi_end.0
  %515 = add i32 %514, %420
  %516 = mul nuw nsw i64 %indvars.iv83, 12
  %517 = getelementptr inbounds double, double* %399, i64 %516
  %518 = bitcast double* %517 to i64*
  %519 = load i64, i64* %518, align 8, !tbaa !190
  %520 = sext i32 %515 to i64
  %521 = getelementptr inbounds double, double* %10, i64 %520
  %522 = bitcast double* %521 to i64*
  store i64 %519, i64* %522, align 8, !tbaa !190
  %523 = or i64 %516, 1
  %524 = getelementptr inbounds double, double* %399, i64 %523
  %525 = bitcast double* %524 to i64*
  %526 = load i64, i64* %525, align 8, !tbaa !190
  %527 = getelementptr inbounds double, double* %12, i64 %520
  %528 = bitcast double* %527 to i64*
  store i64 %526, i64* %528, align 8, !tbaa !190
  %529 = or i64 %516, 2
  %530 = getelementptr inbounds double, double* %399, i64 %529
  %531 = bitcast double* %530 to i64*
  %532 = load i64, i64* %531, align 8, !tbaa !190
  %533 = getelementptr inbounds double, double* %14, i64 %520
  %534 = bitcast double* %533 to i64*
  store i64 %532, i64* %534, align 8, !tbaa !190
  %535 = or i64 %516, 3
  %536 = getelementptr inbounds double, double* %399, i64 %535
  %537 = bitcast double* %536 to i64*
  %538 = load i64, i64* %537, align 8, !tbaa !190
  %539 = getelementptr inbounds double, double* %16, i64 %520
  %540 = bitcast double* %539 to i64*
  store i64 %538, i64* %540, align 8, !tbaa !190
  %541 = add nuw nsw i64 %516, 4
  %542 = getelementptr inbounds double, double* %399, i64 %541
  %543 = bitcast double* %542 to i64*
  %544 = load i64, i64* %543, align 8, !tbaa !190
  %545 = getelementptr inbounds double, double* %18, i64 %520
  %546 = bitcast double* %545 to i64*
  store i64 %544, i64* %546, align 8, !tbaa !190
  %547 = add nuw nsw i64 %516, 5
  %548 = getelementptr inbounds double, double* %399, i64 %547
  %549 = bitcast double* %548 to i64*
  %550 = load i64, i64* %549, align 8, !tbaa !190
  %551 = getelementptr inbounds double, double* %20, i64 %520
  %552 = bitcast double* %551 to i64*
  store i64 %550, i64* %552, align 8, !tbaa !190
  %553 = add nuw nsw i64 %516, 6
  %554 = getelementptr inbounds double, double* %399, i64 %553
  %555 = bitcast double* %554 to i64*
  %556 = load i64, i64* %555, align 8, !tbaa !190
  %557 = getelementptr inbounds double, double* %22, i64 %520
  %558 = bitcast double* %557 to i64*
  store i64 %556, i64* %558, align 8, !tbaa !190
  %559 = add nuw nsw i64 %516, 7
  %560 = getelementptr inbounds double, double* %399, i64 %559
  %561 = bitcast double* %560 to i64*
  %562 = load i64, i64* %561, align 8, !tbaa !190
  %563 = getelementptr inbounds double, double* %24, i64 %520
  %564 = bitcast double* %563 to i64*
  store i64 %562, i64* %564, align 8, !tbaa !190
  %565 = add nuw nsw i64 %516, 8
  %566 = getelementptr inbounds double, double* %399, i64 %565
  %567 = bitcast double* %566 to i64*
  %568 = load i64, i64* %567, align 8, !tbaa !190
  %569 = getelementptr inbounds double, double* %26, i64 %520
  %570 = bitcast double* %569 to i64*
  store i64 %568, i64* %570, align 8, !tbaa !190
  %571 = add nuw nsw i64 %516, 9
  %572 = getelementptr inbounds double, double* %399, i64 %571
  %573 = bitcast double* %572 to i64*
  %574 = load i64, i64* %573, align 8, !tbaa !190
  %575 = getelementptr inbounds double, double* %28, i64 %520
  %576 = bitcast double* %575 to i64*
  store i64 %574, i64* %576, align 8, !tbaa !190
  %577 = add nuw nsw i64 %516, 10
  %578 = getelementptr inbounds double, double* %399, i64 %577
  %579 = bitcast double* %578 to i64*
  %580 = load i64, i64* %579, align 8, !tbaa !190
  %581 = getelementptr inbounds double, double* %30, i64 %520
  %582 = bitcast double* %581 to i64*
  store i64 %580, i64* %582, align 8, !tbaa !190
  %583 = add nuw nsw i64 %516, 11
  %584 = getelementptr inbounds double, double* %399, i64 %583
  %585 = bitcast double* %584 to i64*
  %586 = load i64, i64* %585, align 8, !tbaa !190
  %587 = getelementptr inbounds double, double* %32, i64 %520
  %588 = bitcast double* %587 to i64*
  store i64 %586, i64* %588, align 8, !tbaa !190
  %indvars.iv.next84 = add nuw nsw i64 %indvars.iv83, 1
  %589 = icmp slt i64 %indvars.iv.next84, %430
  br i1 %589, label %512, label %._crit_edge54.loopexit

; <label>:590                                     ; preds = %._crit_edge54, %193
  %.06 = phi i1 [ true, %._crit_edge54 ], [ false, %193 ]
  %m0.1 = phi i32 [ %mi_end.0, %._crit_edge54 ], [ %m0.0, %193 ]
  %mi_end.1 = phi i32 [ %508, %._crit_edge54 ], [ %mi_end.0, %193 ]
  call void @llvm.lifetime.end(i64 20, i8* %61) #3
  call void @llvm.lifetime.end(i64 20, i8* %60) #3
  call void @llvm.lifetime.end(i64 4, i8* %59) #3
  call void @llvm.lifetime.end(i64 4, i8* %58) #3
  call void @llvm.lifetime.end(i64 4, i8* %57) #3
  call void @llvm.lifetime.end(i64 4, i8* %56) #3
  call void @llvm.lifetime.end(i64 4, i8* %55) #3
  call void @llvm.lifetime.end(i64 4, i8* nonnull %54) #3
  br i1 %.06, label %84, label %591

; <label>:591                                     ; preds = %590, %84
  %iteration.1 = phi i32 [ %191, %590 ], [ %iteration.0, %84 ]
  %mi_end.2 = phi i32 [ %mi_end.1, %590 ], [ %mi_end.0, %84 ]
  %592 = add nsw i32 %36, 1
  %593 = icmp sgt i32 %iteration.1, %592
  br i1 %593, label %594, label %599

; <label>:594                                     ; preds = %591
  %595 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %596 = getelementptr inbounds %struct.gtc_particle_decomp_t, %struct.gtc_particle_decomp_t* %1, i64 0, i32 0
  %597 = load i32, i32* %596, align 8, !tbaa !27
  %598 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %595, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14.173, i64 0, i64 0), i32 %597) #13
  call void @exit(i32 1) #15
  unreachable

; <label>:599                                     ; preds = %591
  store i32 %mi_end.2, i32* %2, align 8, !tbaa !192
  call fastcc void @_mm_free.174(i8* nonnull %51)
  br label %600

; <label>:600                                     ; preds = %599, %0
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @poisson_initial(%struct.gtc_bench_data_t* nocapture readonly %gtc_input, i32 %mring, i32 %mindex, i32* nocapture %nindex, i32* nocapture %indexp, double* nocapture %ring) #0 {
  %nindex170 = bitcast i32* %nindex to i8*
  %vring = alloca [3 x double], align 16
  %fring = alloca [3 x double], align 16
  %1 = bitcast [3 x double]* %vring to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #3
  %2 = bitcast [3 x double]* %fring to i8*
  call void @llvm.lifetime.start(i64 24, i8* %2) #3
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4, !tbaa !197
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %6 = load double, double* %5, align 8, !tbaa !163
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 65
  %8 = load double, double* %7, align 8, !tbaa !207
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %10 = load double, double* %9, align 8, !tbaa !164
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 49
  %12 = load double*, double** %11, align 8, !tbaa !65
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 66
  %14 = load double, double* %13, align 8, !tbaa !209
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %16 = load double, double* %15, align 8, !tbaa !212
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %18 = load double, double* %17, align 8, !tbaa !196
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %20 = load double*, double** %19, align 8, !tbaa !36
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %22 = load i32*, i32** %21, align 8, !tbaa !29
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %24 = load i32*, i32** %23, align 8, !tbaa !31
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %26 = load double*, double** %25, align 8, !tbaa !30
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 24
  %28 = load double*, double** %27, align 8, !tbaa !32
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 25
  %30 = load double*, double** %29, align 8, !tbaa !33
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %32 = load i32, i32* %31, align 4, !tbaa !247
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %34 = bitcast i32* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %38 = lshr i64 %35, 32
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %41 = load i32, i32* %40, align 8, !tbaa !242
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  switch i32 %mring, label %55 [
    i32 1, label %43
    i32 2, label %46
  ]

; <label>:43                                      ; preds = %0
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %45 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.179, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %44) #13
  tail call void @exit(i32 1) #15
  unreachable

; <label>:46                                      ; preds = %0
  %47 = getelementptr inbounds [3 x double], [3 x double]* %vring, i64 0, i64 0
  store double 0x3FED370F97C76CDB, double* %47, align 16, !tbaa !190
  %48 = getelementptr inbounds [3 x double], [3 x double]* %vring, i64 0, i64 1
  store double 0x4001DF197D08B6BC, double* %48, align 8, !tbaa !190
  %49 = getelementptr inbounds [3 x double], [3 x double]* %fring, i64 0, i64 0
  store double 0x3FE7053D681F49DE, double* %49, align 16, !tbaa !190
  %50 = getelementptr inbounds [3 x double], [3 x double]* %fring, i64 0, i64 1
  store double 0x3FD1F5852FC16C45, double* %50, align 8, !tbaa !190
  %51 = fdiv double 5.000000e-01, %16
  %52 = fdiv double 1.000000e+00, %8
  %53 = mul i32 %32, %4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %.preheader13.loopexit, label %.preheader13

; <label>:55                                      ; preds = %0
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %57 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1.180, i64 0, i64 0), i32 %mring) #13
  tail call void @exit(i32 1) #15
  unreachable

.preheader13.loopexit:                            ; preds = %46
  %58 = add i32 %53, -1
  %59 = zext i32 %58 to i64
  %60 = shl nuw nsw i64 %59, 2
  %61 = add nuw nsw i64 %60, 4
  call void @llvm.memset.p0i8.i64(i8* %nindex170, i8 0, i64 %61, i32 4, i1 false)
  br label %.preheader13

.preheader13:                                     ; preds = %.preheader13.loopexit, %46
  %62 = mul i32 %4, %mindex
  %63 = mul i32 %62, %32
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %.lr.ph125.preheader, label %.preheader12

.lr.ph125.preheader:                              ; preds = %.preheader13
  %65 = mul i32 %53, %mindex
  br label %.lr.ph125

.preheader12.loopexit:                            ; preds = %.lr.ph125
  br label %.preheader12

.preheader12:                                     ; preds = %.preheader12.loopexit, %.preheader13
  %66 = icmp slt i32 %4, 1
  br i1 %66, label %.preheader, label %.lr.ph123

.lr.ph123:                                        ; preds = %.preheader12
  %67 = icmp sgt i32 %36, %39
  %68 = fmul double %16, 2.000000e+00
  %69 = fsub double %10, %6
  %70 = add nsw i32 %39, -1
  %71 = sext i32 %36 to i64
  %72 = sext i32 %39 to i64
  br label %78

.lr.ph125:                                        ; preds = %.lr.ph125, %.lr.ph125.preheader
  %indvars.iv160 = phi i64 [ 0, %.lr.ph125.preheader ], [ %indvars.iv.next161, %.lr.ph125 ]
  %73 = getelementptr inbounds double, double* %ring, i64 %indvars.iv160
  store double 0.000000e+00, double* %73, align 8, !tbaa !190
  %74 = getelementptr inbounds i32, i32* %indexp, i64 %indvars.iv160
  store i32 0, i32* %74, align 4, !tbaa !1
  %indvars.iv.next161 = add nuw nsw i64 %indvars.iv160, 1
  %lftr.wideiv162 = trunc i64 %indvars.iv.next161 to i32
  %exitcond163 = icmp eq i32 %lftr.wideiv162, %65
  br i1 %exitcond163, label %.preheader12.loopexit, label %.lr.ph125

.preheader7:                                      ; preds = %._crit_edge116
  %75 = icmp sgt i32 %4, 0
  br i1 %75, label %.preheader6.lr.ph, label %.preheader

.preheader6.lr.ph:                                ; preds = %.preheader7
  %76 = icmp sgt i32 %32, 0
  %77 = sext i32 %32 to i64
  br label %.preheader6

; <label>:78                                      ; preds = %._crit_edge116, %.lr.ph123
  %k.0121 = phi i32 [ 1, %.lr.ph123 ], [ %358, %._crit_edge116 ]
  %ddelt.0120 = phi double [ undef, %.lr.ph123 ], [ %ddelt.1.lcssa, %._crit_edge116 ]
  %ddelr.0119 = phi double [ undef, %.lr.ph123 ], [ %ddelr.1.lcssa, %._crit_edge116 ]
  %79 = sitofp i32 %k.0121 to double
  %80 = fmul double %14, %79
  %81 = fadd double %18, %80
  br i1 %67, label %._crit_edge116, label %.preheader11.lr.ph

.preheader11.lr.ph:                               ; preds = %78
  %82 = add nsw i32 %k.0121, -1
  %83 = mul i32 %82, %32
  br label %.preheader11

.preheader11:                                     ; preds = %._crit_edge107, %.preheader11.lr.ph
  %indvars.iv158 = phi i64 [ %indvars.iv.next159, %._crit_edge107 ], [ %71, %.preheader11.lr.ph ]
  %wght.0113 = phi double [ %wght.1.lcssa, %._crit_edge107 ], [ 0.000000e+00, %.preheader11.lr.ph ]
  %ddelt.1112 = phi double [ %ddelt.2.lcssa, %._crit_edge107 ], [ %ddelt.0120, %.preheader11.lr.ph ]
  %ddelr.1111 = phi double [ %ddelr.2.lcssa, %._crit_edge107 ], [ %ddelr.0119, %.preheader11.lr.ph ]
  %84 = getelementptr inbounds i32, i32* %24, i64 %indvars.iv158
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = icmp slt i32 %85, 1
  br i1 %86, label %._crit_edge107, label %.lr.ph106

.lr.ph106:                                        ; preds = %.preheader11
  %87 = getelementptr inbounds i32, i32* %22, i64 %indvars.iv158
  %88 = trunc i64 %indvars.iv158 to i32
  %89 = sitofp i32 %88 to double
  %90 = fmul double %8, %89
  %91 = fadd double %6, %90
  %92 = getelementptr inbounds double, double* %12, i64 %indvars.iv158
  %93 = getelementptr inbounds double, double* %26, i64 %indvars.iv158
  %94 = getelementptr inbounds double, double* %20, i64 %indvars.iv158
  br label %95

; <label>:95                                      ; preds = %._crit_edge98, %.lr.ph106
  %j.0105 = phi i32 [ 1, %.lr.ph106 ], [ %354, %._crit_edge98 ]
  %wght.1104 = phi double [ %wght.0113, %.lr.ph106 ], [ %wght.2.lcssa, %._crit_edge98 ]
  %ddelt.2103 = phi double [ %ddelt.1112, %.lr.ph106 ], [ %ddelt.3.lcssa, %._crit_edge98 ]
  %ddelr.2102 = phi double [ %ddelr.1111, %.lr.ph106 ], [ %ddelr.3.lcssa, %._crit_edge98 ]
  %96 = load i32, i32* %87, align 4, !tbaa !1
  %97 = sub i32 %j.0105, %41
  %98 = add i32 %97, %96
  %99 = icmp sgt i32 %98, -1
  br i1 %99, label %101, label %100

; <label>:100                                     ; preds = %95
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.181, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 104, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

; <label>:101                                     ; preds = %95
  %102 = icmp slt i32 %98, %32
  br i1 %102, label %104, label %103

; <label>:103                                     ; preds = %101
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.183, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 105, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

; <label>:104                                     ; preds = %101
  %105 = add i32 %98, %83
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %nindex, i64 %106
  store i32 1, i32* %107, align 4, !tbaa !1
  %tmp2 = mul i32 %105, %mindex
  %108 = sext i32 %tmp2 to i64
  %109 = getelementptr inbounds i32, i32* %indexp, i64 %108
  store i32 %98, i32* %109, align 4, !tbaa !1
  %110 = getelementptr inbounds double, double* %ring, i64 %108
  store double 2.500000e-01, double* %110, align 8, !tbaa !190
  %111 = load double, double* %92, align 8, !tbaa !190
  %112 = sitofp i32 %j.0105 to double
  %113 = fmul double %112, %111
  %114 = load double, double* %93, align 8, !tbaa !190
  %115 = fmul double %81, %114
  %116 = fadd double %113, %115
  %117 = fmul double %51, %116
  %118 = fptosi double %117 to i32
  %119 = sitofp i32 %118 to double
  %120 = fsub double %117, %119
  %121 = fmul double %68, %120
  %122 = load double, double* %94, align 8, !tbaa !190
  %123 = fmul double %51, %122
  %124 = fmul double %123, %121
  %125 = fadd double %124, 5.000000e-01
  %126 = fptosi double %125 to i32
  %127 = load i32, i32* %84, align 4, !tbaa !1
  %128 = tail call i32 @abs_min_int(i32 %127, i32 %126) #3
  %129 = tail call double @cos(double %121) #3
  %130 = fmul double %91, %129
  %131 = fadd double %130, 1.000000e+00
  %132 = fdiv double 1.000000e+00, %131
  %133 = load i32, i32* %87, align 4, !tbaa !1
  %134 = sub i32 %128, %41
  %135 = add i32 %134, %133
  %136 = icmp sgt i32 %135, -1
  br i1 %136, label %138, label %137

; <label>:137                                     ; preds = %104
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.184, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 126, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

; <label>:138                                     ; preds = %104
  %139 = icmp slt i32 %135, %32
  br i1 %139, label %.preheader10, label %159

.preheader10:                                     ; preds = %138
  br i1 false, label %.preheader10.._crit_edge98_crit_edge, label %.preheader9.lr.ph

.preheader10.._crit_edge98_crit_edge:             ; preds = %.preheader10
  br label %._crit_edge98

.preheader9.lr.ph:                                ; preds = %.preheader10
  %140 = shl i32 %135, 2
  %141 = add i32 %140, -1
  %142 = fdiv double 5.000000e-01, %132
  %143 = add i32 %tmp2, -1
  %144 = sext i32 %140 to i64
  %145 = getelementptr inbounds double, double* %28, i64 %144
  %146 = or i32 %140, 2
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double, double* %28, i64 %147
  %149 = getelementptr inbounds double, double* %30, i64 %144
  %150 = getelementptr inbounds double, double* %30, i64 %147
  %151 = or i32 %140, 1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds double, double* %28, i64 %152
  %154 = getelementptr inbounds double, double* %30, i64 %152
  %155 = or i32 %140, 3
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds double, double* %28, i64 %156
  %158 = getelementptr inbounds double, double* %30, i64 %156
  br label %.preheader9

; <label>:159                                     ; preds = %138
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6.185, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 127, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

.preheader9:                                      ; preds = %352, %.preheader9.lr.ph
  %indvars.iv156 = phi i64 [ %indvars.iv.next157, %352 ], [ 1, %.preheader9.lr.ph ]
  %wght.297 = phi double [ %wght.4, %352 ], [ %wght.1104, %.preheader9.lr.ph ]
  %ddelt.396 = phi double [ %ddelt.5, %352 ], [ %ddelt.2103, %.preheader9.lr.ph ]
  %ddelr.395 = phi double [ %ddelr.5, %352 ], [ %ddelr.2102, %.preheader9.lr.ph ]
  %160 = add nsw i64 %indvars.iv156, -1
  %161 = getelementptr inbounds [3 x double], [3 x double]* %fring, i64 0, i64 %160
  %162 = getelementptr inbounds [3 x double], [3 x double]* %vring, i64 0, i64 %160
  %163 = load double, double* %162, align 8
  br label %164

; <label>:164                                     ; preds = %350, %.preheader9
  %indvars.iv154 = phi i64 [ 1, %.preheader9 ], [ %indvars.iv.next155, %350 ]
  %wght.393 = phi double [ %wght.297, %.preheader9 ], [ %wght.4, %350 ]
  %ddelt.492 = phi double [ %ddelt.396, %.preheader9 ], [ %ddelt.5, %350 ]
  %ddelr.491 = phi double [ %ddelr.395, %.preheader9 ], [ %ddelr.5, %350 ]
  %165 = icmp slt i64 %indvars.iv154, 5
  %166 = trunc i64 %indvars.iv154 to i32
  br i1 %165, label %167, label %176

; <label>:167                                     ; preds = %164
  %168 = add i32 %141, %166
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds double, double* %28, i64 %169
  %171 = load double, double* %170, align 8, !tbaa !190
  %172 = getelementptr inbounds double, double* %30, i64 %169
  %173 = load double, double* %172, align 8, !tbaa !190
  %174 = load double, double* %161, align 8, !tbaa !190
  %175 = fmul double %174, 6.250000e-02
  br label %215

; <label>:176                                     ; preds = %164
  switch i32 %166, label %215 [
    i32 5, label %177
    i32 6, label %188
    i32 7, label %197
    i32 8, label %206
  ]

; <label>:177                                     ; preds = %176
  %178 = load double, double* %145, align 8, !tbaa !190
  %179 = load double, double* %148, align 8, !tbaa !190
  %180 = fadd double %178, %179
  %181 = fmul double %180, 5.000000e-01
  %182 = load double, double* %149, align 8, !tbaa !190
  %183 = load double, double* %150, align 8, !tbaa !190
  %184 = fadd double %182, %183
  %185 = fmul double %184, 5.000000e-01
  %186 = load double, double* %161, align 8, !tbaa !190
  %187 = fmul double %186, 1.250000e-01
  br label %215

; <label>:188                                     ; preds = %176
  %189 = load double, double* %153, align 8, !tbaa !190
  %190 = load double, double* %148, align 8, !tbaa !190
  %191 = fadd double %189, %190
  %192 = fmul double %191, 5.000000e-01
  %193 = load double, double* %154, align 8, !tbaa !190
  %194 = load double, double* %150, align 8, !tbaa !190
  %195 = fadd double %193, %194
  %196 = fmul double %195, 5.000000e-01
  br label %215

; <label>:197                                     ; preds = %176
  %198 = load double, double* %153, align 8, !tbaa !190
  %199 = load double, double* %157, align 8, !tbaa !190
  %200 = fadd double %198, %199
  %201 = fmul double %200, 5.000000e-01
  %202 = load double, double* %154, align 8, !tbaa !190
  %203 = load double, double* %158, align 8, !tbaa !190
  %204 = fadd double %202, %203
  %205 = fmul double %204, 5.000000e-01
  br label %215

; <label>:206                                     ; preds = %176
  %207 = load double, double* %145, align 8, !tbaa !190
  %208 = load double, double* %157, align 8, !tbaa !190
  %209 = fadd double %207, %208
  %210 = fmul double %209, 5.000000e-01
  %211 = load double, double* %149, align 8, !tbaa !190
  %212 = load double, double* %158, align 8, !tbaa !190
  %213 = fadd double %211, %212
  %214 = fmul double %213, 5.000000e-01
  br label %215

; <label>:215                                     ; preds = %206, %197, %188, %177, %176, %167
  %ddelr.5 = phi double [ %171, %167 ], [ %181, %177 ], [ %192, %188 ], [ %201, %197 ], [ %210, %206 ], [ %ddelr.491, %176 ]
  %ddelt.5 = phi double [ %173, %167 ], [ %185, %177 ], [ %196, %188 ], [ %205, %197 ], [ %214, %206 ], [ %ddelt.492, %176 ]
  %wght.4 = phi double [ %175, %167 ], [ %187, %177 ], [ %wght.393, %188 ], [ %wght.393, %197 ], [ %wght.393, %206 ], [ %wght.393, %176 ]
  %216 = fmul double %ddelr.5, 2.000000e+00
  %217 = fmul double %216, %163
  %218 = tail call double @sqrt(double %142) #3
  %219 = fmul double %217, %218
  %220 = fadd double %91, %219
  %221 = fmul double %ddelt.5, 2.000000e+00
  %222 = fmul double %221, %163
  %223 = tail call double @sqrt(double %142) #3
  %224 = fmul double %222, %223
  %225 = fadd double %121, %224
  %226 = fsub double %220, %6
  %227 = tail call double @abs_min_real(double %69, double %226) #3
  %228 = fmul double %52, %227
  %229 = fptosi double %228 to i32
  %230 = icmp slt i32 %70, %229
  %231 = select i1 %230, i32 %70, i32 %229
  %232 = icmp sgt i32 %36, %231
  %. = select i1 %232, i32 %36, i32 %231
  %233 = sitofp i32 %. to double
  %234 = fsub double %228, %233
  %235 = fcmp ogt double %234, 9.500000e-01
  %wr.0 = select i1 %235, double 1.000000e+00, double %234
  %236 = fcmp olt double %wr.0, 5.000000e-02
  %wr.1 = select i1 %236, double 0.000000e+00, double %wr.0
  %237 = add nsw i32 %., 1
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %26, i64 %238
  %240 = load double, double* %239, align 8, !tbaa !190
  %241 = fmul double %81, %240
  %242 = fsub double %225, %241
  %243 = fmul double %51, %242
  %244 = fadd double %243, 1.000000e+01
  %245 = getelementptr inbounds double, double* %20, i64 %238
  %246 = load double, double* %245, align 8, !tbaa !190
  %247 = fptosi double %244 to i32
  %248 = sitofp i32 %247 to double
  %249 = fsub double %244, %248
  %250 = fmul double %246, %249
  %251 = getelementptr inbounds i32, i32* %24, i64 %238
  %252 = load i32, i32* %251, align 4, !tbaa !1
  %253 = add nsw i32 %252, -1
  %254 = fptosi double %250 to i32
  %255 = tail call i32 @abs_min_int(i32 %253, i32 %254) #3
  %256 = sitofp i32 %255 to double
  %257 = fsub double %250, %256
  %258 = fcmp ogt double %257, 9.500000e-01
  %wt1.0 = select i1 %258, double 1.000000e+00, double %257
  %259 = fcmp olt double %wt1.0, 5.000000e-02
  %wt1.1 = select i1 %259, double 0.000000e+00, double %wt1.0
  %260 = sext i32 %. to i64
  %261 = getelementptr inbounds double, double* %26, i64 %260
  %262 = load double, double* %261, align 8, !tbaa !190
  %263 = fmul double %81, %262
  %264 = fsub double %225, %263
  %265 = fmul double %51, %264
  %266 = fadd double %265, 1.000000e+01
  %267 = getelementptr inbounds double, double* %20, i64 %260
  %268 = load double, double* %267, align 8, !tbaa !190
  %269 = fptosi double %266 to i32
  %270 = sitofp i32 %269 to double
  %271 = fsub double %266, %270
  %272 = fmul double %268, %271
  %273 = getelementptr inbounds i32, i32* %24, i64 %260
  %274 = load i32, i32* %273, align 4, !tbaa !1
  %275 = add nsw i32 %274, -1
  %276 = fptosi double %272 to i32
  %277 = tail call i32 @abs_min_int(i32 %275, i32 %276) #3
  %278 = sitofp i32 %277 to double
  %279 = fsub double %272, %278
  %280 = fcmp ogt double %279, 9.500000e-01
  %wt0.0 = select i1 %280, double 1.000000e+00, double %279
  %281 = fcmp olt double %wt0.0, 5.000000e-02
  %wt0.1 = select i1 %281, double 0.000000e+00, double %wt0.0
  %282 = getelementptr inbounds i32, i32* %22, i64 %260
  %283 = fsub double 1.000000e+00, %wr.1
  %284 = fmul double %wght.4, %283
  %285 = fsub double 1.000000e+00, %wt0.1
  %286 = fmul double %284, %285
  %287 = getelementptr inbounds i32, i32* %22, i64 %238
  %288 = fmul double %wght.4, %wr.1
  %289 = fmul double %288, %wt1.1
  %290 = fsub double 1.000000e+00, %wt1.1
  %291 = fmul double %288, %290
  %292 = fmul double %284, %wt0.1
  br label %293

; <label>:293                                     ; preds = %347, %215
  %j0.089 = phi i32 [ %277, %215 ], [ %j0.2, %347 ]
  %j1.088 = phi i32 [ %255, %215 ], [ %j1.2, %347 ]
  %np.087 = phi i32 [ 1, %215 ], [ %348, %347 ]
  switch i32 %np.087, label %309 [
    i32 1, label %294
    i32 2, label %298
    i32 3, label %305
  ]

; <label>:294                                     ; preds = %293
  %295 = load i32, i32* %287, align 4, !tbaa !1
  %296 = add i32 %j1.088, 1
  %297 = add i32 %296, %295
  br label %316

; <label>:298                                     ; preds = %293
  %299 = icmp eq i32 %j1.088, 0
  br i1 %299, label %300, label %302

; <label>:300                                     ; preds = %298
  %301 = load i32, i32* %251, align 4, !tbaa !1
  br label %302

; <label>:302                                     ; preds = %300, %298
  %j1.1 = phi i32 [ %301, %300 ], [ %j1.088, %298 ]
  %303 = load i32, i32* %287, align 4, !tbaa !1
  %304 = add nsw i32 %303, %j1.1
  br label %316

; <label>:305                                     ; preds = %293
  %306 = load i32, i32* %282, align 4, !tbaa !1
  %307 = add i32 %j0.089, 1
  %308 = add i32 %307, %306
  br label %316

; <label>:309                                     ; preds = %293
  %310 = icmp eq i32 %j0.089, 0
  br i1 %310, label %311, label %313

; <label>:311                                     ; preds = %309
  %312 = load i32, i32* %273, align 4, !tbaa !1
  br label %313

; <label>:313                                     ; preds = %311, %309
  %j0.1 = phi i32 [ %312, %311 ], [ %j0.089, %309 ]
  %314 = load i32, i32* %282, align 4, !tbaa !1
  %315 = add nsw i32 %314, %j0.1
  br label %316

; <label>:316                                     ; preds = %313, %305, %302, %294
  %j1.2 = phi i32 [ %j1.088, %294 ], [ %j1.1, %302 ], [ %j1.088, %305 ], [ %j1.088, %313 ]
  %j0.2 = phi i32 [ %j0.089, %294 ], [ %j0.089, %302 ], [ %j0.089, %305 ], [ %j0.1, %313 ]
  %.pn = phi i32 [ %297, %294 ], [ %304, %302 ], [ %308, %305 ], [ %315, %313 ]
  %rr.0 = phi double [ %289, %294 ], [ %291, %302 ], [ %292, %305 ], [ %286, %313 ]
  %ij.0 = sub nsw i32 %.pn, %41
  %317 = icmp sgt i32 %ij.0, -1
  br i1 %317, label %319, label %318

; <label>:318                                     ; preds = %316
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.186, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 220, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

; <label>:319                                     ; preds = %316
  %320 = icmp slt i32 %ij.0, %32
  br i1 %320, label %322, label %321

; <label>:321                                     ; preds = %319
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.187, i64 0, i64 0), i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.182, i64 0, i64 0), i32 221, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.poisson_initial, i64 0, i64 0)) #15
  unreachable

; <label>:322                                     ; preds = %319
  %323 = fcmp olt double %rr.0, 1.000000e-03
  br i1 %323, label %326, label %.preheader8

.preheader8:                                      ; preds = %322
  %324 = load i32, i32* %107, align 4, !tbaa !1
  %325 = icmp slt i32 %324, 1
  br i1 %325, label %._crit_edge85, label %.lr.ph84.preheader

.lr.ph84.preheader:                               ; preds = %.preheader8
  br label %.lr.ph84

; <label>:326                                     ; preds = %322
  %327 = load double, double* %110, align 8, !tbaa !190
  %328 = fadd double %rr.0, %327
  store double %328, double* %110, align 8, !tbaa !190
  br label %347

; <label>:329                                     ; preds = %.lr.ph84
  %indvars.iv.next153 = add nuw nsw i64 %indvars.iv152, 1
  %330 = sext i32 %324 to i64
  %331 = icmp slt i64 %indvars.iv152, %330
  br i1 %331, label %.lr.ph84, label %._crit_edge85.loopexit

.lr.ph84:                                         ; preds = %.lr.ph84.preheader, %329
  %indvars.iv152 = phi i64 [ %indvars.iv.next153, %329 ], [ 1, %.lr.ph84.preheader ]
  %332 = trunc i64 %indvars.iv152 to i32
  %333 = add i32 %143, %332
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i32, i32* %indexp, i64 %334
  %336 = load i32, i32* %335, align 4, !tbaa !1
  %337 = icmp eq i32 %ij.0, %336
  br i1 %337, label %338, label %329

; <label>:338                                     ; preds = %.lr.ph84
  %339 = getelementptr inbounds double, double* %ring, i64 %334
  %340 = load double, double* %339, align 8, !tbaa !190
  %341 = fadd double %rr.0, %340
  store double %341, double* %339, align 8, !tbaa !190
  br label %347

._crit_edge85.loopexit:                           ; preds = %329
  br label %._crit_edge85

._crit_edge85:                                    ; preds = %._crit_edge85.loopexit, %.preheader8
  %342 = add nsw i32 %324, 1
  store i32 %342, i32* %107, align 4, !tbaa !1
  %343 = add i32 %324, %tmp2
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i32, i32* %indexp, i64 %344
  store i32 %ij.0, i32* %345, align 4, !tbaa !1
  %346 = getelementptr inbounds double, double* %ring, i64 %344
  store double %rr.0, double* %346, align 8, !tbaa !190
  br label %347

; <label>:347                                     ; preds = %._crit_edge85, %338, %326
  %348 = add nuw nsw i32 %np.087, 1
  %349 = icmp slt i32 %348, 5
  br i1 %349, label %293, label %350

; <label>:350                                     ; preds = %347
  %indvars.iv.next155 = add nuw nsw i64 %indvars.iv154, 1
  %351 = icmp slt i64 %indvars.iv.next155, 9
  br i1 %351, label %164, label %352

; <label>:352                                     ; preds = %350
  %indvars.iv.next157 = add nuw nsw i64 %indvars.iv156, 1
  %353 = icmp slt i64 %indvars.iv156, 2
  br i1 %353, label %.preheader9, label %._crit_edge98.loopexit

._crit_edge98.loopexit:                           ; preds = %352
  br label %._crit_edge98

._crit_edge98:                                    ; preds = %._crit_edge98.loopexit, %.preheader10.._crit_edge98_crit_edge
  %wght.2.lcssa = phi double [ undef, %.preheader10.._crit_edge98_crit_edge ], [ %wght.4, %._crit_edge98.loopexit ]
  %ddelt.3.lcssa = phi double [ undef, %.preheader10.._crit_edge98_crit_edge ], [ %ddelt.5, %._crit_edge98.loopexit ]
  %ddelr.3.lcssa = phi double [ undef, %.preheader10.._crit_edge98_crit_edge ], [ %ddelr.5, %._crit_edge98.loopexit ]
  %354 = add nuw nsw i32 %j.0105, 1
  %355 = load i32, i32* %84, align 4, !tbaa !1
  %356 = icmp slt i32 %j.0105, %355
  br i1 %356, label %95, label %._crit_edge107.loopexit

._crit_edge107.loopexit:                          ; preds = %._crit_edge98
  br label %._crit_edge107

._crit_edge107:                                   ; preds = %._crit_edge107.loopexit, %.preheader11
  %wght.1.lcssa = phi double [ %wght.0113, %.preheader11 ], [ %wght.2.lcssa, %._crit_edge107.loopexit ]
  %ddelt.2.lcssa = phi double [ %ddelt.1112, %.preheader11 ], [ %ddelt.3.lcssa, %._crit_edge107.loopexit ]
  %ddelr.2.lcssa = phi double [ %ddelr.1111, %.preheader11 ], [ %ddelr.3.lcssa, %._crit_edge107.loopexit ]
  %357 = icmp slt i64 %indvars.iv158, %72
  %indvars.iv.next159 = add nsw i64 %indvars.iv158, 1
  br i1 %357, label %.preheader11, label %._crit_edge116.loopexit

._crit_edge116.loopexit:                          ; preds = %._crit_edge107
  br label %._crit_edge116

._crit_edge116:                                   ; preds = %._crit_edge116.loopexit, %78
  %ddelt.1.lcssa = phi double [ %ddelt.0120, %78 ], [ %ddelt.2.lcssa, %._crit_edge116.loopexit ]
  %ddelr.1.lcssa = phi double [ %ddelr.0119, %78 ], [ %ddelr.2.lcssa, %._crit_edge116.loopexit ]
  %358 = add nuw nsw i32 %k.0121, 1
  %359 = icmp slt i32 %k.0121, %4
  br i1 %359, label %78, label %.preheader7

.preheader6:                                      ; preds = %._crit_edge74, %.preheader6.lr.ph
  %indvars.iv148 = phi i64 [ 0, %.preheader6.lr.ph ], [ %indvars.iv.next149, %._crit_edge74 ]
  %tdum1.078 = phi double [ 0.000000e+00, %.preheader6.lr.ph ], [ %tdum1.1.lcssa, %._crit_edge74 ]
  %zdum.077 = phi double [ 1.000000e+00, %.preheader6.lr.ph ], [ %zdum.1.lcssa, %._crit_edge74 ]
  br i1 %76, label %.preheader5.lr.ph, label %._crit_edge74

.preheader5.lr.ph:                                ; preds = %.preheader6
  %360 = mul nsw i64 %indvars.iv148, %77
  %361 = trunc i64 %indvars.iv148 to i32
  %362 = mul i32 %361, %32
  %363 = zext i32 %362 to i64
  br label %.preheader5

.preheader.loopexit:                              ; preds = %._crit_edge74
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader7, %.preheader12
  %tdum1.0.lcssa = phi double [ 0.000000e+00, %.preheader7 ], [ 0.000000e+00, %.preheader12 ], [ %tdum1.1.lcssa, %.preheader.loopexit ]
  %zdum.0.lcssa = phi double [ 1.000000e+00, %.preheader7 ], [ 1.000000e+00, %.preheader12 ], [ %zdum.1.lcssa, %.preheader.loopexit ]
  br i1 %54, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.preheader5:                                      ; preds = %._crit_edge68, %.preheader5.lr.ph
  %indvars.iv143 = phi i64 [ 0, %.preheader5.lr.ph ], [ %indvars.iv.next144, %._crit_edge68 ]
  %tdum1.171 = phi double [ %tdum1.078, %.preheader5.lr.ph ], [ %tdum1.2, %._crit_edge68 ]
  %zdum.170 = phi double [ %zdum.077, %.preheader5.lr.ph ], [ %zdum.2, %._crit_edge68 ]
  %364 = add nsw i64 %indvars.iv143, %360
  %365 = getelementptr inbounds i32, i32* %nindex, i64 %364
  %366 = load i32, i32* %365, align 4, !tbaa !1
  %367 = icmp sgt i32 %366, 0
  br i1 %367, label %.lr.ph67, label %._crit_edge68

.lr.ph67:                                         ; preds = %.preheader5
  %368 = add i64 %indvars.iv143, %363
  %369 = trunc i64 %368 to i32
  %tmp4 = mul i32 %369, %mindex
  %370 = sext i32 %366 to i64
  br label %371

; <label>:371                                     ; preds = %371, %.lr.ph67
  %indvars.iv141 = phi i64 [ 0, %.lr.ph67 ], [ %indvars.iv.next142, %371 ]
  %rdum1.066 = phi double [ 0.000000e+00, %.lr.ph67 ], [ %377, %371 ]
  %372 = trunc i64 %indvars.iv141 to i32
  %373 = add i32 %372, %tmp4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds double, double* %ring, i64 %374
  %376 = load double, double* %375, align 8, !tbaa !190
  %377 = fadd double %rdum1.066, %376
  %indvars.iv.next142 = add nuw nsw i64 %indvars.iv141, 1
  %378 = icmp slt i64 %indvars.iv.next142, %370
  br i1 %378, label %371, label %._crit_edge68.loopexit

._crit_edge68.loopexit:                           ; preds = %371
  br label %._crit_edge68

._crit_edge68:                                    ; preds = %._crit_edge68.loopexit, %.preheader5
  %rdum1.0.lcssa = phi double [ 0.000000e+00, %.preheader5 ], [ %377, %._crit_edge68.loopexit ]
  %379 = fcmp ogt double %rdum1.0.lcssa, %tdum1.171
  %tdum1.2 = select i1 %379, double %rdum1.0.lcssa, double %tdum1.171
  %380 = fcmp olt double %rdum1.0.lcssa, %zdum.170
  %zdum.2 = select i1 %380, double %rdum1.0.lcssa, double %zdum.170
  %indvars.iv.next144 = add nuw nsw i64 %indvars.iv143, 1
  %lftr.wideiv146 = trunc i64 %indvars.iv.next144 to i32
  %exitcond147 = icmp eq i32 %lftr.wideiv146, %32
  br i1 %exitcond147, label %._crit_edge74.loopexit, label %.preheader5

._crit_edge74.loopexit:                           ; preds = %._crit_edge68
  br label %._crit_edge74

._crit_edge74:                                    ; preds = %._crit_edge74.loopexit, %.preheader6
  %tdum1.1.lcssa = phi double [ %tdum1.078, %.preheader6 ], [ %tdum1.2, %._crit_edge74.loopexit ]
  %zdum.1.lcssa = phi double [ %zdum.077, %.preheader6 ], [ %zdum.2, %._crit_edge74.loopexit ]
  %indvars.iv.next149 = add nuw nsw i64 %indvars.iv148, 1
  %lftr.wideiv150 = trunc i64 %indvars.iv.next149 to i32
  %exitcond151 = icmp eq i32 %lftr.wideiv150, %4
  br i1 %exitcond151, label %.preheader.loopexit, label %.preheader6

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %max_nindex.061 = phi i32 [ -1, %.lr.ph.preheader ], [ %.max_nindex.0, %.lr.ph ]
  %min_nindex.060 = phi i32 [ 23232323, %.lr.ph.preheader ], [ %min_nindex.1, %.lr.ph ]
  %sum_nindex.059 = phi i32 [ 0, %.lr.ph.preheader ], [ %383, %.lr.ph ]
  %381 = getelementptr inbounds i32, i32* %nindex, i64 %indvars.iv
  %382 = load i32, i32* %381, align 4, !tbaa !1
  %383 = add nsw i32 %382, %sum_nindex.059
  %384 = icmp sgt i32 %382, %max_nindex.061
  %.max_nindex.0 = select i1 %384, i32 %382, i32 %max_nindex.061
  %385 = icmp slt i32 %382, %min_nindex.060
  %min_nindex.1 = select i1 %385, i32 %382, i32 %min_nindex.060
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %53
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %max_nindex.0.lcssa = phi i32 [ -1, %.preheader ], [ %.max_nindex.0, %._crit_edge.loopexit ]
  %min_nindex.0.lcssa = phi i32 [ 23232323, %.preheader ], [ %min_nindex.1, %._crit_edge.loopexit ]
  %sum_nindex.0.lcssa = phi i32 [ 0, %.preheader ], [ %383, %._crit_edge.loopexit ]
  %386 = load i32, i32* %42, align 8, !tbaa !27
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %391

; <label>:388                                     ; preds = %._crit_edge
  %389 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %390 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %389, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9.188, i64 0, i64 0), i32 %max_nindex.0.lcssa, i32 %min_nindex.0.lcssa, double %tdum1.0.lcssa, double %zdum.0.lcssa, i32 %32, i32 %sum_nindex.0.lcssa) #13
  br label %391

; <label>:391                                     ; preds = %388, %._crit_edge
  call void @llvm.lifetime.end(i64 24, i8* %2) #3
  call void @llvm.lifetime.end(i64 24, i8* %1) #3
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @poisson(i32 %iflag, %struct.gtc_bench_data_t* %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %2 = load i32, i32* %1, align 4, !tbaa !197
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4, !tbaa !152
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %6 = load double, double* %5, align 8, !tbaa !171
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  %8 = load double, double* %7, align 8, !tbaa !170
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %10 = load double, double* %9, align 8, !tbaa !208
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 42
  %12 = load double*, double** %11, align 8, !tbaa !76
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 43
  %14 = load double*, double** %13, align 8, !tbaa !77
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 45
  %16 = load double*, double** %15, align 8, !tbaa !78
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %18 = load i32*, i32** %17, align 8, !tbaa !29
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %20 = load i32*, i32** %19, align 8, !tbaa !31
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %22 = load double*, double** %21, align 8, !tbaa !34
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %24 = load double*, double** %23, align 8, !tbaa !60
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 7
  %26 = load double*, double** %25, align 8, !tbaa !39
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %28 = load i32, i32* %27, align 4, !tbaa !247
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %30 = bitcast i32* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %34 = lshr i64 %31, 32
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %37 = load i32, i32* %36, align 8, !tbaa !242
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 12
  %39 = bitcast i32* %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = trunc i64 %40 to i32
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 13
  %43 = lshr i64 %40, 32
  %44 = trunc i64 %43 to i32
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 14
  %46 = bitcast i32* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = trunc i64 %47 to i32
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 15
  %50 = lshr i64 %47, 32
  %51 = trunc i64 %50 to i32
  %52 = sub i32 %48, %37
  %53 = sub nsw i32 %51, %37
  %54 = load i32, i32* @istep, align 4, !tbaa !1
  %55 = icmp eq i32 %54, 1
  %56 = load i32, i32* @irk, align 4
  %57 = icmp eq i32 %56, 1
  %or.cond = and i1 %55, %57
  %58 = icmp eq i32 %iflag, 0
  %or.cond12 = and i1 %58, %or.cond
  br i1 %or.cond12, label %59, label %._crit_edge1

._crit_edge1:                                     ; preds = %0
  %.pre = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 50
  %.pre2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 51
  %.pre4 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 52
  br label %67

; <label>:59                                      ; preds = %0
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 51
  %61 = load i32*, i32** %60, align 8, !tbaa !67
  %62 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 50
  %63 = load i32*, i32** %62, align 8, !tbaa !66
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 52
  %65 = load double*, double** %64, align 8, !tbaa !68
  %66 = tail call i32 @poisson_initial(%struct.gtc_bench_data_t* nonnull %gtc_input, i32 2, i32 65, i32* %61, i32* %63, double* %65)
  br label %67

; <label>:67                                      ; preds = %._crit_edge1, %59
  %.pre-phi5 = phi double** [ %.pre4, %._crit_edge1 ], [ %64, %59 ]
  %.pre-phi3 = phi i32** [ %.pre2, %._crit_edge1 ], [ %60, %59 ]
  %.pre-phi = phi i32** [ %.pre, %._crit_edge1 ], [ %62, %59 ]
  %68 = load i32*, i32** %.pre-phi, align 8, !tbaa !66
  %69 = load i32*, i32** %.pre-phi3, align 8, !tbaa !67
  %70 = load double*, double** %.pre-phi5, align 8, !tbaa !68
  %71 = fmul double %6, %10
  %pow2 = fmul double %71, %71
  %72 = fdiv double %pow2, %8
  %73 = add i32 %2, 1
  %74 = icmp slt i32 %2, 1
  br i1 %74, label %.preheader15, label %.preheader22.lr.ph

.preheader22.lr.ph:                               ; preds = %67
  %75 = icmp sgt i32 %28, 0
  %76 = icmp sgt i32 %52, %53
  %77 = icmp eq i32 %32, 0
  %78 = icmp eq i32 %35, %4
  %79 = sext i32 %4 to i64
  %80 = getelementptr inbounds i32, i32* %18, i64 %79
  %81 = getelementptr inbounds i32, i32* %20, i64 %79
  %82 = icmp sgt i32 %41, %44
  %83 = sext i32 %73 to i64
  %84 = sext i32 %52 to i64
  %85 = sext i32 %53 to i64
  %86 = sext i32 %41 to i64
  %87 = sext i32 %44 to i64
  %88 = sext i32 %28 to i64
  %89 = sext i32 %37 to i64
  %90 = sub nsw i64 0, %89
  %scevgep = getelementptr double, double* %14, i64 %90
  br label %.preheader22

.preheader22:                                     ; preds = %._crit_edge58, %.preheader22.lr.ph
  %indvars.iv85 = phi i64 [ %indvars.iv.next86, %._crit_edge58 ], [ 1, %.preheader22.lr.ph ]
  br i1 %75, label %.lr.ph33.preheader, label %.preheader21

.lr.ph33.preheader:                               ; preds = %.preheader22
  br label %.lr.ph33

.preheader15.loopexit:                            ; preds = %._crit_edge58
  br label %.preheader15

.preheader15:                                     ; preds = %.preheader15.loopexit, %67
  %91 = icmp sgt i32 %32, %35
  br i1 %91, label %._crit_edge31, label %.lr.ph30

.lr.ph30:                                         ; preds = %.preheader15
  %92 = sext i32 %32 to i64
  %93 = sext i32 %35 to i64
  br label %186

.preheader21.loopexit:                            ; preds = %.lr.ph33
  br label %.preheader21

.preheader21:                                     ; preds = %.preheader21.loopexit, %.preheader22
  %94 = add nsw i64 %indvars.iv85, -1
  %95 = mul nsw i64 %94, %88
  %96 = trunc i64 %94 to i32
  %97 = mul i32 %96, %28
  %98 = trunc i64 %95 to i32
  br label %.preheader19

.lr.ph33:                                         ; preds = %.lr.ph33.preheader, %.lr.ph33
  %indvars.iv63 = phi i64 [ %indvars.iv.next64, %.lr.ph33 ], [ 0, %.lr.ph33.preheader ]
  %99 = mul nsw i64 %indvars.iv63, %83
  %100 = add nsw i64 %99, %indvars.iv85
  %101 = getelementptr inbounds double, double* %22, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !190
  %103 = fmul double %6, %102
  %104 = getelementptr inbounds double, double* %16, i64 %indvars.iv63
  store double %103, double* %104, align 8, !tbaa !190
  %105 = fmul double %103, 8.000000e-01
  %106 = getelementptr inbounds double, double* %14, i64 %indvars.iv63
  store double %105, double* %106, align 8, !tbaa !190
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next64 to i32
  %exitcond65 = icmp eq i32 %lftr.wideiv, %28
  br i1 %exitcond65, label %.preheader21.loopexit, label %.lr.ph33

.preheader20:                                     ; preds = %._crit_edge54
  br i1 %75, label %.lr.ph57.preheader, label %._crit_edge58

.lr.ph57.preheader:                               ; preds = %.preheader20
  br label %.lr.ph57

.preheader19:                                     ; preds = %._crit_edge54, %.preheader21
  %it.055 = phi i32 [ 2, %.preheader21 ], [ %164, %._crit_edge54 ]
  br i1 %76, label %.preheader18, label %.lr.ph42.preheader

.lr.ph42.preheader:                               ; preds = %.preheader19
  br label %.lr.ph42

.preheader18.loopexit:                            ; preds = %._crit_edge38
  br label %.preheader18

.preheader18:                                     ; preds = %.preheader18.loopexit, %.preheader19
  br i1 %76, label %._crit_edge45, label %.lr.ph44.preheader

.lr.ph44.preheader:                               ; preds = %.preheader18
  br label %.lr.ph44

.lr.ph42:                                         ; preds = %.lr.ph42.preheader, %._crit_edge38
  %indvars.iv70 = phi i64 [ %indvars.iv.next71, %._crit_edge38 ], [ %84, %.lr.ph42.preheader ]
  %i1.040 = phi i32 [ %115, %._crit_edge38 ], [ %52, %.lr.ph42.preheader ]
  %107 = add nsw i32 %i1.040, %98
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %69, i64 %108
  %110 = load i32, i32* %109, align 4, !tbaa !1
  %111 = icmp slt i32 %110, 1
  br i1 %111, label %._crit_edge38, label %.lr.ph37

.lr.ph37:                                         ; preds = %.lr.ph42
  %tmp = add i32 %i1.040, %97
  %tmp13 = mul i32 %tmp, 65
  %112 = add i32 %tmp13, -1
  %113 = add i32 %110, 1
  br label %117

._crit_edge38.loopexit:                           ; preds = %117
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %.lr.ph42
  %ptilde_val.0.lcssa = phi double [ 0.000000e+00, %.lr.ph42 ], [ %129, %._crit_edge38.loopexit ]
  %114 = getelementptr inbounds double, double* %12, i64 %indvars.iv70
  store double %ptilde_val.0.lcssa, double* %114, align 8, !tbaa !190
  %115 = add nsw i32 %i1.040, 1
  %116 = icmp slt i64 %indvars.iv70, %85
  %indvars.iv.next71 = add nsw i64 %indvars.iv70, 1
  br i1 %116, label %.lr.ph42, label %.preheader18.loopexit

; <label>:117                                     ; preds = %117, %.lr.ph37
  %indvars.iv66 = phi i64 [ %indvars.iv.next67, %117 ], [ 1, %.lr.ph37 ]
  %ptilde_val.034 = phi double [ %129, %117 ], [ 0.000000e+00, %.lr.ph37 ]
  %118 = trunc i64 %indvars.iv66 to i32
  %119 = add i32 %112, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %68, i64 %120
  %122 = load i32, i32* %121, align 4, !tbaa !1
  %123 = getelementptr inbounds double, double* %70, i64 %120
  %124 = load double, double* %123, align 8, !tbaa !190
  %125 = sext i32 %122 to i64
  %126 = getelementptr inbounds double, double* %14, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !190
  %128 = fmul double %124, %127
  %129 = fadd double %ptilde_val.034, %128
  %indvars.iv.next67 = add nuw nsw i64 %indvars.iv66, 1
  %lftr.wideiv68 = trunc i64 %indvars.iv.next67 to i32
  %exitcond69 = icmp eq i32 %lftr.wideiv68, %113
  br i1 %exitcond69, label %._crit_edge38.loopexit, label %117

._crit_edge45.loopexit:                           ; preds = %.lr.ph44
  br label %._crit_edge45

._crit_edge45:                                    ; preds = %._crit_edge45.loopexit, %.preheader18
  br i1 %77, label %141, label %.loopexit17

.lr.ph44:                                         ; preds = %.lr.ph44.preheader, %.lr.ph44
  %indvars.iv72 = phi i64 [ %indvars.iv.next73, %.lr.ph44 ], [ %84, %.lr.ph44.preheader ]
  %130 = getelementptr inbounds double, double* %12, i64 %indvars.iv72
  %131 = load double, double* %130, align 8, !tbaa !190
  %132 = getelementptr inbounds double, double* %14, i64 %indvars.iv72
  %133 = load double, double* %132, align 8, !tbaa !190
  %134 = fmul double %133, 7.500000e-01
  %135 = fsub double %131, %134
  %136 = getelementptr inbounds double, double* %16, i64 %indvars.iv72
  %137 = load double, double* %136, align 8, !tbaa !190
  %138 = fadd double %137, %135
  %139 = fmul double %138, 8.000000e-01
  store double %139, double* %132, align 8, !tbaa !190
  %140 = icmp slt i64 %indvars.iv72, %85
  %indvars.iv.next73 = add nsw i64 %indvars.iv72, 1
  br i1 %140, label %.lr.ph44, label %._crit_edge45.loopexit

; <label>:141                                     ; preds = %._crit_edge45
  %142 = load i32, i32* %20, align 4, !tbaa !1
  %143 = icmp slt i32 %142, 0
  br i1 %143, label %.loopexit17, label %.loopexit17.loopexit

.loopexit17.loopexit:                             ; preds = %141
  %144 = load i32, i32* %18, align 4
  %145 = add nsw i32 %142, %144
  %146 = sext i32 %144 to i64
  %scevgep90 = getelementptr double, double* %scevgep, i64 %146
  %scevgep9091 = bitcast double* %scevgep90 to i8*
  %147 = icmp sgt i32 %144, %145
  %smax = select i1 %147, i32 %144, i32 %145
  %148 = sub i32 %smax, %144
  %149 = zext i32 %148 to i64
  %150 = shl nuw nsw i64 %149, 3
  %151 = add nuw nsw i64 %150, 8
  call void @llvm.memset.p0i8.i64(i8* %scevgep9091, i8 0, i64 %151, i32 8, i1 false)
  br label %.loopexit17

.loopexit17:                                      ; preds = %.loopexit17.loopexit, %141, %._crit_edge45
  br i1 %78, label %160, label %.preheader16

.preheader16.loopexit:                            ; preds = %160
  %152 = load i32, i32* %80, align 4
  %153 = add nsw i32 %161, %152
  %154 = sext i32 %152 to i64
  %scevgep93 = getelementptr double, double* %scevgep, i64 %154
  %scevgep9394 = bitcast double* %scevgep93 to i8*
  %155 = icmp sgt i32 %152, %153
  %smax95 = select i1 %155, i32 %152, i32 %153
  %156 = sub i32 %smax95, %152
  %157 = zext i32 %156 to i64
  %158 = shl nuw nsw i64 %157, 3
  %159 = add nuw nsw i64 %158, 8
  call void @llvm.memset.p0i8.i64(i8* %scevgep9394, i8 0, i64 %159, i32 8, i1 false)
  br label %.preheader16

.preheader16:                                     ; preds = %160, %.preheader16.loopexit, %.loopexit17
  br i1 %82, label %._crit_edge54, label %.lr.ph53.preheader

.lr.ph53.preheader:                               ; preds = %.preheader16
  br label %.lr.ph53

; <label>:160                                     ; preds = %.loopexit17
  %161 = load i32, i32* %81, align 4, !tbaa !1
  %162 = icmp slt i32 %161, 0
  br i1 %162, label %.preheader16, label %.preheader16.loopexit

._crit_edge54.loopexit:                           ; preds = %.lr.ph53
  br label %._crit_edge54

._crit_edge54:                                    ; preds = %._crit_edge54.loopexit, %.preheader16
  %163 = tail call i32 @fix_radial_ghosts(%struct.gtc_bench_data_t* %gtc_input, double* %14, i32 0, i32 1) #3
  %164 = add nuw nsw i32 %it.055, 1
  %exitcond80 = icmp eq i32 %164, 6
  br i1 %exitcond80, label %.preheader20, label %.preheader19

.lr.ph53:                                         ; preds = %.lr.ph53.preheader, %.lr.ph53
  %indvars.iv78 = phi i64 [ %indvars.iv.next79, %.lr.ph53 ], [ %86, %.lr.ph53.preheader ]
  %165 = getelementptr inbounds i32, i32* %18, i64 %indvars.iv78
  %166 = load i32, i32* %165, align 4, !tbaa !1
  %167 = getelementptr inbounds i32, i32* %20, i64 %indvars.iv78
  %168 = load i32, i32* %167, align 4, !tbaa !1
  %169 = sub i32 %166, %37
  %170 = add i32 %169, %168
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds double, double* %14, i64 %171
  %173 = bitcast double* %172 to i64*
  %174 = load i64, i64* %173, align 8, !tbaa !190
  %175 = sext i32 %169 to i64
  %176 = getelementptr inbounds double, double* %14, i64 %175
  %177 = bitcast double* %176 to i64*
  store i64 %174, i64* %177, align 8, !tbaa !190
  %178 = icmp slt i64 %indvars.iv78, %87
  %indvars.iv.next79 = add nsw i64 %indvars.iv78, 1
  br i1 %178, label %.lr.ph53, label %._crit_edge54.loopexit

._crit_edge58.loopexit:                           ; preds = %.lr.ph57
  br label %._crit_edge58

._crit_edge58:                                    ; preds = %._crit_edge58.loopexit, %.preheader20
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 1
  %lftr.wideiv87 = trunc i64 %indvars.iv.next86 to i32
  %exitcond88 = icmp eq i32 %lftr.wideiv87, %73
  br i1 %exitcond88, label %.preheader15.loopexit, label %.preheader22

.lr.ph57:                                         ; preds = %.lr.ph57.preheader, %.lr.ph57
  %indvars.iv81 = phi i64 [ %indvars.iv.next82, %.lr.ph57 ], [ 0, %.lr.ph57.preheader ]
  %179 = getelementptr inbounds double, double* %14, i64 %indvars.iv81
  %180 = bitcast double* %179 to i64*
  %181 = load i64, i64* %180, align 8, !tbaa !190
  %182 = mul nsw i64 %indvars.iv81, %83
  %183 = add nsw i64 %182, %indvars.iv85
  %184 = getelementptr inbounds double, double* %24, i64 %183
  %185 = bitcast double* %184 to i64*
  store i64 %181, i64* %185, align 8, !tbaa !190
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %lftr.wideiv83 = trunc i64 %indvars.iv.next82 to i32
  %exitcond84 = icmp eq i32 %lftr.wideiv83, %28
  br i1 %exitcond84, label %._crit_edge58.loopexit, label %.lr.ph57

._crit_edge31.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge31

._crit_edge31:                                    ; preds = %._crit_edge31.loopexit, %.preheader15
  ret i32 0

; <label>:186                                     ; preds = %._crit_edge, %.lr.ph30
  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %92, %.lr.ph30 ]
  %187 = getelementptr inbounds i32, i32* %18, i64 %indvars.iv
  %188 = getelementptr inbounds i32, i32* %20, i64 %indvars.iv
  %189 = load i32, i32* %188, align 4, !tbaa !1
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %.preheader.lr.ph, label %.preheader14

.preheader.lr.ph:                                 ; preds = %186
  %191 = load i32, i32* %187, align 4
  %192 = add nsw i32 %189, %191
  %193 = getelementptr inbounds double, double* %26, i64 %indvars.iv
  br label %.preheader

.loopexit.loopexit:                               ; preds = %203
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader
  %194 = icmp slt i32 %j8.026, %192
  br i1 %194, label %.preheader, label %.preheader14.loopexit

.preheader14.loopexit:                            ; preds = %.loopexit
  br label %.preheader14

.preheader14:                                     ; preds = %.preheader14.loopexit, %186
  br i1 %74, label %._crit_edge, label %.lr.ph28

.lr.ph28:                                         ; preds = %.preheader14
  %195 = load i32, i32* %187, align 4
  %196 = load i32, i32* %188, align 4
  %197 = sub i32 %195, %37
  %198 = add i32 %197, %196
  %199 = mul nsw i32 %198, %73
  %200 = mul nsw i32 %197, %73
  br label %213

.preheader:                                       ; preds = %.loopexit, %.preheader.lr.ph
  %j8.026.in = phi i32 [ %191, %.preheader.lr.ph ], [ %j8.026, %.loopexit ]
  %j8.026 = add nsw i32 %j8.026.in, 1
  br i1 %74, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %201 = sub nsw i32 %j8.026, %37
  %202 = mul nsw i32 %201, %73
  br label %203

; <label>:203                                     ; preds = %203, %.lr.ph
  %l.024 = phi i32 [ 1, %.lr.ph ], [ %211, %203 ]
  %204 = load double, double* %193, align 8, !tbaa !190
  %205 = fmul double %72, %204
  %206 = add nsw i32 %l.024, %202
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds double, double* %24, i64 %207
  %209 = load double, double* %208, align 8, !tbaa !190
  %210 = fmul double %209, %205
  store double %210, double* %208, align 8, !tbaa !190
  %211 = add nuw nsw i32 %l.024, 1
  %exitcond = icmp eq i32 %211, %73
  br i1 %exitcond, label %.loopexit.loopexit, label %203

._crit_edge.loopexit:                             ; preds = %213
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader14
  %212 = icmp slt i64 %indvars.iv, %93
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %212, label %186, label %._crit_edge31.loopexit

; <label>:213                                     ; preds = %213, %.lr.ph28
  %k9.027 = phi i32 [ 1, %.lr.ph28 ], [ %223, %213 ]
  %214 = add nsw i32 %199, %k9.027
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds double, double* %24, i64 %215
  %217 = bitcast double* %216 to i64*
  %218 = load i64, i64* %217, align 8, !tbaa !190
  %219 = add nsw i32 %200, %k9.027
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds double, double* %24, i64 %220
  %222 = bitcast double* %221 to i64*
  store i64 %218, i64* %222, align 8, !tbaa !190
  %223 = add nuw nsw i32 %k9.027, 1
  %exitcond62 = icmp eq i32 %223, %73
  br i1 %exitcond62, label %._crit_edge.loopexit, label %213
}

; Function Attrs: nounwind uwtable
define i32 @field(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %istatus1 = alloca %struct.MPI_Status, align 4
  %istatus2 = alloca %struct.MPI_Status, align 4
  %istatus3 = alloca %struct.MPI_Status, align 4
  %1 = bitcast %struct.MPI_Status* %istatus1 to i8*
  call void @llvm.lifetime.start(i64 20, i8* %1) #3
  %2 = bitcast %struct.MPI_Status* %istatus2 to i8*
  call void @llvm.lifetime.start(i64 20, i8* %2) #3
  %3 = bitcast %struct.MPI_Status* %istatus3 to i8*
  call void @llvm.lifetime.start(i64 20, i8* %3) #3
  %4 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %5 = load i32, i32* %4, align 4, !tbaa !197
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 4, !tbaa !152
  %8 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %9 = load double, double* %8, align 8, !tbaa !163
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 65
  %11 = load double, double* %10, align 8, !tbaa !207
  %12 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 50
  %13 = load double, double* %12, align 8, !tbaa !162
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 51
  %15 = load double, double* %14, align 8, !tbaa !165
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 52
  %17 = load double, double* %16, align 8, !tbaa !166
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 53
  %19 = load double, double* %18, align 8, !tbaa !167
  %20 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 66
  %21 = load double, double* %20, align 8, !tbaa !209
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 29
  %23 = load double*, double** %22, align 8, !tbaa !42
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %25 = load i32*, i32** %24, align 8, !tbaa !29
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %27 = load i32*, i32** %26, align 8, !tbaa !31
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %29 = load double*, double** %28, align 8, !tbaa !60
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 1
  %31 = load i32*, i32** %30, align 8, !tbaa !44
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %33 = load double*, double** %32, align 8, !tbaa !30
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 6
  %35 = load double*, double** %34, align 8, !tbaa !63
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 3
  %37 = load i32*, i32** %36, align 8, !tbaa !47
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 30
  %39 = load double*, double** %38, align 8, !tbaa !49
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 37
  %41 = load double*, double** %40, align 8, !tbaa !69
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 39
  %43 = load double*, double** %42, align 8, !tbaa !70
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 35
  %45 = load double*, double** %44, align 8, !tbaa !73
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 40
  %47 = load double*, double** %46, align 8, !tbaa !72
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 38
  %49 = load double*, double** %48, align 8, !tbaa !71
  %50 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 36
  %51 = load double*, double** %50, align 8, !tbaa !74
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 53
  %53 = load double*, double** %52, align 8, !tbaa !79
  %54 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 54
  %55 = load double*, double** %54, align 8, !tbaa !80
  %56 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 55
  %57 = load i32*, i32** %56, align 8, !tbaa !81
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 56
  %59 = load i32*, i32** %58, align 8, !tbaa !82
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 57
  %61 = load i32*, i32** %60, align 8, !tbaa !83
  %62 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 58
  %63 = load i32*, i32** %62, align 8, !tbaa !84
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %65 = load i32, i32* %64, align 4, !tbaa !247
  %66 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 2
  %67 = bitcast i32* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 3
  %71 = lshr i64 %68, 32
  %72 = trunc i64 %71 to i32
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %74 = load i32, i32* %73, align 8, !tbaa !242
  %75 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 12
  %76 = bitcast i32* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 13
  %80 = lshr i64 %77, 32
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %69, 0
  %. = select i1 %82, i32 1, i32 %69
  %83 = icmp eq i32 %72, %7
  %84 = add nsw i32 %7, -1
  %ipsi_out1.0 = select i1 %83, i32 %84, i32 %72
  %85 = icmp eq i32 %78, 0
  %.23 = select i1 %85, i32 1, i32 %78
  %86 = icmp eq i32 %81, %7
  %ipsi_nover_out1.0 = select i1 %86, i32 %84, i32 %81
  %87 = sext i32 %.23 to i64
  %88 = getelementptr inbounds i32, i32* %25, i64 %87
  %89 = load i32, i32* %88, align 4, !tbaa !1
  %90 = sext i32 %ipsi_nover_out1.0 to i64
  %91 = getelementptr inbounds i32, i32* %25, i64 %90
  %92 = load i32, i32* %91, align 4, !tbaa !1
  %93 = getelementptr inbounds i32, i32* %27, i64 %90
  %94 = load i32, i32* %93, align 4, !tbaa !1
  %95 = add nsw i32 %94, %92
  %96 = sub i32 %89, %74
  %97 = sub nsw i32 %95, %74
  %98 = fdiv double 5.000000e-01, %11
  %99 = fdiv double 5.000000e-01, %21
  %100 = mul nsw i32 %65, 3
  %101 = add i32 %5, 1
  %102 = mul nsw i32 %100, %101
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %.preheader42.loopexit, label %.preheader42

.preheader42.loopexit:                            ; preds = %0
  %104 = bitcast double* %23 to i8*
  %105 = mul i32 %65, %101
  %106 = mul i32 %105, 3
  %107 = add i32 %106, -1
  %108 = zext i32 %107 to i64
  %109 = shl nuw nsw i64 %108, 3
  %110 = add nuw nsw i64 %109, 8
  call void @llvm.memset.p0i8.i64(i8* %104, i8 0, i64 %110, i32 8, i1 false)
  br label %.preheader42

.preheader42:                                     ; preds = %.preheader42.loopexit, %0
  %111 = icmp slt i32 %5, 1
  br i1 %111, label %.preheader39, label %.preheader41.lr.ph

.preheader41.lr.ph:                               ; preds = %.preheader42
  %112 = icmp sgt i32 %89, %95
  %113 = icmp sgt i32 %.23, %ipsi_nover_out1.0
  %114 = mul nsw i32 %101, 3
  %115 = shl i32 %65, 1
  %116 = sub i32 1, %74
  %117 = sext i32 %89 to i64
  %118 = sext i32 %74 to i64
  %119 = sext i32 %95 to i64
  %120 = icmp ugt i32 %78, 1
  %umax142 = select i1 %120, i32 %78, i32 1
  %121 = sext i32 %umax142 to i64
  br label %.preheader41

.preheader41:                                     ; preds = %._crit_edge94, %.preheader41.lr.ph
  %k.095 = phi i32 [ 1, %.preheader41.lr.ph ], [ %206, %._crit_edge94 ]
  br i1 %112, label %.preheader40, label %.lr.ph91

.lr.ph91:                                         ; preds = %.preheader41
  %122 = add nsw i32 %k.095, -1
  %123 = mul nsw i32 %115, %122
  br label %128

.preheader39.loopexit:                            ; preds = %._crit_edge94
  br label %.preheader39

.preheader39:                                     ; preds = %.preheader39.loopexit, %.preheader42
  %124 = icmp slt i32 %97, %96
  br i1 %124, label %.preheader39.._crit_edge89_crit_edge, label %.lr.ph88.preheader

.preheader39.._crit_edge89_crit_edge:             ; preds = %.preheader39
  %.pre = sext i32 %96 to i64
  br label %._crit_edge89

.lr.ph88.preheader:                               ; preds = %.preheader39
  %125 = sext i32 %96 to i64
  %126 = sext i32 %97 to i64
  br label %.lr.ph88

.preheader40.loopexit:                            ; preds = %128
  br label %.preheader40

.preheader40:                                     ; preds = %.preheader40.loopexit, %.preheader41
  br i1 %113, label %._crit_edge94, label %.lr.ph93

.lr.ph93:                                         ; preds = %.preheader40
  %127 = mul nsw i32 %k.095, 3
  br label %207

; <label>:128                                     ; preds = %128, %.lr.ph91
  %indvars.iv140 = phi i64 [ %indvars.iv.next141, %128 ], [ %117, %.lr.ph91 ]
  %129 = sub nsw i64 %indvars.iv140, %118
  %130 = trunc i64 %129 to i32
  %131 = shl nsw i32 %130, 1
  %132 = add nsw i32 %131, %123
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds double, double* %39, i64 %133
  %135 = load double, double* %134, align 8, !tbaa !190
  %136 = or i32 %132, 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds double, double* %39, i64 %137
  %139 = load double, double* %138, align 8, !tbaa !190
  %140 = getelementptr inbounds i32, i32* %37, i64 %133
  %141 = load i32, i32* %140, align 4, !tbaa !1
  %142 = getelementptr inbounds i32, i32* %37, i64 %137
  %143 = load i32, i32* %142, align 4, !tbaa !1
  %144 = getelementptr inbounds i32, i32* %57, i64 %129
  %145 = load i32, i32* %144, align 4, !tbaa !1
  %146 = mul nsw i32 %145, %101
  %147 = add nsw i32 %146, %k.095
  %148 = getelementptr inbounds i32, i32* %59, i64 %129
  %149 = load i32, i32* %148, align 4, !tbaa !1
  %150 = mul nsw i32 %149, %101
  %151 = add nsw i32 %150, %k.095
  %152 = getelementptr inbounds double, double* %53, i64 %129
  %153 = load double, double* %152, align 8, !tbaa !190
  %154 = fmul double %98, %153
  %155 = fsub double 1.000000e+00, %135
  %156 = sub nsw i32 %141, %74
  %157 = mul nsw i32 %156, %101
  %158 = add nsw i32 %157, %k.095
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds double, double* %29, i64 %159
  %161 = load double, double* %160, align 8, !tbaa !190
  %162 = fmul double %155, %161
  %163 = add i32 %116, %141
  %164 = mul nsw i32 %163, %101
  %165 = add nsw i32 %164, %k.095
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds double, double* %29, i64 %166
  %168 = load double, double* %167, align 8, !tbaa !190
  %169 = fmul double %135, %168
  %170 = fadd double %162, %169
  %171 = fsub double 1.000000e+00, %139
  %172 = sub nsw i32 %143, %74
  %173 = mul nsw i32 %172, %101
  %174 = add nsw i32 %173, %k.095
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds double, double* %29, i64 %175
  %177 = load double, double* %176, align 8, !tbaa !190
  %178 = fmul double %171, %177
  %179 = add i32 %116, %143
  %180 = mul nsw i32 %179, %101
  %181 = add nsw i32 %180, %k.095
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds double, double* %29, i64 %182
  %184 = load double, double* %183, align 8, !tbaa !190
  %185 = fmul double %139, %184
  %186 = fadd double %178, %185
  %187 = fsub double %170, %186
  %188 = fmul double %154, %187
  %189 = mul i32 %130, %101
  %tmp = add i32 %189, %k.095
  %tmp24 = mul i32 %tmp, 3
  %190 = sext i32 %tmp24 to i64
  %191 = getelementptr inbounds double, double* %23, i64 %190
  store double %188, double* %191, align 8, !tbaa !190
  %192 = getelementptr inbounds double, double* %55, i64 %129
  %193 = load double, double* %192, align 8, !tbaa !190
  %194 = sext i32 %147 to i64
  %195 = getelementptr inbounds double, double* %29, i64 %194
  %196 = load double, double* %195, align 8, !tbaa !190
  %197 = sext i32 %151 to i64
  %198 = getelementptr inbounds double, double* %29, i64 %197
  %199 = load double, double* %198, align 8, !tbaa !190
  %200 = fsub double %196, %199
  %201 = fmul double %193, %200
  %202 = add nsw i32 %tmp24, 1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds double, double* %23, i64 %203
  store double %201, double* %204, align 8, !tbaa !190
  %205 = icmp slt i64 %indvars.iv140, %119
  %indvars.iv.next141 = add nsw i64 %indvars.iv140, 1
  br i1 %205, label %128, label %.preheader40.loopexit

._crit_edge94.loopexit:                           ; preds = %207
  br label %._crit_edge94

._crit_edge94:                                    ; preds = %._crit_edge94.loopexit, %.preheader40
  %206 = add nuw nsw i32 %k.095, 1
  %exitcond145 = icmp eq i32 %k.095, %5
  br i1 %exitcond145, label %.preheader39.loopexit, label %.preheader41

; <label>:207                                     ; preds = %207, %.lr.ph93
  %indvars.iv143 = phi i64 [ %indvars.iv.next144, %207 ], [ %121, %.lr.ph93 ]
  %208 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv143
  %209 = load i32, i32* %208, align 4, !tbaa !1
  %210 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv143
  %211 = load i32, i32* %210, align 4, !tbaa !1
  %212 = sub i32 %209, %74
  %213 = add i32 %212, %211
  %214 = mul nsw i32 %213, %114
  %215 = add nsw i32 %214, %127
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds double, double* %23, i64 %216
  %218 = bitcast double* %217 to i64*
  %219 = load i64, i64* %218, align 8, !tbaa !190
  %220 = mul nsw i32 %212, %114
  %221 = add nsw i32 %220, %127
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds double, double* %23, i64 %222
  %224 = bitcast double* %223 to i64*
  store i64 %219, i64* %224, align 8, !tbaa !190
  %225 = icmp slt i64 %indvars.iv143, %90
  %indvars.iv.next144 = add nsw i64 %indvars.iv143, 1
  br i1 %225, label %207, label %._crit_edge94.loopexit

._crit_edge89.loopexit:                           ; preds = %.lr.ph88
  br label %._crit_edge89

._crit_edge89:                                    ; preds = %._crit_edge89.loopexit, %.preheader39.._crit_edge89_crit_edge
  %.pre-phi = phi i64 [ %.pre, %.preheader39.._crit_edge89_crit_edge ], [ %125, %._crit_edge89.loopexit ]
  %226 = sub nsw i32 %97, %96
  %227 = add nsw i32 %226, 1
  %228 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %229 = load i32, i32* %228, align 4, !tbaa !231
  %230 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %231 = load i32, i32* %230, align 8, !tbaa !230
  %232 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %233 = load i32, i32* %232, align 4, !tbaa !229
  %234 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %235 = load i32, i32* %234, align 8, !tbaa !279
  %236 = tail call i32 @MPI_Barrier(i32 %235) #3
  %237 = getelementptr inbounds double, double* %43, i64 %.pre-phi
  %238 = bitcast double* %237 to i8*
  %239 = getelementptr inbounds double, double* %49, i64 %.pre-phi
  %240 = bitcast double* %239 to i8*
  %241 = load i32, i32* %234, align 8, !tbaa !279
  %242 = call i32 @MPI_Sendrecv(i8* %238, i32 %227, i32 1275070475, i32 %229, i32 %233, i8* %240, i32 %227, i32 1275070475, i32 %231, i32 %231, i32 %241, %struct.MPI_Status* nonnull %istatus1) #3
  %243 = bitcast i32* %230 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = trunc i64 %244 to i32
  %246 = lshr i64 %244, 32
  %247 = trunc i64 %246 to i32
  %248 = load i32, i32* %232, align 4, !tbaa !229
  %249 = getelementptr inbounds double, double* %41, i64 %.pre-phi
  %250 = bitcast double* %249 to i8*
  %251 = getelementptr inbounds double, double* %47, i64 %.pre-phi
  %252 = bitcast double* %251 to i8*
  %253 = load i32, i32* %234, align 8, !tbaa !279
  %254 = call i32 @MPI_Sendrecv(i8* %250, i32 %227, i32 1275070475, i32 %245, i32 %248, i8* %252, i32 %227, i32 1275070475, i32 %247, i32 %247, i32 %253, %struct.MPI_Status* nonnull %istatus2) #3
  br i1 %124, label %._crit_edge86, label %.lr.ph85

.lr.ph85:                                         ; preds = %._crit_edge89
  %255 = icmp eq i32 %5, 1
  %256 = mul nsw i32 %101, 3
  %257 = sext i32 %256 to i64
  %258 = sext i32 %97 to i64
  br label %285

.lr.ph88:                                         ; preds = %.lr.ph88, %.lr.ph88.preheader
  %indvars.iv138 = phi i64 [ %125, %.lr.ph88.preheader ], [ %indvars.iv.next139, %.lr.ph88 ]
  %i3.087 = phi i32 [ %96, %.lr.ph88.preheader ], [ %276, %.lr.ph88 ]
  %259 = mul nsw i32 %i3.087, %101
  %260 = add nsw i32 %259, %5
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds double, double* %29, i64 %261
  %263 = bitcast double* %262 to i64*
  %264 = load i64, i64* %263, align 8, !tbaa !190
  %265 = getelementptr inbounds double, double* %43, i64 %indvars.iv138
  %266 = bitcast double* %265 to i64*
  store i64 %264, i64* %266, align 8, !tbaa !190
  %267 = getelementptr inbounds double, double* %49, i64 %indvars.iv138
  store double 0.000000e+00, double* %267, align 8, !tbaa !190
  %268 = add nsw i32 %259, 1
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds double, double* %29, i64 %269
  %271 = bitcast double* %270 to i64*
  %272 = load i64, i64* %271, align 8, !tbaa !190
  %273 = getelementptr inbounds double, double* %41, i64 %indvars.iv138
  %274 = bitcast double* %273 to i64*
  store i64 %272, i64* %274, align 8, !tbaa !190
  %275 = getelementptr inbounds double, double* %47, i64 %indvars.iv138
  store double 0.000000e+00, double* %275, align 8, !tbaa !190
  %276 = add nsw i32 %i3.087, 1
  %277 = icmp slt i64 %indvars.iv138, %126
  %indvars.iv.next139 = add nsw i64 %indvars.iv138, 1
  br i1 %277, label %.lr.ph88, label %._crit_edge89.loopexit

._crit_edge86.loopexit:                           ; preds = %303
  br label %._crit_edge86

._crit_edge86:                                    ; preds = %._crit_edge86.loopexit, %._crit_edge89
  %278 = call i32 @fix_radial_ghosts(%struct.gtc_bench_data_t* %gtc_input, double* %23, i32 1, i32 3) #3
  %279 = icmp sgt i32 %., %ipsi_out1.0
  br i1 %279, label %._crit_edge82, label %.lr.ph81

.lr.ph81:                                         ; preds = %._crit_edge86
  %280 = fmul double %13, %13
  %281 = icmp slt i32 %5, 0
  %282 = icmp ugt i32 %69, 1
  %umax133 = select i1 %282, i32 %69, i32 1
  %283 = sext i32 %umax133 to i64
  %284 = sext i32 %ipsi_out1.0 to i64
  br label %312

; <label>:285                                     ; preds = %303, %.lr.ph85
  %indvars.iv136 = phi i64 [ %indvars.iv.next137, %303 ], [ %.pre-phi, %.lr.ph85 ]
  br i1 %255, label %286, label %302

; <label>:286                                     ; preds = %285
  %287 = getelementptr inbounds i32, i32* %63, i64 %indvars.iv136
  %288 = load i32, i32* %287, align 4, !tbaa !1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds double, double* %47, i64 %289
  %291 = load double, double* %290, align 8, !tbaa !190
  %292 = getelementptr inbounds i32, i32* %61, i64 %indvars.iv136
  %293 = load i32, i32* %292, align 4, !tbaa !1
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds double, double* %49, i64 %294
  %296 = load double, double* %295, align 8, !tbaa !190
  %297 = fsub double %291, %296
  %298 = fmul double %99, %297
  %299 = mul nsw i64 %257, %indvars.iv136
  %300 = add nsw i64 %299, 5
  %301 = getelementptr inbounds double, double* %23, i64 %300
  store double %298, double* %301, align 8, !tbaa !190
  br label %303

; <label>:302                                     ; preds = %285
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @str.193, i64 0, i64 0))
  br label %303

; <label>:303                                     ; preds = %302, %286
  %304 = icmp slt i64 %indvars.iv136, %258
  %indvars.iv.next137 = add nsw i64 %indvars.iv136, 1
  br i1 %304, label %285, label %._crit_edge86.loopexit

._crit_edge82.loopexit:                           ; preds = %._crit_edge78
  br label %._crit_edge82

._crit_edge82:                                    ; preds = %._crit_edge82.loopexit, %._crit_edge86
  %305 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 23
  %306 = load i32, i32* %305, align 8, !tbaa !159
  %307 = icmp ne i32 %306, 1
  %or.cond = or i1 %307, %279
  br i1 %or.cond, label %.preheader36, label %.lr.ph70

.lr.ph70:                                         ; preds = %._crit_edge82
  %308 = icmp ugt i32 %69, 1
  %umax126 = select i1 %308, i32 %69, i32 1
  %309 = sext i32 %umax126 to i64
  %310 = sext i32 %ipsi_out1.0 to i64
  br label %352

.preheader36.loopexit:                            ; preds = %._crit_edge68
  br label %.preheader36

.preheader36:                                     ; preds = %.preheader36.loopexit, %._crit_edge82
  %311 = icmp sgt i32 %65, 0
  br i1 %311, label %.lr.ph62.preheader, label %._crit_edge63

.lr.ph62.preheader:                               ; preds = %.preheader36
  br label %.lr.ph62

; <label>:312                                     ; preds = %._crit_edge78, %.lr.ph81
  %indvars.iv134 = phi i64 [ %indvars.iv.next135, %._crit_edge78 ], [ %283, %.lr.ph81 ]
  %313 = trunc i64 %indvars.iv134 to i32
  %314 = sitofp i32 %313 to double
  %315 = fmul double %11, %314
  %316 = fadd double %9, %315
  %317 = fmul double %17, %316
  %318 = fdiv double %317, %13
  %319 = fadd double %15, %318
  %320 = fmul double %19, %316
  %321 = fmul double %316, %320
  %322 = fdiv double %321, %280
  %323 = fadd double %319, %322
  %324 = fdiv double 1.000000e+00, %323
  %325 = getelementptr inbounds double, double* %33, i64 %indvars.iv134
  %326 = load double, double* %325, align 8, !tbaa !190
  %327 = fsub double %324, %326
  %328 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv134
  %329 = load i32, i32* %328, align 4, !tbaa !1
  %330 = icmp slt i32 %329, 1
  br i1 %330, label %._crit_edge78, label %.lr.ph77

.lr.ph77:                                         ; preds = %312
  %331 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv134
  %332 = load i32, i32* %331, align 4
  br label %334

._crit_edge78.loopexit:                           ; preds = %._crit_edge74
  br label %._crit_edge78

._crit_edge78:                                    ; preds = %._crit_edge78.loopexit, %312
  %333 = icmp slt i64 %indvars.iv134, %284
  %indvars.iv.next135 = add nsw i64 %indvars.iv134, 1
  br i1 %333, label %312, label %._crit_edge82.loopexit

; <label>:334                                     ; preds = %._crit_edge74, %.lr.ph77
  %j.075 = phi i32 [ 1, %.lr.ph77 ], [ %338, %._crit_edge74 ]
  br i1 %281, label %._crit_edge74, label %.lr.ph73

.lr.ph73:                                         ; preds = %334
  %335 = sub i32 %j.075, %74
  %336 = add i32 %335, %332
  %337 = mul i32 %336, %101
  br label %340

._crit_edge74.loopexit:                           ; preds = %340
  br label %._crit_edge74

._crit_edge74:                                    ; preds = %._crit_edge74.loopexit, %334
  %338 = add nuw nsw i32 %j.075, 1
  %339 = icmp slt i32 %j.075, %329
  br i1 %339, label %334, label %._crit_edge78.loopexit

; <label>:340                                     ; preds = %340, %.lr.ph73
  %indvars.iv129 = phi i64 [ %indvars.iv.next130, %340 ], [ 0, %.lr.ph73 ]
  %341 = trunc i64 %indvars.iv129 to i32
  %tmp25 = add i32 %341, %337
  %tmp26 = mul i32 %tmp25, 3
  %342 = add nsw i32 %tmp26, 1
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds double, double* %23, i64 %343
  %345 = load double, double* %344, align 8, !tbaa !190
  %346 = fmul double %327, %345
  %347 = add nsw i32 %tmp26, 2
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds double, double* %23, i64 %348
  %350 = load double, double* %349, align 8, !tbaa !190
  %351 = fadd double %350, %346
  store double %351, double* %349, align 8, !tbaa !190
  %indvars.iv.next130 = add nuw nsw i64 %indvars.iv129, 1
  %lftr.wideiv131 = trunc i64 %indvars.iv.next130 to i32
  %exitcond132 = icmp eq i32 %lftr.wideiv131, %101
  br i1 %exitcond132, label %._crit_edge74.loopexit, label %340

; <label>:352                                     ; preds = %._crit_edge68, %.lr.ph70
  %indvars.iv127 = phi i64 [ %indvars.iv.next128, %._crit_edge68 ], [ %309, %.lr.ph70 ]
  %353 = trunc i64 %indvars.iv127 to i32
  %354 = sitofp i32 %353 to double
  %355 = fmul double %11, %354
  %356 = fadd double %9, %355
  %357 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv127
  %358 = load i32, i32* %357, align 4, !tbaa !1
  %359 = sub nsw i32 %358, %74
  %360 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv127
  %361 = load i32, i32* %360, align 4, !tbaa !1
  %362 = add nsw i32 %359, %361
  %363 = icmp sgt i32 %361, 0
  br i1 %363, label %.preheader37.lr.ph, label %._crit_edge68

.preheader37.lr.ph:                               ; preds = %352
  %364 = getelementptr inbounds double, double* %35, i64 %indvars.iv127
  br label %.preheader37

.loopexit.loopexit:                               ; preds = %368
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader37
  %365 = icmp slt i32 %j10.067, %362
  br i1 %365, label %.preheader37, label %._crit_edge68.loopexit

.preheader37:                                     ; preds = %.loopexit, %.preheader37.lr.ph
  %j10.067.in = phi i32 [ %359, %.preheader37.lr.ph ], [ %j10.067, %.loopexit ]
  %j10.067 = add nsw i32 %j10.067.in, 1
  br i1 %111, label %.loopexit, label %.lr.ph65

.lr.ph65:                                         ; preds = %.preheader37
  %366 = mul i32 %j10.067, %101
  br label %368

._crit_edge68.loopexit:                           ; preds = %.loopexit
  br label %._crit_edge68

._crit_edge68:                                    ; preds = %._crit_edge68.loopexit, %352
  %367 = icmp slt i64 %indvars.iv127, %310
  %indvars.iv.next128 = add nsw i64 %indvars.iv127, 1
  br i1 %367, label %352, label %.preheader36.loopexit

; <label>:368                                     ; preds = %368, %.lr.ph65
  %indvars.iv122 = phi i64 [ %indvars.iv.next123, %368 ], [ 1, %.lr.ph65 ]
  %369 = load double, double* %364, align 8, !tbaa !190
  %370 = fdiv double %369, %356
  %371 = trunc i64 %indvars.iv122 to i32
  %tmp27 = add i32 %371, %366
  %tmp28 = mul i32 %tmp27, 3
  %372 = sext i32 %tmp28 to i64
  %373 = getelementptr inbounds double, double* %23, i64 %372
  %374 = load double, double* %373, align 8, !tbaa !190
  %375 = fadd double %374, %370
  store double %375, double* %373, align 8, !tbaa !190
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %lftr.wideiv124 = trunc i64 %indvars.iv.next123 to i32
  %exitcond125 = icmp eq i32 %lftr.wideiv124, %101
  br i1 %exitcond125, label %.loopexit.loopexit, label %368

._crit_edge63.loopexit:                           ; preds = %.lr.ph62
  br label %._crit_edge63

._crit_edge63:                                    ; preds = %._crit_edge63.loopexit, %.preheader36
  %376 = load i32, i32* %228, align 4, !tbaa !231
  %377 = load i32, i32* %230, align 8, !tbaa !230
  %378 = load i32, i32* %232, align 4, !tbaa !229
  %379 = bitcast double* %45 to i8*
  %380 = bitcast double* %51 to i8*
  %381 = load i32, i32* %234, align 8, !tbaa !279
  %382 = call i32 @MPI_Sendrecv(i8* %379, i32 %100, i32 1275070475, i32 %376, i32 %378, i8* %380, i32 %100, i32 1275070475, i32 %377, i32 %377, i32 %381, %struct.MPI_Status* nonnull %istatus3) #3
  %383 = load i32, i32* %232, align 4, !tbaa !229
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %.preheader33, label %.preheader34

.preheader34:                                     ; preds = %._crit_edge63
  br i1 %311, label %.lr.ph60, label %.preheader

.lr.ph60:                                         ; preds = %.preheader34
  %385 = mul nsw i32 %101, 3
  %386 = sext i32 %385 to i64
  br label %496

.preheader33:                                     ; preds = %._crit_edge63
  br i1 %279, label %.preheader, label %.lr.ph58

.lr.ph58:                                         ; preds = %.preheader33
  %387 = mul i32 %101, 3
  %388 = icmp ugt i32 %69, 1
  %umax = select i1 %388, i32 %69, i32 1
  %389 = sext i32 %umax to i64
  %390 = sext i32 %ipsi_out1.0 to i64
  br label %424

.lr.ph62:                                         ; preds = %.lr.ph62.preheader, %.lr.ph62
  %indvars.iv118 = phi i64 [ %indvars.iv.next119, %.lr.ph62 ], [ 0, %.lr.ph62.preheader ]
  %391 = trunc i64 %indvars.iv118 to i32
  %392 = mul i32 %391, %101
  %tmp29 = add i32 %392, %5
  %tmp30 = mul i32 %tmp29, 3
  %393 = sext i32 %tmp30 to i64
  %394 = getelementptr inbounds double, double* %23, i64 %393
  %395 = bitcast double* %394 to i64*
  %396 = load i64, i64* %395, align 8, !tbaa !190
  %397 = mul nuw nsw i64 %indvars.iv118, 3
  %398 = getelementptr inbounds double, double* %45, i64 %397
  %399 = bitcast double* %398 to i64*
  store i64 %396, i64* %399, align 8, !tbaa !190
  %400 = add nsw i32 %tmp30, 1
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds double, double* %23, i64 %401
  %403 = bitcast double* %402 to i64*
  %404 = load i64, i64* %403, align 8, !tbaa !190
  %405 = add nuw nsw i64 %397, 1
  %406 = getelementptr inbounds double, double* %45, i64 %405
  %407 = bitcast double* %406 to i64*
  store i64 %404, i64* %407, align 8, !tbaa !190
  %408 = add nsw i32 %tmp30, 2
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds double, double* %23, i64 %409
  %411 = bitcast double* %410 to i64*
  %412 = load i64, i64* %411, align 8, !tbaa !190
  %413 = add nuw nsw i64 %397, 2
  %414 = getelementptr inbounds double, double* %45, i64 %413
  %415 = bitcast double* %414 to i64*
  store i64 %412, i64* %415, align 8, !tbaa !190
  %416 = getelementptr inbounds double, double* %51, i64 %397
  store double 0.000000e+00, double* %416, align 8, !tbaa !190
  %417 = getelementptr inbounds double, double* %51, i64 %405
  store double 0.000000e+00, double* %417, align 8, !tbaa !190
  %418 = getelementptr inbounds double, double* %51, i64 %413
  store double 0.000000e+00, double* %418, align 8, !tbaa !190
  %indvars.iv.next119 = add nuw nsw i64 %indvars.iv118, 1
  %lftr.wideiv120 = trunc i64 %indvars.iv.next119 to i32
  %exitcond121 = icmp eq i32 %lftr.wideiv120, %65
  br i1 %exitcond121, label %._crit_edge63.loopexit, label %.lr.ph62

.preheader.loopexit:                              ; preds = %._crit_edge56
  br label %.preheader

.preheader.loopexit1:                             ; preds = %496
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit1, %.preheader.loopexit, %.preheader33, %.preheader34
  %419 = icmp sgt i32 %69, %72
  br i1 %419, label %._crit_edge48, label %.lr.ph47

.lr.ph47:                                         ; preds = %.preheader
  %420 = icmp slt i32 %5, 0
  %421 = mul i32 %101, 3
  %422 = sext i32 %69 to i64
  %423 = sext i32 %72 to i64
  br label %518

; <label>:424                                     ; preds = %._crit_edge56, %.lr.ph58
  %indvars.iv112 = phi i64 [ %indvars.iv.next113, %._crit_edge56 ], [ %389, %.lr.ph58 ]
  %425 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv112
  %426 = load i32, i32* %425, align 4, !tbaa !1
  %427 = sub i32 %426, %74
  %428 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv112
  %429 = load i32, i32* %428, align 4, !tbaa !1
  %430 = getelementptr inbounds i32, i32* %31, i64 %indvars.iv112
  %431 = load i32, i32* %430, align 4, !tbaa !1
  %432 = add i32 %431, %427
  %433 = icmp sgt i32 %431, 0
  br i1 %433, label %.lr.ph52, label %.preheader32

.lr.ph52:                                         ; preds = %424
  %434 = sub i32 %429, %431
  br label %439

.preheader32.loopexit:                            ; preds = %439
  br label %.preheader32

.preheader32:                                     ; preds = %.preheader32.loopexit, %424
  %435 = add i32 %427, %429
  %436 = icmp slt i32 %432, %435
  br i1 %436, label %.lr.ph55.preheader, label %._crit_edge56

.lr.ph55.preheader:                               ; preds = %.preheader32
  %437 = sext i32 %432 to i64
  %438 = sext i32 %431 to i64
  br label %.lr.ph55

; <label>:439                                     ; preds = %439, %.lr.ph52
  %j16.050.in = phi i32 [ %427, %.lr.ph52 ], [ %j16.050, %439 ]
  %j16.050 = add nsw i32 %j16.050.in, 1
  %440 = add i32 %434, %j16.050
  %441 = mul nsw i32 %440, 3
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds double, double* %51, i64 %442
  %444 = bitcast double* %443 to i64*
  %445 = load i64, i64* %444, align 8, !tbaa !190
  %446 = mul i32 %387, %j16.050
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds double, double* %23, i64 %447
  %449 = bitcast double* %448 to i64*
  store i64 %445, i64* %449, align 8, !tbaa !190
  %450 = add nsw i32 %441, 1
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds double, double* %51, i64 %451
  %453 = bitcast double* %452 to i64*
  %454 = load i64, i64* %453, align 8, !tbaa !190
  %455 = add nsw i32 %446, 1
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds double, double* %23, i64 %456
  %458 = bitcast double* %457 to i64*
  store i64 %454, i64* %458, align 8, !tbaa !190
  %459 = add nsw i32 %441, 2
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds double, double* %51, i64 %460
  %462 = bitcast double* %461 to i64*
  %463 = load i64, i64* %462, align 8, !tbaa !190
  %464 = add nsw i32 %446, 2
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds double, double* %23, i64 %465
  %467 = bitcast double* %466 to i64*
  store i64 %463, i64* %467, align 8, !tbaa !190
  %468 = icmp slt i32 %j16.050, %432
  br i1 %468, label %439, label %.preheader32.loopexit

._crit_edge56.loopexit:                           ; preds = %.lr.ph55
  br label %._crit_edge56

._crit_edge56:                                    ; preds = %._crit_edge56.loopexit, %.preheader32
  %469 = icmp slt i64 %indvars.iv112, %390
  %indvars.iv.next113 = add nsw i64 %indvars.iv112, 1
  br i1 %469, label %424, label %.preheader.loopexit

.lr.ph55:                                         ; preds = %.lr.ph55, %.lr.ph55.preheader
  %indvars.iv108 = phi i64 [ %437, %.lr.ph55.preheader ], [ %indvars.iv.next109, %.lr.ph55 ]
  %indvars.iv.next109 = add nsw i64 %indvars.iv108, 1
  %470 = sub nsw i64 %indvars.iv.next109, %438
  %471 = mul nsw i64 %470, 3
  %472 = getelementptr inbounds double, double* %51, i64 %471
  %473 = bitcast double* %472 to i64*
  %474 = load i64, i64* %473, align 8, !tbaa !190
  %475 = trunc i64 %indvars.iv.next109 to i32
  %476 = mul i32 %387, %475
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds double, double* %23, i64 %477
  %479 = bitcast double* %478 to i64*
  store i64 %474, i64* %479, align 8, !tbaa !190
  %480 = add nsw i64 %471, 1
  %481 = getelementptr inbounds double, double* %51, i64 %480
  %482 = bitcast double* %481 to i64*
  %483 = load i64, i64* %482, align 8, !tbaa !190
  %484 = add nsw i32 %476, 1
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds double, double* %23, i64 %485
  %487 = bitcast double* %486 to i64*
  store i64 %483, i64* %487, align 8, !tbaa !190
  %488 = add nsw i64 %471, 2
  %489 = getelementptr inbounds double, double* %51, i64 %488
  %490 = bitcast double* %489 to i64*
  %491 = load i64, i64* %490, align 8, !tbaa !190
  %492 = add nsw i32 %476, 2
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds double, double* %23, i64 %493
  %495 = bitcast double* %494 to i64*
  store i64 %491, i64* %495, align 8, !tbaa !190
  %exitcond111 = icmp eq i32 %475, %435
  br i1 %exitcond111, label %._crit_edge56.loopexit, label %.lr.ph55

; <label>:496                                     ; preds = %496, %.lr.ph60
  %indvars.iv114 = phi i64 [ 0, %.lr.ph60 ], [ %indvars.iv.next115, %496 ]
  %497 = mul nuw nsw i64 %indvars.iv114, 3
  %498 = getelementptr inbounds double, double* %51, i64 %497
  %499 = bitcast double* %498 to i64*
  %500 = load i64, i64* %499, align 8, !tbaa !190
  %501 = mul nsw i64 %386, %indvars.iv114
  %502 = getelementptr inbounds double, double* %23, i64 %501
  %503 = bitcast double* %502 to i64*
  store i64 %500, i64* %503, align 8, !tbaa !190
  %504 = add nuw nsw i64 %497, 1
  %505 = getelementptr inbounds double, double* %51, i64 %504
  %506 = bitcast double* %505 to i64*
  %507 = load i64, i64* %506, align 8, !tbaa !190
  %508 = add nsw i64 %501, 1
  %509 = getelementptr inbounds double, double* %23, i64 %508
  %510 = bitcast double* %509 to i64*
  store i64 %507, i64* %510, align 8, !tbaa !190
  %511 = add nuw nsw i64 %497, 2
  %512 = getelementptr inbounds double, double* %51, i64 %511
  %513 = bitcast double* %512 to i64*
  %514 = load i64, i64* %513, align 8, !tbaa !190
  %515 = add nsw i64 %501, 2
  %516 = getelementptr inbounds double, double* %23, i64 %515
  %517 = bitcast double* %516 to i64*
  store i64 %514, i64* %517, align 8, !tbaa !190
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 1
  %lftr.wideiv116 = trunc i64 %indvars.iv.next115 to i32
  %exitcond117 = icmp eq i32 %lftr.wideiv116, %65
  br i1 %exitcond117, label %.preheader.loopexit1, label %496

._crit_edge48.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge48

._crit_edge48:                                    ; preds = %._crit_edge48.loopexit, %.preheader
  call void @llvm.lifetime.end(i64 20, i8* %3) #3
  call void @llvm.lifetime.end(i64 20, i8* %2) #3
  call void @llvm.lifetime.end(i64 20, i8* %1) #3
  ret i32 0

; <label>:518                                     ; preds = %._crit_edge, %.lr.ph47
  %indvars.iv104 = phi i64 [ %indvars.iv.next105, %._crit_edge ], [ %422, %.lr.ph47 ]
  %519 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv104
  %520 = load i32, i32* %519, align 4, !tbaa !1
  br i1 %420, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %518
  %521 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv104
  %522 = load i32, i32* %521, align 4, !tbaa !1
  %523 = sub i32 %520, %74
  %524 = add i32 %523, %522
  %525 = mul i32 %421, %524
  %526 = mul i32 %421, %523
  %527 = sext i32 %525 to i64
  %528 = sext i32 %526 to i64
  br label %530

._crit_edge.loopexit:                             ; preds = %530
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %518
  %529 = icmp slt i64 %indvars.iv104, %423
  %indvars.iv.next105 = add nsw i64 %indvars.iv104, 1
  br i1 %529, label %518, label %._crit_edge48.loopexit

; <label>:530                                     ; preds = %530, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %530 ], [ 0, %.lr.ph ]
  %j22.045 = phi i32 [ %560, %530 ], [ 0, %.lr.ph ]
  %531 = mul nuw nsw i64 %indvars.iv, 3
  %532 = mul nuw nsw i32 %j22.045, 3
  %533 = add nsw i64 %531, %527
  %534 = add nsw i32 %532, %525
  %535 = getelementptr inbounds double, double* %23, i64 %533
  %536 = bitcast double* %535 to i64*
  %537 = load i64, i64* %536, align 8, !tbaa !190
  %538 = add nsw i64 %531, %528
  %539 = add nsw i32 %532, %526
  %540 = getelementptr inbounds double, double* %23, i64 %538
  %541 = bitcast double* %540 to i64*
  store i64 %537, i64* %541, align 8, !tbaa !190
  %542 = add nsw i32 %534, 1
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds double, double* %23, i64 %543
  %545 = bitcast double* %544 to i64*
  %546 = load i64, i64* %545, align 8, !tbaa !190
  %547 = add nsw i32 %539, 1
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds double, double* %23, i64 %548
  %550 = bitcast double* %549 to i64*
  store i64 %546, i64* %550, align 8, !tbaa !190
  %551 = add nsw i32 %534, 2
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds double, double* %23, i64 %552
  %554 = bitcast double* %553 to i64*
  %555 = load i64, i64* %554, align 8, !tbaa !190
  %556 = add nsw i32 %539, 2
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds double, double* %23, i64 %557
  %559 = bitcast double* %558 to i64*
  store i64 %555, i64* %559, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %560 = add nuw nsw i32 %j22.045, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %101
  br i1 %exitcond, label %._crit_edge.loopexit, label %530
}

; Function Attrs: nounwind uwtable
define i32 @diagnosis(%struct.gtc_bench_data_t* nocapture readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 1
  %2 = load i32, i32* %1, align 4, !tbaa !284
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !27
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 33
  %6 = load i32, i32* %5, align 8, !tbaa !182
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %8 = load double, double* %7, align 8, !tbaa !163
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %10 = load double, double* %9, align 8, !tbaa !164
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 72
  %12 = load double, double* %11, align 8, !tbaa !169
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 71
  %14 = load double, double* %13, align 8, !tbaa !168
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 24
  %16 = load i32, i32* %15, align 4, !tbaa !277
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 56
  %18 = load double, double* %17, align 8, !tbaa !172
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %20 = load double, double* %19, align 8, !tbaa !208
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %22 = load double, double* %21, align 8, !tbaa !171
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  %24 = load double, double* %23, align 8, !tbaa !170
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 77
  %26 = load double, double* %25, align 8, !tbaa !173
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 70
  %28 = load double, double* %27, align 8, !tbaa !176
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %30 = load double*, double** %29, align 8, !tbaa !121
  %31 = getelementptr inbounds double, double* %30, i64 11
  %32 = load double, double* %31, align 8, !tbaa !190
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 18
  %34 = load i32, i32* %33, align 4, !tbaa !184
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 14
  %36 = load i32, i32* %35, align 4, !tbaa !155
  %37 = sext i32 %6 to i64
  %38 = shl nsw i64 %37, 3
  %39 = tail call fastcc i8* @_mm_malloc.196(i64 %38)
  %40 = bitcast i8* %39 to double*
  %41 = shl nsw i32 %6, 1
  %42 = add nsw i32 %41, 15
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 3
  %45 = tail call fastcc i8* @_mm_malloc.196(i64 %44)
  %46 = bitcast i8* %45 to double*
  %47 = tail call fastcc i8* @_mm_malloc.196(i64 %44)
  %48 = bitcast i8* %47 to double*
  %49 = icmp eq i8* %39, null
  br i1 %49, label %50, label %51

; <label>:50                                      ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.197, i64 0, i64 0), i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.198, i64 0, i64 0), i32 47, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.diagnosis, i64 0, i64 0)) #15
  unreachable

; <label>:51                                      ; preds = %0
  %52 = icmp eq i8* %45, null
  br i1 %52, label %53, label %54

; <label>:53                                      ; preds = %51
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.199, i64 0, i64 0), i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.198, i64 0, i64 0), i32 48, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.diagnosis, i64 0, i64 0)) #15
  unreachable

; <label>:54                                      ; preds = %51
  %55 = icmp eq i8* %47, null
  br i1 %55, label %57, label %.preheader8

.preheader8:                                      ; preds = %54
  %56 = icmp sgt i32 %41, -15
  br i1 %56, label %.lr.ph21.preheader, label %._crit_edge22

.lr.ph21.preheader:                               ; preds = %.preheader8
  br label %.lr.ph21

; <label>:57                                      ; preds = %54
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.200, i64 0, i64 0), i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.198, i64 0, i64 0), i32 49, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.diagnosis, i64 0, i64 0)) #15
  unreachable

._crit_edge22.loopexit:                           ; preds = %.lr.ph21
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge22.loopexit, %.preheader8
  %58 = load double*, double** %29, align 8, !tbaa !121
  %59 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 3
  %60 = load double*, double** %59, align 8, !tbaa !122
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 4
  %62 = load double*, double** %61, align 8, !tbaa !123
  %63 = icmp eq i32 %4, 0
  %64 = icmp sgt i32 %6, 0
  %or.cond = and i1 %63, %64
  br i1 %or.cond, label %.lr.ph19, label %.loopexit

.lr.ph19:                                         ; preds = %._crit_edge22
  %65 = fsub double %10, %8
  %66 = sitofp i32 %6 to double
  %67 = icmp eq i32 %16, 0
  %. = select i1 %67, double 0.000000e+00, double 1.000000e+00
  %68 = fsub double 1.000000e+00, %.
  br label %72

.lr.ph21:                                         ; preds = %.lr.ph21, %.lr.ph21.preheader
  %indvars.iv36 = phi i64 [ 0, %.lr.ph21.preheader ], [ %indvars.iv.next37, %.lr.ph21 ]
  %69 = getelementptr inbounds double, double* %46, i64 %indvars.iv36
  store double 0.000000e+00, double* %69, align 8, !tbaa !190
  %70 = getelementptr inbounds double, double* %48, i64 %indvars.iv36
  store double 0.000000e+00, double* %70, align 8, !tbaa !190
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %71 = icmp slt i64 %indvars.iv.next37, %43
  br i1 %71, label %.lr.ph21, label %._crit_edge22.loopexit

; <label>:72                                      ; preds = %.backedge, %.lr.ph19
  %indvars.iv32 = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next33, %.backedge ]
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %73 = trunc i64 %indvars.iv.next33 to i32
  %74 = sitofp i32 %73 to double
  %75 = fadd double %74, -5.000000e-01
  %76 = fmul double %65, %75
  %77 = fdiv double %76, %66
  %78 = fadd double %8, %77
  %79 = fsub double %78, %14
  %80 = fmul double %12, %79
  %81 = fmul double %80, %80
  %82 = fmul double %81, %81
  %83 = fmul double %81, %82
  %84 = fsub double -0.000000e+00, %83
  %85 = tail call double @exp(double %84) #3
  %86 = fcmp olt double %85, 1.000000e-01
  br i1 %86, label %89, label %87

; <label>:87                                      ; preds = %72
  %88 = tail call double @exp(double %84) #3
  br label %89

; <label>:89                                      ; preds = %87, %72
  %90 = phi double [ %88, %87 ], [ 1.000000e-01, %72 ]
  %91 = fmul double %., %90
  %92 = fadd double %68, %91
  %93 = fmul double %18, %92
  %94 = fmul double %20, %93
  %95 = fdiv double 1.000000e+00, %94
  %96 = getelementptr inbounds double, double* %40, i64 %indvars.iv32
  store double %95, double* %96, align 8, !tbaa !190
  %97 = load i32, i32* @istep, align 4, !tbaa !1
  %98 = icmp eq i32 %97, %36
  br i1 %98, label %99, label %.backedge

.backedge:                                        ; preds = %99, %89
  %exitcond35 = icmp eq i32 %73, %6
  br i1 %exitcond35, label %.loopexit.loopexit, label %72

; <label>:99                                      ; preds = %89
  %100 = trunc i64 %indvars.iv32 to i32
  %101 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4.201, i64 0, i64 0), i32 %100, double %93, double %20)
  br label %.backedge

.loopexit.loopexit:                               ; preds = %.backedge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %._crit_edge22
  %102 = tail call double @fabs(double %22) #16
  %103 = fmul double %20, %102
  %104 = fdiv double %103, %24
  %105 = fmul double %26, %28
  %106 = fdiv double %24, %105
  %107 = tail call double @sqrt(double %106) #3
  %108 = fmul double %107, %104
  %109 = fmul double %24, %104
  %110 = fmul double %104, %109
  %111 = fdiv double 1.000000e+00, %110
  %112 = getelementptr inbounds double, double* %58, i64 10
  %113 = bitcast double* %112 to i64*
  %114 = load i64, i64* %113, align 8, !tbaa !190
  %115 = bitcast i8* %45 to i64*
  store i64 %114, i64* %115, align 8, !tbaa !190
  %116 = getelementptr inbounds double, double* %58, i64 8
  %117 = bitcast double* %116 to i64*
  %118 = load i64, i64* %117, align 8, !tbaa !190
  %119 = getelementptr inbounds i8, i8* %45, i64 8
  %120 = bitcast i8* %119 to double*
  %121 = bitcast i8* %119 to i64*
  store i64 %118, i64* %121, align 8, !tbaa !190
  %122 = getelementptr inbounds double, double* %58, i64 9
  %123 = bitcast double* %122 to i64*
  %124 = load i64, i64* %123, align 8, !tbaa !190
  %125 = getelementptr inbounds i8, i8* %45, i64 16
  %126 = bitcast i8* %125 to i64*
  store i64 %124, i64* %126, align 8, !tbaa !190
  %127 = getelementptr inbounds double, double* %58, i64 6
  %128 = load double, double* %127, align 8, !tbaa !190
  %129 = fdiv double %128, %104
  %130 = getelementptr inbounds i8, i8* %45, i64 24
  %131 = bitcast i8* %130 to double*
  store double %129, double* %131, align 8, !tbaa !190
  %132 = getelementptr inbounds double, double* %58, i64 7
  %133 = load double, double* %132, align 8, !tbaa !190
  %134 = fdiv double %133, %108
  %135 = getelementptr inbounds i8, i8* %45, i64 32
  %136 = bitcast i8* %135 to double*
  store double %134, double* %136, align 8, !tbaa !190
  %137 = getelementptr inbounds double, double* %58, i64 2
  %138 = load double, double* %137, align 8, !tbaa !190
  %139 = fdiv double %138, %104
  %140 = getelementptr inbounds i8, i8* %45, i64 40
  %141 = bitcast i8* %140 to double*
  store double %139, double* %141, align 8, !tbaa !190
  %142 = getelementptr inbounds double, double* %58, i64 3
  %143 = load double, double* %142, align 8, !tbaa !190
  %144 = fdiv double %143, %104
  %145 = getelementptr inbounds i8, i8* %45, i64 48
  %146 = bitcast i8* %145 to double*
  store double %144, double* %146, align 8, !tbaa !190
  %147 = load double, double* %58, align 8, !tbaa !190
  %148 = fmul double %111, %147
  %149 = fdiv double %148, %104
  %150 = getelementptr inbounds i8, i8* %45, i64 56
  %151 = bitcast i8* %150 to double*
  store double %149, double* %151, align 8, !tbaa !190
  %152 = getelementptr inbounds double, double* %58, i64 1
  %153 = load double, double* %152, align 8, !tbaa !190
  %154 = fmul double %111, %153
  %155 = fdiv double %154, %104
  %156 = getelementptr inbounds i8, i8* %45, i64 64
  %157 = bitcast i8* %156 to double*
  store double %155, double* %157, align 8, !tbaa !190
  %158 = getelementptr inbounds double, double* %58, i64 12
  %159 = bitcast double* %158 to i64*
  %160 = load i64, i64* %159, align 8, !tbaa !190
  %161 = getelementptr inbounds i8, i8* %45, i64 72
  %162 = bitcast i8* %161 to double*
  %163 = bitcast i8* %161 to i64*
  store i64 %160, i64* %163, align 8, !tbaa !190
  %164 = getelementptr inbounds double, double* %58, i64 13
  %165 = bitcast double* %164 to i64*
  %166 = load i64, i64* %165, align 8, !tbaa !190
  %167 = getelementptr inbounds i8, i8* %45, i64 80
  %168 = bitcast i8* %167 to double*
  %169 = bitcast i8* %167 to i64*
  store i64 %166, i64* %169, align 8, !tbaa !190
  %170 = getelementptr inbounds double, double* %58, i64 15
  %171 = bitcast double* %170 to i64*
  %172 = load i64, i64* %171, align 8, !tbaa !190
  %173 = getelementptr inbounds i8, i8* %45, i64 88
  %174 = bitcast i8* %173 to double*
  %175 = bitcast i8* %173 to i64*
  store i64 %172, i64* %175, align 8, !tbaa !190
  %176 = getelementptr inbounds double, double* %58, i64 16
  %177 = bitcast double* %176 to i64*
  %178 = load i64, i64* %177, align 8, !tbaa !190
  %179 = getelementptr inbounds i8, i8* %45, i64 96
  %180 = bitcast i8* %179 to double*
  %181 = bitcast i8* %179 to i64*
  store i64 %178, i64* %181, align 8, !tbaa !190
  %182 = getelementptr inbounds double, double* %58, i64 17
  %183 = bitcast double* %182 to i64*
  %184 = load i64, i64* %183, align 8, !tbaa !190
  %185 = getelementptr inbounds i8, i8* %45, i64 104
  %186 = bitcast i8* %185 to double*
  %187 = bitcast i8* %185 to i64*
  store i64 %184, i64* %187, align 8, !tbaa !190
  %188 = getelementptr inbounds double, double* %58, i64 18
  %189 = bitcast double* %188 to i64*
  %190 = load i64, i64* %189, align 8, !tbaa !190
  %191 = getelementptr inbounds i8, i8* %45, i64 112
  %192 = bitcast i8* %191 to double*
  %193 = bitcast i8* %191 to i64*
  store i64 %190, i64* %193, align 8, !tbaa !190
  br i1 %64, label %.lr.ph16, label %._crit_edge17

.lr.ph16:                                         ; preds = %.loopexit
  %194 = add nsw i32 %6, 15
  %195 = sext i32 %194 to i64
  br label %204

._crit_edge17.loopexit:                           ; preds = %204
  br label %._crit_edge17

._crit_edge17:                                    ; preds = %._crit_edge17.loopexit, %.loopexit
  %196 = tail call i32 @MPI_Reduce(i8* nonnull %45, i8* nonnull %47, i32 13, i32 1275070475, i32 1476395011, i32 0, i32 1140850688) #3
  %197 = getelementptr inbounds i8, i8* %47, i64 104
  %198 = tail call i32 @MPI_Reduce(i8* %185, i8* %197, i32 1, i32 1275070475, i32 1476395009, i32 0, i32 1140850688) #3
  %199 = getelementptr inbounds i8, i8* %47, i64 112
  %200 = tail call i32 @MPI_Reduce(i8* %191, i8* %199, i32 1, i32 1275070475, i32 1476395010, i32 0, i32 1140850688) #3
  %201 = getelementptr inbounds i8, i8* %45, i64 120
  %202 = getelementptr inbounds i8, i8* %47, i64 120
  %203 = tail call i32 @MPI_Reduce(i8* %201, i8* %202, i32 %41, i32 1275070475, i32 1476395011, i32 0, i32 1140850688) #3
  br i1 %63, label %.preheader6, label %300

.preheader6:                                      ; preds = %._crit_edge17
  br i1 %56, label %.lr.ph13.preheader, label %.preheader

.lr.ph13.preheader:                               ; preds = %.preheader6
  br label %.lr.ph13

; <label>:204                                     ; preds = %204, %.lr.ph16
  %indvars.iv28 = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next29, %204 ]
  %205 = getelementptr inbounds double, double* %60, i64 %indvars.iv28
  %206 = load double, double* %205, align 8, !tbaa !190
  %207 = fmul double %111, %206
  %208 = fdiv double %207, %104
  %209 = add nuw nsw i64 %indvars.iv28, 15
  %210 = getelementptr inbounds double, double* %46, i64 %209
  store double %208, double* %210, align 8, !tbaa !190
  %211 = getelementptr inbounds double, double* %62, i64 %indvars.iv28
  %212 = bitcast double* %211 to i64*
  %213 = load i64, i64* %212, align 8, !tbaa !190
  %214 = add nsw i64 %195, %indvars.iv28
  %215 = getelementptr inbounds double, double* %46, i64 %214
  %216 = bitcast double* %215 to i64*
  store i64 %213, i64* %216, align 8, !tbaa !190
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %lftr.wideiv30 = trunc i64 %indvars.iv.next29 to i32
  %exitcond31 = icmp eq i32 %lftr.wideiv30, %6
  br i1 %exitcond31, label %._crit_edge17.loopexit, label %204

.preheader.loopexit:                              ; preds = %.lr.ph13
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader6
  br i1 %64, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %217 = add nsw i32 %6, 15
  %218 = sext i32 %217 to i64
  br label %229

.lr.ph13:                                         ; preds = %.lr.ph13, %.lr.ph13.preheader
  %indvars.iv26 = phi i64 [ 0, %.lr.ph13.preheader ], [ %indvars.iv.next27, %.lr.ph13 ]
  %219 = getelementptr inbounds double, double* %48, i64 %indvars.iv26
  %220 = bitcast double* %219 to i64*
  %221 = load i64, i64* %220, align 8, !tbaa !190
  %222 = getelementptr inbounds double, double* %46, i64 %indvars.iv26
  %223 = bitcast double* %222 to i64*
  store i64 %221, i64* %223, align 8, !tbaa !190
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %224 = icmp slt i64 %indvars.iv.next27, %43
  br i1 %224, label %.lr.ph13, label %.preheader.loopexit

._crit_edge.loopexit:                             ; preds = %229
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %tmarker.0.lcssa = phi double [ 0.000000e+00, %.preheader ], [ %243, %._crit_edge.loopexit ]
  %225 = load double, double* %46, align 8, !tbaa !190
  %226 = sitofp i32 %2 to double
  %227 = fdiv double %225, %226
  %228 = tail call double @sqrt(double %227) #3
  store double %228, double* %46, align 8, !tbaa !190
  br label %274

; <label>:229                                     ; preds = %229, %.lr.ph
  %indvars.iv23 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next24, %229 ]
  %tmarker.010 = phi double [ 0.000000e+00, %.lr.ph ], [ %243, %229 ]
  %230 = add nsw i64 %218, %indvars.iv23
  %231 = getelementptr inbounds double, double* %46, i64 %230
  %232 = load double, double* %231, align 8, !tbaa !190
  %233 = fcmp olt double %232, 1.000000e+00
  %234 = select i1 %233, double 1.000000e+00, double %232
  store double %234, double* %231, align 8, !tbaa !190
  %235 = add nuw nsw i64 %indvars.iv23, 15
  %236 = getelementptr inbounds double, double* %46, i64 %235
  %237 = load double, double* %236, align 8, !tbaa !190
  %238 = getelementptr inbounds double, double* %40, i64 %indvars.iv23
  %239 = load double, double* %238, align 8, !tbaa !190
  %240 = fmul double %237, %239
  %241 = fdiv double %240, %234
  store double %241, double* %236, align 8, !tbaa !190
  %242 = load double, double* %231, align 8, !tbaa !190
  %243 = fadd double %tmarker.010, %242
  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next24 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv, %6
  br i1 %exitcond25, label %._crit_edge.loopexit, label %229

; <label>:244                                     ; preds = %274
  %245 = load double, double* %174, align 8, !tbaa !190
  %246 = fdiv double %245, %tmarker.0.lcssa
  store double %246, double* %174, align 8, !tbaa !190
  %247 = load double, double* %180, align 8, !tbaa !190
  %248 = fdiv double %247, %tmarker.0.lcssa
  store double %248, double* %180, align 8, !tbaa !190
  %249 = load double, double* %186, align 8, !tbaa !190
  %250 = load double, double* %192, align 8, !tbaa !190
  %251 = load i32, i32* @istep, align 4, !tbaa !1
  %252 = add nsw i32 %251, %34
  %253 = load double, double* %46, align 8, !tbaa !190
  %254 = load double, double* %120, align 8, !tbaa !190
  %255 = load double, double* %131, align 8, !tbaa !190
  %256 = load double, double* %141, align 8, !tbaa !190
  %257 = load double, double* %151, align 8, !tbaa !190
  %258 = sdiv i32 %6, 2
  %259 = add nsw i32 %258, 15
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds double, double* %46, i64 %260
  %262 = load double, double* %261, align 8, !tbaa !190
  %263 = add nsw i32 %6, 15
  %264 = add nsw i32 %263, %258
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds double, double* %46, i64 %265
  %267 = load double, double* %266, align 8, !tbaa !190
  %268 = load double, double* %162, align 8, !tbaa !190
  %269 = load double, double* %168, align 8, !tbaa !190
  %270 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([215 x i8], [215 x i8]* @.str.5.202, i64 0, i64 0), i32 %252, double %253, double %32, double %254, double %255, double %256, double %257, double %262, double %267, double %268, double %269, double %246, double %248, double %249, double %250)
  %271 = load i32, i32* @istep, align 4, !tbaa !1
  %272 = add nsw i32 %271, %34
  %273 = icmp eq i32 %272, %36
  br i1 %273, label %278, label %280

; <label>:274                                     ; preds = %274, %._crit_edge
  %indvars.iv = phi i64 [ 1, %._crit_edge ], [ %indvars.iv.next, %274 ]
  %275 = getelementptr inbounds double, double* %46, i64 %indvars.iv
  %276 = load double, double* %275, align 8, !tbaa !190
  %277 = fdiv double %276, %tmarker.0.lcssa
  store double %277, double* %275, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 9
  br i1 %exitcond, label %244, label %274

; <label>:278                                     ; preds = %244
  %279 = tail call %struct._IO_FILE* @fopen(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.203, i64 0, i64 0), i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.204, i64 0, i64 0))
  br label %282

; <label>:280                                     ; preds = %244
  %281 = tail call %struct._IO_FILE* @fopen(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.203, i64 0, i64 0), i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.205, i64 0, i64 0))
  br label %282

; <label>:282                                     ; preds = %280, %278
  %pFile.0 = phi %struct._IO_FILE* [ %279, %278 ], [ %281, %280 ]
  %283 = load i32, i32* @istep, align 4, !tbaa !1
  %284 = add nsw i32 %283, %34
  %285 = load double, double* %46, align 8, !tbaa !190
  %286 = load double, double* %120, align 8, !tbaa !190
  %287 = load double, double* %131, align 8, !tbaa !190
  %288 = load double, double* %141, align 8, !tbaa !190
  %289 = load double, double* %151, align 8, !tbaa !190
  %290 = load double, double* %261, align 8, !tbaa !190
  %291 = load double, double* %266, align 8, !tbaa !190
  %292 = load double, double* %162, align 8, !tbaa !190
  %293 = load double, double* %168, align 8, !tbaa !190
  %294 = load double, double* %174, align 8, !tbaa !190
  %295 = load double, double* %180, align 8, !tbaa !190
  %296 = load double, double* %186, align 8, !tbaa !190
  %297 = load double, double* %192, align 8, !tbaa !190
  %298 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %pFile.0, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9.206, i64 0, i64 0), i32 %284, double %285, double %32, double %286, double %287, double %288, double %289, double %290, double %291, double %292, double %293, double %294, double %295, double %296, double %297)
  %299 = tail call i32 @fclose(%struct._IO_FILE* %pFile.0)
  br label %300

; <label>:300                                     ; preds = %282, %._crit_edge17
  tail call fastcc void @_mm_free.207(i8* nonnull %39)
  tail call fastcc void @_mm_free.207(i8* nonnull %45)
  tail call fastcc void @_mm_free.207(i8* nonnull %47)
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @_mm_malloc.196(i64 %__size) unnamed_addr #7 {
  %__ptr = alloca i8*, align 8
  %1 = bitcast i8** %__ptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #3
  %2 = call i32 @posix_memalign(i8** nonnull %__ptr, i64 16, i64 %__size) #3
  %3 = icmp eq i32 %2, 0
  %4 = load i8*, i8** %__ptr, align 8, !tbaa !5
  %.02 = select i1 %3, i8* %4, i8* null
  call void @llvm.lifetime.end(i64 8, i8* %1) #3
  ret i8* %.02
}

declare i32 @MPI_Reduce(i8*, i8*, i32, i32, i32, i32, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @_mm_free.207(i8* nocapture %__ptr) unnamed_addr #7 {
  tail call void @free(i8* %__ptr) #3
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_ParInit(i32 %proc_num, i32 %nprocs, i32 %thread_num, i32 %nthreads, i32 %nstreams, double* nocapture %nextSeed_local) #11 {
  %1 = mul i32 %nthreads, %proc_num
  %2 = add i32 %1, %thread_num
  %3 = mul i32 %2, %nstreams
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %5 = getelementptr inbounds double, double* %nextSeed_local, i64 3
  br label %6

; <label>:6                                       ; preds = %6, %.lr.ph
  %i.01 = phi i32 [ 0, %.lr.ph ], [ %7, %6 ]
  tail call fastcc void @MatVecModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p127, i64 0, i64 0), double* %nextSeed_local, double* %nextSeed_local, double 0x41EFFFFFE5E00000)
  tail call fastcc void @MatVecModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p127, i64 0, i64 0), double* %5, double* %5, double 0x41EFFFF4D7600000)
  %7 = add nuw nsw i32 %i.01, 1
  %exitcond = icmp eq i32 %7, %3
  br i1 %exitcond, label %._crit_edge.loopexit, label %6

._crit_edge.loopexit:                             ; preds = %6
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @MatVecModM([3 x double]* nocapture readonly %A, double* nocapture readonly %s, double* nocapture %v, double %m) unnamed_addr #11 {
  %v14 = bitcast double* %v to i8*
  %x = alloca [3 x double], align 16
  %1 = bitcast [3 x double]* %x to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #3
  %2 = load double, double* %s, align 8
  %3 = getelementptr inbounds double, double* %s, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds double, double* %s, i64 2
  %6 = load double, double* %5, align 8
  br label %7

; <label>:7                                       ; preds = %MultModM.exit4, %0
  %indvars.iv11 = phi i64 [ 0, %0 ], [ %indvars.iv.next12, %MultModM.exit4 ]
  %8 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 %indvars.iv11, i64 0
  %9 = load double, double* %8, align 8, !tbaa !190
  %10 = fmul double %9, %2
  %11 = fadd double %10, 0.000000e+00
  %12 = fcmp oge double %11, 0x4340000000000000
  %13 = fcmp ole double %11, 0xC340000000000000
  %or.cond.i = or i1 %12, %13
  br i1 %or.cond.i, label %14, label %MultModM.exit

; <label>:14                                      ; preds = %7
  %15 = fmul double %9, 0x3EE0000000000000
  %16 = fptosi double %15 to i64
  %17 = sitofp i64 %16 to double
  %18 = fmul double %17, 1.310720e+05
  %19 = fsub double %9, %18
  %20 = fmul double %2, %17
  %21 = fdiv double %20, %m
  %22 = fptosi double %21 to i64
  %23 = sitofp i64 %22 to double
  %24 = fmul double %23, %m
  %25 = fsub double %20, %24
  %26 = fmul double %25, 1.310720e+05
  %27 = fmul double %2, %19
  %28 = fadd double %27, %26
  %29 = fadd double %28, 0.000000e+00
  br label %MultModM.exit

MultModM.exit:                                    ; preds = %14, %7
  %v.0.i = phi double [ %29, %14 ], [ %11, %7 ]
  %30 = fdiv double %v.0.i, %m
  %31 = fptosi double %30 to i64
  %32 = sitofp i64 %31 to double
  %33 = fmul double %32, %m
  %34 = fsub double %v.0.i, %33
  %35 = fcmp olt double %34, 0.000000e+00
  %36 = fadd double %34, %m
  %.0.i = select i1 %35, double %36, double %34
  %37 = getelementptr inbounds [3 x double], [3 x double]* %x, i64 0, i64 %indvars.iv11
  store double %.0.i, double* %37, align 8, !tbaa !190
  %38 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 %indvars.iv11, i64 1
  %39 = load double, double* %38, align 8, !tbaa !190
  %40 = fmul double %39, %4
  %41 = fadd double %40, %.0.i
  %42 = fcmp oge double %41, 0x4340000000000000
  %43 = fcmp ole double %41, 0xC340000000000000
  %or.cond.i5 = or i1 %42, %43
  br i1 %or.cond.i5, label %44, label %MultModM.exit8

; <label>:44                                      ; preds = %MultModM.exit
  %45 = fmul double %39, 0x3EE0000000000000
  %46 = fptosi double %45 to i64
  %47 = sitofp i64 %46 to double
  %48 = fmul double %47, 1.310720e+05
  %49 = fsub double %39, %48
  %50 = fmul double %4, %47
  %51 = fdiv double %50, %m
  %52 = fptosi double %51 to i64
  %53 = sitofp i64 %52 to double
  %54 = fmul double %53, %m
  %55 = fsub double %50, %54
  %56 = fmul double %55, 1.310720e+05
  %57 = fmul double %4, %49
  %58 = fadd double %57, %56
  %59 = fadd double %.0.i, %58
  br label %MultModM.exit8

MultModM.exit8:                                   ; preds = %44, %MultModM.exit
  %v.0.i6 = phi double [ %59, %44 ], [ %41, %MultModM.exit ]
  %60 = fdiv double %v.0.i6, %m
  %61 = fptosi double %60 to i64
  %62 = sitofp i64 %61 to double
  %63 = fmul double %62, %m
  %64 = fsub double %v.0.i6, %63
  %65 = fcmp olt double %64, 0.000000e+00
  %66 = fadd double %64, %m
  %.0.i7 = select i1 %65, double %66, double %64
  store double %.0.i7, double* %37, align 8, !tbaa !190
  %67 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 %indvars.iv11, i64 2
  %68 = load double, double* %67, align 8, !tbaa !190
  %69 = fmul double %68, %6
  %70 = fadd double %69, %.0.i7
  %71 = fcmp oge double %70, 0x4340000000000000
  %72 = fcmp ole double %70, 0xC340000000000000
  %or.cond.i1 = or i1 %71, %72
  br i1 %or.cond.i1, label %73, label %MultModM.exit4

; <label>:73                                      ; preds = %MultModM.exit8
  %74 = fmul double %68, 0x3EE0000000000000
  %75 = fptosi double %74 to i64
  %76 = sitofp i64 %75 to double
  %77 = fmul double %76, 1.310720e+05
  %78 = fsub double %68, %77
  %79 = fmul double %6, %76
  %80 = fdiv double %79, %m
  %81 = fptosi double %80 to i64
  %82 = sitofp i64 %81 to double
  %83 = fmul double %82, %m
  %84 = fsub double %79, %83
  %85 = fmul double %84, 1.310720e+05
  %86 = fmul double %6, %78
  %87 = fadd double %86, %85
  %88 = fadd double %.0.i7, %87
  br label %MultModM.exit4

MultModM.exit4:                                   ; preds = %73, %MultModM.exit8
  %v.0.i2 = phi double [ %88, %73 ], [ %70, %MultModM.exit8 ]
  %89 = fdiv double %v.0.i2, %m
  %90 = fptosi double %89 to i64
  %91 = sitofp i64 %90 to double
  %92 = fmul double %91, %m
  %93 = fsub double %v.0.i2, %92
  %94 = fcmp olt double %93, 0.000000e+00
  %95 = fadd double %93, %m
  %.0.i3 = select i1 %94, double %95, double %93
  store double %.0.i3, double* %37, align 8, !tbaa !190
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  %exitcond13 = icmp eq i64 %indvars.iv.next12, 3
  br i1 %exitcond13, label %.preheader.preheader, label %7

.preheader.preheader:                             ; preds = %MultModM.exit4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %v14, i8* nonnull %1, i64 24, i32 8, i1 false)
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1) #3
  ret void
}

; Function Attrs: nounwind uwtable
define noalias %struct.RngStream_InfoState* @RngStream_CreateStream(i8* nocapture readnone %name, double* nocapture %nextSeed_local) #0 {
  %1 = tail call noalias i8* @malloc(i64 160) #3
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @str.212, i64 0, i64 0))
  tail call void @exit(i32 1) #15
  unreachable

; <label>:4                                       ; preds = %0
  %5 = bitcast i8* %1 to %struct.RngStream_InfoState*
  %6 = getelementptr inbounds i8, i8* %1, i64 144
  %7 = getelementptr inbounds i8, i8* %1, i64 96
  %8 = getelementptr inbounds i8, i8* %1, i64 48
  %9 = bitcast double* %nextSeed_local to i64*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  %10 = load i64, i64* %9, align 8, !tbaa !190
  %11 = bitcast i8* %7 to i64*
  store i64 %10, i64* %11, align 8, !tbaa !190
  %12 = bitcast i8* %1 to i64*
  store i64 %10, i64* %12, align 8, !tbaa !190
  %13 = bitcast i8* %8 to i64*
  store i64 %10, i64* %13, align 8, !tbaa !190
  %14 = getelementptr inbounds double, double* %nextSeed_local, i64 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !190
  %17 = getelementptr inbounds i8, i8* %1, i64 104
  %18 = bitcast i8* %17 to i64*
  store i64 %16, i64* %18, align 8, !tbaa !190
  %19 = getelementptr inbounds i8, i8* %1, i64 8
  %20 = bitcast i8* %19 to i64*
  store i64 %16, i64* %20, align 8, !tbaa !190
  %21 = getelementptr inbounds i8, i8* %1, i64 56
  %22 = bitcast i8* %21 to i64*
  store i64 %16, i64* %22, align 8, !tbaa !190
  %23 = getelementptr inbounds double, double* %nextSeed_local, i64 2
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !190
  %26 = getelementptr inbounds i8, i8* %1, i64 112
  %27 = bitcast i8* %26 to i64*
  store i64 %25, i64* %27, align 8, !tbaa !190
  %28 = getelementptr inbounds i8, i8* %1, i64 16
  %29 = bitcast i8* %28 to i64*
  store i64 %25, i64* %29, align 8, !tbaa !190
  %30 = getelementptr inbounds i8, i8* %1, i64 64
  %31 = bitcast i8* %30 to i64*
  store i64 %25, i64* %31, align 8, !tbaa !190
  %32 = getelementptr inbounds double, double* %nextSeed_local, i64 3
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !190
  %35 = getelementptr inbounds i8, i8* %1, i64 120
  %36 = bitcast i8* %35 to i64*
  store i64 %34, i64* %36, align 8, !tbaa !190
  %37 = getelementptr inbounds i8, i8* %1, i64 24
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 8, !tbaa !190
  %39 = getelementptr inbounds i8, i8* %1, i64 72
  %40 = bitcast i8* %39 to i64*
  store i64 %34, i64* %40, align 8, !tbaa !190
  %41 = getelementptr inbounds double, double* %nextSeed_local, i64 4
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !190
  %44 = getelementptr inbounds i8, i8* %1, i64 128
  %45 = bitcast i8* %44 to i64*
  store i64 %43, i64* %45, align 8, !tbaa !190
  %46 = getelementptr inbounds i8, i8* %1, i64 32
  %47 = bitcast i8* %46 to i64*
  store i64 %43, i64* %47, align 8, !tbaa !190
  %48 = getelementptr inbounds i8, i8* %1, i64 80
  %49 = bitcast i8* %48 to i64*
  store i64 %43, i64* %49, align 8, !tbaa !190
  %50 = getelementptr inbounds double, double* %nextSeed_local, i64 5
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !190
  %53 = getelementptr inbounds i8, i8* %1, i64 136
  %54 = bitcast i8* %53 to i64*
  store i64 %52, i64* %54, align 8, !tbaa !190
  %55 = getelementptr inbounds i8, i8* %1, i64 40
  %56 = bitcast i8* %55 to i64*
  store i64 %52, i64* %56, align 8, !tbaa !190
  %57 = getelementptr inbounds i8, i8* %1, i64 88
  %58 = bitcast i8* %57 to i64*
  store i64 %52, i64* %58, align 8, !tbaa !190
  tail call fastcc void @MatVecModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p127, i64 0, i64 0), double* %nextSeed_local, double* %nextSeed_local, double 0x41EFFFFFE5E00000)
  tail call fastcc void @MatVecModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p127, i64 0, i64 0), double* %32, double* %32, double 0x41EFFFF4D7600000)
  ret %struct.RngStream_InfoState* %5
}

; Function Attrs: nounwind uwtable
define void @RngStream_DeleteStream(%struct.RngStream_InfoState* %g) #0 {
  %1 = icmp eq %struct.RngStream_InfoState* %g, null
  br i1 %1, label %9, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 5
  %4 = load i8*, i8** %3, align 8, !tbaa !285
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %2
  tail call void @free(i8* nonnull %4) #3
  br label %7

; <label>:7                                       ; preds = %6, %2
  %8 = bitcast %struct.RngStream_InfoState* %g to i8*
  tail call void @free(i8* %8) #3
  br label %9

; <label>:9                                       ; preds = %7, %0
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_ResetStartStream(%struct.RngStream_InfoState* nocapture %g) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 0
  %2 = bitcast double* %1 to i64*
  %3 = load i64, i64* %2, align 8, !tbaa !190
  %4 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 0
  %5 = bitcast double* %4 to i64*
  store i64 %3, i64* %5, align 8, !tbaa !190
  %6 = bitcast %struct.RngStream_InfoState* %g to i64*
  store i64 %3, i64* %6, align 8, !tbaa !190
  %7 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !190
  %10 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !190
  %12 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  %13 = bitcast double* %12 to i64*
  store i64 %9, i64* %13, align 8, !tbaa !190
  %14 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 2
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !190
  %17 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 2
  %18 = bitcast double* %17 to i64*
  store i64 %16, i64* %18, align 8, !tbaa !190
  %19 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %20 = bitcast double* %19 to i64*
  store i64 %16, i64* %20, align 8, !tbaa !190
  %21 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 3
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !190
  %24 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 3
  %25 = bitcast double* %24 to i64*
  store i64 %23, i64* %25, align 8, !tbaa !190
  %26 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %27 = bitcast double* %26 to i64*
  store i64 %23, i64* %27, align 8, !tbaa !190
  %28 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 4
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !190
  %31 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 4
  %32 = bitcast double* %31 to i64*
  store i64 %30, i64* %32, align 8, !tbaa !190
  %33 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %34 = bitcast double* %33 to i64*
  store i64 %30, i64* %34, align 8, !tbaa !190
  %35 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 5
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !190
  %38 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 5
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 8, !tbaa !190
  %40 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %41 = bitcast double* %40 to i64*
  store i64 %37, i64* %41, align 8, !tbaa !190
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_ResetNextSubstream(%struct.RngStream_InfoState* nocapture %g) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 0
  tail call fastcc void @MatVecModM([3 x double]* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p76, i64 0, i64 0), double* %1, double* %1, double 0x41EFFFFFE5E00000)
  %2 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 3
  tail call fastcc void @MatVecModM([3 x double]* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p76, i64 0, i64 0), double* %2, double* %2, double 0x41EFFFF4D7600000)
  %3 = bitcast double* %1 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8, !tbaa !190
  %5 = bitcast %struct.RngStream_InfoState* %g to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %5, align 8, !tbaa !190
  %6 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 2
  %7 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %8 = bitcast double* %6 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 8, !tbaa !190
  %10 = bitcast double* %7 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !190
  %11 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 4
  %12 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %13 = bitcast double* %11 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !190
  %15 = bitcast double* %12 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %15, align 8, !tbaa !190
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_ResetStartSubstream(%struct.RngStream_InfoState* nocapture %g) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 0
  %2 = bitcast double* %1 to <2 x i64>*
  %3 = load <2 x i64>, <2 x i64>* %2, align 8, !tbaa !190
  %4 = bitcast %struct.RngStream_InfoState* %g to <2 x i64>*
  store <2 x i64> %3, <2 x i64>* %4, align 8, !tbaa !190
  %5 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 2
  %6 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %7 = bitcast double* %5 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8, !tbaa !190
  %9 = bitcast double* %6 to <2 x i64>*
  store <2 x i64> %8, <2 x i64>* %9, align 8, !tbaa !190
  %10 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 4
  %11 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %12 = bitcast double* %10 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8, !tbaa !190
  %14 = bitcast double* %11 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 8, !tbaa !190
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @RngStream_SetPackageSeed(i64* nocapture readonly %seed) #0 {
.loopexit:
  %0 = tail call fastcc i32 @CheckSeed(i64* %seed)
  %not. = icmp ne i32 %0, 0
  %. = sext i1 %not. to i32
  ret i32 %.
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @CheckSeed(i64* nocapture readonly %seed) unnamed_addr #0 {
  %1 = load i64, i64* %seed, align 8, !tbaa !287
  %2 = icmp ugt i64 %1, 4294967086
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %34, %6, %0
  %i.04.lcssa.wide = phi i32 [ 0, %0 ], [ 1, %6 ], [ 2, %34 ]
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* nonnull getelementptr inbounds ([125 x i8], [125 x i8]* @.str.15.215, i64 0, i64 0), i32 %i.04.lcssa.wide) #13
  br label %26

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds i64, i64* %seed, i64 1
  %8 = load i64, i64* %7, align 8, !tbaa !287
  %9 = icmp ugt i64 %8, 4294967086
  br i1 %9, label %3, label %34

; <label>:10                                      ; preds = %.preheader.preheader11, %.preheader.210, %.preheader.19
  %i.13.lcssa.wide = phi i32 [ 3, %.preheader.preheader11 ], [ 4, %.preheader.19 ], [ 5, %.preheader.210 ]
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %12 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* nonnull getelementptr inbounds ([125 x i8], [125 x i8]* @.str.15.215, i64 0, i64 0), i32 %i.13.lcssa.wide) #13
  br label %26

.preheader.19:                                    ; preds = %.preheader.preheader11
  %13 = getelementptr inbounds i64, i64* %seed, i64 4
  %14 = load i64, i64* %13, align 8, !tbaa !287
  %15 = icmp ugt i64 %14, 4294944442
  br i1 %15, label %10, label %.preheader.210

; <label>:16                                      ; preds = %30
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %18 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([86 x i8], [86 x i8]* @.str.16.216, i64 0, i64 0), i64 85, i64 1, %struct._IO_FILE* %17) #13
  br label %26

; <label>:19                                      ; preds = %30
  %20 = or i64 %39, %14
  %21 = or i64 %20, %28
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %19
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !5
  %25 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([85 x i8], [85 x i8]* @.str.17, i64 0, i64 0), i64 84, i64 1, %struct._IO_FILE* %24) #13
  br label %26

; <label>:26                                      ; preds = %23, %19, %16, %10, %3
  %.0 = phi i32 [ -1, %3 ], [ -1, %10 ], [ -1, %16 ], [ -1, %23 ], [ 0, %19 ]
  ret i32 %.0

.preheader.210:                                   ; preds = %.preheader.19
  %27 = getelementptr inbounds i64, i64* %seed, i64 5
  %28 = load i64, i64* %27, align 8, !tbaa !287
  %29 = icmp ugt i64 %28, 4294944442
  br i1 %29, label %10, label %30

; <label>:30                                      ; preds = %.preheader.210
  %31 = or i64 %1, %8
  %32 = or i64 %31, %36
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %16, label %19

; <label>:34                                      ; preds = %6
  %35 = getelementptr inbounds i64, i64* %seed, i64 2
  %36 = load i64, i64* %35, align 8, !tbaa !287
  %37 = icmp ugt i64 %36, 4294967086
  br i1 %37, label %3, label %.preheader.preheader11

.preheader.preheader11:                           ; preds = %34
  %38 = getelementptr inbounds i64, i64* %seed, i64 3
  %39 = load i64, i64* %38, align 8, !tbaa !287
  %40 = icmp ugt i64 %39, 4294944442
  br i1 %40, label %10, label %.preheader.19
}

; Function Attrs: nounwind uwtable
define i32 @RngStream_SetSeed(%struct.RngStream_InfoState* nocapture %g, i64* nocapture readonly %seed) #0 {
  %1 = tail call fastcc i32 @CheckSeed(i64* %seed)
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %.preheader.preheader, label %.loopexit

.preheader.preheader:                             ; preds = %0
  %3 = load i64, i64* %seed, align 8, !tbaa !287
  %4 = uitofp i64 %3 to double
  %5 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 0
  store double %4, double* %5, align 8, !tbaa !190
  %6 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 0
  store double %4, double* %6, align 8, !tbaa !190
  %7 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  store double %4, double* %7, align 8, !tbaa !190
  %8 = getelementptr inbounds i64, i64* %seed, i64 1
  %9 = load i64, i64* %8, align 8, !tbaa !287
  %10 = uitofp i64 %9 to double
  %11 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 1
  store double %10, double* %11, align 8, !tbaa !190
  %12 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 1
  store double %10, double* %12, align 8, !tbaa !190
  %13 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  store double %10, double* %13, align 8, !tbaa !190
  %14 = getelementptr inbounds i64, i64* %seed, i64 2
  %15 = load i64, i64* %14, align 8, !tbaa !287
  %16 = uitofp i64 %15 to double
  %17 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 2
  store double %16, double* %17, align 8, !tbaa !190
  %18 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 2
  store double %16, double* %18, align 8, !tbaa !190
  %19 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  store double %16, double* %19, align 8, !tbaa !190
  %20 = getelementptr inbounds i64, i64* %seed, i64 3
  %21 = load i64, i64* %20, align 8, !tbaa !287
  %22 = uitofp i64 %21 to double
  %23 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 3
  store double %22, double* %23, align 8, !tbaa !190
  %24 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 3
  store double %22, double* %24, align 8, !tbaa !190
  %25 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  store double %22, double* %25, align 8, !tbaa !190
  %26 = getelementptr inbounds i64, i64* %seed, i64 4
  %27 = load i64, i64* %26, align 8, !tbaa !287
  %28 = uitofp i64 %27 to double
  %29 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 4
  store double %28, double* %29, align 8, !tbaa !190
  %30 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 4
  store double %28, double* %30, align 8, !tbaa !190
  %31 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  store double %28, double* %31, align 8, !tbaa !190
  %32 = getelementptr inbounds i64, i64* %seed, i64 5
  %33 = load i64, i64* %32, align 8, !tbaa !287
  %34 = uitofp i64 %33 to double
  %35 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 5
  store double %34, double* %35, align 8, !tbaa !190
  %36 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 5
  store double %34, double* %36, align 8, !tbaa !190
  %37 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  store double %34, double* %37, align 8, !tbaa !190
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader.preheader, %0
  %.0 = phi i32 [ -1, %0 ], [ 0, %.preheader.preheader ]
  ret i32 %.0
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_AdvanceState(%struct.RngStream_InfoState* nocapture %g, i64 %e, i64 %c) #11 {
  %V.i46 = alloca [3 x double], align 16
  %V.i36 = alloca [3 x double], align 16
  %V.i21 = alloca [3 x double], align 16
  %V.i6 = alloca [3 x double], align 16
  %V.i = alloca [3 x double], align 16
  %B1 = alloca [3 x [3 x double]], align 16
  %C1 = alloca [3 x [3 x double]], align 16
  %B2 = alloca [3 x [3 x double]], align 16
  %C2 = alloca [3 x [3 x double]], align 16
  %1 = bitcast [3 x [3 x double]]* %B1 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %1) #3
  %2 = bitcast [3 x [3 x double]]* %C1 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %2) #3
  %3 = bitcast [3 x [3 x double]]* %B2 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %3) #3
  %4 = bitcast [3 x [3 x double]]* %C2 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %4) #3
  %5 = icmp sgt i64 %e, 0
  br i1 %5, label %6, label %119

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0
  %8 = bitcast [3 x [3 x double]]* %B1 to i64*
  %9 = load <2 x i64>, <2 x i64>* bitcast ([3 x [3 x double]]* @A1p0 to <2 x i64>*), align 16, !tbaa !190
  %10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0, i64 1
  %11 = bitcast double* %10 to i64*
  %12 = bitcast [3 x [3 x double]]* %B1 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %12, align 16, !tbaa !190
  %13 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0, i64 2
  %14 = bitcast double* %13 to i64*
  %15 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p0, i64 0, i64 0, i64 2) to <2 x i64>*), align 16, !tbaa !190
  %16 = bitcast double* %13 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 16, !tbaa !190
  %17 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1, i64 1
  %18 = bitcast double* %17 to i64*
  %19 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p0, i64 0, i64 1, i64 1) to <2 x i64>*), align 8, !tbaa !190
  %20 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1, i64 2
  %21 = bitcast double* %20 to i64*
  %22 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %22, align 8, !tbaa !190
  %23 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 0
  %24 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p0, i64 0, i64 2, i64 0) to <2 x i64>*), align 16, !tbaa !190
  %25 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 1
  %26 = bitcast double* %25 to i64*
  %27 = bitcast double* %23 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %27, align 16, !tbaa !190
  %28 = load i64, i64* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p0, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !190
  %29 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 2
  %30 = bitcast double* %29 to i64*
  store i64 %28, i64* %30, align 16, !tbaa !190
  %31 = bitcast [3 x double]* %V.i to i8*
  %32 = getelementptr inbounds [3 x double], [3 x double]* %V.i, i64 0, i64 0
  %33 = bitcast [3 x double]* %V.i to i64*
  %34 = getelementptr inbounds [3 x double], [3 x double]* %V.i, i64 0, i64 1
  %35 = bitcast double* %34 to i64*
  %36 = getelementptr inbounds [3 x double], [3 x double]* %V.i, i64 0, i64 2
  %37 = bitcast double* %36 to i64*
  %38 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1
  %39 = bitcast [3 x double]* %38 to i64*
  %40 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2
  %41 = bitcast [3 x double]* %40 to i64*
  %42 = extractelement <2 x i64> %9, i32 0
  %43 = extractelement <2 x i64> %15, i32 1
  %44 = extractelement <2 x i64> %24, i32 0
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %6
  %45 = phi i64 [ %50, %.lr.ph.i ], [ %44, %6 ]
  %46 = phi i64 [ %49, %.lr.ph.i ], [ %43, %6 ]
  %47 = phi i64 [ %48, %.lr.ph.i ], [ %42, %6 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %.lr.ph.i ], [ 0, %6 ]
  call void @llvm.lifetime.start(i64 24, i8* %31) #3
  store i64 %47, i64* %33, align 16, !tbaa !190
  store i64 %46, i64* %35, align 8, !tbaa !190
  store i64 %45, i64* %37, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %7, double* %32, double* %32, double 0x41EFFFFFE5E00000) #3
  %48 = load i64, i64* %33, align 16, !tbaa !190
  %49 = load i64, i64* %35, align 8, !tbaa !190
  %50 = load i64, i64* %37, align 16, !tbaa !190
  %51 = load i64, i64* %11, align 8, !tbaa !190
  store i64 %51, i64* %33, align 16, !tbaa !190
  %52 = load i64, i64* %18, align 8, !tbaa !190
  store i64 %52, i64* %35, align 8, !tbaa !190
  %53 = load i64, i64* %26, align 8, !tbaa !190
  store i64 %53, i64* %37, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %7, double* %32, double* %32, double 0x41EFFFFFE5E00000) #3
  %54 = load i64, i64* %33, align 16, !tbaa !190
  %55 = load i64, i64* %35, align 8, !tbaa !190
  %56 = load i64, i64* %37, align 16, !tbaa !190
  %57 = load i64, i64* %14, align 16, !tbaa !190
  store i64 %57, i64* %33, align 16, !tbaa !190
  %58 = load i64, i64* %21, align 8, !tbaa !190
  store i64 %58, i64* %35, align 8, !tbaa !190
  %59 = load i64, i64* %30, align 16, !tbaa !190
  store i64 %59, i64* %37, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %7, double* %32, double* %32, double 0x41EFFFFFE5E00000) #3
  %60 = load i64, i64* %33, align 16, !tbaa !190
  %61 = load i64, i64* %35, align 8, !tbaa !190
  %62 = load i64, i64* %37, align 16, !tbaa !190
  store i64 %48, i64* %8, align 16
  store i64 %54, i64* %11, align 8
  store i64 %60, i64* %14, align 16
  store i64 %49, i64* %39, align 8
  store i64 %55, i64* %18, align 8
  store i64 %61, i64* %21, align 8
  store i64 %50, i64* %41, align 16
  store i64 %56, i64* %26, align 8
  store i64 %62, i64* %30, align 16
  call void @llvm.lifetime.end(i64 24, i8* %31) #3
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, %e
  br i1 %exitcond.i, label %MatTwoPowModM.exit, label %.lr.ph.i

MatTwoPowModM.exit:                               ; preds = %.lr.ph.i
  %63 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0
  %64 = bitcast [3 x [3 x double]]* %B2 to i64*
  %65 = load <2 x i64>, <2 x i64>* bitcast ([3 x [3 x double]]* @A2p0 to <2 x i64>*), align 16, !tbaa !190
  %66 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0, i64 1
  %67 = bitcast double* %66 to i64*
  %68 = bitcast [3 x [3 x double]]* %B2 to <2 x i64>*
  store <2 x i64> %65, <2 x i64>* %68, align 16, !tbaa !190
  %69 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0, i64 2
  %70 = bitcast double* %69 to i64*
  %71 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p0, i64 0, i64 0, i64 2) to <2 x i64>*), align 16, !tbaa !190
  %72 = bitcast double* %69 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %72, align 16, !tbaa !190
  %73 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1, i64 1
  %74 = bitcast double* %73 to i64*
  %75 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p0, i64 0, i64 1, i64 1) to <2 x i64>*), align 8, !tbaa !190
  %76 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1, i64 2
  %77 = bitcast double* %76 to i64*
  %78 = bitcast double* %73 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %78, align 8, !tbaa !190
  %79 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 0
  %80 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p0, i64 0, i64 2, i64 0) to <2 x i64>*), align 16, !tbaa !190
  %81 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 1
  %82 = bitcast double* %81 to i64*
  %83 = bitcast double* %79 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 16, !tbaa !190
  %84 = load i64, i64* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p0, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !190
  %85 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 2
  %86 = bitcast double* %85 to i64*
  store i64 %84, i64* %86, align 16, !tbaa !190
  %87 = bitcast [3 x double]* %V.i6 to i8*
  %88 = getelementptr inbounds [3 x double], [3 x double]* %V.i6, i64 0, i64 0
  %89 = bitcast [3 x double]* %V.i6 to i64*
  %90 = getelementptr inbounds [3 x double], [3 x double]* %V.i6, i64 0, i64 1
  %91 = bitcast double* %90 to i64*
  %92 = getelementptr inbounds [3 x double], [3 x double]* %V.i6, i64 0, i64 2
  %93 = bitcast double* %92 to i64*
  %94 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1
  %95 = bitcast [3 x double]* %94 to i64*
  %96 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2
  %97 = bitcast [3 x double]* %96 to i64*
  %98 = extractelement <2 x i64> %65, i32 0
  %99 = extractelement <2 x i64> %71, i32 1
  %100 = extractelement <2 x i64> %80, i32 0
  br label %.lr.ph.i4

.lr.ph.i4:                                        ; preds = %.lr.ph.i4, %MatTwoPowModM.exit
  %101 = phi i64 [ %106, %.lr.ph.i4 ], [ %100, %MatTwoPowModM.exit ]
  %102 = phi i64 [ %105, %.lr.ph.i4 ], [ %99, %MatTwoPowModM.exit ]
  %103 = phi i64 [ %104, %.lr.ph.i4 ], [ %98, %MatTwoPowModM.exit ]
  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i2, %.lr.ph.i4 ], [ 0, %MatTwoPowModM.exit ]
  call void @llvm.lifetime.start(i64 24, i8* %87) #3
  store i64 %103, i64* %89, align 16, !tbaa !190
  store i64 %102, i64* %91, align 8, !tbaa !190
  store i64 %101, i64* %93, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %63, double* %88, double* %88, double 0x41EFFFF4D7600000) #3
  %104 = load i64, i64* %89, align 16, !tbaa !190
  %105 = load i64, i64* %91, align 8, !tbaa !190
  %106 = load i64, i64* %93, align 16, !tbaa !190
  %107 = load i64, i64* %67, align 8, !tbaa !190
  store i64 %107, i64* %89, align 16, !tbaa !190
  %108 = load i64, i64* %74, align 8, !tbaa !190
  store i64 %108, i64* %91, align 8, !tbaa !190
  %109 = load i64, i64* %82, align 8, !tbaa !190
  store i64 %109, i64* %93, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %63, double* %88, double* %88, double 0x41EFFFF4D7600000) #3
  %110 = load i64, i64* %89, align 16, !tbaa !190
  %111 = load i64, i64* %91, align 8, !tbaa !190
  %112 = load i64, i64* %93, align 16, !tbaa !190
  %113 = load i64, i64* %70, align 16, !tbaa !190
  store i64 %113, i64* %89, align 16, !tbaa !190
  %114 = load i64, i64* %77, align 8, !tbaa !190
  store i64 %114, i64* %91, align 8, !tbaa !190
  %115 = load i64, i64* %86, align 16, !tbaa !190
  store i64 %115, i64* %93, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %63, double* %88, double* %88, double 0x41EFFFF4D7600000) #3
  %116 = load i64, i64* %89, align 16, !tbaa !190
  %117 = load i64, i64* %91, align 8, !tbaa !190
  %118 = load i64, i64* %93, align 16, !tbaa !190
  store i64 %104, i64* %64, align 16
  store i64 %110, i64* %67, align 8
  store i64 %116, i64* %70, align 16
  store i64 %105, i64* %95, align 8
  store i64 %111, i64* %74, align 8
  store i64 %117, i64* %77, align 8
  store i64 %106, i64* %97, align 16
  store i64 %112, i64* %82, align 8
  store i64 %118, i64* %86, align 16
  call void @llvm.lifetime.end(i64 24, i8* %87) #3
  %indvars.iv.next.i2 = add nuw nsw i64 %indvars.iv.i1, 1
  %exitcond.i3 = icmp eq i64 %indvars.iv.next.i2, %e
  br i1 %exitcond.i3, label %MatTwoPowModM.exit5.loopexit, label %.lr.ph.i4

; <label>:119                                     ; preds = %0
  %120 = icmp slt i64 %e, 0
  br i1 %120, label %121, label %MatTwoPowModM.exit5

; <label>:121                                     ; preds = %119
  %122 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0
  %123 = sub nsw i64 0, %e
  %124 = bitcast [3 x [3 x double]]* %B1 to i64*
  %125 = load <2 x i64>, <2 x i64>* bitcast ([3 x [3 x double]]* @InvA1 to <2 x i64>*), align 16, !tbaa !190
  %126 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0, i64 1
  %127 = bitcast double* %126 to i64*
  %128 = bitcast [3 x [3 x double]]* %B1 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 16, !tbaa !190
  %129 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0, i64 2
  %130 = bitcast double* %129 to i64*
  %131 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA1, i64 0, i64 0, i64 2) to <2 x i64>*), align 16, !tbaa !190
  %132 = bitcast double* %129 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %132, align 16, !tbaa !190
  %133 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1, i64 1
  %134 = bitcast double* %133 to i64*
  %135 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA1, i64 0, i64 1, i64 1) to <2 x i64>*), align 8, !tbaa !190
  %136 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1, i64 2
  %137 = bitcast double* %136 to i64*
  %138 = bitcast double* %133 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %138, align 8, !tbaa !190
  %139 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 0
  %140 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA1, i64 0, i64 2, i64 0) to <2 x i64>*), align 16, !tbaa !190
  %141 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 1
  %142 = bitcast double* %141 to i64*
  %143 = bitcast double* %139 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 16, !tbaa !190
  %144 = load i64, i64* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA1, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !190
  %145 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2, i64 2
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 16, !tbaa !190
  %147 = bitcast [3 x double]* %V.i21 to i8*
  %148 = getelementptr inbounds [3 x double], [3 x double]* %V.i21, i64 0, i64 0
  %149 = bitcast [3 x double]* %V.i21 to i64*
  %150 = getelementptr inbounds [3 x double], [3 x double]* %V.i21, i64 0, i64 1
  %151 = bitcast double* %150 to i64*
  %152 = getelementptr inbounds [3 x double], [3 x double]* %V.i21, i64 0, i64 2
  %153 = bitcast double* %152 to i64*
  %154 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 1
  %155 = bitcast [3 x double]* %154 to i64*
  %156 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 2
  %157 = bitcast [3 x double]* %156 to i64*
  %158 = extractelement <2 x i64> %125, i32 0
  %159 = extractelement <2 x i64> %131, i32 1
  %160 = extractelement <2 x i64> %140, i32 0
  br label %.lr.ph.i19

.lr.ph.i19:                                       ; preds = %.lr.ph.i19, %121
  %161 = phi i64 [ %166, %.lr.ph.i19 ], [ %160, %121 ]
  %162 = phi i64 [ %165, %.lr.ph.i19 ], [ %159, %121 ]
  %163 = phi i64 [ %164, %.lr.ph.i19 ], [ %158, %121 ]
  %indvars.iv.i16 = phi i64 [ %indvars.iv.next.i17, %.lr.ph.i19 ], [ 0, %121 ]
  call void @llvm.lifetime.start(i64 24, i8* %147) #3
  store i64 %163, i64* %149, align 16, !tbaa !190
  store i64 %162, i64* %151, align 8, !tbaa !190
  store i64 %161, i64* %153, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %122, double* %148, double* %148, double 0x41EFFFFFE5E00000) #3
  %164 = load i64, i64* %149, align 16, !tbaa !190
  %165 = load i64, i64* %151, align 8, !tbaa !190
  %166 = load i64, i64* %153, align 16, !tbaa !190
  %167 = load i64, i64* %127, align 8, !tbaa !190
  store i64 %167, i64* %149, align 16, !tbaa !190
  %168 = load i64, i64* %134, align 8, !tbaa !190
  store i64 %168, i64* %151, align 8, !tbaa !190
  %169 = load i64, i64* %142, align 8, !tbaa !190
  store i64 %169, i64* %153, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %122, double* %148, double* %148, double 0x41EFFFFFE5E00000) #3
  %170 = load i64, i64* %149, align 16, !tbaa !190
  %171 = load i64, i64* %151, align 8, !tbaa !190
  %172 = load i64, i64* %153, align 16, !tbaa !190
  %173 = load i64, i64* %130, align 16, !tbaa !190
  store i64 %173, i64* %149, align 16, !tbaa !190
  %174 = load i64, i64* %137, align 8, !tbaa !190
  store i64 %174, i64* %151, align 8, !tbaa !190
  %175 = load i64, i64* %146, align 16, !tbaa !190
  store i64 %175, i64* %153, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %122, double* %148, double* %148, double 0x41EFFFFFE5E00000) #3
  %176 = load i64, i64* %149, align 16, !tbaa !190
  %177 = load i64, i64* %151, align 8, !tbaa !190
  %178 = load i64, i64* %153, align 16, !tbaa !190
  store i64 %164, i64* %124, align 16
  store i64 %170, i64* %127, align 8
  store i64 %176, i64* %130, align 16
  store i64 %165, i64* %155, align 8
  store i64 %171, i64* %134, align 8
  store i64 %177, i64* %137, align 8
  store i64 %166, i64* %157, align 16
  store i64 %172, i64* %142, align 8
  store i64 %178, i64* %146, align 16
  call void @llvm.lifetime.end(i64 24, i8* %147) #3
  %indvars.iv.next.i17 = add nuw nsw i64 %indvars.iv.i16, 1
  %exitcond.i18 = icmp eq i64 %indvars.iv.next.i17, %123
  br i1 %exitcond.i18, label %.lr.ph.i34.preheader, label %.lr.ph.i19

.lr.ph.i34.preheader:                             ; preds = %.lr.ph.i19
  %179 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0
  %180 = bitcast [3 x [3 x double]]* %B2 to i64*
  %181 = load <2 x i64>, <2 x i64>* bitcast ([3 x [3 x double]]* @InvA2 to <2 x i64>*), align 16, !tbaa !190
  %182 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0, i64 1
  %183 = bitcast double* %182 to i64*
  %184 = bitcast [3 x [3 x double]]* %B2 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %184, align 16, !tbaa !190
  %185 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0, i64 2
  %186 = bitcast double* %185 to i64*
  %187 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA2, i64 0, i64 0, i64 2) to <2 x i64>*), align 16, !tbaa !190
  %188 = bitcast double* %185 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %188, align 16, !tbaa !190
  %189 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1, i64 1
  %190 = bitcast double* %189 to i64*
  %191 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA2, i64 0, i64 1, i64 1) to <2 x i64>*), align 8, !tbaa !190
  %192 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1, i64 2
  %193 = bitcast double* %192 to i64*
  %194 = bitcast double* %189 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %194, align 8, !tbaa !190
  %195 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 0
  %196 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA2, i64 0, i64 2, i64 0) to <2 x i64>*), align 16, !tbaa !190
  %197 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 1
  %198 = bitcast double* %197 to i64*
  %199 = bitcast double* %195 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %199, align 16, !tbaa !190
  %200 = load i64, i64* bitcast (double* getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA2, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !190
  %201 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2, i64 2
  %202 = bitcast double* %201 to i64*
  store i64 %200, i64* %202, align 16, !tbaa !190
  %203 = bitcast [3 x double]* %V.i36 to i8*
  %204 = getelementptr inbounds [3 x double], [3 x double]* %V.i36, i64 0, i64 0
  %205 = bitcast [3 x double]* %V.i36 to i64*
  %206 = getelementptr inbounds [3 x double], [3 x double]* %V.i36, i64 0, i64 1
  %207 = bitcast double* %206 to i64*
  %208 = getelementptr inbounds [3 x double], [3 x double]* %V.i36, i64 0, i64 2
  %209 = bitcast double* %208 to i64*
  %210 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 1
  %211 = bitcast [3 x double]* %210 to i64*
  %212 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 2
  %213 = bitcast [3 x double]* %212 to i64*
  %214 = extractelement <2 x i64> %181, i32 0
  %215 = extractelement <2 x i64> %187, i32 1
  %216 = extractelement <2 x i64> %196, i32 0
  br label %.lr.ph.i34

.lr.ph.i34:                                       ; preds = %.lr.ph.i34, %.lr.ph.i34.preheader
  %217 = phi i64 [ %222, %.lr.ph.i34 ], [ %216, %.lr.ph.i34.preheader ]
  %218 = phi i64 [ %221, %.lr.ph.i34 ], [ %215, %.lr.ph.i34.preheader ]
  %219 = phi i64 [ %220, %.lr.ph.i34 ], [ %214, %.lr.ph.i34.preheader ]
  %indvars.iv.i31 = phi i64 [ %indvars.iv.next.i32, %.lr.ph.i34 ], [ 0, %.lr.ph.i34.preheader ]
  call void @llvm.lifetime.start(i64 24, i8* %203) #3
  store i64 %219, i64* %205, align 16, !tbaa !190
  store i64 %218, i64* %207, align 8, !tbaa !190
  store i64 %217, i64* %209, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %179, double* %204, double* %204, double 0x41EFFFF4D7600000) #3
  %220 = load i64, i64* %205, align 16, !tbaa !190
  %221 = load i64, i64* %207, align 8, !tbaa !190
  %222 = load i64, i64* %209, align 16, !tbaa !190
  %223 = load i64, i64* %183, align 8, !tbaa !190
  store i64 %223, i64* %205, align 16, !tbaa !190
  %224 = load i64, i64* %190, align 8, !tbaa !190
  store i64 %224, i64* %207, align 8, !tbaa !190
  %225 = load i64, i64* %198, align 8, !tbaa !190
  store i64 %225, i64* %209, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %179, double* %204, double* %204, double 0x41EFFFF4D7600000) #3
  %226 = load i64, i64* %205, align 16, !tbaa !190
  %227 = load i64, i64* %207, align 8, !tbaa !190
  %228 = load i64, i64* %209, align 16, !tbaa !190
  %229 = load i64, i64* %186, align 16, !tbaa !190
  store i64 %229, i64* %205, align 16, !tbaa !190
  %230 = load i64, i64* %193, align 8, !tbaa !190
  store i64 %230, i64* %207, align 8, !tbaa !190
  %231 = load i64, i64* %202, align 16, !tbaa !190
  store i64 %231, i64* %209, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %179, double* %204, double* %204, double 0x41EFFFF4D7600000) #3
  %232 = load i64, i64* %205, align 16, !tbaa !190
  %233 = load i64, i64* %207, align 8, !tbaa !190
  %234 = load i64, i64* %209, align 16, !tbaa !190
  store i64 %220, i64* %180, align 16
  store i64 %226, i64* %183, align 8
  store i64 %232, i64* %186, align 16
  store i64 %221, i64* %211, align 8
  store i64 %227, i64* %190, align 8
  store i64 %233, i64* %193, align 8
  store i64 %222, i64* %213, align 16
  store i64 %228, i64* %198, align 8
  store i64 %234, i64* %202, align 16
  call void @llvm.lifetime.end(i64 24, i8* %203) #3
  %indvars.iv.next.i32 = add nuw nsw i64 %indvars.iv.i31, 1
  %exitcond.i33 = icmp eq i64 %indvars.iv.next.i32, %123
  br i1 %exitcond.i33, label %MatTwoPowModM.exit5.loopexit70, label %.lr.ph.i34

MatTwoPowModM.exit5.loopexit:                     ; preds = %.lr.ph.i4
  br label %MatTwoPowModM.exit5

MatTwoPowModM.exit5.loopexit70:                   ; preds = %.lr.ph.i34
  br label %MatTwoPowModM.exit5

MatTwoPowModM.exit5:                              ; preds = %MatTwoPowModM.exit5.loopexit70, %MatTwoPowModM.exit5.loopexit, %119
  %235 = icmp sgt i64 %c, -1
  %236 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 0
  br i1 %235, label %237, label %239

; <label>:237                                     ; preds = %MatTwoPowModM.exit5
  call fastcc void @MatPowModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A1p0, i64 0, i64 0), [3 x double]* %236, double 0x41EFFFFFE5E00000, i64 %c)
  %238 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 0
  call fastcc void @MatPowModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @A2p0, i64 0, i64 0), [3 x double]* %238, double 0x41EFFFF4D7600000, i64 %c)
  br label %242

; <label>:239                                     ; preds = %MatTwoPowModM.exit5
  %240 = sub nsw i64 0, %c
  call fastcc void @MatPowModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA1, i64 0, i64 0), [3 x double]* %236, double 0x41EFFFFFE5E00000, i64 %240)
  %241 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 0
  call fastcc void @MatPowModM([3 x double]* nonnull getelementptr inbounds ([3 x [3 x double]], [3 x [3 x double]]* @InvA2, i64 0, i64 0), [3 x double]* %241, double 0x41EFFFF4D7600000, i64 %240)
  br label %242

; <label>:242                                     ; preds = %239, %237
  %243 = icmp eq i64 %e, 0
  br i1 %243, label %332, label %244

; <label>:244                                     ; preds = %242
  %245 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B1, i64 0, i64 0
  %246 = bitcast [3 x double]* %V.i46 to i8*
  call void @llvm.lifetime.start(i64 24, i8* %246) #3
  %247 = getelementptr inbounds [3 x double], [3 x double]* %V.i46, i64 0, i64 0
  %248 = bitcast [3 x double]* %V.i46 to i64*
  %249 = bitcast [3 x [3 x double]]* %C1 to i64*
  %250 = load i64, i64* %249, align 16, !tbaa !190
  store i64 %250, i64* %248, align 16, !tbaa !190
  %251 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 1, i64 0
  %252 = bitcast double* %251 to i64*
  %253 = load i64, i64* %252, align 8, !tbaa !190
  %254 = getelementptr inbounds [3 x double], [3 x double]* %V.i46, i64 0, i64 1
  %255 = bitcast double* %254 to i64*
  store i64 %253, i64* %255, align 8, !tbaa !190
  %256 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 2, i64 0
  %257 = bitcast double* %256 to i64*
  %258 = load i64, i64* %257, align 16, !tbaa !190
  %259 = getelementptr inbounds [3 x double], [3 x double]* %V.i46, i64 0, i64 2
  %260 = bitcast double* %259 to i64*
  store i64 %258, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %245, double* %247, double* %247, double 0x41EFFFFFE5E00000) #3
  %261 = load i64, i64* %248, align 16, !tbaa !190
  %262 = load i64, i64* %255, align 8, !tbaa !190
  %263 = load i64, i64* %260, align 16, !tbaa !190
  %264 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 0, i64 1
  %265 = bitcast double* %264 to i64*
  %266 = load i64, i64* %265, align 8, !tbaa !190
  store i64 %266, i64* %248, align 16, !tbaa !190
  %267 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 1, i64 1
  %268 = bitcast double* %267 to i64*
  %269 = load i64, i64* %268, align 8, !tbaa !190
  store i64 %269, i64* %255, align 8, !tbaa !190
  %270 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 2, i64 1
  %271 = bitcast double* %270 to i64*
  %272 = load i64, i64* %271, align 8, !tbaa !190
  store i64 %272, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %245, double* %247, double* %247, double 0x41EFFFFFE5E00000) #3
  %273 = load i64, i64* %248, align 16, !tbaa !190
  %274 = load i64, i64* %255, align 8, !tbaa !190
  %275 = load i64, i64* %260, align 16, !tbaa !190
  %276 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 0, i64 2
  %277 = bitcast double* %276 to i64*
  %278 = load i64, i64* %277, align 16, !tbaa !190
  store i64 %278, i64* %248, align 16, !tbaa !190
  %279 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 1, i64 2
  %280 = bitcast double* %279 to i64*
  %281 = load i64, i64* %280, align 8, !tbaa !190
  store i64 %281, i64* %255, align 8, !tbaa !190
  %282 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 2, i64 2
  %283 = bitcast double* %282 to i64*
  %284 = load i64, i64* %283, align 16, !tbaa !190
  store i64 %284, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %245, double* %247, double* %247, double 0x41EFFFFFE5E00000) #3
  %285 = load i64, i64* %248, align 16, !tbaa !190
  %286 = load i64, i64* %255, align 8, !tbaa !190
  %287 = load i64, i64* %260, align 16, !tbaa !190
  store i64 %261, i64* %249, align 16
  store i64 %273, i64* %265, align 8
  store i64 %285, i64* %277, align 16
  %288 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 1
  %289 = bitcast [3 x double]* %288 to i64*
  store i64 %262, i64* %289, align 8
  store i64 %274, i64* %268, align 8
  store i64 %286, i64* %280, align 8
  %290 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C1, i64 0, i64 2
  %291 = bitcast [3 x double]* %290 to i64*
  store i64 %263, i64* %291, align 16
  store i64 %275, i64* %271, align 8
  store i64 %287, i64* %283, align 16
  call void @llvm.lifetime.end(i64 24, i8* %246) #3
  %292 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %B2, i64 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %246) #3
  %293 = bitcast [3 x [3 x double]]* %C2 to i64*
  %294 = load i64, i64* %293, align 16, !tbaa !190
  store i64 %294, i64* %248, align 16, !tbaa !190
  %295 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 1, i64 0
  %296 = bitcast double* %295 to i64*
  %297 = load i64, i64* %296, align 8, !tbaa !190
  store i64 %297, i64* %255, align 8, !tbaa !190
  %298 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 2, i64 0
  %299 = bitcast double* %298 to i64*
  %300 = load i64, i64* %299, align 16, !tbaa !190
  store i64 %300, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %292, double* %247, double* %247, double 0x41EFFFF4D7600000) #3
  %301 = load i64, i64* %248, align 16, !tbaa !190
  %302 = load i64, i64* %255, align 8, !tbaa !190
  %303 = load i64, i64* %260, align 16, !tbaa !190
  %304 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 0, i64 1
  %305 = bitcast double* %304 to i64*
  %306 = load i64, i64* %305, align 8, !tbaa !190
  store i64 %306, i64* %248, align 16, !tbaa !190
  %307 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 1, i64 1
  %308 = bitcast double* %307 to i64*
  %309 = load i64, i64* %308, align 8, !tbaa !190
  store i64 %309, i64* %255, align 8, !tbaa !190
  %310 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 2, i64 1
  %311 = bitcast double* %310 to i64*
  %312 = load i64, i64* %311, align 8, !tbaa !190
  store i64 %312, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %292, double* %247, double* %247, double 0x41EFFFF4D7600000) #3
  %313 = load i64, i64* %248, align 16, !tbaa !190
  %314 = load i64, i64* %255, align 8, !tbaa !190
  %315 = load i64, i64* %260, align 16, !tbaa !190
  %316 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 0, i64 2
  %317 = bitcast double* %316 to i64*
  %318 = load i64, i64* %317, align 16, !tbaa !190
  store i64 %318, i64* %248, align 16, !tbaa !190
  %319 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 1, i64 2
  %320 = bitcast double* %319 to i64*
  %321 = load i64, i64* %320, align 8, !tbaa !190
  store i64 %321, i64* %255, align 8, !tbaa !190
  %322 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 2, i64 2
  %323 = bitcast double* %322 to i64*
  %324 = load i64, i64* %323, align 16, !tbaa !190
  store i64 %324, i64* %260, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %292, double* %247, double* %247, double 0x41EFFFF4D7600000) #3
  %325 = load i64, i64* %248, align 16, !tbaa !190
  %326 = load i64, i64* %255, align 8, !tbaa !190
  %327 = load i64, i64* %260, align 16, !tbaa !190
  store i64 %301, i64* %293, align 16
  store i64 %313, i64* %305, align 8
  store i64 %325, i64* %317, align 16
  %328 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 1
  %329 = bitcast [3 x double]* %328 to i64*
  store i64 %302, i64* %329, align 8
  store i64 %314, i64* %308, align 8
  store i64 %326, i64* %320, align 8
  %330 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 2
  %331 = bitcast [3 x double]* %330 to i64*
  store i64 %303, i64* %331, align 16
  store i64 %315, i64* %311, align 8
  store i64 %327, i64* %323, align 16
  call void @llvm.lifetime.end(i64 24, i8* %246) #3
  br label %332

; <label>:332                                     ; preds = %244, %242
  %333 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  call fastcc void @MatVecModM([3 x double]* %236, double* %333, double* %333, double 0x41EFFFFFE5E00000)
  %334 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %C2, i64 0, i64 0
  %335 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  call fastcc void @MatVecModM([3 x double]* %334, double* %335, double* %335, double 0x41EFFFF4D7600000)
  call void @llvm.lifetime.end(i64 72, i8* %4) #3
  call void @llvm.lifetime.end(i64 72, i8* %3) #3
  call void @llvm.lifetime.end(i64 72, i8* %2) #3
  call void @llvm.lifetime.end(i64 72, i8* %1) #3
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @MatPowModM([3 x double]* nocapture readonly %A, [3 x double]* nocapture %B, double %m, i64 %n) unnamed_addr #11 {
.preheader2:
  %W = alloca [3 x [3 x double]], align 16
  %0 = bitcast [3 x [3 x double]]* %W to i8*
  call void @llvm.lifetime.start(i64 72, i8* %0) #3
  %1 = bitcast [3 x double]* %A to i64*
  %2 = load i64, i64* %1, align 8, !tbaa !190
  %3 = bitcast [3 x [3 x double]]* %W to i64*
  store i64 %2, i64* %3, align 16, !tbaa !190
  %4 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 0, i64 0
  store double 0.000000e+00, double* %4, align 8, !tbaa !190
  %5 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 0, i64 1
  %6 = bitcast double* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !190
  %8 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 0, i64 1
  %9 = bitcast double* %8 to i64*
  store i64 %7, i64* %9, align 8, !tbaa !190
  %10 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 0, i64 1
  store double 0.000000e+00, double* %10, align 8, !tbaa !190
  %11 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 0, i64 2
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !190
  %14 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 0, i64 2
  %15 = bitcast double* %14 to i64*
  store i64 %13, i64* %15, align 16, !tbaa !190
  %16 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 0, i64 2
  store double 0.000000e+00, double* %16, align 8, !tbaa !190
  %17 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 1, i64 0
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !190
  %20 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 0
  %21 = bitcast double* %20 to i64*
  store i64 %19, i64* %21, align 8, !tbaa !190
  %22 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 0
  store double 0.000000e+00, double* %22, align 8, !tbaa !190
  %23 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 1, i64 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !190
  %26 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 1
  %27 = bitcast double* %26 to i64*
  store i64 %25, i64* %27, align 8, !tbaa !190
  %28 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 1
  store double 0.000000e+00, double* %28, align 8, !tbaa !190
  %29 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 1, i64 2
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !190
  %32 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 2
  %33 = bitcast double* %32 to i64*
  store i64 %31, i64* %33, align 8, !tbaa !190
  %34 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 2
  store double 0.000000e+00, double* %34, align 8, !tbaa !190
  %35 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 2, i64 0
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !190
  %38 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 0
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 16, !tbaa !190
  %40 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 0
  store double 0.000000e+00, double* %40, align 8, !tbaa !190
  %41 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 2, i64 1
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !190
  %44 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 1
  %45 = bitcast double* %44 to i64*
  store i64 %43, i64* %45, align 8, !tbaa !190
  %46 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 1
  store double 0.000000e+00, double* %46, align 8, !tbaa !190
  %47 = getelementptr inbounds [3 x double], [3 x double]* %A, i64 2, i64 2
  %48 = bitcast double* %47 to i64*
  %49 = load i64, i64* %48, align 8, !tbaa !190
  %50 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 2
  %51 = bitcast double* %50 to i64*
  store i64 %49, i64* %51, align 16, !tbaa !190
  %52 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 2
  store double 1.000000e+00, double* %4, align 8, !tbaa !190
  store double 1.000000e+00, double* %28, align 8, !tbaa !190
  store double 1.000000e+00, double* %52, align 8, !tbaa !190
  %53 = icmp sgt i64 %n, 0
  br i1 %53, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader2
  %54 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 0
  br label %55

; <label>:55                                      ; preds = %59, %.lr.ph
  %.03 = phi i64 [ %n, %.lr.ph ], [ %60, %59 ]
  %56 = and i64 %.03, 1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %59, label %58

; <label>:58                                      ; preds = %55
  call fastcc void @MatMatModM([3 x double]* %54, [3 x double]* %B, [3 x double]* %B, double %m)
  br label %59

; <label>:59                                      ; preds = %58, %55
  call fastcc void @MatMatModM([3 x double]* %54, [3 x double]* %54, [3 x double]* %54, double %m)
  %60 = sdiv i64 %.03, 2
  %61 = icmp sgt i64 %.03, 1
  br i1 %61, label %55, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %59
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader2
  call void @llvm.lifetime.end(i64 72, i8* %0) #3
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @MatMatModM([3 x double]* nocapture readonly %A, [3 x double]* nocapture readonly %B, [3 x double]* nocapture %C, double %m) unnamed_addr #11 {
.preheader2:
  %V = alloca [3 x double], align 16
  %W = alloca [3 x [3 x double]], align 16
  %0 = bitcast [3 x double]* %V to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #3
  %1 = bitcast [3 x [3 x double]]* %W to i8*
  call void @llvm.lifetime.start(i64 72, i8* %1) #3
  %2 = getelementptr inbounds [3 x double], [3 x double]* %V, i64 0, i64 0
  %3 = bitcast [3 x double]* %V to i64*
  %4 = bitcast [3 x double]* %B to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !190
  store i64 %5, i64* %3, align 16, !tbaa !190
  %6 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 0
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !190
  %9 = getelementptr inbounds [3 x double], [3 x double]* %V, i64 0, i64 1
  %10 = bitcast double* %9 to i64*
  store i64 %8, i64* %10, align 8, !tbaa !190
  %11 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 0
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !190
  %14 = getelementptr inbounds [3 x double], [3 x double]* %V, i64 0, i64 2
  %15 = bitcast double* %14 to i64*
  store i64 %13, i64* %15, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %A, double* %2, double* %2, double %m)
  %16 = load i64, i64* %3, align 16, !tbaa !190
  %17 = bitcast [3 x [3 x double]]* %W to i64*
  store i64 %16, i64* %17, align 16, !tbaa !190
  %18 = load i64, i64* %10, align 8, !tbaa !190
  %19 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 0
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8, !tbaa !190
  %21 = load i64, i64* %15, align 16, !tbaa !190
  %22 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 0
  %23 = bitcast double* %22 to i64*
  store i64 %21, i64* %23, align 16, !tbaa !190
  %24 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 0, i64 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !190
  store i64 %26, i64* %3, align 16, !tbaa !190
  %27 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !190
  store i64 %29, i64* %10, align 8, !tbaa !190
  %30 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !190
  store i64 %32, i64* %15, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %A, double* %2, double* %2, double %m)
  %33 = load i64, i64* %3, align 16, !tbaa !190
  %34 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 0, i64 1
  %35 = bitcast double* %34 to i64*
  store i64 %33, i64* %35, align 8, !tbaa !190
  %36 = load i64, i64* %10, align 8, !tbaa !190
  %37 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 1
  %38 = bitcast double* %37 to i64*
  store i64 %36, i64* %38, align 8, !tbaa !190
  %39 = load i64, i64* %15, align 16, !tbaa !190
  %40 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 1
  %41 = bitcast double* %40 to i64*
  store i64 %39, i64* %41, align 8, !tbaa !190
  %42 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 0, i64 2
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !190
  store i64 %44, i64* %3, align 16, !tbaa !190
  %45 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 1, i64 2
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !190
  store i64 %47, i64* %10, align 8, !tbaa !190
  %48 = getelementptr inbounds [3 x double], [3 x double]* %B, i64 2, i64 2
  %49 = bitcast double* %48 to i64*
  %50 = load i64, i64* %49, align 8, !tbaa !190
  store i64 %50, i64* %15, align 16, !tbaa !190
  call fastcc void @MatVecModM([3 x double]* %A, double* %2, double* %2, double %m)
  %51 = load i64, i64* %3, align 16, !tbaa !190
  %52 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 0, i64 2
  %53 = bitcast double* %52 to i64*
  store i64 %51, i64* %53, align 16, !tbaa !190
  %54 = load i64, i64* %10, align 8, !tbaa !190
  %55 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 1, i64 2
  %56 = bitcast double* %55 to i64*
  store i64 %54, i64* %56, align 8, !tbaa !190
  %57 = load i64, i64* %15, align 16, !tbaa !190
  %58 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %W, i64 0, i64 2, i64 2
  %59 = bitcast double* %58 to i64*
  store i64 %57, i64* %59, align 16, !tbaa !190
  %scevgep20 = bitcast [3 x double]* %C to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep20, i8* %1, i64 24, i32 8, i1 false)
  %scevgep.1 = getelementptr [3 x double], [3 x double]* %C, i64 1, i64 0
  %scevgep20.1 = bitcast double* %scevgep.1 to i8*
  %scevgep2122.1 = bitcast double* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep20.1, i8* %scevgep2122.1, i64 24, i32 8, i1 false)
  %scevgep.2 = getelementptr [3 x double], [3 x double]* %C, i64 2, i64 0
  %scevgep20.2 = bitcast double* %scevgep.2 to i8*
  %scevgep2122.2 = bitcast double* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep20.2, i8* %scevgep2122.2, i64 24, i32 8, i1 false)
  call void @llvm.lifetime.end(i64 72, i8* %1) #3
  call void @llvm.lifetime.end(i64 24, i8* %0) #3
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_GetState(%struct.RngStream_InfoState* nocapture readonly %g, i64* nocapture %seed) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  %2 = load double, double* %1, align 8, !tbaa !190
  %3 = fptoui double %2 to i64
  store i64 %3, i64* %seed, align 8, !tbaa !287
  %4 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  %5 = load double, double* %4, align 8, !tbaa !190
  %6 = fptoui double %5 to i64
  %7 = getelementptr inbounds i64, i64* %seed, i64 1
  store i64 %6, i64* %7, align 8, !tbaa !287
  %8 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %9 = load double, double* %8, align 8, !tbaa !190
  %10 = fptoui double %9 to i64
  %11 = getelementptr inbounds i64, i64* %seed, i64 2
  store i64 %10, i64* %11, align 8, !tbaa !287
  %12 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %13 = load double, double* %12, align 8, !tbaa !190
  %14 = fptoui double %13 to i64
  %15 = getelementptr inbounds i64, i64* %seed, i64 3
  store i64 %14, i64* %15, align 8, !tbaa !287
  %16 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %17 = load double, double* %16, align 8, !tbaa !190
  %18 = fptoui double %17 to i64
  %19 = getelementptr inbounds i64, i64* %seed, i64 4
  store i64 %18, i64* %19, align 8, !tbaa !287
  %20 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %21 = load double, double* %20, align 8, !tbaa !190
  %22 = fptoui double %21 to i64
  %23 = getelementptr inbounds i64, i64* %seed, i64 5
  store i64 %22, i64* %23, align 8, !tbaa !287
  ret void
}

; Function Attrs: nounwind uwtable
define void @RngStream_WriteState(%struct.RngStream_InfoState* readonly %g) #0 {
  %1 = icmp eq %struct.RngStream_InfoState* %g, null
  br i1 %1, label %37, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1.217, i64 0, i64 0))
  %4 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 5
  %5 = load i8*, i8** %4, align 8, !tbaa !285
  %6 = icmp eq i8* %5, null
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %2
  %strlenfirst = load i8, i8* %5, align 1
  %8 = icmp eq i8 %strlenfirst, 0
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %7
  %10 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.218, i64 0, i64 0), i8* nonnull %5)
  br label %11

; <label>:11                                      ; preds = %9, %7, %2
  %12 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.219, i64 0, i64 0))
  %13 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  %14 = load double, double* %13, align 8, !tbaa !190
  %15 = fptoui double %14 to i64
  %16 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %15)
  %17 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  %18 = load double, double* %17, align 8, !tbaa !190
  %19 = fptoui double %18 to i64
  %20 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %19)
  %21 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %22 = load double, double* %21, align 8, !tbaa !190
  %23 = fptoui double %22 to i64
  %24 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %23)
  %25 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %26 = load double, double* %25, align 8, !tbaa !190
  %27 = fptoui double %26 to i64
  %28 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %27)
  %29 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %30 = load double, double* %29, align 8, !tbaa !190
  %31 = fptoui double %30 to i64
  %32 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %31)
  %33 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %34 = load double, double* %33, align 8, !tbaa !190
  %35 = fptoui double %34 to i64
  %36 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.221, i64 0, i64 0), i64 %35)
  br label %37

; <label>:37                                      ; preds = %11, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @RngStream_WriteStateFull(%struct.RngStream_InfoState* readonly %g) #0 {
  %1 = icmp eq %struct.RngStream_InfoState* %g, null
  br i1 %1, label %97, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6.222, i64 0, i64 0))
  %4 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 5
  %5 = load i8*, i8** %4, align 8, !tbaa !285
  %6 = icmp eq i8* %5, null
  br i1 %6, label %11, label %7

; <label>:7                                       ; preds = %2
  %strlenfirst = load i8, i8* %5, align 1
  %8 = icmp eq i8 %strlenfirst, 0
  br i1 %8, label %11, label %9

; <label>:9                                       ; preds = %7
  %10 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.218, i64 0, i64 0), i8* nonnull %5)
  br label %11

; <label>:11                                      ; preds = %9, %7, %2
  %12 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 3
  %13 = load i32, i32* %12, align 8, !tbaa !289
  %14 = icmp ne i32 %13, 0
  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.223, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.224, i64 0, i64 0)
  %16 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7.225, i64 0, i64 0), i8* %15)
  %17 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 4
  %18 = load i32, i32* %17, align 4, !tbaa !290
  %19 = icmp ne i32 %18, 0
  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.223, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.224, i64 0, i64 0)
  %21 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10.226, i64 0, i64 0), i8* %20)
  %22 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11.227, i64 0, i64 0))
  %23 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 0
  %24 = load double, double* %23, align 8, !tbaa !190
  %25 = fptoui double %24 to i64
  %26 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %25)
  %27 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 1
  %28 = load double, double* %27, align 8, !tbaa !190
  %29 = fptoui double %28 to i64
  %30 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %29)
  %31 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 2
  %32 = load double, double* %31, align 8, !tbaa !190
  %33 = fptoui double %32 to i64
  %34 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %33)
  %35 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 3
  %36 = load double, double* %35, align 8, !tbaa !190
  %37 = fptoui double %36 to i64
  %38 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %37)
  %39 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 4
  %40 = load double, double* %39, align 8, !tbaa !190
  %41 = fptoui double %40 to i64
  %42 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %41)
  %43 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 2, i64 5
  %44 = load double, double* %43, align 8, !tbaa !190
  %45 = fptoui double %44 to i64
  %46 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.228, i64 0, i64 0), i64 %45)
  %47 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13.229, i64 0, i64 0))
  %48 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 0
  %49 = load double, double* %48, align 8, !tbaa !190
  %50 = fptoui double %49 to i64
  %51 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %50)
  %52 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 1
  %53 = load double, double* %52, align 8, !tbaa !190
  %54 = fptoui double %53 to i64
  %55 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %54)
  %56 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 2
  %57 = load double, double* %56, align 8, !tbaa !190
  %58 = fptoui double %57 to i64
  %59 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %58)
  %60 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 3
  %61 = load double, double* %60, align 8, !tbaa !190
  %62 = fptoui double %61 to i64
  %63 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %62)
  %64 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 4
  %65 = load double, double* %64, align 8, !tbaa !190
  %66 = fptoui double %65 to i64
  %67 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %66)
  %68 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 1, i64 5
  %69 = load double, double* %68, align 8, !tbaa !190
  %70 = fptoui double %69 to i64
  %71 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.228, i64 0, i64 0), i64 %70)
  %72 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14.230, i64 0, i64 0))
  %73 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  %74 = load double, double* %73, align 8, !tbaa !190
  %75 = fptoui double %74 to i64
  %76 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %75)
  %77 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  %78 = load double, double* %77, align 8, !tbaa !190
  %79 = fptoui double %78 to i64
  %80 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %79)
  %81 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %82 = load double, double* %81, align 8, !tbaa !190
  %83 = fptoui double %82 to i64
  %84 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %83)
  %85 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %86 = load double, double* %85, align 8, !tbaa !190
  %87 = fptoui double %86 to i64
  %88 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %87)
  %89 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %90 = load double, double* %89, align 8, !tbaa !190
  %91 = fptoui double %90 to i64
  %92 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.220, i64 0, i64 0), i64 %91)
  %93 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %94 = load double, double* %93, align 8, !tbaa !190
  %95 = fptoui double %94 to i64
  %96 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.221, i64 0, i64 0), i64 %95)
  br label %97

; <label>:97                                      ; preds = %11, %0
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_IncreasedPrecis(%struct.RngStream_InfoState* nocapture %g, i32 %incp) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 4
  store i32 %incp, i32* %1, align 4, !tbaa !290
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @RngStream_SetAntithetic(%struct.RngStream_InfoState* nocapture %g, i32 %a) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 3
  store i32 %a, i32* %1, align 8, !tbaa !289
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define double @RngStream_RandU01(%struct.RngStream_InfoState* nocapture %g) #11 {
  %1 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 4
  %2 = load i32, i32* %1, align 4, !tbaa !290
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 1
  %5 = load double, double* %4, align 8, !tbaa !190
  %6 = fmul double %5, 1.403580e+06
  %7 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 0
  %8 = load double, double* %7, align 8, !tbaa !190
  %9 = fmul double %8, 8.107280e+05
  %10 = fsub double %6, %9
  %11 = fdiv double %10, 0x41EFFFFFE5E00000
  %12 = fptosi double %11 to i64
  %13 = sitofp i64 %12 to double
  %14 = fmul double %13, 0x41EFFFFFE5E00000
  %15 = fsub double %10, %14
  %16 = fcmp olt double %15, 0.000000e+00
  %17 = fadd double %15, 0x41EFFFFFE5E00000
  %p1.0.i = select i1 %16, double %17, double %15
  br i1 %3, label %89, label %18

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !190
  %22 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %23 = load double, double* %22, align 8, !tbaa !190
  %24 = fmul double %23, 5.276120e+05
  %25 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %26 = load double, double* %25, align 8, !tbaa !190
  %27 = fmul double %26, 1.370589e+06
  %28 = fsub double %24, %27
  %29 = fdiv double %28, 0x41EFFFF4D7600000
  %30 = fptosi double %29 to i64
  %31 = sitofp i64 %30 to double
  %32 = fmul double %31, 0x41EFFFF4D7600000
  %33 = fsub double %28, %32
  %34 = fcmp olt double %33, 0.000000e+00
  %35 = fadd double %33, 0x41EFFFF4D7600000
  %p2.0.i.i = select i1 %34, double %35, double %33
  %36 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %37 = load double, double* %36, align 8, !tbaa !190
  %38 = fcmp ogt double %p1.0.i, %p2.0.i.i
  %39 = fsub double %p1.0.i, %p2.0.i.i
  %40 = fadd double %39, 0x41EFFFFFE5E00000
  %.sink.i.i = select i1 %38, double %39, double %40
  %41 = fmul double %.sink.i.i, 0x3DF000000D00000B
  %42 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 3
  %43 = load i32, i32* %42, align 8, !tbaa !289
  %44 = icmp ne i32 %43, 0
  %45 = fsub double 1.000000e+00, %41
  %46 = select i1 %44, double %45, double %41
  %47 = icmp eq i32 %43, 0
  %48 = bitcast i64 %21 to double
  %49 = fmul double %48, 1.403580e+06
  %50 = fmul double %5, 8.107280e+05
  %51 = fsub double %49, %50
  %52 = fdiv double %51, 0x41EFFFFFE5E00000
  %53 = fptosi double %52 to i64
  %54 = sitofp i64 %53 to double
  %55 = fmul double %54, 0x41EFFFFFE5E00000
  %56 = fsub double %51, %55
  %57 = fcmp olt double %56, 0.000000e+00
  %58 = fadd double %56, 0x41EFFFFFE5E00000
  %p1.0.i1.i = select i1 %57, double %58, double %56
  %59 = bitcast %struct.RngStream_InfoState* %g to i64*
  store i64 %21, i64* %59, align 8, !tbaa !190
  store double %p1.0.i, double* %4, align 8, !tbaa !190
  store double %p1.0.i1.i, double* %19, align 8, !tbaa !190
  %60 = fmul double %p2.0.i.i, 5.276120e+05
  %61 = fmul double %37, 1.370589e+06
  %62 = fsub double %60, %61
  %63 = fdiv double %62, 0x41EFFFF4D7600000
  %64 = fptosi double %63 to i64
  %65 = sitofp i64 %64 to double
  %66 = fmul double %65, 0x41EFFFF4D7600000
  %67 = fsub double %62, %66
  %68 = fcmp olt double %67, 0.000000e+00
  %69 = fadd double %67, 0x41EFFFF4D7600000
  %p2.0.i2.i = select i1 %68, double %69, double %67
  store double %23, double* %25, align 8, !tbaa !190
  store double %p2.0.i.i, double* %36, align 8, !tbaa !190
  store double %p2.0.i2.i, double* %22, align 8, !tbaa !190
  %70 = fcmp ogt double %p1.0.i1.i, %p2.0.i2.i
  %71 = fsub double %p1.0.i1.i, %p2.0.i2.i
  %72 = fadd double %71, 0x41EFFFFFE5E00000
  %.sink.i3.i = select i1 %70, double %71, double %72
  %73 = fmul double %.sink.i3.i, 0x3DF000000D00000B
  %74 = fsub double 1.000000e+00, %73
  %75 = select i1 %44, double %74, double %73
  br i1 %47, label %76, label %82

; <label>:76                                      ; preds = %18
  %77 = fmul double %75, 0x3E70000000000000
  %78 = fadd double %46, %77
  %79 = fcmp olt double %78, 1.000000e+00
  %80 = fadd double %78, -1.000000e+00
  %81 = select i1 %79, double %78, double %80
  br label %U01d.exit

; <label>:82                                      ; preds = %18
  %83 = fadd double %75, -1.000000e+00
  %84 = fmul double %83, 0x3E70000000000000
  %85 = fadd double %46, %84
  %86 = fcmp olt double %85, 0.000000e+00
  %87 = fadd double %85, 1.000000e+00
  %88 = select i1 %86, double %87, double %85
  br label %U01d.exit

; <label>:89                                      ; preds = %0
  %90 = bitcast double* %4 to i64*
  store double %5, double* %7, align 8, !tbaa !190
  %91 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 2
  %92 = bitcast double* %91 to i64*
  %93 = load i64, i64* %92, align 8, !tbaa !190
  store i64 %93, i64* %90, align 8, !tbaa !190
  store double %p1.0.i, double* %91, align 8, !tbaa !190
  %94 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 5
  %95 = load double, double* %94, align 8, !tbaa !190
  %96 = fmul double %95, 5.276120e+05
  %97 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 3
  %98 = load double, double* %97, align 8, !tbaa !190
  %99 = fmul double %98, 1.370589e+06
  %100 = fsub double %96, %99
  %101 = fdiv double %100, 0x41EFFFF4D7600000
  %102 = fptosi double %101 to i64
  %103 = sitofp i64 %102 to double
  %104 = fmul double %103, 0x41EFFFF4D7600000
  %105 = fsub double %100, %104
  %106 = fcmp olt double %105, 0.000000e+00
  %107 = fadd double %105, 0x41EFFFF4D7600000
  %p2.0.i = select i1 %106, double %107, double %105
  %108 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 0, i64 4
  %109 = bitcast double* %108 to i64*
  %110 = load i64, i64* %109, align 8, !tbaa !190
  %111 = bitcast double* %97 to i64*
  store i64 %110, i64* %111, align 8, !tbaa !190
  store double %95, double* %108, align 8, !tbaa !190
  store double %p2.0.i, double* %94, align 8, !tbaa !190
  %112 = fcmp ogt double %p1.0.i, %p2.0.i
  %113 = fsub double %p1.0.i, %p2.0.i
  %114 = fadd double %113, 0x41EFFFFFE5E00000
  %.sink.i = select i1 %112, double %113, double %114
  %115 = fmul double %.sink.i, 0x3DF000000D00000B
  %116 = getelementptr inbounds %struct.RngStream_InfoState, %struct.RngStream_InfoState* %g, i64 0, i32 3
  %117 = load i32, i32* %116, align 8, !tbaa !289
  %118 = icmp ne i32 %117, 0
  %119 = fsub double 1.000000e+00, %115
  %120 = select i1 %118, double %119, double %115
  br label %U01d.exit

U01d.exit:                                        ; preds = %89, %82, %76
  %.0 = phi double [ %120, %89 ], [ %81, %76 ], [ %88, %82 ]
  ret double %.0
}

; Function Attrs: norecurse nounwind uwtable
define i32 @RngStream_RandInt(%struct.RngStream_InfoState* nocapture %g, i32 %i, i32 %j) #11 {
  %1 = sub nsw i32 %j, %i
  %2 = sitofp i32 %1 to double
  %3 = fadd double %2, 1.000000e+00
  %4 = tail call double @RngStream_RandU01(%struct.RngStream_InfoState* %g)
  %5 = fmul double %3, %4
  %6 = fptosi double %5 to i32
  %7 = add nsw i32 %6, %i
  ret i32 %7
}

; Function Attrs: norecurse nounwind uwtable
define i32 @RngStream_RandUInt(%struct.RngStream_InfoState* nocapture %g, i32 %i, i32 %j) #11 {
  %1 = sub i32 %j, %i
  %2 = uitofp i32 %1 to double
  %3 = fadd double %2, 1.000000e+00
  %4 = tail call double @RngStream_RandU01(%struct.RngStream_InfoState* %g)
  %5 = fmul double %3, %4
  %6 = fptoui double %5 to i32
  %7 = add i32 %6, %i
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define i32 @restart_read(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %mstepall = alloca i32, align 4
  %mi = alloca i32, align 4
  %ntracer = alloca i32, align 4
  %etracer = alloca double, align 8
  %ptracer = alloca [4 x double], align 16
  %cdum = alloca [29 x i8], align 16
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2
  %2 = bitcast i32* %mstepall to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #3
  %3 = bitcast i32* %mi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #3
  %4 = bitcast i32* %ntracer to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #3
  %5 = bitcast double* %etracer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #3
  %6 = bitcast [4 x double]* %ptracer to i8*
  call void @llvm.lifetime.start(i64 32, i8* %6) #3
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 33
  %8 = load i32, i32* %7, align 8, !tbaa !182
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %10 = load i32, i32* %9, align 4, !tbaa !197
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %12 = load i32, i32* %11, align 4, !tbaa !152
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %14 = load i32, i32* %13, align 4, !tbaa !247
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 7
  %16 = bitcast double** %15 to i8**
  %17 = load i8*, i8** %16, align 8, !tbaa !126
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 21
  %19 = bitcast double** %18 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !54
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %22 = bitcast double** %21 to i8**
  %23 = load i8*, i8** %22, align 8, !tbaa !60
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 11
  %25 = bitcast double** %24 to i8**
  %26 = load i8*, i8** %25, align 8, !tbaa !56
  %27 = bitcast %struct.gtc_particle_data_t* %1 to i8**
  %28 = load i8*, i8** %27, align 8, !tbaa !85
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %30 = bitcast double** %29 to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !86
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %33 = bitcast double** %32 to i8**
  %34 = load i8*, i8** %33, align 8, !tbaa !87
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %36 = bitcast double** %35 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !88
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %39 = bitcast double** %38 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !89
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %42 = bitcast double** %41 to i8**
  %43 = load i8*, i8** %42, align 8, !tbaa !90
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %45 = bitcast double** %44 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !96
  %47 = getelementptr inbounds [29 x i8], [29 x i8]* %cdum, i64 0, i64 0
  call void @llvm.lifetime.start(i64 29, i8* %47) #3
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %49 = load i32, i32* %48, align 8, !tbaa !27
  %50 = call i32 (i8*, i8*, ...) @sprintf(i8* %47, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.233, i64 0, i64 0), i32 %49) #3
  %51 = call %struct._IO_FILE* @fopen(i8* %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1.234, i64 0, i64 0))
  %52 = icmp eq %struct._IO_FILE* %51, null
  br i1 %52, label %53, label %56

; <label>:53                                      ; preds = %0
  %54 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2.235, i64 0, i64 0))
  %55 = tail call i32 @MPI_Abort(i32 1140850688, i32 1) #3
  br label %56

; <label>:56                                      ; preds = %53, %0
  %57 = call i64 @fread(i8* %2, i64 4, i64 1, %struct._IO_FILE* %51)
  %58 = icmp eq i32 %49, 0
  %59 = call i64 @fread(i8* %3, i64 4, i64 1, %struct._IO_FILE* %51)
  %60 = call i64 @fread(i8* %4, i64 4, i64 1, %struct._IO_FILE* %51)
  %61 = sext i32 %8 to i64
  %62 = tail call i64 @fread(i8* %17, i64 8, i64 %61, %struct._IO_FILE* %51)
  %63 = tail call i64 @fread(i8* %20, i64 8, i64 %61, %struct._IO_FILE* %51)
  %64 = add nsw i32 %10, 1
  %65 = mul nsw i32 %14, %64
  %66 = sext i32 %65 to i64
  %67 = tail call i64 @fread(i8* %23, i64 8, i64 %66, %struct._IO_FILE* %51)
  %68 = add nsw i32 %12, 1
  %69 = sext i32 %68 to i64
  %70 = tail call i64 @fread(i8* %26, i64 8, i64 %69, %struct._IO_FILE* %51)
  br i1 %58, label %71, label %._crit_edge

._crit_edge:                                      ; preds = %56
  %.pre12 = bitcast [4 x double]* %ptracer to i64*
  %.pre13 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 1
  %.pre15 = bitcast double* %.pre13 to i64*
  %.pre17 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 2
  %.pre19 = bitcast double* %.pre17 to i64*
  %.pre21 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 3
  %.pre23 = bitcast double* %.pre21 to i64*
  %.pre25 = bitcast double* %etracer to i64*
  br label %74

; <label>:71                                      ; preds = %56
  %72 = call i64 @fread(i8* %5, i64 8, i64 1, %struct._IO_FILE* %51)
  %73 = call i64 @fread(i8* %6, i64 8, i64 4, %struct._IO_FILE* %51)
  %.phi.trans.insert = bitcast [4 x double]* %ptracer to i64*
  %.pre = load i64, i64* %.phi.trans.insert, align 16, !tbaa !190
  %.phi.trans.insert1 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 1
  %.phi.trans.insert2 = bitcast double* %.phi.trans.insert1 to i64*
  %.pre3 = load i64, i64* %.phi.trans.insert2, align 8, !tbaa !190
  %.phi.trans.insert4 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 2
  %.phi.trans.insert5 = bitcast double* %.phi.trans.insert4 to i64*
  %.pre6 = load i64, i64* %.phi.trans.insert5, align 16, !tbaa !190
  %.phi.trans.insert7 = getelementptr inbounds [4 x double], [4 x double]* %ptracer, i64 0, i64 3
  %.phi.trans.insert8 = bitcast double* %.phi.trans.insert7 to i64*
  %.pre9 = load i64, i64* %.phi.trans.insert8, align 8, !tbaa !190
  %.phi.trans.insert10 = bitcast double* %etracer to i64*
  %.pre11 = load i64, i64* %.phi.trans.insert10, align 8, !tbaa !190
  br label %74

; <label>:74                                      ; preds = %._crit_edge, %71
  %.pre-phi26 = phi i64* [ %.pre25, %._crit_edge ], [ %.phi.trans.insert10, %71 ]
  %.pre-phi24 = phi i64* [ %.pre23, %._crit_edge ], [ %.phi.trans.insert8, %71 ]
  %.pre-phi22 = phi double* [ %.pre21, %._crit_edge ], [ %.phi.trans.insert7, %71 ]
  %.pre-phi20 = phi i64* [ %.pre19, %._crit_edge ], [ %.phi.trans.insert5, %71 ]
  %.pre-phi18 = phi double* [ %.pre17, %._crit_edge ], [ %.phi.trans.insert4, %71 ]
  %.pre-phi16 = phi i64* [ %.pre15, %._crit_edge ], [ %.phi.trans.insert2, %71 ]
  %.pre-phi14 = phi double* [ %.pre13, %._crit_edge ], [ %.phi.trans.insert1, %71 ]
  %.pre-phi = phi i64* [ %.pre12, %._crit_edge ], [ %.phi.trans.insert, %71 ]
  %75 = phi i64 [ %.pre11, %71 ], [ undef, %._crit_edge ]
  %76 = phi i64 [ %.pre9, %71 ], [ undef, %._crit_edge ]
  %77 = phi i64 [ %.pre6, %71 ], [ undef, %._crit_edge ]
  %78 = phi i64 [ %.pre3, %71 ], [ undef, %._crit_edge ]
  %79 = phi i64 [ %.pre, %71 ], [ undef, %._crit_edge ]
  %80 = load i32, i32* %mi, align 4, !tbaa !1
  %81 = sext i32 %80 to i64
  %82 = tail call i64 @fread(i8* %28, i64 8, i64 %81, %struct._IO_FILE* %51)
  %83 = tail call i64 @fread(i8* %31, i64 8, i64 %81, %struct._IO_FILE* %51)
  %84 = tail call i64 @fread(i8* %34, i64 8, i64 %81, %struct._IO_FILE* %51)
  %85 = tail call i64 @fread(i8* %37, i64 8, i64 %81, %struct._IO_FILE* %51)
  %86 = tail call i64 @fread(i8* %40, i64 8, i64 %81, %struct._IO_FILE* %51)
  %87 = tail call i64 @fread(i8* %43, i64 8, i64 %81, %struct._IO_FILE* %51)
  %88 = tail call i64 @fread(i8* %46, i64 8, i64 %81, %struct._IO_FILE* %51)
  %89 = load i32, i32* %mstepall, align 4, !tbaa !1
  %90 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 18
  store i32 %89, i32* %90, align 4, !tbaa !184
  %91 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  store i32 %80, i32* %91, align 8, !tbaa !192
  %92 = load i32, i32* %ntracer, align 4, !tbaa !1
  %93 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 15
  store i32 %92, i32* %93, align 8, !tbaa !291
  %94 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 12
  %95 = bitcast [4 x double]* %94 to i64*
  store i64 %79, i64* %95, align 8, !tbaa !190
  %96 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 12, i64 1
  %97 = bitcast double* %96 to i64*
  store i64 %78, i64* %97, align 8, !tbaa !190
  %98 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 12, i64 2
  %99 = bitcast double* %98 to i64*
  store i64 %77, i64* %99, align 8, !tbaa !190
  %100 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 12, i64 3
  %101 = bitcast double* %100 to i64*
  store i64 %76, i64* %101, align 8, !tbaa !190
  %102 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 2
  %103 = load double*, double** %102, align 8, !tbaa !121
  %104 = getelementptr inbounds double, double* %103, i64 14
  %105 = bitcast double* %104 to i64*
  store i64 %75, i64* %105, align 8, !tbaa !190
  %106 = tail call i32 @fclose(%struct._IO_FILE* %51)
  call void @llvm.lifetime.end(i64 29, i8* %47) #3
  call void @llvm.lifetime.end(i64 32, i8* %6) #3
  call void @llvm.lifetime.end(i64 8, i8* %5) #3
  call void @llvm.lifetime.end(i64 4, i8* %4) #3
  call void @llvm.lifetime.end(i64 4, i8* %3) #3
  call void @llvm.lifetime.end(i64 4, i8* %2) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #4

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind uwtable
define i32 @restart_write(%struct.gtc_bench_data_t* nocapture readonly %gtc_input) #0 {
  %mi = alloca i32, align 4
  %mzeta = alloca i32, align 4
  %nloc_over = alloca i32, align 4
  %cdum = alloca [64 x i8], align 16
  %mype = alloca i32, align 4
  %adios_handle = alloca i64, align 8
  %numberpe = alloca i32, align 4
  %adios_totalsize = alloca i64, align 8
  %1 = bitcast i32* %mi to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #3
  %2 = bitcast i32* %mzeta to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #3
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4, !tbaa !197
  store i32 %4, i32* %mzeta, align 4, !tbaa !1
  %5 = bitcast i32* %nloc_over to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #3
  %6 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 11
  %7 = load i32, i32* %6, align 4, !tbaa !247
  store i32 %7, i32* %nloc_over, align 4, !tbaa !1
  %8 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !192
  store i32 %9, i32* %mi, align 4, !tbaa !1
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %11 = load double*, double** %10, align 8, !tbaa !60
  %12 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %13 = load double*, double** %12, align 8, !tbaa !85
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %15 = load double*, double** %14, align 8, !tbaa !86
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %17 = load double*, double** %16, align 8, !tbaa !87
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %19 = load double*, double** %18, align 8, !tbaa !88
  %20 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %21 = load double*, double** %20, align 8, !tbaa !89
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %23 = load double*, double** %22, align 8, !tbaa !90
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 11
  %25 = load double*, double** %24, align 8, !tbaa !96
  %26 = getelementptr inbounds [64 x i8], [64 x i8]* %cdum, i64 0, i64 0
  call void @llvm.lifetime.start(i64 64, i8* %26) #3
  %27 = bitcast i32* %mype to i8*
  call void @llvm.lifetime.start(i64 4, i8* %27) #3
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %29 = bitcast i32* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %mype, align 4, !tbaa !1
  %32 = bitcast i64* %adios_handle to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #3
  %33 = bitcast i32* %numberpe to i8*
  call void @llvm.lifetime.start(i64 4, i8* %33) #3
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 1
  %35 = lshr i64 %30, 32
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %numberpe, align 4, !tbaa !1
  %37 = bitcast i64* %adios_totalsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %37) #3
  store i64 0, i64* %adios_totalsize, align 8, !tbaa !287
  %38 = load i32, i32* @istep, align 4, !tbaa !1
  %39 = call i32 (i8*, i8*, ...) @sprintf(i8* %26, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12.236, i64 0, i64 0), i32 %38) #3
  %40 = add nsw i32 %4, 1
  store i32 %40, i32* %mzeta, align 4, !tbaa !1
  %41 = call i32 (i64*, i8*, i8*, i8*, i32, ...) bitcast (i32 (...)* @adios_open to i32 (i64*, i8*, i8*, i8*, i32, ...)*)(i64* nonnull %adios_handle, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13.237, i64 0, i64 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14.238, i64 0, i64 0), i32 1140850688) #3
  %42 = shl i32 %40, 3
  %43 = mul nsw i32 %42, %7
  %factor = mul i32 %9, 56
  %44 = add i32 %43, 20
  %45 = add i32 %44, %factor
  %46 = sext i32 %45 to i64
  %47 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %48 = call i32 (i64, i64, i64*, ...) bitcast (i32 (...)* @adios_group_size to i32 (i64, i64, i64*, ...)*)(i64 %47, i64 %46, i64* nonnull %adios_totalsize) #3
  %49 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %50 = call i32 (i64, i8*, i32*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, i32*, ...)*)(i64 %49, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15.239, i64 0, i64 0), i32* nonnull %mi) #3
  %51 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %52 = call i32 (i64, i8*, i32*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, i32*, ...)*)(i64 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.240, i64 0, i64 0), i32* nonnull %mype) #3
  %53 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %54 = call i32 (i64, i8*, i32*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, i32*, ...)*)(i64 %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17.241, i64 0, i64 0), i32* nonnull %numberpe) #3
  %55 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %56 = call i32 (i64, i8*, i32*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, i32*, ...)*)(i64 %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18.242, i64 0, i64 0), i32* nonnull %mzeta) #3
  %57 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %58 = call i32 (i64, i8*, i32*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, i32*, ...)*)(i64 %57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19.243, i64 0, i64 0), i32* nonnull %nloc_over) #3
  %59 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %60 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %59, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i64 0, i64 0), double* %11) #3
  %61 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %62 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %61, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21.244, i64 0, i64 0), double* %13) #3
  %63 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %64 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %63, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22.245, i64 0, i64 0), double* %15) #3
  %65 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %66 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %65, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23.246, i64 0, i64 0), double* %17) #3
  %67 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %68 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24.247, i64 0, i64 0), double* %19) #3
  %69 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %70 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %69, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25.248, i64 0, i64 0), double* %21) #3
  %71 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %72 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26.249, i64 0, i64 0), double* %23) #3
  %73 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %74 = call i32 (i64, i8*, double*, ...) bitcast (i32 (...)* @adios_write to i32 (i64, i8*, double*, ...)*)(i64 %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.250, i64 0, i64 0), double* %25) #3
  %75 = load i32, i32* %mzeta, align 4, !tbaa !1
  %76 = add nsw i32 %75, -1
  store i32 %76, i32* %mzeta, align 4, !tbaa !1
  %77 = load i64, i64* %adios_handle, align 8, !tbaa !287
  %78 = call i32 (i64, ...) bitcast (i32 (...)* @adios_close to i32 (i64, ...)*)(i64 %77) #3
  call void @llvm.lifetime.end(i64 8, i8* %37) #3
  call void @llvm.lifetime.end(i64 4, i8* %33) #3
  call void @llvm.lifetime.end(i64 8, i8* %32) #3
  call void @llvm.lifetime.end(i64 4, i8* %27) #3
  call void @llvm.lifetime.end(i64 64, i8* %26) #3
  call void @llvm.lifetime.end(i64 4, i8* %5) #3
  call void @llvm.lifetime.end(i64 4, i8* %2) #3
  call void @llvm.lifetime.end(i64 4, i8* %1) #3
  ret i32 0
}

declare i32 @adios_open(...) #1

declare i32 @adios_group_size(...) #1

declare i32 @adios_write(...) #1

declare i32 @adios_close(...) #1

; Function Attrs: nounwind uwtable
define i32 @sum_plane_moments(%struct.gtc_bench_data_t* readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %2 = load i32, i32* %1, align 4, !tbaa !197
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %4 = load i32*, i32** %3, align 8, !tbaa !29
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %6 = load i32*, i32** %5, align 8, !tbaa !31
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 22
  %8 = load i32*, i32** %7, align 8, !tbaa !137
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 23
  %10 = load i32*, i32** %9, align 8, !tbaa !138
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 24
  %12 = load i32*, i32** %11, align 8, !tbaa !139
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 25
  %14 = load double*, double** %13, align 8, !tbaa !140
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 26
  %16 = bitcast i32* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 27
  %20 = lshr i64 %17, 32
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 28
  %23 = load i32*, i32** %22, align 8, !tbaa !141
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 29
  %25 = load i32*, i32** %24, align 8, !tbaa !142
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 30
  %27 = load i32*, i32** %26, align 8, !tbaa !143
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 31
  %29 = load double*, double** %28, align 8, !tbaa !144
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 32
  %31 = bitcast i32* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = trunc i64 %32 to i32
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 33
  %35 = lshr i64 %32, 32
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 14
  %38 = load double*, double** %37, align 8, !tbaa !133
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 18
  %40 = load i32, i32* %39, align 8, !tbaa !215
  %41 = sext i32 %33 to i64
  %42 = shl nsw i64 %41, 2
  %43 = tail call noalias i8* @malloc(i64 %42) #3
  %44 = bitcast i8* %43 to i32*
  %45 = mul nsw i64 %41, 20
  %46 = tail call noalias i8* @malloc(i64 %45) #3
  %47 = bitcast i8* %46 to %struct.MPI_Status*
  %48 = sext i32 %18 to i64
  %49 = shl nsw i64 %48, 2
  %50 = tail call noalias i8* @malloc(i64 %49) #3
  %51 = bitcast i8* %50 to i32*
  %52 = mul nsw i64 %48, 20
  %53 = tail call noalias i8* @malloc(i64 %52) #3
  %54 = bitcast i8* %53 to %struct.MPI_Status*
  %55 = tail call noalias i8* @malloc(i64 %49) #3
  %56 = bitcast i8* %55 to i32*
  %57 = tail call noalias i8* @malloc(i64 %52) #3
  %58 = bitcast i8* %57 to %struct.MPI_Status*
  %59 = tail call noalias i8* @malloc(i64 %42) #3
  %60 = bitcast i8* %59 to i32*
  %61 = tail call noalias i8* @malloc(i64 %45) #3
  %62 = bitcast i8* %61 to %struct.MPI_Status*
  %63 = icmp sgt i32 %33, 0
  br i1 %63, label %.lr.ph42, label %._crit_edge43

.lr.ph42:                                         ; preds = %0
  %64 = mul i32 %2, 7
  %65 = add i32 %64, 7
  %66 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %74

._crit_edge43.loopexit:                           ; preds = %74
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %._crit_edge43.loopexit, %0
  %offset.0.lcssa = phi i32 [ 0, %0 ], [ %99, %._crit_edge43.loopexit ]
  %67 = add nsw i32 %2, 1
  %68 = mul i32 %67, 7
  %69 = mul i32 %68, %36
  %70 = icmp eq i32 %offset.0.lcssa, %69
  br i1 %70, label %.preheader13, label %100

.preheader13:                                     ; preds = %._crit_edge43
  %71 = icmp sgt i32 %18, 0
  br i1 %71, label %.lr.ph37, label %._crit_edge38

.lr.ph37:                                         ; preds = %.preheader13
  %72 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  %73 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %105

; <label>:74                                      ; preds = %74, %.lr.ph42
  %indvars.iv70 = phi i64 [ 0, %.lr.ph42 ], [ %indvars.iv.next71, %74 ]
  %offset.039 = phi i32 [ 0, %.lr.ph42 ], [ %99, %74 ]
  %75 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv70
  %76 = load i32, i32* %75, align 4, !tbaa !1
  %77 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv70
  %78 = load i32, i32* %77, align 4, !tbaa !1
  %79 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv70
  %80 = load i32, i32* %79, align 4, !tbaa !1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %4, i64 %81
  %83 = load i32, i32* %82, align 4, !tbaa !1
  %84 = getelementptr inbounds i32, i32* %6, i64 %81
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = sext i32 %78 to i64
  %87 = getelementptr inbounds i32, i32* %4, i64 %86
  %88 = load i32, i32* %87, align 4, !tbaa !1
  %89 = add i32 %83, 1
  %90 = add i32 %89, %85
  %91 = sub i32 %90, %88
  %92 = mul i32 %65, %91
  %93 = sext i32 %offset.039 to i64
  %94 = getelementptr inbounds double, double* %29, i64 %93
  %95 = bitcast double* %94 to i8*
  %96 = load i32, i32* %66, align 8, !tbaa !292
  %97 = getelementptr inbounds i32, i32* %44, i64 %indvars.iv70
  %98 = tail call i32 @MPI_Irecv(i8* %95, i32 %92, i32 1275070475, i32 %76, i32 %76, i32 %96, i32* %97) #3
  %99 = add nsw i32 %92, %offset.039
  %indvars.iv.next71 = add nuw nsw i64 %indvars.iv70, 1
  %lftr.wideiv72 = trunc i64 %indvars.iv.next71 to i32
  %exitcond73 = icmp eq i32 %lftr.wideiv72, %33
  br i1 %exitcond73, label %._crit_edge43.loopexit, label %74

; <label>:100                                     ; preds = %._crit_edge43
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.251, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 86, i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.sum_plane_moments, i64 0, i64 0)) #15
  unreachable

._crit_edge38.loopexit:                           ; preds = %105
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %.preheader13
  %101 = tail call i32 @MPI_Waitall(i32 %33, i32* %44, %struct.MPI_Status* %47) #3
  %102 = tail call i32 @MPI_Waitall(i32 %18, i32* %51, %struct.MPI_Status* %54) #3
  br i1 %63, label %.lr.ph35, label %.preheader12

.lr.ph35:                                         ; preds = %._crit_edge38
  %103 = mul i32 %2, 7
  %104 = add i32 %103, 7
  br label %134

; <label>:105                                     ; preds = %105, %.lr.ph37
  %indvars.iv66 = phi i64 [ 0, %.lr.ph37 ], [ %indvars.iv.next67, %105 ]
  %106 = getelementptr inbounds i32, i32* %8, i64 %indvars.iv66
  %107 = load i32, i32* %106, align 4, !tbaa !1
  %108 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv66
  %109 = load i32, i32* %108, align 4, !tbaa !1
  %110 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv66
  %111 = load i32, i32* %110, align 4, !tbaa !1
  %112 = sext i32 %109 to i64
  %113 = getelementptr inbounds i32, i32* %4, i64 %112
  %114 = load i32, i32* %113, align 4, !tbaa !1
  %115 = sub nsw i32 %114, %40
  %116 = mul i32 %68, %115
  %117 = sext i32 %111 to i64
  %118 = getelementptr inbounds i32, i32* %4, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !1
  %120 = getelementptr inbounds i32, i32* %6, i64 %117
  %121 = load i32, i32* %120, align 4, !tbaa !1
  %122 = sub i32 1, %114
  %123 = add i32 %122, %119
  %124 = add i32 %123, %121
  %125 = mul i32 %68, %124
  %126 = sext i32 %116 to i64
  %127 = getelementptr inbounds double, double* %38, i64 %126
  %128 = bitcast double* %127 to i8*
  %129 = load i32, i32* %72, align 4, !tbaa !258
  %130 = load i32, i32* %73, align 8, !tbaa !292
  %131 = getelementptr inbounds i32, i32* %51, i64 %indvars.iv66
  %132 = tail call i32 @MPI_Isend(i8* %128, i32 %125, i32 1275070475, i32 %107, i32 %129, i32 %130, i32* %131) #3
  %indvars.iv.next67 = add nuw nsw i64 %indvars.iv66, 1
  %lftr.wideiv68 = trunc i64 %indvars.iv.next67 to i32
  %exitcond69 = icmp eq i32 %lftr.wideiv68, %18
  br i1 %exitcond69, label %._crit_edge38.loopexit, label %105

.preheader12.loopexit:                            ; preds = %._crit_edge30
  br label %.preheader12

.preheader12:                                     ; preds = %.preheader12.loopexit, %._crit_edge38
  br i1 %71, label %.lr.ph26, label %.preheader

.lr.ph26:                                         ; preds = %.preheader12
  %133 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %170

; <label>:134                                     ; preds = %._crit_edge30, %.lr.ph35
  %indvars.iv62 = phi i64 [ 0, %.lr.ph35 ], [ %indvars.iv.next63, %._crit_edge30 ]
  %offset.131 = phi i32 [ 0, %.lr.ph35 ], [ %160, %._crit_edge30 ]
  %135 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv62
  %136 = load i32, i32* %135, align 4, !tbaa !1
  %137 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv62
  %138 = load i32, i32* %137, align 4, !tbaa !1
  %139 = sext i32 %136 to i64
  %140 = getelementptr inbounds i32, i32* %4, i64 %139
  %141 = load i32, i32* %140, align 4, !tbaa !1
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds i32, i32* %4, i64 %142
  %144 = load i32, i32* %143, align 4, !tbaa !1
  %145 = getelementptr inbounds i32, i32* %6, i64 %142
  %146 = load i32, i32* %145, align 4, !tbaa !1
  %147 = sub i32 1, %141
  %148 = add i32 %147, %144
  %149 = add i32 %148, %146
  %150 = mul i32 %68, %149
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %.lr.ph29.preheader, label %._crit_edge30

.lr.ph29.preheader:                               ; preds = %134
  %152 = sub nsw i32 %141, %40
  %153 = mul i32 %68, %152
  %154 = sext i32 %153 to i64
  %155 = sext i32 %offset.131 to i64
  %156 = add i32 %144, 1
  %157 = add i32 %156, %146
  %158 = sub i32 %157, %141
  %159 = mul i32 %104, %158
  br label %.lr.ph29

._crit_edge30.loopexit:                           ; preds = %.lr.ph29
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %134
  %160 = add nsw i32 %150, %offset.131
  %indvars.iv.next63 = add nuw nsw i64 %indvars.iv62, 1
  %lftr.wideiv64 = trunc i64 %indvars.iv.next63 to i32
  %exitcond65 = icmp eq i32 %lftr.wideiv64, %33
  br i1 %exitcond65, label %.preheader12.loopexit, label %134

.lr.ph29:                                         ; preds = %.lr.ph29, %.lr.ph29.preheader
  %indvars.iv58 = phi i64 [ 0, %.lr.ph29.preheader ], [ %indvars.iv.next59, %.lr.ph29 ]
  %161 = add nsw i64 %indvars.iv58, %155
  %162 = getelementptr inbounds double, double* %29, i64 %161
  %163 = load double, double* %162, align 8, !tbaa !190
  %164 = add nsw i64 %indvars.iv58, %154
  %165 = getelementptr inbounds double, double* %38, i64 %164
  %166 = load double, double* %165, align 8, !tbaa !190
  %167 = fadd double %163, %166
  store double %167, double* %165, align 8, !tbaa !190
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %lftr.wideiv60 = trunc i64 %indvars.iv.next59 to i32
  %exitcond61 = icmp eq i32 %lftr.wideiv60, %159
  br i1 %exitcond61, label %._crit_edge30.loopexit, label %.lr.ph29

.preheader.loopexit:                              ; preds = %170
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader12
  br i1 %63, label %.lr.ph22, label %._crit_edge23

.lr.ph22:                                         ; preds = %.preheader
  %168 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  %169 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %200

; <label>:170                                     ; preds = %170, %.lr.ph26
  %indvars.iv54 = phi i64 [ 0, %.lr.ph26 ], [ %indvars.iv.next55, %170 ]
  %offset.224 = phi i32 [ 0, %.lr.ph26 ], [ %195, %170 ]
  %171 = getelementptr inbounds i32, i32* %8, i64 %indvars.iv54
  %172 = load i32, i32* %171, align 4, !tbaa !1
  %173 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv54
  %174 = load i32, i32* %173, align 4, !tbaa !1
  %175 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv54
  %176 = load i32, i32* %175, align 4, !tbaa !1
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32* %4, i64 %177
  %179 = load i32, i32* %178, align 4, !tbaa !1
  %180 = getelementptr inbounds i32, i32* %6, i64 %177
  %181 = load i32, i32* %180, align 4, !tbaa !1
  %182 = sext i32 %174 to i64
  %183 = getelementptr inbounds i32, i32* %4, i64 %182
  %184 = load i32, i32* %183, align 4, !tbaa !1
  %185 = add i32 %179, 1
  %186 = add i32 %185, %181
  %187 = sub i32 %186, %184
  %188 = mul i32 %68, %187
  %189 = sext i32 %offset.224 to i64
  %190 = getelementptr inbounds double, double* %14, i64 %189
  %191 = bitcast double* %190 to i8*
  %192 = load i32, i32* %133, align 8, !tbaa !292
  %193 = getelementptr inbounds i32, i32* %56, i64 %indvars.iv54
  %194 = tail call i32 @MPI_Irecv(i8* %191, i32 %188, i32 1275070475, i32 %172, i32 %172, i32 %192, i32* %193) #3
  %195 = add nsw i32 %188, %offset.224
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %lftr.wideiv56 = trunc i64 %indvars.iv.next55 to i32
  %exitcond57 = icmp eq i32 %lftr.wideiv56, %18
  br i1 %exitcond57, label %.preheader.loopexit, label %170

._crit_edge23.loopexit:                           ; preds = %200
  br label %._crit_edge23

._crit_edge23:                                    ; preds = %._crit_edge23.loopexit, %.preheader
  %196 = tail call i32 @MPI_Waitall(i32 %18, i32* %56, %struct.MPI_Status* %58) #3
  %197 = tail call i32 @MPI_Waitall(i32 %33, i32* %60, %struct.MPI_Status* %62) #3
  br i1 %71, label %.lr.ph19, label %._crit_edge20

.lr.ph19:                                         ; preds = %._crit_edge23
  %198 = mul i32 %2, 7
  %199 = add i32 %198, 7
  br label %230

; <label>:200                                     ; preds = %200, %.lr.ph22
  %indvars.iv50 = phi i64 [ 0, %.lr.ph22 ], [ %indvars.iv.next51, %200 ]
  %201 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv50
  %202 = load i32, i32* %201, align 4, !tbaa !1
  %203 = getelementptr inbounds i32, i32* %25, i64 %indvars.iv50
  %204 = load i32, i32* %203, align 4, !tbaa !1
  %205 = getelementptr inbounds i32, i32* %27, i64 %indvars.iv50
  %206 = load i32, i32* %205, align 4, !tbaa !1
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds i32, i32* %4, i64 %207
  %209 = load i32, i32* %208, align 4, !tbaa !1
  %210 = sub nsw i32 %209, %40
  %211 = mul i32 %68, %210
  %212 = sext i32 %206 to i64
  %213 = getelementptr inbounds i32, i32* %4, i64 %212
  %214 = load i32, i32* %213, align 4, !tbaa !1
  %215 = getelementptr inbounds i32, i32* %6, i64 %212
  %216 = load i32, i32* %215, align 4, !tbaa !1
  %217 = sub i32 1, %209
  %218 = add i32 %217, %214
  %219 = add i32 %218, %216
  %220 = mul i32 %68, %219
  %221 = sext i32 %211 to i64
  %222 = getelementptr inbounds double, double* %38, i64 %221
  %223 = bitcast double* %222 to i8*
  %224 = load i32, i32* %168, align 4, !tbaa !258
  %225 = load i32, i32* %169, align 8, !tbaa !292
  %226 = getelementptr inbounds i32, i32* %60, i64 %indvars.iv50
  %227 = tail call i32 @MPI_Isend(i8* %223, i32 %220, i32 1275070475, i32 %202, i32 %224, i32 %225, i32* %226) #3
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %lftr.wideiv52 = trunc i64 %indvars.iv.next51 to i32
  %exitcond53 = icmp eq i32 %lftr.wideiv52, %33
  br i1 %exitcond53, label %._crit_edge23.loopexit, label %200

._crit_edge20.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %._crit_edge20.loopexit, %._crit_edge23
  %offset.3.lcssa = phi i32 [ 0, %._crit_edge23 ], [ %256, %._crit_edge20.loopexit ]
  %228 = mul i32 %68, %21
  %229 = icmp eq i32 %offset.3.lcssa, %228
  br i1 %229, label %265, label %264

; <label>:230                                     ; preds = %._crit_edge, %.lr.ph19
  %indvars.iv46 = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next47, %._crit_edge ]
  %offset.315 = phi i32 [ 0, %.lr.ph19 ], [ %256, %._crit_edge ]
  %231 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv46
  %232 = load i32, i32* %231, align 4, !tbaa !1
  %233 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv46
  %234 = load i32, i32* %233, align 4, !tbaa !1
  %235 = sext i32 %232 to i64
  %236 = getelementptr inbounds i32, i32* %4, i64 %235
  %237 = load i32, i32* %236, align 4, !tbaa !1
  %238 = sext i32 %234 to i64
  %239 = getelementptr inbounds i32, i32* %4, i64 %238
  %240 = load i32, i32* %239, align 4, !tbaa !1
  %241 = getelementptr inbounds i32, i32* %6, i64 %238
  %242 = load i32, i32* %241, align 4, !tbaa !1
  %243 = sub i32 1, %237
  %244 = add i32 %243, %240
  %245 = add i32 %244, %242
  %246 = mul i32 %68, %245
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %230
  %248 = sub nsw i32 %237, %40
  %249 = mul i32 %68, %248
  %250 = sext i32 %249 to i64
  %251 = sext i32 %offset.315 to i64
  %252 = add i32 %240, 1
  %253 = add i32 %252, %242
  %254 = sub i32 %253, %237
  %255 = mul i32 %199, %254
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %230
  %256 = add nsw i32 %246, %offset.315
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %lftr.wideiv48 = trunc i64 %indvars.iv.next47 to i32
  %exitcond49 = icmp eq i32 %lftr.wideiv48, %18
  br i1 %exitcond49, label %._crit_edge20.loopexit, label %230

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %257 = add nsw i64 %indvars.iv, %251
  %258 = getelementptr inbounds double, double* %14, i64 %257
  %259 = bitcast double* %258 to i64*
  %260 = load i64, i64* %259, align 8, !tbaa !190
  %261 = add nsw i64 %indvars.iv, %250
  %262 = getelementptr inbounds double, double* %38, i64 %261
  %263 = bitcast double* %262 to i64*
  store i64 %260, i64* %263, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %255
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:264                                     ; preds = %._crit_edge20
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2.253, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 159, i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @__PRETTY_FUNCTION__.sum_plane_moments, i64 0, i64 0)) #15
  unreachable

; <label>:265                                     ; preds = %._crit_edge20
  tail call void @free(i8* %43) #3
  tail call void @free(i8* %46) #3
  tail call void @free(i8* %50) #3
  tail call void @free(i8* %53) #3
  tail call void @free(i8* %55) #3
  tail call void @free(i8* %57) #3
  tail call void @free(i8* %59) #3
  tail call void @free(i8* %61) #3
  ret i32 0
}

declare i32 @MPI_Irecv(i8*, i32, i32, i32, i32, i32, i32*) #1

declare i32 @MPI_Waitall(i32, i32*, %struct.MPI_Status*) #1

declare i32 @MPI_Isend(i8*, i32, i32, i32, i32, i32, i32*) #1

; Function Attrs: nounwind uwtable
define i32 @sum_plane(%struct.gtc_bench_data_t* nocapture readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %2 = load i32, i32* %1, align 4, !tbaa !197
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %4 = load i32*, i32** %3, align 8, !tbaa !29
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %6 = load i32*, i32** %5, align 8, !tbaa !31
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %8 = load double*, double** %7, align 8, !tbaa !34
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %10 = load i32, i32* %9, align 8, !tbaa !242
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 35
  %12 = load i32*, i32** %11, align 8, !tbaa !113
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 36
  %14 = load i32*, i32** %13, align 8, !tbaa !114
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 37
  %16 = load i32*, i32** %15, align 8, !tbaa !115
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 38
  %18 = load i32, i32* %17, align 8, !tbaa !266
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 39
  %20 = load double*, double** %19, align 8, !tbaa !116
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 40
  %22 = load i32, i32* %21, align 8, !tbaa !267
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 41
  %24 = load i32*, i32** %23, align 8, !tbaa !117
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 42
  %26 = load i32*, i32** %25, align 8, !tbaa !118
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 43
  %28 = load i32*, i32** %27, align 8, !tbaa !119
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 45
  %30 = load double*, double** %29, align 8, !tbaa !120
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 44
  %32 = load i32, i32* %31, align 8, !tbaa !268
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 46
  %34 = load i32, i32* %33, align 8, !tbaa !269
  %35 = sext i32 %32 to i64
  %36 = shl nsw i64 %35, 2
  %37 = tail call noalias i8* @malloc(i64 %36) #3
  %38 = bitcast i8* %37 to i32*
  %39 = mul nsw i64 %35, 20
  %40 = tail call noalias i8* @malloc(i64 %39) #3
  %41 = bitcast i8* %40 to %struct.MPI_Status*
  %42 = sext i32 %18 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call noalias i8* @malloc(i64 %43) #3
  %45 = bitcast i8* %44 to i32*
  %46 = mul nsw i64 %42, 20
  %47 = tail call noalias i8* @malloc(i64 %46) #3
  %48 = bitcast i8* %47 to %struct.MPI_Status*
  %49 = tail call noalias i8* @malloc(i64 %43) #3
  %50 = bitcast i8* %49 to i32*
  %51 = tail call noalias i8* @malloc(i64 %46) #3
  %52 = bitcast i8* %51 to %struct.MPI_Status*
  %53 = tail call noalias i8* @malloc(i64 %36) #3
  %54 = bitcast i8* %53 to i32*
  %55 = tail call noalias i8* @malloc(i64 %39) #3
  %56 = bitcast i8* %55 to %struct.MPI_Status*
  %57 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  %58 = load i32, i32* %57, align 8, !tbaa !292
  %59 = tail call i32 @MPI_Barrier(i32 %58) #3
  %60 = icmp sgt i32 %32, 0
  br i1 %60, label %.lr.ph45, label %.._crit_edge46_crit_edge

.._crit_edge46_crit_edge:                         ; preds = %0
  %.pre = add i32 %2, 1
  br label %._crit_edge46

.lr.ph45:                                         ; preds = %0
  %61 = add nsw i32 %2, 1
  br label %66

._crit_edge46.loopexit:                           ; preds = %66
  br label %._crit_edge46

._crit_edge46:                                    ; preds = %._crit_edge46.loopexit, %.._crit_edge46_crit_edge
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge46_crit_edge ], [ %61, %._crit_edge46.loopexit ]
  %offset.0.lcssa = phi i32 [ 0, %.._crit_edge46_crit_edge ], [ %91, %._crit_edge46.loopexit ]
  %62 = mul nsw i32 %34, %.pre-phi
  %63 = icmp eq i32 %offset.0.lcssa, %62
  br i1 %63, label %.preheader12, label %92

.preheader12:                                     ; preds = %._crit_edge46
  %64 = icmp sgt i32 %18, 0
  br i1 %64, label %.lr.ph40, label %._crit_edge41

.lr.ph40:                                         ; preds = %.preheader12
  %65 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  br label %95

; <label>:66                                      ; preds = %66, %.lr.ph45
  %indvars.iv74 = phi i64 [ 0, %.lr.ph45 ], [ %indvars.iv.next75, %66 ]
  %offset.042 = phi i32 [ 0, %.lr.ph45 ], [ %91, %66 ]
  %67 = getelementptr inbounds i32, i32* %24, i64 %indvars.iv74
  %68 = load i32, i32* %67, align 4, !tbaa !1
  %69 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv74
  %70 = load i32, i32* %69, align 4, !tbaa !1
  %71 = getelementptr inbounds i32, i32* %28, i64 %indvars.iv74
  %72 = load i32, i32* %71, align 4, !tbaa !1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %4, i64 %73
  %75 = load i32, i32* %74, align 4, !tbaa !1
  %76 = getelementptr inbounds i32, i32* %6, i64 %73
  %77 = load i32, i32* %76, align 4, !tbaa !1
  %78 = sext i32 %70 to i64
  %79 = getelementptr inbounds i32, i32* %4, i64 %78
  %80 = load i32, i32* %79, align 4, !tbaa !1
  %81 = add i32 %75, 1
  %82 = add i32 %81, %77
  %83 = sub i32 %82, %80
  %84 = mul nsw i32 %83, %61
  %85 = sext i32 %offset.042 to i64
  %86 = getelementptr inbounds double, double* %30, i64 %85
  %87 = bitcast double* %86 to i8*
  %88 = load i32, i32* %57, align 8, !tbaa !292
  %89 = getelementptr inbounds i32, i32* %38, i64 %indvars.iv74
  %90 = tail call i32 @MPI_Irecv(i8* %87, i32 %84, i32 1275070475, i32 %68, i32 %68, i32 %88, i32* %89) #3
  %91 = add nsw i32 %84, %offset.042
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %lftr.wideiv76 = trunc i64 %indvars.iv.next75 to i32
  %exitcond77 = icmp eq i32 %lftr.wideiv76, %32
  br i1 %exitcond77, label %._crit_edge46.loopexit, label %66

; <label>:92                                      ; preds = %._crit_edge46
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3.256, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 439, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.sum_plane, i64 0, i64 0)) #15
  unreachable

._crit_edge41.loopexit:                           ; preds = %95
  br label %._crit_edge41

._crit_edge41:                                    ; preds = %._crit_edge41.loopexit, %.preheader12
  %93 = tail call i32 @MPI_Waitall(i32 %32, i32* %38, %struct.MPI_Status* %41) #3
  %94 = tail call i32 @MPI_Waitall(i32 %18, i32* %45, %struct.MPI_Status* %48) #3
  br i1 %60, label %.lr.ph37.preheader, label %._crit_edge38

.lr.ph37.preheader:                               ; preds = %._crit_edge41
  br label %.lr.ph37

; <label>:95                                      ; preds = %95, %.lr.ph40
  %indvars.iv70 = phi i64 [ 0, %.lr.ph40 ], [ %indvars.iv.next71, %95 ]
  %96 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv70
  %97 = load i32, i32* %96, align 4, !tbaa !1
  %98 = getelementptr inbounds i32, i32* %14, i64 %indvars.iv70
  %99 = load i32, i32* %98, align 4, !tbaa !1
  %100 = getelementptr inbounds i32, i32* %16, i64 %indvars.iv70
  %101 = load i32, i32* %100, align 4, !tbaa !1
  %102 = sext i32 %99 to i64
  %103 = getelementptr inbounds i32, i32* %4, i64 %102
  %104 = load i32, i32* %103, align 4, !tbaa !1
  %105 = sub nsw i32 %104, %10
  %106 = mul nsw i32 %105, %.pre-phi
  %107 = sext i32 %101 to i64
  %108 = getelementptr inbounds i32, i32* %4, i64 %107
  %109 = load i32, i32* %108, align 4, !tbaa !1
  %110 = getelementptr inbounds i32, i32* %6, i64 %107
  %111 = load i32, i32* %110, align 4, !tbaa !1
  %112 = sub i32 1, %104
  %113 = add i32 %112, %109
  %114 = add i32 %113, %111
  %115 = mul nsw i32 %114, %.pre-phi
  %116 = sext i32 %106 to i64
  %117 = getelementptr inbounds double, double* %8, i64 %116
  %118 = bitcast double* %117 to i8*
  %119 = load i32, i32* %65, align 4, !tbaa !258
  %120 = load i32, i32* %57, align 8, !tbaa !292
  %121 = getelementptr inbounds i32, i32* %45, i64 %indvars.iv70
  %122 = tail call i32 @MPI_Isend(i8* %118, i32 %115, i32 1275070475, i32 %97, i32 %119, i32 %120, i32* %121) #3
  %indvars.iv.next71 = add nuw nsw i64 %indvars.iv70, 1
  %lftr.wideiv72 = trunc i64 %indvars.iv.next71 to i32
  %exitcond73 = icmp eq i32 %lftr.wideiv72, %18
  br i1 %exitcond73, label %._crit_edge41.loopexit, label %95

._crit_edge38.loopexit:                           ; preds = %._crit_edge32
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %._crit_edge41
  %123 = load i32, i32* %57, align 8, !tbaa !292
  %124 = tail call i32 @MPI_Barrier(i32 %123) #3
  br i1 %64, label %.lr.ph26.preheader, label %._crit_edge27

.lr.ph26.preheader:                               ; preds = %._crit_edge38
  br label %.lr.ph26

.lr.ph37:                                         ; preds = %._crit_edge32, %.lr.ph37.preheader
  %indvars.iv66 = phi i64 [ 0, %.lr.ph37.preheader ], [ %indvars.iv.next67, %._crit_edge32 ]
  %offset.133 = phi i32 [ 0, %.lr.ph37.preheader ], [ %150, %._crit_edge32 ]
  %125 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv66
  %126 = load i32, i32* %125, align 4, !tbaa !1
  %127 = getelementptr inbounds i32, i32* %28, i64 %indvars.iv66
  %128 = load i32, i32* %127, align 4, !tbaa !1
  %129 = sext i32 %126 to i64
  %130 = getelementptr inbounds i32, i32* %4, i64 %129
  %131 = load i32, i32* %130, align 4, !tbaa !1
  %132 = sext i32 %128 to i64
  %133 = getelementptr inbounds i32, i32* %4, i64 %132
  %134 = load i32, i32* %133, align 4, !tbaa !1
  %135 = getelementptr inbounds i32, i32* %6, i64 %132
  %136 = load i32, i32* %135, align 4, !tbaa !1
  %137 = sub i32 1, %131
  %138 = add i32 %137, %134
  %139 = add i32 %138, %136
  %140 = mul nsw i32 %139, %.pre-phi
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %.lr.ph31.preheader, label %._crit_edge32

.lr.ph31.preheader:                               ; preds = %.lr.ph37
  %142 = sub nsw i32 %131, %10
  %143 = mul nsw i32 %142, %.pre-phi
  %144 = sext i32 %143 to i64
  %145 = sext i32 %offset.133 to i64
  %146 = add i32 %134, 1
  %147 = add i32 %146, %136
  %148 = sub i32 %147, %131
  %149 = mul i32 %.pre-phi, %148
  br label %.lr.ph31

._crit_edge32.loopexit:                           ; preds = %.lr.ph31
  br label %._crit_edge32

._crit_edge32:                                    ; preds = %._crit_edge32.loopexit, %.lr.ph37
  %150 = add nsw i32 %140, %offset.133
  %indvars.iv.next67 = add nuw nsw i64 %indvars.iv66, 1
  %lftr.wideiv68 = trunc i64 %indvars.iv.next67 to i32
  %exitcond69 = icmp eq i32 %lftr.wideiv68, %32
  br i1 %exitcond69, label %._crit_edge38.loopexit, label %.lr.ph37

.lr.ph31:                                         ; preds = %.lr.ph31, %.lr.ph31.preheader
  %indvars.iv62 = phi i64 [ 0, %.lr.ph31.preheader ], [ %indvars.iv.next63, %.lr.ph31 ]
  %151 = add nsw i64 %indvars.iv62, %145
  %152 = getelementptr inbounds double, double* %30, i64 %151
  %153 = load double, double* %152, align 8, !tbaa !190
  %154 = add nsw i64 %indvars.iv62, %144
  %155 = getelementptr inbounds double, double* %8, i64 %154
  %156 = load double, double* %155, align 8, !tbaa !190
  %157 = fadd double %153, %156
  store double %157, double* %155, align 8, !tbaa !190
  %indvars.iv.next63 = add nuw nsw i64 %indvars.iv62, 1
  %lftr.wideiv64 = trunc i64 %indvars.iv.next63 to i32
  %exitcond65 = icmp eq i32 %lftr.wideiv64, %149
  br i1 %exitcond65, label %._crit_edge32.loopexit, label %.lr.ph31

._crit_edge27.loopexit:                           ; preds = %.lr.ph26
  br label %._crit_edge27

._crit_edge27:                                    ; preds = %._crit_edge27.loopexit, %._crit_edge38
  %offset.2.lcssa = phi i32 [ 0, %._crit_edge38 ], [ %185, %._crit_edge27.loopexit ]
  %158 = mul nsw i32 %22, %.pre-phi
  %159 = icmp eq i32 %offset.2.lcssa, %158
  br i1 %159, label %.preheader, label %186

.preheader:                                       ; preds = %._crit_edge27
  br i1 %60, label %.lr.ph21, label %._crit_edge22

.lr.ph21:                                         ; preds = %.preheader
  %160 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  br label %189

.lr.ph26:                                         ; preds = %.lr.ph26.preheader, %.lr.ph26
  %indvars.iv58 = phi i64 [ %indvars.iv.next59, %.lr.ph26 ], [ 0, %.lr.ph26.preheader ]
  %offset.223 = phi i32 [ %185, %.lr.ph26 ], [ 0, %.lr.ph26.preheader ]
  %161 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv58
  %162 = load i32, i32* %161, align 4, !tbaa !1
  %163 = getelementptr inbounds i32, i32* %14, i64 %indvars.iv58
  %164 = load i32, i32* %163, align 4, !tbaa !1
  %165 = getelementptr inbounds i32, i32* %16, i64 %indvars.iv58
  %166 = load i32, i32* %165, align 4, !tbaa !1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32, i32* %4, i64 %167
  %169 = load i32, i32* %168, align 4, !tbaa !1
  %170 = getelementptr inbounds i32, i32* %6, i64 %167
  %171 = load i32, i32* %170, align 4, !tbaa !1
  %172 = sext i32 %164 to i64
  %173 = getelementptr inbounds i32, i32* %4, i64 %172
  %174 = load i32, i32* %173, align 4, !tbaa !1
  %175 = add i32 %169, 1
  %176 = add i32 %175, %171
  %177 = sub i32 %176, %174
  %178 = mul nsw i32 %177, %.pre-phi
  %179 = sext i32 %offset.223 to i64
  %180 = getelementptr inbounds double, double* %20, i64 %179
  %181 = bitcast double* %180 to i8*
  %182 = load i32, i32* %57, align 8, !tbaa !292
  %183 = getelementptr inbounds i32, i32* %50, i64 %indvars.iv58
  %184 = tail call i32 @MPI_Irecv(i8* %181, i32 %178, i32 1275070475, i32 %162, i32 %162, i32 %182, i32* %183) #3
  %185 = add nsw i32 %178, %offset.223
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %lftr.wideiv60 = trunc i64 %indvars.iv.next59 to i32
  %exitcond61 = icmp eq i32 %lftr.wideiv60, %18
  br i1 %exitcond61, label %._crit_edge27.loopexit, label %.lr.ph26

; <label>:186                                     ; preds = %._crit_edge27
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.257, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 488, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.sum_plane, i64 0, i64 0)) #15
  unreachable

._crit_edge22.loopexit:                           ; preds = %189
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge22.loopexit, %.preheader
  %187 = tail call i32 @MPI_Waitall(i32 %18, i32* %50, %struct.MPI_Status* %52) #3
  %188 = tail call i32 @MPI_Waitall(i32 %32, i32* %54, %struct.MPI_Status* %56) #3
  br i1 %64, label %.lr.ph18.preheader, label %._crit_edge19

.lr.ph18.preheader:                               ; preds = %._crit_edge22
  br label %.lr.ph18

; <label>:189                                     ; preds = %189, %.lr.ph21
  %indvars.iv54 = phi i64 [ 0, %.lr.ph21 ], [ %indvars.iv.next55, %189 ]
  %190 = getelementptr inbounds i32, i32* %24, i64 %indvars.iv54
  %191 = load i32, i32* %190, align 4, !tbaa !1
  %192 = getelementptr inbounds i32, i32* %26, i64 %indvars.iv54
  %193 = load i32, i32* %192, align 4, !tbaa !1
  %194 = getelementptr inbounds i32, i32* %28, i64 %indvars.iv54
  %195 = load i32, i32* %194, align 4, !tbaa !1
  %196 = sext i32 %193 to i64
  %197 = getelementptr inbounds i32, i32* %4, i64 %196
  %198 = load i32, i32* %197, align 4, !tbaa !1
  %199 = sub nsw i32 %198, %10
  %200 = mul nsw i32 %199, %.pre-phi
  %201 = sext i32 %195 to i64
  %202 = getelementptr inbounds i32, i32* %4, i64 %201
  %203 = load i32, i32* %202, align 4, !tbaa !1
  %204 = getelementptr inbounds i32, i32* %6, i64 %201
  %205 = load i32, i32* %204, align 4, !tbaa !1
  %206 = sub i32 1, %198
  %207 = add i32 %206, %203
  %208 = add i32 %207, %205
  %209 = mul nsw i32 %208, %.pre-phi
  %210 = sext i32 %200 to i64
  %211 = getelementptr inbounds double, double* %8, i64 %210
  %212 = bitcast double* %211 to i8*
  %213 = load i32, i32* %160, align 4, !tbaa !258
  %214 = load i32, i32* %57, align 8, !tbaa !292
  %215 = getelementptr inbounds i32, i32* %54, i64 %indvars.iv54
  %216 = tail call i32 @MPI_Isend(i8* %212, i32 %209, i32 1275070475, i32 %191, i32 %213, i32 %214, i32* %215) #3
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %lftr.wideiv56 = trunc i64 %indvars.iv.next55 to i32
  %exitcond57 = icmp eq i32 %lftr.wideiv56, %32
  br i1 %exitcond57, label %._crit_edge22.loopexit, label %189

._crit_edge19.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge19

._crit_edge19:                                    ; preds = %._crit_edge19.loopexit, %._crit_edge22
  %offset.3.lcssa = phi i32 [ 0, %._crit_edge22 ], [ %243, %._crit_edge19.loopexit ]
  %217 = icmp eq i32 %offset.3.lcssa, %offset.2.lcssa
  br i1 %217, label %252, label %251

.lr.ph18:                                         ; preds = %._crit_edge, %.lr.ph18.preheader
  %indvars.iv50 = phi i64 [ 0, %.lr.ph18.preheader ], [ %indvars.iv.next51, %._crit_edge ]
  %offset.314 = phi i32 [ 0, %.lr.ph18.preheader ], [ %243, %._crit_edge ]
  %218 = getelementptr inbounds i32, i32* %14, i64 %indvars.iv50
  %219 = load i32, i32* %218, align 4, !tbaa !1
  %220 = getelementptr inbounds i32, i32* %16, i64 %indvars.iv50
  %221 = load i32, i32* %220, align 4, !tbaa !1
  %222 = sext i32 %219 to i64
  %223 = getelementptr inbounds i32, i32* %4, i64 %222
  %224 = load i32, i32* %223, align 4, !tbaa !1
  %225 = sext i32 %221 to i64
  %226 = getelementptr inbounds i32, i32* %4, i64 %225
  %227 = load i32, i32* %226, align 4, !tbaa !1
  %228 = getelementptr inbounds i32, i32* %6, i64 %225
  %229 = load i32, i32* %228, align 4, !tbaa !1
  %230 = sub i32 1, %224
  %231 = add i32 %230, %227
  %232 = add i32 %231, %229
  %233 = mul nsw i32 %232, %.pre-phi
  %234 = icmp sgt i32 %233, 0
  br i1 %234, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph18
  %235 = sub nsw i32 %224, %10
  %236 = mul nsw i32 %235, %.pre-phi
  %237 = sext i32 %236 to i64
  %238 = sext i32 %offset.314 to i64
  %239 = add i32 %227, 1
  %240 = add i32 %239, %229
  %241 = sub i32 %240, %224
  %242 = mul i32 %.pre-phi, %241
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph18
  %243 = add nsw i32 %233, %offset.314
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %lftr.wideiv52 = trunc i64 %indvars.iv.next51 to i32
  %exitcond53 = icmp eq i32 %lftr.wideiv52, %18
  br i1 %exitcond53, label %._crit_edge19.loopexit, label %.lr.ph18

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %244 = add nsw i64 %indvars.iv, %238
  %245 = getelementptr inbounds double, double* %20, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8, !tbaa !190
  %248 = add nsw i64 %indvars.iv, %237
  %249 = getelementptr inbounds double, double* %8, i64 %248
  %250 = bitcast double* %249 to i64*
  store i64 %247, i64* %250, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %242
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:251                                     ; preds = %._crit_edge19
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.257, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 521, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.sum_plane, i64 0, i64 0)) #15
  unreachable

; <label>:252                                     ; preds = %._crit_edge19
  %253 = load i32, i32* %57, align 8, !tbaa !292
  %254 = tail call i32 @MPI_Barrier(i32 %253) #3
  tail call void @free(i8* %37) #3
  tail call void @free(i8* %40) #3
  tail call void @free(i8* %44) #3
  tail call void @free(i8* %47) #3
  tail call void @free(i8* %49) #3
  tail call void @free(i8* %51) #3
  tail call void @free(i8* %53) #3
  tail call void @free(i8* %55) #3
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @fix_radial_ghosts(%struct.gtc_bench_data_t* nocapture readonly %gtc_input, double* %data, i32 %mzeta, i32 %dim) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %2 = load i32*, i32** %1, align 8, !tbaa !29
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %4 = load i32*, i32** %3, align 8, !tbaa !31
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %6 = load i32, i32* %5, align 8, !tbaa !242
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 35
  %8 = load i32*, i32** %7, align 8, !tbaa !113
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 36
  %10 = load i32*, i32** %9, align 8, !tbaa !114
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 37
  %12 = load i32*, i32** %11, align 8, !tbaa !115
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 38
  %14 = load i32, i32* %13, align 8, !tbaa !266
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 39
  %16 = load double*, double** %15, align 8, !tbaa !116
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 40
  %18 = load i32, i32* %17, align 8, !tbaa !267
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 41
  %20 = load i32*, i32** %19, align 8, !tbaa !117
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 42
  %22 = load i32*, i32** %21, align 8, !tbaa !118
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 43
  %24 = load i32*, i32** %23, align 8, !tbaa !119
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 44
  %26 = load i32, i32* %25, align 8, !tbaa !268
  %27 = sext i32 %14 to i64
  %28 = shl nsw i64 %27, 2
  %29 = tail call noalias i8* @malloc(i64 %28) #3
  %30 = bitcast i8* %29 to i32*
  %31 = mul nsw i64 %27, 20
  %32 = tail call noalias i8* @malloc(i64 %31) #3
  %33 = bitcast i8* %32 to %struct.MPI_Status*
  %34 = sext i32 %26 to i64
  %35 = shl nsw i64 %34, 2
  %36 = tail call noalias i8* @malloc(i64 %35) #3
  %37 = bitcast i8* %36 to i32*
  %38 = mul nsw i64 %34, 20
  %39 = tail call noalias i8* @malloc(i64 %38) #3
  %40 = bitcast i8* %39 to %struct.MPI_Status*
  %41 = icmp sgt i32 %14, 0
  br i1 %41, label %.lr.ph18, label %.._crit_edge19_crit_edge

.._crit_edge19_crit_edge:                         ; preds = %0
  %.pre = add i32 %mzeta, 1
  %.pre1 = mul i32 %.pre, %dim
  br label %._crit_edge19

.lr.ph18:                                         ; preds = %0
  %42 = add nsw i32 %mzeta, 1
  %43 = mul i32 %42, %dim
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %50

._crit_edge19.loopexit:                           ; preds = %50
  br label %._crit_edge19

._crit_edge19:                                    ; preds = %._crit_edge19.loopexit, %.._crit_edge19_crit_edge
  %.pre-phi2 = phi i32 [ %.pre1, %.._crit_edge19_crit_edge ], [ %43, %._crit_edge19.loopexit ]
  %.pre-phi = phi i32 [ %.pre, %.._crit_edge19_crit_edge ], [ %42, %._crit_edge19.loopexit ]
  %offset.0.lcssa = phi i32 [ 0, %.._crit_edge19_crit_edge ], [ %75, %._crit_edge19.loopexit ]
  %45 = mul i32 %.pre-phi2, %18
  %46 = icmp eq i32 %offset.0.lcssa, %45
  br i1 %46, label %.preheader, label %76

.preheader:                                       ; preds = %._crit_edge19
  %47 = icmp sgt i32 %26, 0
  br i1 %47, label %.lr.ph13, label %._crit_edge14

.lr.ph13:                                         ; preds = %.preheader
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 26
  %49 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 33
  br label %79

; <label>:50                                      ; preds = %50, %.lr.ph18
  %indvars.iv30 = phi i64 [ 0, %.lr.ph18 ], [ %indvars.iv.next31, %50 ]
  %offset.015 = phi i32 [ 0, %.lr.ph18 ], [ %75, %50 ]
  %51 = getelementptr inbounds i32, i32* %8, i64 %indvars.iv30
  %52 = load i32, i32* %51, align 4, !tbaa !1
  %53 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv30
  %54 = load i32, i32* %53, align 4, !tbaa !1
  %55 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv30
  %56 = load i32, i32* %55, align 4, !tbaa !1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %2, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !1
  %60 = getelementptr inbounds i32, i32* %4, i64 %57
  %61 = load i32, i32* %60, align 4, !tbaa !1
  %62 = sext i32 %54 to i64
  %63 = getelementptr inbounds i32, i32* %2, i64 %62
  %64 = load i32, i32* %63, align 4, !tbaa !1
  %65 = add i32 %59, 1
  %66 = add i32 %65, %61
  %67 = sub i32 %66, %64
  %68 = mul i32 %43, %67
  %69 = sext i32 %offset.015 to i64
  %70 = getelementptr inbounds double, double* %16, i64 %69
  %71 = bitcast double* %70 to i8*
  %72 = load i32, i32* %44, align 8, !tbaa !292
  %73 = getelementptr inbounds i32, i32* %30, i64 %indvars.iv30
  %74 = tail call i32 @MPI_Irecv(i8* %71, i32 %68, i32 1275070475, i32 %52, i32 %52, i32 %72, i32* %73) #3
  %75 = add nsw i32 %68, %offset.015
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %lftr.wideiv32 = trunc i64 %indvars.iv.next31 to i32
  %exitcond33 = icmp eq i32 %lftr.wideiv32, %14
  br i1 %exitcond33, label %._crit_edge19.loopexit, label %50

; <label>:76                                      ; preds = %._crit_edge19
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5.260, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 599, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.fix_radial_ghosts, i64 0, i64 0)) #15
  unreachable

._crit_edge14.loopexit:                           ; preds = %79
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge14.loopexit, %.preheader
  %77 = tail call i32 @MPI_Waitall(i32 %14, i32* %30, %struct.MPI_Status* %33) #3
  %78 = tail call i32 @MPI_Waitall(i32 %26, i32* %37, %struct.MPI_Status* %40) #3
  br i1 %41, label %.lr.ph10, label %._crit_edge11

.lr.ph10:                                         ; preds = %._crit_edge14
  br label %108

; <label>:79                                      ; preds = %79, %.lr.ph13
  %indvars.iv26 = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next27, %79 ]
  %80 = getelementptr inbounds i32, i32* %20, i64 %indvars.iv26
  %81 = load i32, i32* %80, align 4, !tbaa !1
  %82 = getelementptr inbounds i32, i32* %22, i64 %indvars.iv26
  %83 = load i32, i32* %82, align 4, !tbaa !1
  %84 = getelementptr inbounds i32, i32* %24, i64 %indvars.iv26
  %85 = load i32, i32* %84, align 4, !tbaa !1
  %86 = sext i32 %83 to i64
  %87 = getelementptr inbounds i32, i32* %2, i64 %86
  %88 = load i32, i32* %87, align 4, !tbaa !1
  %89 = sub nsw i32 %88, %6
  %90 = mul i32 %.pre-phi2, %89
  %91 = sext i32 %85 to i64
  %92 = getelementptr inbounds i32, i32* %2, i64 %91
  %93 = load i32, i32* %92, align 4, !tbaa !1
  %94 = getelementptr inbounds i32, i32* %4, i64 %91
  %95 = load i32, i32* %94, align 4, !tbaa !1
  %96 = sub i32 1, %88
  %97 = add i32 %96, %93
  %98 = add i32 %97, %95
  %99 = mul i32 %.pre-phi2, %98
  %100 = sext i32 %90 to i64
  %101 = getelementptr inbounds double, double* %data, i64 %100
  %102 = bitcast double* %101 to i8*
  %103 = load i32, i32* %48, align 4, !tbaa !258
  %104 = load i32, i32* %49, align 8, !tbaa !292
  %105 = getelementptr inbounds i32, i32* %37, i64 %indvars.iv26
  %106 = tail call i32 @MPI_Isend(i8* %102, i32 %99, i32 1275070475, i32 %81, i32 %103, i32 %104, i32* %105) #3
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %lftr.wideiv28 = trunc i64 %indvars.iv.next27 to i32
  %exitcond29 = icmp eq i32 %lftr.wideiv28, %26
  br i1 %exitcond29, label %._crit_edge14.loopexit, label %79

._crit_edge11.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %._crit_edge14
  %offset.1.lcssa = phi i32 [ 0, %._crit_edge14 ], [ %134, %._crit_edge11.loopexit ]
  %107 = icmp eq i32 %offset.1.lcssa, %offset.0.lcssa
  br i1 %107, label %143, label %142

; <label>:108                                     ; preds = %._crit_edge, %.lr.ph10
  %indvars.iv22 = phi i64 [ 0, %.lr.ph10 ], [ %indvars.iv.next23, %._crit_edge ]
  %offset.16 = phi i32 [ 0, %.lr.ph10 ], [ %134, %._crit_edge ]
  %109 = getelementptr inbounds i32, i32* %10, i64 %indvars.iv22
  %110 = load i32, i32* %109, align 4, !tbaa !1
  %111 = getelementptr inbounds i32, i32* %12, i64 %indvars.iv22
  %112 = load i32, i32* %111, align 4, !tbaa !1
  %113 = sext i32 %110 to i64
  %114 = getelementptr inbounds i32, i32* %2, i64 %113
  %115 = load i32, i32* %114, align 4, !tbaa !1
  %116 = sext i32 %112 to i64
  %117 = getelementptr inbounds i32, i32* %2, i64 %116
  %118 = load i32, i32* %117, align 4, !tbaa !1
  %119 = getelementptr inbounds i32, i32* %4, i64 %116
  %120 = load i32, i32* %119, align 4, !tbaa !1
  %121 = sub i32 1, %115
  %122 = add i32 %121, %118
  %123 = add i32 %122, %120
  %124 = mul i32 %.pre-phi2, %123
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %108
  %126 = sub nsw i32 %115, %6
  %127 = mul i32 %.pre-phi2, %126
  %128 = sext i32 %127 to i64
  %129 = sext i32 %offset.16 to i64
  %130 = add i32 %118, 1
  %131 = add i32 %130, %120
  %132 = sub i32 %131, %115
  %133 = mul i32 %.pre-phi2, %132
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %108
  %134 = add nsw i32 %124, %offset.16
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %lftr.wideiv24 = trunc i64 %indvars.iv.next23 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv24, %14
  br i1 %exitcond25, label %._crit_edge11.loopexit, label %108

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %135 = add nsw i64 %indvars.iv, %129
  %136 = getelementptr inbounds double, double* %16, i64 %135
  %137 = bitcast double* %136 to i64*
  %138 = load i64, i64* %137, align 8, !tbaa !190
  %139 = add nsw i64 %indvars.iv, %128
  %140 = getelementptr inbounds double, double* %data, i64 %139
  %141 = bitcast double* %140 to i64*
  store i64 %138, i64* %141, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %133
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

; <label>:142                                     ; preds = %._crit_edge11
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5.260, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.252, i64 0, i64 0), i32 632, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.fix_radial_ghosts, i64 0, i64 0)) #15
  unreachable

; <label>:143                                     ; preds = %._crit_edge11
  tail call void @free(i8* %29) #3
  tail call void @free(i8* %32) #3
  tail call void @free(i8* %36) #3
  tail call void @free(i8* %39) #3
  ret i32 0
}

; Function Attrs: norecurse nounwind uwtable
define void @get_2d_communicator(i32* nocapture %comm2d) #11 {
  store i32 1140850688, i32* %comm2d, align 4, !tbaa !1
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @print_mem_usage(i32* nocapture %mype) #12 {
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @print_mem_usage_str(i32* nocapture %mype, i8* nocapture %str) #12 {
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @collision(%struct.gtc_bench_data_t* readonly %gtc_input) #0 {
  %1 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %2 = bitcast i32* %1 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 1
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !192
  %10 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %11 = load double, double* %10, align 8, !tbaa !212
  %12 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %13 = load double, double* %12, align 8, !tbaa !164
  %14 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %15 = load double, double* %14, align 8, !tbaa !163
  %16 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %17 = load double, double* %16, align 8, !tbaa !171
  %18 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  %19 = load double, double* %18, align 8, !tbaa !170
  %20 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %21 = load double, double* %20, align 8, !tbaa !208
  %22 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 14
  %23 = load i32, i32* %22, align 4, !tbaa !155
  %24 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 55
  %25 = load double, double* %24, align 8, !tbaa !160
  %26 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 73
  %27 = load double, double* %26, align 8, !tbaa !191
  %28 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %29 = load double*, double** %28, align 8, !tbaa !85
  %30 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %31 = load double*, double** %30, align 8, !tbaa !86
  %32 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %33 = load double*, double** %32, align 8, !tbaa !87
  %34 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %35 = load double*, double** %34, align 8, !tbaa !88
  %36 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %37 = load double*, double** %36, align 8, !tbaa !89
  %38 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %39 = load double*, double** %38, align 8, !tbaa !90
  %40 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 6
  %41 = load double*, double** %40, align 8, !tbaa !91
  %42 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 7
  %43 = load double*, double** %42, align 8, !tbaa !92
  %44 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 8
  %45 = load double*, double** %44, align 8, !tbaa !93
  %46 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 9
  %47 = load double*, double** %46, align 8, !tbaa !94
  %48 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 10
  %49 = load double*, double** %48, align 8, !tbaa !95
  %50 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 3
  %51 = load double*, double** %50, align 8, !tbaa !145
  %52 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 6
  %53 = load double*, double** %52, align 8, !tbaa !270
  %54 = bitcast double* %53 to i8*
  %55 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 7
  %56 = load double*, double** %55, align 8, !tbaa !271
  %57 = bitcast double* %56 to i8*
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 8
  %59 = load double*, double** %58, align 8, !tbaa !272
  %60 = bitcast double* %59 to i8*
  %61 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 9
  %62 = load double*, double** %61, align 8, !tbaa !273
  %63 = bitcast double* %62 to i8*
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 10
  %65 = load double*, double** %64, align 8, !tbaa !274
  %66 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 11
  %67 = load double*, double** %66, align 8, !tbaa !275
  %68 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 12
  %69 = load double*, double** %68, align 8, !tbaa !276
  %70 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 0
  %71 = bitcast i32* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 1
  %75 = lshr i64 %72, 32
  %76 = trunc i64 %75 to i32
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 8, i32 2
  %78 = load i32, i32* %77, align 8, !tbaa !189
  %79 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 3, i32 7
  %80 = load i32*, i32** %79, align 8, !tbaa !108
  %81 = mul i32 %76, %73
  %82 = mul i32 %81, %78
  %83 = fdiv double %17, %19
  %84 = fmul double %15, 5.000000e-01
  %85 = fmul double %15, %84
  %86 = fmul double %13, 5.000000e-01
  %87 = fmul double %13, %86
  %88 = sitofp i32 %73 to double
  %89 = fsub double %87, %85
  %90 = fdiv double %88, %89
  %91 = sitofp i32 %76 to double
  %92 = fmul double %11, 2.000000e+00
  %93 = fdiv double %91, %92
  %94 = sitofp i32 %78 to double
  %95 = fdiv double %94, %92
  %96 = fmul double %21, 2.000000e+00
  %97 = fmul double %21, %96
  %98 = tail call double @sqrt(double %97) #3
  %99 = fdiv double 1.000000e+00, %98
  %100 = fmul double %97, 1.000000e-20
  %101 = fmul double %97, 1.000000e-10
  %102 = fmul double %21, %101
  %103 = fmul double %97, %102
  %104 = icmp sgt i32 %82, 0
  br i1 %104, label %.lr.ph65.preheader, label %._crit_edge62

.lr.ph65.preheader:                               ; preds = %0
  br label %.lr.ph65

.preheader39:                                     ; preds = %.lr.ph65
  br i1 true, label %.lr.ph61.preheader, label %.preheader39.._crit_edge62_crit_edge

.preheader39.._crit_edge62_crit_edge:             ; preds = %.preheader39
  br label %._crit_edge62

.lr.ph61.preheader:                               ; preds = %.preheader39
  br label %.lr.ph61

.lr.ph65:                                         ; preds = %.lr.ph65, %.lr.ph65.preheader
  %indvars.iv94 = phi i64 [ 0, %.lr.ph65.preheader ], [ %indvars.iv.next95, %.lr.ph65 ]
  %105 = getelementptr inbounds double, double* %53, i64 %indvars.iv94
  store double 0.000000e+00, double* %105, align 8, !tbaa !190
  %106 = getelementptr inbounds double, double* %56, i64 %indvars.iv94
  store double 0.000000e+00, double* %106, align 8, !tbaa !190
  %107 = getelementptr inbounds double, double* %59, i64 %indvars.iv94
  store double 0.000000e+00, double* %107, align 8, !tbaa !190
  %108 = getelementptr inbounds double, double* %62, i64 %indvars.iv94
  store double 0.000000e+00, double* %108, align 8, !tbaa !190
  %indvars.iv.next95 = add nuw nsw i64 %indvars.iv94, 1
  %lftr.wideiv96 = trunc i64 %indvars.iv.next95 to i32
  %exitcond97 = icmp eq i32 %lftr.wideiv96, %82
  br i1 %exitcond97, label %.preheader39, label %.lr.ph65

._crit_edge62.loopexit:                           ; preds = %.lr.ph61
  br label %._crit_edge62

._crit_edge62:                                    ; preds = %._crit_edge62.loopexit, %.preheader39.._crit_edge62_crit_edge, %0
  %109 = tail call noalias i8* @malloc(i64 48) #3
  %110 = bitcast i8* %109 to double*
  %111 = icmp eq i8* %109, null
  br i1 %111, label %115, label %116

.lr.ph61:                                         ; preds = %.lr.ph61, %.lr.ph61.preheader
  %indvars.iv90 = phi i64 [ 0, %.lr.ph61.preheader ], [ %indvars.iv.next91, %.lr.ph61 ]
  %112 = getelementptr inbounds double, double* %65, i64 %indvars.iv90
  store double 0.000000e+00, double* %112, align 8, !tbaa !190
  %113 = getelementptr inbounds double, double* %67, i64 %indvars.iv90
  store double 0.000000e+00, double* %113, align 8, !tbaa !190
  %114 = getelementptr inbounds double, double* %69, i64 %indvars.iv90
  store double 0.000000e+00, double* %114, align 8, !tbaa !190
  %indvars.iv.next91 = add nuw nsw i64 %indvars.iv90, 1
  %lftr.wideiv92 = trunc i64 %indvars.iv.next91 to i32
  %exitcond93 = icmp eq i32 %lftr.wideiv92, %82
  br i1 %exitcond93, label %._crit_edge62.loopexit, label %.lr.ph61

; <label>:115                                     ; preds = %._crit_edge62
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.263, i64 0, i64 0), i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.264, i64 0, i64 0), i32 163, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.collision, i64 0, i64 0)) #15
  unreachable

; <label>:116                                     ; preds = %._crit_edge62
  store double 1.234500e+04, double* %110, align 8, !tbaa !190
  %117 = getelementptr inbounds i8, i8* %109, i64 8
  %118 = bitcast i8* %117 to double*
  store double 1.234500e+04, double* %118, align 8, !tbaa !190
  %119 = getelementptr inbounds i8, i8* %109, i64 16
  %120 = bitcast i8* %119 to double*
  store double 1.234500e+04, double* %120, align 8, !tbaa !190
  %121 = getelementptr inbounds i8, i8* %109, i64 24
  %122 = bitcast i8* %121 to double*
  store double 1.234500e+04, double* %122, align 8, !tbaa !190
  %123 = getelementptr inbounds i8, i8* %109, i64 32
  %124 = bitcast i8* %123 to double*
  store double 1.234500e+04, double* %124, align 8, !tbaa !190
  %125 = getelementptr inbounds i8, i8* %109, i64 40
  %126 = bitcast i8* %125 to double*
  store double 1.234500e+04, double* %126, align 8, !tbaa !190
  tail call void @RngStream_ParInit(i32 %4, i32 %7, i32 0, i32 1, i32 1, double* %110) #3
  %127 = tail call %struct.RngStream_InfoState* @RngStream_CreateStream(i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2.265, i64 0, i64 0), double* %110) #3
  %128 = icmp sgt i32 %9, 0
  br i1 %128, label %.lr.ph59.preheader, label %.preheader37

.lr.ph59.preheader:                               ; preds = %116
  br label %.lr.ph59

.preheader38:                                     ; preds = %.lr.ph59
  br i1 true, label %.lr.ph56, label %.preheader38..preheader37_crit_edge

.preheader38..preheader37_crit_edge:              ; preds = %.preheader38
  br label %.preheader37

.lr.ph56:                                         ; preds = %.preheader38
  %129 = add nsw i32 %73, -1
  %130 = add nsw i32 %76, -1
  %131 = add nsw i32 %78, -1
  %132 = sitofp i32 %23 to double
  %133 = fmul double %132, 1.880000e+00
  %134 = fmul double %25, %133
  br label %140

.lr.ph59:                                         ; preds = %.lr.ph59.preheader, %.lr.ph59
  %indvars.iv86 = phi i64 [ %indvars.iv.next87, %.lr.ph59 ], [ 0, %.lr.ph59.preheader ]
  %135 = tail call double @RngStream_RandU01(%struct.RngStream_InfoState* %127) #3
  %136 = getelementptr inbounds double, double* %47, i64 %indvars.iv86
  store double %135, double* %136, align 8, !tbaa !190
  %137 = tail call double @RngStream_RandU01(%struct.RngStream_InfoState* %127) #3
  %138 = getelementptr inbounds double, double* %49, i64 %indvars.iv86
  store double %137, double* %138, align 8, !tbaa !190
  %indvars.iv.next87 = add nuw nsw i64 %indvars.iv86, 1
  %lftr.wideiv88 = trunc i64 %indvars.iv.next87 to i32
  %exitcond89 = icmp eq i32 %lftr.wideiv88, %9
  br i1 %exitcond89, label %.preheader38, label %.lr.ph59

.preheader37.loopexit:                            ; preds = %338
  br label %.preheader37

.preheader37:                                     ; preds = %.preheader37.loopexit, %.preheader38..preheader37_crit_edge, %116
  br i1 %104, label %.preheader.preheader, label %._crit_edge54.thread

._crit_edge54.thread:                             ; preds = %.preheader37
  %139 = tail call i32 @MPI_Allreduce(i8* %60, i8* %63, i32 %82, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br label %._crit_edge48.thread

.preheader.preheader:                             ; preds = %.preheader37
  br label %340

; <label>:140                                     ; preds = %338, %.lr.ph56
  %indvars.iv82 = phi i64 [ 0, %.lr.ph56 ], [ %indvars.iv.next83, %338 ]
  %141 = getelementptr inbounds double, double* %33, i64 %indvars.iv82
  %142 = load double, double* %141, align 8, !tbaa !190
  %143 = fcmp oeq double %142, 1.000000e+08
  br i1 %143, label %338, label %144

; <label>:144                                     ; preds = %140
  %145 = getelementptr inbounds double, double* %29, i64 %indvars.iv82
  %146 = load double, double* %145, align 8, !tbaa !190
  %147 = getelementptr inbounds double, double* %31, i64 %indvars.iv82
  %148 = load double, double* %147, align 8, !tbaa !190
  %149 = getelementptr inbounds double, double* %35, i64 %indvars.iv82
  %150 = load double, double* %149, align 8, !tbaa !190
  %151 = getelementptr inbounds double, double* %37, i64 %indvars.iv82
  %152 = load double, double* %151, align 8, !tbaa !190
  %153 = getelementptr inbounds double, double* %39, i64 %indvars.iv82
  %154 = load double, double* %153, align 8, !tbaa !190
  %155 = getelementptr inbounds double, double* %47, i64 %indvars.iv82
  %156 = load double, double* %155, align 8, !tbaa !190
  %157 = getelementptr inbounds double, double* %49, i64 %indvars.iv82
  %158 = load double, double* %157, align 8, !tbaa !190
  %159 = fmul double %146, 2.000000e+00
  %160 = tail call double @sqrt(double %159) #3
  %161 = tail call double @sin(double %148) #3
  %162 = tail call double @cos(double %148) #3
  %163 = fmul double %160, %162
  %164 = fadd double %163, 1.000000e+00
  %165 = fdiv double 1.000000e+00, %164
  %166 = fmul double %160, 5.000000e-01
  %167 = fmul double %160, %166
  %168 = fsub double %167, %85
  %169 = fmul double %90, %168
  %170 = fptosi double %169 to i32
  %171 = icmp sle i32 %73, %170
  %. = select i1 %171, i32 %129, i32 %170
  %172 = icmp slt i32 %., 0
  %173 = select i1 %172, i32 0, i32 %.
  %174 = fmul double %93, %148
  %175 = fptosi double %174 to i32
  %176 = icmp sle i32 %76, %175
  %.24 = select i1 %176, i32 %130, i32 %175
  %177 = icmp slt i32 %.24, 0
  %178 = select i1 %177, i32 0, i32 %.24
  %179 = fmul double %95, %142
  %180 = fptosi double %179 to i32
  %181 = icmp sle i32 %78, %180
  %.26 = select i1 %181, i32 %131, i32 %180
  %182 = icmp slt i32 %.26, 0
  %183 = select i1 %182, i32 0, i32 %.26
  %184 = mul i32 %183, %76
  %tmp = add i32 %178, %184
  %tmp36 = mul i32 %tmp, %73
  %185 = add i32 %173, %tmp36
  %186 = fmul double %150, %165
  %187 = fmul double %83, %186
  %188 = fmul double %154, 2.000000e+00
  %189 = fmul double %154, %188
  %190 = fmul double %189, %165
  %191 = fmul double %187, %187
  %192 = fadd double %190, %191
  %193 = fcmp ogt double %100, %192
  %.28 = select i1 %193, double %100, double %192
  %194 = tail call double @sqrt(double %.28) #3
  %195 = fmul double %99, %194
  %196 = fcmp ogt double %195, 1.000000e+01
  %197 = select i1 %196, double 1.000000e+01, double %195
  %198 = fcmp olt double %197, 1.000000e-01
  %brmerge = or i1 %196, %198
  %.mux = select i1 %198, double 1.000000e-01, double 1.000000e+01
  %199 = select i1 %brmerge, double %.mux, double %195
  %200 = fmul double %199, %199
  %201 = fmul double %27, %199
  %202 = fmul double %201, %200
  %203 = fdiv double %134, %202
  %204 = fmul double %200, 1.000000e+04
  %205 = fptosi double %204 to i32
  %206 = icmp sgt i32 %205, 99999
  %207 = add nsw i32 %205, 1
  %.29 = select i1 %206, i32 100000, i32 %207
  %208 = sitofp i32 %.29 to double
  %209 = fsub double %208, %204
  %210 = add nsw i32 %.29, -1
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds double, double* %51, i64 %211
  %213 = load double, double* %212, align 8, !tbaa !190
  %214 = fmul double %213, %209
  %215 = sitofp i32 %210 to double
  %216 = fsub double %204, %215
  %217 = sext i32 %.29 to i64
  %218 = getelementptr inbounds double, double* %51, i64 %217
  %219 = load double, double* %218, align 8, !tbaa !190
  %220 = fmul double %219, %216
  %221 = fadd double %214, %220
  %222 = fcmp olt double %200, 2.500000e-02
  br i1 %222, label %223, label %234

; <label>:223                                     ; preds = %144
  %224 = fdiv double %200, %11
  %225 = tail call double @sqrt(double %224) #3
  %226 = fmul double %225, 0x3FF5555555555555
  %227 = fmul double %200, %226
  %228 = fmul double %200, 6.000000e-01
  %229 = fsub double 1.000000e+00, %228
  %230 = fmul double %200, 0x3FCB6DB6DB6DB6DB
  %231 = fmul double %200, %230
  %232 = fadd double %229, %231
  %233 = fmul double %232, %227
  br label %234

; <label>:234                                     ; preds = %223, %144
  %phix.0 = phi double [ %233, %223 ], [ %221, %144 ]
  %235 = fcmp ogt double %200, 1.000000e+01
  br i1 %235, label %236, label %._crit_edge1

._crit_edge1:                                     ; preds = %234
  %.pre3 = fdiv double %200, %11
  br label %251

; <label>:236                                     ; preds = %234
  %237 = tail call double @exp(double %200) #3
  %238 = fdiv double 2.000000e+00, %237
  %239 = fdiv double %200, %11
  %240 = tail call double @sqrt(double %239) #3
  %241 = fmul double %238, %240
  %242 = fmul double %200, 2.000000e+00
  %243 = fdiv double 1.000000e+00, %242
  %244 = fadd double %243, 1.000000e+00
  %245 = fmul double %200, 4.000000e+00
  %246 = fmul double %200, %245
  %247 = fdiv double 1.000000e+00, %246
  %248 = fsub double %244, %247
  %249 = fmul double %248, %241
  %250 = fsub double 1.000000e+00, %249
  br label %251

; <label>:251                                     ; preds = %._crit_edge1, %236
  %.pre-phi4 = phi double [ %.pre3, %._crit_edge1 ], [ %239, %236 ]
  %phix.1 = phi double [ %250, %236 ], [ %phix.0, %._crit_edge1 ]
  %252 = tail call double @sqrt(double %.pre-phi4) #3
  %253 = fmul double %252, 2.000000e+00
  %254 = tail call double @exp(double %200) #3
  %255 = fdiv double %253, %254
  %256 = fmul double %phix.1, 2.000000e+00
  %257 = fmul double %phix.1, 5.000000e-01
  %258 = fdiv double %257, %200
  %259 = fsub double %phix.1, %258
  %260 = fadd double %259, %255
  %261 = fdiv double %phix.1, %200
  %262 = fmul double %187, %256
  %263 = fmul double %256, 2.000000e+00
  %264 = fsub double %263, %261
  %265 = fsub double %264, %260
  %266 = fmul double %190, %265
  %267 = fmul double %187, 2.000000e+00
  %268 = fmul double %187, %267
  %269 = fmul double %268, %260
  %270 = fsub double %266, %269
  %271 = fmul double %191, %261
  %272 = fmul double %190, %260
  %273 = fadd double %271, %272
  %274 = fcmp ogt double %102, %273
  %.30 = select i1 %274, double %102, double %273
  %275 = fmul double %190, 4.000000e+00
  %276 = fmul double %194, %275
  %277 = fmul double %194, %276
  %278 = fmul double %194, %277
  %279 = fmul double %194, %278
  %280 = fmul double %279, %260
  %281 = fmul double %261, %280
  %282 = fdiv double %281, %.30
  %283 = fcmp ogt double %103, %282
  %284 = select i1 %283, double %103, double %282
  %285 = fmul double %190, 2.000000e+00
  %286 = fmul double %285, %187
  %287 = fsub double %261, %260
  %288 = fmul double %286, %287
  %289 = fadd double %156, -5.000000e-01
  %290 = fmul double %.30, 1.200000e+01
  %291 = fmul double %203, %290
  %292 = tail call double @sqrt(double %291) #3
  %293 = fmul double %289, %292
  %294 = fmul double %203, %262
  %295 = fsub double %293, %294
  %296 = fmul double %289, %288
  %297 = fdiv double 1.200000e+01, %.30
  %298 = fmul double %203, %297
  %299 = tail call double @sqrt(double %298) #3
  %300 = fmul double %299, %296
  %301 = fmul double %203, %270
  %302 = fsub double %300, %301
  %303 = fadd double %158, -5.000000e-01
  %304 = fmul double %284, 1.200000e+01
  %305 = fmul double %203, %304
  %306 = tail call double @sqrt(double %305) #3
  %307 = fmul double %303, %306
  %308 = fadd double %307, %302
  %309 = fmul double %295, %295
  %310 = tail call double @fabs(double %308) #16
  %311 = fadd double %309, %310
  %312 = fcmp ogt double %311, %97
  %delv2.0 = select i1 %312, double 0.000000e+00, double %308
  %delu.0 = select i1 %312, double 0.000000e+00, double %295
  %313 = fmul double %152, %delu.0
  %314 = sext i32 %185 to i64
  %315 = getelementptr inbounds double, double* %67, i64 %314
  %316 = load double, double* %315, align 8, !tbaa !190
  %317 = fadd double %316, %313
  store double %317, double* %315, align 8, !tbaa !190
  %318 = fadd double %267, %delu.0
  %319 = fmul double %delu.0, %318
  %320 = fadd double %delv2.0, %319
  %321 = fmul double %152, %320
  %322 = getelementptr inbounds double, double* %65, i64 %314
  %323 = load double, double* %322, align 8, !tbaa !190
  %324 = fadd double %323, %321
  store double %324, double* %322, align 8, !tbaa !190
  %325 = getelementptr inbounds double, double* %69, i64 %314
  %326 = load double, double* %325, align 8, !tbaa !190
  %327 = fadd double %326, 1.000000e+00
  store double %327, double* %325, align 8, !tbaa !190
  %328 = fadd double %187, %delu.0
  %329 = fadd double %190, %delv2.0
  %330 = fcmp ogt double %100, %329
  %.31 = select i1 %330, double %100, double %329
  %331 = getelementptr inbounds double, double* %41, i64 %indvars.iv82
  store double %328, double* %331, align 8, !tbaa !190
  %332 = getelementptr inbounds double, double* %43, i64 %indvars.iv82
  store double %.31, double* %332, align 8, !tbaa !190
  %333 = fdiv double %328, %165
  store double %333, double* %149, align 8, !tbaa !190
  %334 = fmul double %.31, 5.000000e-01
  %335 = fdiv double %334, %165
  %336 = tail call double @sqrt(double %335) #3
  store double %336, double* %153, align 8, !tbaa !190
  %337 = getelementptr inbounds i32, i32* %80, i64 %indvars.iv82
  store i32 %185, i32* %337, align 4, !tbaa !1
  br label %338

; <label>:338                                     ; preds = %251, %140
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %lftr.wideiv84 = trunc i64 %indvars.iv.next83 to i32
  %exitcond85 = icmp eq i32 %lftr.wideiv84, %9
  br i1 %exitcond85, label %.preheader37.loopexit, label %140

._crit_edge54:                                    ; preds = %340
  %339 = tail call i32 @MPI_Allreduce(i8* nonnull %60, i8* %63, i32 %82, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 true, label %.lr.ph47.preheader, label %._crit_edge54.._crit_edge48.thread_crit_edge

._crit_edge54.._crit_edge48.thread_crit_edge:     ; preds = %._crit_edge54
  br label %._crit_edge48.thread

.lr.ph47.preheader:                               ; preds = %._crit_edge54
  br label %.lr.ph47

; <label>:340                                     ; preds = %340, %.preheader.preheader
  %indvars.iv78 = phi i64 [ 0, %.preheader.preheader ], [ %indvars.iv.next79, %340 ]
  %341 = getelementptr inbounds double, double* %65, i64 %indvars.iv78
  %342 = load double, double* %341, align 8, !tbaa !190
  %343 = fadd double %342, 0.000000e+00
  %344 = getelementptr inbounds double, double* %67, i64 %indvars.iv78
  %345 = load double, double* %344, align 8, !tbaa !190
  %346 = fadd double %345, 0.000000e+00
  %347 = getelementptr inbounds double, double* %69, i64 %indvars.iv78
  %348 = load double, double* %347, align 8, !tbaa !190
  %349 = fadd double %348, 0.000000e+00
  %350 = getelementptr inbounds double, double* %53, i64 %indvars.iv78
  store double %343, double* %350, align 8, !tbaa !190
  %351 = getelementptr inbounds double, double* %56, i64 %indvars.iv78
  store double %346, double* %351, align 8, !tbaa !190
  %352 = getelementptr inbounds double, double* %59, i64 %indvars.iv78
  store double %349, double* %352, align 8, !tbaa !190
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %lftr.wideiv80 = trunc i64 %indvars.iv.next79 to i32
  %exitcond81 = icmp eq i32 %lftr.wideiv80, %82
  br i1 %exitcond81, label %._crit_edge54, label %340

._crit_edge48.thread:                             ; preds = %._crit_edge54.._crit_edge48.thread_crit_edge, %._crit_edge54.thread
  %353 = tail call i32 @MPI_Allreduce(i8* %57, i8* %63, i32 %82, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br label %._crit_edge44

._crit_edge48:                                    ; preds = %.lr.ph47
  %354 = tail call i32 @MPI_Allreduce(i8* %57, i8* nonnull %63, i32 %82, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 true, label %.lr.ph43, label %._crit_edge48.._crit_edge44_crit_edge

._crit_edge48.._crit_edge44_crit_edge:            ; preds = %._crit_edge48
  br label %._crit_edge44

.lr.ph43:                                         ; preds = %._crit_edge48
  %355 = fmul double %11, 4.500000e+00
  br label %362

.lr.ph47:                                         ; preds = %.lr.ph47, %.lr.ph47.preheader
  %indvars.iv72 = phi i64 [ 0, %.lr.ph47.preheader ], [ %indvars.iv.next73, %.lr.ph47 ]
  %356 = getelementptr inbounds double, double* %62, i64 %indvars.iv72
  %357 = load double, double* %356, align 8, !tbaa !190
  %358 = fcmp olt double %357, 1.000000e+00
  %359 = select i1 %358, double 1.000000e+00, double %357
  %360 = getelementptr inbounds double, double* %59, i64 %indvars.iv72
  store double %359, double* %360, align 8, !tbaa !190
  store double 0.000000e+00, double* %356, align 8, !tbaa !190
  %indvars.iv.next73 = add nuw nsw i64 %indvars.iv72, 1
  %lftr.wideiv74 = trunc i64 %indvars.iv.next73 to i32
  %exitcond75 = icmp eq i32 %lftr.wideiv74, %82
  br i1 %exitcond75, label %._crit_edge48, label %.lr.ph47

._crit_edge44.loopexit:                           ; preds = %362
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %._crit_edge44.loopexit, %._crit_edge48.._crit_edge44_crit_edge, %._crit_edge48.thread
  %361 = tail call i32 @MPI_Allreduce(i8* %54, i8* %63, i32 %82, i32 1275070475, i32 1476395011, i32 1140850688) #3
  br i1 %128, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge44
  br label %.lr.ph

; <label>:362                                     ; preds = %362, %.lr.ph43
  %indvars.iv68 = phi i64 [ 0, %.lr.ph43 ], [ %indvars.iv.next69, %362 ]
  %363 = tail call double @sqrt(double %355) #3
  %364 = fmul double %363, 2.000000e+00
  %365 = getelementptr inbounds double, double* %62, i64 %indvars.iv68
  %366 = load double, double* %365, align 8, !tbaa !190
  %367 = fmul double %364, %366
  %368 = getelementptr inbounds double, double* %59, i64 %indvars.iv68
  %369 = load double, double* %368, align 8, !tbaa !190
  %370 = fmul double %97, %369
  %371 = fdiv double %367, %370
  %372 = getelementptr inbounds double, double* %56, i64 %indvars.iv68
  store double %371, double* %372, align 8, !tbaa !190
  store double 0.000000e+00, double* %365, align 8, !tbaa !190
  %indvars.iv.next69 = add nuw nsw i64 %indvars.iv68, 1
  %lftr.wideiv70 = trunc i64 %indvars.iv.next69 to i32
  %exitcond71 = icmp eq i32 %lftr.wideiv70, %82
  br i1 %exitcond71, label %._crit_edge44.loopexit, label %362

._crit_edge.loopexit:                             ; preds = %476
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge44
  tail call void @RngStream_DeleteStream(%struct.RngStream_InfoState* %127) #3
  tail call void @free(i8* %109) #3
  ret i32 0

.lr.ph:                                           ; preds = %.lr.ph.preheader, %476
  %indvars.iv = phi i64 [ %indvars.iv.next, %476 ], [ 0, %.lr.ph.preheader ]
  %373 = getelementptr inbounds double, double* %33, i64 %indvars.iv
  %374 = load double, double* %373, align 8, !tbaa !190
  %375 = fcmp oeq double %374, 1.000000e+08
  br i1 %375, label %476, label %376

; <label>:376                                     ; preds = %.lr.ph
  %377 = getelementptr inbounds double, double* %29, i64 %indvars.iv
  %378 = bitcast double* %377 to i64*
  %379 = load i64, i64* %378, align 8, !tbaa !190
  %380 = getelementptr inbounds double, double* %31, i64 %indvars.iv
  %381 = bitcast double* %380 to i64*
  %382 = load i64, i64* %381, align 8, !tbaa !190
  %383 = getelementptr inbounds double, double* %35, i64 %indvars.iv
  %384 = bitcast double* %383 to i64*
  %385 = load i64, i64* %384, align 8, !tbaa !190
  %386 = getelementptr inbounds double, double* %37, i64 %indvars.iv
  %387 = load double, double* %386, align 8, !tbaa !190
  %388 = getelementptr inbounds double, double* %41, i64 %indvars.iv
  %389 = load double, double* %388, align 8, !tbaa !190
  %390 = getelementptr inbounds double, double* %43, i64 %indvars.iv
  %391 = load double, double* %390, align 8, !tbaa !190
  %392 = getelementptr inbounds i32, i32* %80, i64 %indvars.iv
  %393 = load i32, i32* %392, align 4, !tbaa !1
  %394 = fmul double %389, %389
  %395 = fadd double %394, %391
  %396 = fcmp ogt double %100, %395
  %.32 = select i1 %396, double %100, double %395
  %397 = tail call double @sqrt(double %.32) #3
  %398 = fmul double %99, %397
  %399 = fcmp ogt double %398, 1.000000e+01
  %400 = select i1 %399, double 1.000000e+01, double %398
  %401 = fcmp olt double %400, 1.000000e-01
  %brmerge33 = or i1 %399, %401
  %.mux34 = select i1 %401, double 1.000000e-01, double 1.000000e+01
  %402 = select i1 %brmerge33, double %.mux34, double %398
  %403 = fmul double %402, %402
  %404 = fmul double %403, 1.000000e+04
  %405 = fptosi double %404 to i32
  %406 = icmp sgt i32 %405, 99999
  %407 = add nsw i32 %405, 1
  %.35 = select i1 %406, i32 100000, i32 %407
  %408 = sitofp i32 %.35 to double
  %409 = fsub double %408, %404
  %410 = add nsw i32 %.35, -1
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %51, i64 %411
  %413 = load double, double* %412, align 8, !tbaa !190
  %414 = fmul double %413, %409
  %415 = sitofp i32 %410 to double
  %416 = fsub double %404, %415
  %417 = sext i32 %.35 to i64
  %418 = getelementptr inbounds double, double* %51, i64 %417
  %419 = load double, double* %418, align 8, !tbaa !190
  %420 = fmul double %419, %416
  %421 = fadd double %414, %420
  %422 = fcmp olt double %403, 2.500000e-02
  br i1 %422, label %423, label %434

; <label>:423                                     ; preds = %376
  %424 = fdiv double %403, %11
  %425 = tail call double @sqrt(double %424) #3
  %426 = fmul double %425, 0x3FF5555555555555
  %427 = fmul double %403, %426
  %428 = fmul double %403, 6.000000e-01
  %429 = fsub double 1.000000e+00, %428
  %430 = fmul double %403, 0x3FCB6DB6DB6DB6DB
  %431 = fmul double %403, %430
  %432 = fadd double %429, %431
  %433 = fmul double %432, %427
  br label %434

; <label>:434                                     ; preds = %423, %376
  %phix21.0 = phi double [ %433, %423 ], [ %421, %376 ]
  %435 = fcmp ogt double %403, 1.000000e+01
  br i1 %435, label %436, label %._crit_edge2

._crit_edge2:                                     ; preds = %434
  %.pre = fdiv double %403, %11
  br label %451

; <label>:436                                     ; preds = %434
  %437 = tail call double @exp(double %403) #3
  %438 = fdiv double 2.000000e+00, %437
  %439 = fdiv double %403, %11
  %440 = tail call double @sqrt(double %439) #3
  %441 = fmul double %438, %440
  %442 = fmul double %403, 2.000000e+00
  %443 = fdiv double 1.000000e+00, %442
  %444 = fadd double %443, 1.000000e+00
  %445 = fmul double %403, 4.000000e+00
  %446 = fmul double %403, %445
  %447 = fdiv double 1.000000e+00, %446
  %448 = fsub double %444, %447
  %449 = fmul double %448, %441
  %450 = fsub double 1.000000e+00, %449
  br label %451

; <label>:451                                     ; preds = %._crit_edge2, %436
  %.pre-phi = phi double [ %.pre, %._crit_edge2 ], [ %439, %436 ]
  %phix21.1 = phi double [ %450, %436 ], [ %phix21.0, %._crit_edge2 ]
  %452 = tail call double @sqrt(double %.pre-phi) #3
  %453 = fmul double %452, 2.000000e+00
  %454 = tail call double @exp(double %403) #3
  %455 = fdiv double %453, %454
  %456 = fmul double %402, %403
  %457 = fdiv double %phix21.1, %456
  %458 = fmul double %389, %457
  %459 = sext i32 %393 to i64
  %460 = getelementptr inbounds double, double* %56, i64 %459
  %461 = load double, double* %460, align 8, !tbaa !190
  %462 = fmul double %458, %461
  %463 = fsub double %387, %462
  %464 = fsub double %phix21.1, %455
  %465 = fdiv double %464, %402
  %466 = getelementptr inbounds double, double* %53, i64 %459
  %467 = load double, double* %466, align 8, !tbaa !190
  %468 = fmul double %467, %465
  %469 = fsub double %463, %468
  store double %469, double* %386, align 8, !tbaa !190
  %470 = bitcast double* %388 to i64*
  store i64 %379, i64* %470, align 8, !tbaa !190
  %471 = bitcast double* %390 to i64*
  store i64 %382, i64* %471, align 8, !tbaa !190
  %472 = getelementptr inbounds double, double* %45, i64 %indvars.iv
  store double %374, double* %472, align 8, !tbaa !190
  %473 = getelementptr inbounds double, double* %47, i64 %indvars.iv
  %474 = bitcast double* %473 to i64*
  store i64 %385, i64* %474, align 8, !tbaa !190
  %475 = getelementptr inbounds double, double* %49, i64 %indvars.iv
  store double %469, double* %475, align 8, !tbaa !190
  br label %476

; <label>:476                                     ; preds = %451, %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %9
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @remap(%struct.gtc_bench_data_t* nocapture readnone %gtc_input) #12 {
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @calc_moments(%struct.gtc_bench_data_t* %gtc_input) #0 {
  %istatus = alloca %struct.MPI_Status, align 4
  %timing_e_inter = alloca double, align 8
  %timing_inter_min = alloca double, align 8
  %timing_inter_max = alloca double, align 8
  %timing_e = alloca double, align 8
  %timing_max = alloca double, align 8
  %timing_min = alloca double, align 8
  %1 = bitcast %struct.MPI_Status* %istatus to i8*
  call void @llvm.lifetime.start(i64 20, i8* %1) #3
  %2 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 7
  %3 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4, !tbaa !197
  %5 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 3
  %6 = load i32, i32* %5, align 4, !tbaa !152
  %7 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8, !tbaa !192
  %9 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 54
  %10 = load double, double* %9, align 8, !tbaa !212
  %11 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 68
  %12 = load double, double* %11, align 8, !tbaa !196
  %13 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 49
  %14 = load double, double* %13, align 8, !tbaa !164
  %15 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 48
  %16 = load double, double* %15, align 8, !tbaa !163
  %17 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 74
  %18 = load double, double* %17, align 8, !tbaa !171
  %19 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 76
  %20 = load double, double* %19, align 8, !tbaa !170
  %21 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 64
  %22 = load double, double* %21, align 8, !tbaa !208
  %23 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 83
  %24 = load double, double* %23, align 8, !tbaa !203
  %25 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 0, i32 84
  %26 = load double, double* %25, align 8, !tbaa !204
  %27 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 47
  %28 = load double*, double** %27, align 8, !tbaa !36
  %29 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 2
  %30 = load i32*, i32** %29, align 8, !tbaa !29
  %31 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 9
  %32 = load double*, double** %31, align 8, !tbaa !30
  %33 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 48
  %34 = load i32*, i32** %33, align 8, !tbaa !31
  %35 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 14
  %36 = load double*, double** %35, align 8, !tbaa !60
  %37 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 15
  %38 = load double*, double** %37, align 8, !tbaa !34
  %39 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 5
  %40 = load double*, double** %39, align 8, !tbaa !62
  %41 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 6
  %42 = load double*, double** %41, align 8, !tbaa !63
  %43 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 1, i32 23
  %44 = load double*, double** %43, align 8, !tbaa !51
  %45 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 6
  %46 = load i32, i32* %45, align 8, !tbaa !242
  %47 = fdiv double 5.000000e-01, %10
  %48 = tail call double @fabs(double %18) #16
  %49 = fmul double %22, %48
  %50 = fdiv double %20, %49
  %51 = fdiv double 1.000000e+00, %20
  %52 = add nsw i32 %6, -1
  %53 = fsub double %14, %16
  %54 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 0
  %55 = load double*, double** %54, align 8, !tbaa !85
  %56 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 1
  %57 = load double*, double** %56, align 8, !tbaa !86
  %58 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 2
  %59 = load double*, double** %58, align 8, !tbaa !87
  %60 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 3
  %61 = load double*, double** %60, align 8, !tbaa !88
  %62 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 4
  %63 = load double*, double** %62, align 8, !tbaa !89
  %64 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 2, i32 5
  %65 = load double*, double** %64, align 8, !tbaa !90
  %66 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 19
  %67 = load i32, i32* %66, align 4, !tbaa !216
  %68 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 20
  %69 = bitcast i32* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = trunc i64 %70 to i32
  %72 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 18
  %73 = load i32, i32* %72, align 8, !tbaa !215
  %74 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 21
  %75 = lshr i64 %70, 32
  %76 = trunc i64 %75 to i32
  %77 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 14
  %78 = load double*, double** %77, align 8, !tbaa !133
  %79 = bitcast double* %78 to i8*
  %80 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 15
  %81 = load double*, double** %80, align 8, !tbaa !134
  %82 = bitcast double* %81 to i8*
  %83 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 16
  %84 = load double*, double** %83, align 8, !tbaa !135
  %85 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 4, i32 17
  %86 = load double*, double** %85, align 8, !tbaa !136
  %87 = tail call double @MPI_Wtime() #3
  %88 = add i32 %4, 1
  %89 = mul i32 %88, 7
  %90 = mul nsw i32 %76, %89
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %.preheader29.loopexit, label %.preheader29

.preheader29.loopexit:                            ; preds = %0
  %92 = mul i32 %4, 7
  %93 = add i32 %92, 7
  %94 = mul i32 %76, %93
  %95 = add i32 %94, -1
  %96 = zext i32 %95 to i64
  %97 = shl nuw nsw i64 %96, 3
  %98 = add nuw nsw i64 %97, 8
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 %98, i32 8, i1 false)
  br label %.preheader29

.preheader29:                                     ; preds = %.preheader29.loopexit, %0
  %99 = icmp sgt i32 %8, 0
  br i1 %99, label %.lr.ph62, label %.preheader28

.lr.ph62:                                         ; preds = %.preheader29
  %100 = fmul double %51, 2.000000e+00
  %101 = add nsw i32 %4, -1
  br label %105

.preheader28.loopexit:                            ; preds = %558
  br label %.preheader28

.preheader28:                                     ; preds = %.preheader28.loopexit, %.preheader29
  br i1 %91, label %.lr.ph59.preheader, label %._crit_edge60

.lr.ph59.preheader:                               ; preds = %.preheader28
  %102 = mul i32 %4, 7
  %103 = add i32 %102, 7
  %104 = mul i32 %76, %103
  br label %.lr.ph59

; <label>:105                                     ; preds = %558, %.lr.ph62
  %indvars.iv117 = phi i64 [ 0, %.lr.ph62 ], [ %indvars.iv.next118, %558 ]
  %106 = getelementptr inbounds double, double* %57, i64 %indvars.iv117
  %107 = load double, double* %106, align 8, !tbaa !190
  %108 = getelementptr inbounds double, double* %59, i64 %indvars.iv117
  %109 = load double, double* %108, align 8, !tbaa !190
  %110 = getelementptr inbounds double, double* %63, i64 %indvars.iv117
  %111 = load double, double* %110, align 8, !tbaa !190
  %112 = fcmp oeq double %109, 1.000000e+08
  br i1 %112, label %558, label %113

; <label>:113                                     ; preds = %105
  %114 = getelementptr inbounds double, double* %55, i64 %indvars.iv117
  %115 = load double, double* %114, align 8, !tbaa !190
  %116 = fmul double %115, 2.000000e+00
  %117 = tail call double @sqrt(double %116) #3
  %118 = tail call double @cos(double %107) #3
  %119 = fmul double %117, %118
  %120 = fadd double %119, 1.000000e+00
  %121 = fdiv double 1.000000e+00, %120
  %122 = getelementptr inbounds double, double* %61, i64 %indvars.iv117
  %123 = load double, double* %122, align 8, !tbaa !190
  %124 = fmul double %123, %121
  %125 = fmul double %18, %124
  %126 = fmul double %51, %125
  %127 = fmul double %50, %126
  %128 = fmul double %100, %121
  %129 = getelementptr inbounds double, double* %65, i64 %indvars.iv117
  %130 = load double, double* %129, align 8, !tbaa !190
  %131 = fmul double %130, %128
  %132 = fmul double %130, %131
  %133 = fmul double %50, %132
  %134 = fmul double %50, %133
  %135 = fmul double %127, 5.000000e-01
  %136 = fmul double %127, %135
  %137 = fmul double %134, 5.000000e-01
  %138 = fcmp olt double %136, 1.000000e-20
  %139 = select i1 %138, double 1.000000e-20, double %136
  %140 = fcmp olt double %137, 1.000000e-20
  %141 = select i1 %140, double 1.000000e-20, double %137
  %142 = fmul double %127, %139
  %143 = fmul double %127, %141
  %144 = fsub double %109, %12
  %145 = fmul double %26, %144
  %146 = fptosi double %145 to i32
  %147 = tail call i32 @abs_min_int(i32 %101, i32 %146) #3
  %148 = sitofp i32 %147 to double
  %149 = fsub double %145, %148
  %150 = fsub double 1.000000e+00, %149
  %151 = fmul double %111, %149
  %152 = fmul double %111, %150
  %153 = fsub double %117, %16
  %154 = tail call double @abs_min_real(double %53, double %153) #3
  %155 = fmul double %24, %154
  %156 = fptosi double %155 to i32
  %157 = tail call i32 @abs_min_int(i32 %52, i32 %156) #3
  %158 = sitofp i32 %157 to double
  %159 = fsub double %155, %158
  %160 = fsub double 1.000000e+00, %159
  %161 = add nsw i32 %157, 1
  %162 = sext i32 %157 to i64
  %163 = getelementptr inbounds double, double* %32, i64 %162
  %164 = load double, double* %163, align 8, !tbaa !190
  %165 = fmul double %109, %164
  %166 = fsub double %107, %165
  %167 = fmul double %47, %166
  %168 = fadd double %167, 1.000000e+01
  %169 = sext i32 %161 to i64
  %170 = getelementptr inbounds double, double* %32, i64 %169
  %171 = load double, double* %170, align 8, !tbaa !190
  %172 = fmul double %109, %171
  %173 = fsub double %107, %172
  %174 = fmul double %47, %173
  %175 = fadd double %174, 1.000000e+01
  %176 = fptosi double %168 to i32
  %177 = sitofp i32 %176 to double
  %178 = fsub double %168, %177
  %179 = getelementptr inbounds double, double* %28, i64 %162
  %180 = load double, double* %179, align 8, !tbaa !190
  %181 = fmul double %180, %178
  %182 = fptosi double %175 to i32
  %183 = sitofp i32 %182 to double
  %184 = fsub double %175, %183
  %185 = getelementptr inbounds double, double* %28, i64 %169
  %186 = load double, double* %185, align 8, !tbaa !190
  %187 = fmul double %186, %184
  %188 = getelementptr inbounds i32, i32* %34, i64 %162
  %189 = load i32, i32* %188, align 4, !tbaa !1
  %190 = add nsw i32 %189, -1
  %191 = fptosi double %181 to i32
  %192 = tail call i32 @abs_min_int(i32 %190, i32 %191) #3
  %193 = getelementptr inbounds i32, i32* %34, i64 %169
  %194 = load i32, i32* %193, align 4, !tbaa !1
  %195 = add nsw i32 %194, -1
  %196 = fptosi double %187 to i32
  %197 = tail call i32 @abs_min_int(i32 %195, i32 %196) #3
  %198 = getelementptr inbounds i32, i32* %30, i64 %162
  %199 = load i32, i32* %198, align 4, !tbaa !1
  %200 = sub i32 %192, %73
  %201 = add i32 %200, %199
  %202 = getelementptr inbounds i32, i32* %30, i64 %169
  %203 = load i32, i32* %202, align 4, !tbaa !1
  %204 = sub i32 %197, %73
  %205 = add i32 %204, %203
  %206 = sitofp i32 %192 to double
  %207 = fsub double %181, %206
  %208 = fmul double %160, %207
  %209 = fsub double %160, %208
  %210 = sitofp i32 %197 to double
  %211 = fsub double %187, %210
  %212 = fmul double %159, %211
  %213 = fsub double %159, %212
  %214 = mul i32 %89, %201
  %215 = mul i32 %147, 7
  %216 = add nsw i32 %214, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds double, double* %78, i64 %217
  %219 = load double, double* %218, align 8, !tbaa !190
  %220 = add nsw i32 %216, 1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds double, double* %78, i64 %221
  %223 = load double, double* %222, align 8, !tbaa !190
  %224 = add nsw i32 %216, 2
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds double, double* %78, i64 %225
  %227 = load double, double* %226, align 8, !tbaa !190
  %228 = add nsw i32 %216, 3
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %78, i64 %229
  %231 = load double, double* %230, align 8, !tbaa !190
  %232 = add nsw i32 %216, 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds double, double* %78, i64 %233
  %235 = load double, double* %234, align 8, !tbaa !190
  %236 = add nsw i32 %216, 5
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds double, double* %78, i64 %237
  %239 = load double, double* %238, align 8, !tbaa !190
  %240 = add nsw i32 %216, 6
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds double, double* %78, i64 %241
  %243 = load double, double* %242, align 8, !tbaa !190
  %244 = add i32 %215, 7
  %245 = add nsw i32 %214, %244
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds double, double* %78, i64 %246
  %248 = load double, double* %247, align 8, !tbaa !190
  %249 = add nsw i32 %245, 1
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds double, double* %78, i64 %250
  %252 = load double, double* %251, align 8, !tbaa !190
  %253 = add nsw i32 %245, 2
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double, double* %78, i64 %254
  %256 = load double, double* %255, align 8, !tbaa !190
  %257 = add nsw i32 %245, 3
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %78, i64 %258
  %260 = load double, double* %259, align 8, !tbaa !190
  %261 = add nsw i32 %245, 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds double, double* %78, i64 %262
  %264 = load double, double* %263, align 8, !tbaa !190
  %265 = add nsw i32 %245, 5
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds double, double* %78, i64 %266
  %268 = load double, double* %267, align 8, !tbaa !190
  %269 = add nsw i32 %245, 6
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds double, double* %78, i64 %270
  %272 = load double, double* %271, align 8, !tbaa !190
  %273 = add nsw i32 %201, 1
  %274 = mul i32 %89, %273
  %275 = add nsw i32 %274, %215
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds double, double* %78, i64 %276
  %278 = load double, double* %277, align 8, !tbaa !190
  %279 = add nsw i32 %275, 1
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds double, double* %78, i64 %280
  %282 = load double, double* %281, align 8, !tbaa !190
  %283 = add nsw i32 %275, 2
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds double, double* %78, i64 %284
  %286 = load double, double* %285, align 8, !tbaa !190
  %287 = add nsw i32 %275, 3
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds double, double* %78, i64 %288
  %290 = load double, double* %289, align 8, !tbaa !190
  %291 = add nsw i32 %275, 4
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds double, double* %78, i64 %292
  %294 = load double, double* %293, align 8, !tbaa !190
  %295 = add nsw i32 %275, 5
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds double, double* %78, i64 %296
  %298 = load double, double* %297, align 8, !tbaa !190
  %299 = add nsw i32 %275, 6
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds double, double* %78, i64 %300
  %302 = load double, double* %301, align 8, !tbaa !190
  %303 = add nsw i32 %274, %244
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds double, double* %78, i64 %304
  %306 = load double, double* %305, align 8, !tbaa !190
  %307 = add nsw i32 %303, 1
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds double, double* %78, i64 %308
  %310 = load double, double* %309, align 8, !tbaa !190
  %311 = add nsw i32 %303, 2
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds double, double* %78, i64 %312
  %314 = load double, double* %313, align 8, !tbaa !190
  %315 = add nsw i32 %303, 3
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds double, double* %78, i64 %316
  %318 = load double, double* %317, align 8, !tbaa !190
  %319 = add nsw i32 %303, 4
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds double, double* %78, i64 %320
  %322 = load double, double* %321, align 8, !tbaa !190
  %323 = add nsw i32 %303, 5
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds double, double* %78, i64 %324
  %326 = load double, double* %325, align 8, !tbaa !190
  %327 = add nsw i32 %303, 6
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds double, double* %78, i64 %328
  %330 = load double, double* %329, align 8, !tbaa !190
  %331 = fmul double %152, %209
  %332 = fadd double %219, %331
  %333 = fmul double %127, %331
  %334 = fadd double %223, %333
  %335 = fmul double %139, %331
  %336 = fadd double %227, %335
  %337 = fmul double %141, %331
  %338 = fadd double %231, %337
  %339 = fmul double %142, %331
  %340 = fadd double %339, %235
  %341 = fmul double %143, %331
  %342 = fadd double %341, %239
  %343 = fmul double %150, %209
  %344 = fadd double %343, %243
  %345 = fmul double %151, %209
  %346 = fadd double %345, %248
  %347 = fmul double %127, %345
  %348 = fadd double %347, %252
  %349 = fmul double %139, %345
  %350 = fadd double %349, %256
  %351 = fmul double %141, %345
  %352 = fadd double %351, %260
  %353 = fmul double %142, %345
  %354 = fadd double %353, %264
  %355 = fmul double %143, %345
  %356 = fadd double %355, %268
  %357 = fmul double %149, %209
  %358 = fadd double %357, %272
  %359 = fmul double %152, %208
  %360 = fadd double %359, %278
  %361 = fmul double %127, %359
  %362 = fadd double %361, %282
  %363 = fmul double %139, %359
  %364 = fadd double %363, %286
  %365 = fmul double %141, %359
  %366 = fadd double %365, %290
  %367 = fmul double %142, %359
  %368 = fadd double %367, %294
  %369 = fmul double %143, %359
  %370 = fadd double %369, %298
  %371 = fmul double %150, %208
  %372 = fadd double %371, %302
  %373 = fmul double %151, %208
  %374 = fadd double %373, %306
  %375 = fmul double %127, %373
  %376 = fadd double %375, %310
  %377 = fmul double %139, %373
  %378 = fadd double %377, %314
  %379 = fmul double %141, %373
  %380 = fadd double %379, %318
  %381 = fmul double %142, %373
  %382 = fadd double %381, %322
  %383 = fmul double %143, %373
  %384 = fadd double %383, %326
  %385 = fmul double %149, %208
  %386 = fadd double %385, %330
  store double %332, double* %218, align 8, !tbaa !190
  store double %334, double* %222, align 8, !tbaa !190
  store double %336, double* %226, align 8, !tbaa !190
  store double %338, double* %230, align 8, !tbaa !190
  store double %340, double* %234, align 8, !tbaa !190
  store double %342, double* %238, align 8, !tbaa !190
  store double %344, double* %242, align 8, !tbaa !190
  store double %346, double* %247, align 8, !tbaa !190
  store double %348, double* %251, align 8, !tbaa !190
  store double %350, double* %255, align 8, !tbaa !190
  store double %352, double* %259, align 8, !tbaa !190
  store double %354, double* %263, align 8, !tbaa !190
  store double %356, double* %267, align 8, !tbaa !190
  store double %358, double* %271, align 8, !tbaa !190
  store double %360, double* %277, align 8, !tbaa !190
  store double %362, double* %281, align 8, !tbaa !190
  store double %364, double* %285, align 8, !tbaa !190
  store double %366, double* %289, align 8, !tbaa !190
  store double %368, double* %293, align 8, !tbaa !190
  store double %370, double* %297, align 8, !tbaa !190
  store double %372, double* %301, align 8, !tbaa !190
  store double %374, double* %305, align 8, !tbaa !190
  store double %376, double* %309, align 8, !tbaa !190
  store double %378, double* %313, align 8, !tbaa !190
  store double %380, double* %317, align 8, !tbaa !190
  store double %382, double* %321, align 8, !tbaa !190
  store double %384, double* %325, align 8, !tbaa !190
  store double %386, double* %329, align 8, !tbaa !190
  %387 = mul i32 %89, %205
  %388 = add nsw i32 %387, %215
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds double, double* %78, i64 %389
  %391 = load double, double* %390, align 8, !tbaa !190
  %392 = add nsw i32 %388, 1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds double, double* %78, i64 %393
  %395 = load double, double* %394, align 8, !tbaa !190
  %396 = add nsw i32 %388, 2
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds double, double* %78, i64 %397
  %399 = load double, double* %398, align 8, !tbaa !190
  %400 = add nsw i32 %388, 3
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds double, double* %78, i64 %401
  %403 = load double, double* %402, align 8, !tbaa !190
  %404 = add nsw i32 %388, 4
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds double, double* %78, i64 %405
  %407 = load double, double* %406, align 8, !tbaa !190
  %408 = add nsw i32 %388, 5
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds double, double* %78, i64 %409
  %411 = load double, double* %410, align 8, !tbaa !190
  %412 = add nsw i32 %388, 6
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds double, double* %78, i64 %413
  %415 = load double, double* %414, align 8, !tbaa !190
  %416 = add nsw i32 %387, %244
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds double, double* %78, i64 %417
  %419 = load double, double* %418, align 8, !tbaa !190
  %420 = add nsw i32 %416, 1
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds double, double* %78, i64 %421
  %423 = load double, double* %422, align 8, !tbaa !190
  %424 = add nsw i32 %416, 2
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds double, double* %78, i64 %425
  %427 = load double, double* %426, align 8, !tbaa !190
  %428 = add nsw i32 %416, 3
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds double, double* %78, i64 %429
  %431 = load double, double* %430, align 8, !tbaa !190
  %432 = add nsw i32 %416, 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds double, double* %78, i64 %433
  %435 = load double, double* %434, align 8, !tbaa !190
  %436 = add nsw i32 %416, 5
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds double, double* %78, i64 %437
  %439 = load double, double* %438, align 8, !tbaa !190
  %440 = add nsw i32 %416, 6
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds double, double* %78, i64 %441
  %443 = load double, double* %442, align 8, !tbaa !190
  %444 = add nsw i32 %205, 1
  %445 = mul i32 %89, %444
  %446 = add nsw i32 %445, %215
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds double, double* %78, i64 %447
  %449 = load double, double* %448, align 8, !tbaa !190
  %450 = add nsw i32 %446, 1
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds double, double* %78, i64 %451
  %453 = load double, double* %452, align 8, !tbaa !190
  %454 = add nsw i32 %446, 2
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds double, double* %78, i64 %455
  %457 = load double, double* %456, align 8, !tbaa !190
  %458 = add nsw i32 %446, 3
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds double, double* %78, i64 %459
  %461 = load double, double* %460, align 8, !tbaa !190
  %462 = add nsw i32 %446, 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds double, double* %78, i64 %463
  %465 = load double, double* %464, align 8, !tbaa !190
  %466 = add nsw i32 %446, 5
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %78, i64 %467
  %469 = load double, double* %468, align 8, !tbaa !190
  %470 = add nsw i32 %446, 6
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds double, double* %78, i64 %471
  %473 = load double, double* %472, align 8, !tbaa !190
  %474 = add nsw i32 %445, %244
  %475 = sext i32 %474 to i64
  %476 = getelementptr inbounds double, double* %78, i64 %475
  %477 = load double, double* %476, align 8, !tbaa !190
  %478 = add nsw i32 %474, 1
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds double, double* %78, i64 %479
  %481 = load double, double* %480, align 8, !tbaa !190
  %482 = add nsw i32 %474, 2
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds double, double* %78, i64 %483
  %485 = load double, double* %484, align 8, !tbaa !190
  %486 = add nsw i32 %474, 3
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds double, double* %78, i64 %487
  %489 = load double, double* %488, align 8, !tbaa !190
  %490 = add nsw i32 %474, 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds double, double* %78, i64 %491
  %493 = load double, double* %492, align 8, !tbaa !190
  %494 = add nsw i32 %474, 5
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds double, double* %78, i64 %495
  %497 = load double, double* %496, align 8, !tbaa !190
  %498 = add nsw i32 %474, 6
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds double, double* %78, i64 %499
  %501 = load double, double* %500, align 8, !tbaa !190
  %502 = fmul double %152, %213
  %503 = fadd double %502, %391
  %504 = fmul double %127, %502
  %505 = fadd double %504, %395
  %506 = fmul double %139, %502
  %507 = fadd double %506, %399
  %508 = fmul double %141, %502
  %509 = fadd double %508, %403
  %510 = fmul double %142, %502
  %511 = fadd double %510, %407
  %512 = fmul double %143, %502
  %513 = fadd double %512, %411
  %514 = fmul double %150, %213
  %515 = fadd double %514, %415
  %516 = fmul double %151, %213
  %517 = fadd double %516, %419
  %518 = fmul double %127, %516
  %519 = fadd double %518, %423
  %520 = fmul double %139, %516
  %521 = fadd double %520, %427
  %522 = fmul double %141, %516
  %523 = fadd double %522, %431
  %524 = fmul double %142, %516
  %525 = fadd double %524, %435
  %526 = fmul double %143, %516
  %527 = fadd double %526, %439
  %528 = fmul double %149, %213
  %529 = fadd double %528, %443
  %530 = fmul double %152, %212
  %531 = fadd double %530, %449
  %532 = fmul double %127, %530
  %533 = fadd double %532, %453
  %534 = fmul double %139, %530
  %535 = fadd double %534, %457
  %536 = fmul double %141, %530
  %537 = fadd double %536, %461
  %538 = fmul double %142, %530
  %539 = fadd double %538, %465
  %540 = fmul double %143, %530
  %541 = fadd double %540, %469
  %542 = fmul double %150, %212
  %543 = fadd double %542, %473
  %544 = fmul double %151, %212
  %545 = fadd double %544, %477
  %546 = fmul double %127, %544
  %547 = fadd double %546, %481
  %548 = fmul double %139, %544
  %549 = fadd double %548, %485
  %550 = fmul double %141, %544
  %551 = fadd double %550, %489
  %552 = fmul double %142, %544
  %553 = fadd double %552, %493
  %554 = fmul double %143, %544
  %555 = fadd double %554, %497
  %556 = fmul double %149, %212
  %557 = fadd double %556, %501
  store double %503, double* %390, align 8, !tbaa !190
  store double %505, double* %394, align 8, !tbaa !190
  store double %507, double* %398, align 8, !tbaa !190
  store double %509, double* %402, align 8, !tbaa !190
  store double %511, double* %406, align 8, !tbaa !190
  store double %513, double* %410, align 8, !tbaa !190
  store double %515, double* %414, align 8, !tbaa !190
  store double %517, double* %418, align 8, !tbaa !190
  store double %519, double* %422, align 8, !tbaa !190
  store double %521, double* %426, align 8, !tbaa !190
  store double %523, double* %430, align 8, !tbaa !190
  store double %525, double* %434, align 8, !tbaa !190
  store double %527, double* %438, align 8, !tbaa !190
  store double %529, double* %442, align 8, !tbaa !190
  store double %531, double* %448, align 8, !tbaa !190
  store double %533, double* %452, align 8, !tbaa !190
  store double %535, double* %456, align 8, !tbaa !190
  store double %537, double* %460, align 8, !tbaa !190
  store double %539, double* %464, align 8, !tbaa !190
  store double %541, double* %468, align 8, !tbaa !190
  store double %543, double* %472, align 8, !tbaa !190
  store double %545, double* %476, align 8, !tbaa !190
  store double %547, double* %480, align 8, !tbaa !190
  store double %549, double* %484, align 8, !tbaa !190
  store double %551, double* %488, align 8, !tbaa !190
  store double %553, double* %492, align 8, !tbaa !190
  store double %555, double* %496, align 8, !tbaa !190
  store double %557, double* %500, align 8, !tbaa !190
  br label %558

; <label>:558                                     ; preds = %113, %105
  %indvars.iv.next118 = add nuw nsw i64 %indvars.iv117, 1
  %lftr.wideiv119 = trunc i64 %indvars.iv.next118 to i32
  %exitcond120 = icmp eq i32 %lftr.wideiv119, %8
  br i1 %exitcond120, label %.preheader28.loopexit, label %105

.lr.ph59:                                         ; preds = %.lr.ph59, %.lr.ph59.preheader
  %indvars.iv113 = phi i64 [ 0, %.lr.ph59.preheader ], [ %indvars.iv.next114, %.lr.ph59 ]
  %559 = getelementptr inbounds double, double* %78, i64 %indvars.iv113
  %560 = load double, double* %559, align 8, !tbaa !190
  %561 = fadd double %560, 0.000000e+00
  store double %561, double* %559, align 8, !tbaa !190
  %indvars.iv.next114 = add nuw nsw i64 %indvars.iv113, 1
  %lftr.wideiv115 = trunc i64 %indvars.iv.next114 to i32
  %exitcond116 = icmp eq i32 %lftr.wideiv115, %104
  br i1 %exitcond116, label %._crit_edge60.loopexit, label %.lr.ph59

._crit_edge60.loopexit:                           ; preds = %.lr.ph59
  br label %._crit_edge60

._crit_edge60:                                    ; preds = %._crit_edge60.loopexit, %.preheader28
  %562 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 27
  %563 = load i32, i32* %562, align 8, !tbaa !261
  %564 = icmp sgt i32 %563, 1
  br i1 %564, label %.preheader27, label %576

.preheader27:                                     ; preds = %._crit_edge60
  br i1 %91, label %.lr.ph56.preheader, label %._crit_edge57

.lr.ph56.preheader:                               ; preds = %.preheader27
  %565 = mul i32 %4, 7
  %566 = add i32 %565, 7
  %567 = mul i32 %76, %566
  br label %.lr.ph56

._crit_edge57.loopexit:                           ; preds = %.lr.ph56
  br label %._crit_edge57

._crit_edge57:                                    ; preds = %._crit_edge57.loopexit, %.preheader27
  %568 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 6, i32 34
  %569 = load i32, i32* %568, align 4, !tbaa !278
  %570 = tail call i32 @MPI_Allreduce(i8* %82, i8* %79, i32 %90, i32 1275070475, i32 1476395011, i32 %569) #3
  br label %576

.lr.ph56:                                         ; preds = %.lr.ph56, %.lr.ph56.preheader
  %indvars.iv109 = phi i64 [ 0, %.lr.ph56.preheader ], [ %indvars.iv.next110, %.lr.ph56 ]
  %571 = getelementptr inbounds double, double* %78, i64 %indvars.iv109
  %572 = bitcast double* %571 to i64*
  %573 = load i64, i64* %572, align 8, !tbaa !190
  %574 = getelementptr inbounds double, double* %81, i64 %indvars.iv109
  %575 = bitcast double* %574 to i64*
  store i64 %573, i64* %575, align 8, !tbaa !190
  store double 0.000000e+00, double* %571, align 8, !tbaa !190
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %lftr.wideiv111 = trunc i64 %indvars.iv.next110 to i32
  %exitcond112 = icmp eq i32 %lftr.wideiv111, %567
  br i1 %exitcond112, label %._crit_edge57.loopexit, label %.lr.ph56

; <label>:576                                     ; preds = %._crit_edge57, %._crit_edge60
  %577 = tail call i32 @sum_plane_moments(%struct.gtc_bench_data_t* nonnull %gtc_input) #3
  %578 = icmp sgt i32 %67, %71
  br i1 %578, label %.preheader24, label %.preheader26.lr.ph

.preheader26.lr.ph:                               ; preds = %576
  %579 = icmp slt i32 %4, 0
  %580 = sext i32 %67 to i64
  %581 = sext i32 %71 to i64
  br label %.preheader26

.preheader26:                                     ; preds = %._crit_edge53, %.preheader26.lr.ph
  %indvars.iv107 = phi i64 [ %indvars.iv.next108, %._crit_edge53 ], [ %580, %.preheader26.lr.ph ]
  br i1 %579, label %._crit_edge53, label %.preheader25.lr.ph

.preheader25.lr.ph:                               ; preds = %.preheader26
  %582 = getelementptr inbounds i32, i32* %30, i64 %indvars.iv107
  %583 = load i32, i32* %582, align 4
  %584 = sub i32 %583, %73
  %585 = mul i32 %89, %584
  %586 = getelementptr inbounds i32, i32* %34, i64 %indvars.iv107
  %587 = load i32, i32* %586, align 4
  %588 = add i32 %584, %587
  %589 = mul i32 %89, %588
  br label %.preheader25

.preheader24.loopexit:                            ; preds = %._crit_edge53
  br label %.preheader24

.preheader24:                                     ; preds = %.preheader24.loopexit, %576
  %590 = icmp sgt i32 %76, 0
  br i1 %590, label %.preheader23.preheader, label %._crit_edge50

.preheader23.preheader:                           ; preds = %.preheader24
  %591 = sext i32 %89 to i64
  br label %.preheader23

.preheader25:                                     ; preds = %594, %.preheader25.lr.ph
  %j3.052 = phi i32 [ 0, %.preheader25.lr.ph ], [ %595, %594 ]
  %592 = mul nsw i32 %j3.052, 7
  br label %596

._crit_edge53.loopexit:                           ; preds = %594
  br label %._crit_edge53

._crit_edge53:                                    ; preds = %._crit_edge53.loopexit, %.preheader26
  %593 = icmp slt i64 %indvars.iv107, %581
  %indvars.iv.next108 = add nsw i64 %indvars.iv107, 1
  br i1 %593, label %.preheader26, label %.preheader24.loopexit

; <label>:594                                     ; preds = %596
  %595 = add nuw nsw i32 %j3.052, 1
  %exitcond106 = icmp eq i32 %j3.052, %4
  br i1 %exitcond106, label %._crit_edge53.loopexit, label %.preheader25

; <label>:596                                     ; preds = %596, %.preheader25
  %indvars.iv103 = phi i64 [ 0, %.preheader25 ], [ %indvars.iv.next104, %596 ]
  %597 = trunc i64 %indvars.iv103 to i32
  %598 = add i32 %597, %592
  %599 = add i32 %598, %585
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds double, double* %78, i64 %600
  %602 = load double, double* %601, align 8, !tbaa !190
  %603 = add i32 %598, %589
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds double, double* %78, i64 %604
  %606 = load double, double* %605, align 8, !tbaa !190
  %607 = fadd double %602, %606
  store double %607, double* %605, align 8, !tbaa !190
  %608 = bitcast double* %605 to i64*
  %609 = bitcast double %607 to i64
  %610 = bitcast double* %601 to i64*
  store i64 %609, i64* %610, align 8, !tbaa !190
  %indvars.iv.next104 = add nuw nsw i64 %indvars.iv103, 1
  %exitcond105 = icmp eq i64 %indvars.iv.next104, 7
  br i1 %exitcond105, label %594, label %596

.preheader23:                                     ; preds = %630, %.preheader23.preheader
  %indvars.iv99 = phi i64 [ 0, %.preheader23.preheader ], [ %indvars.iv.next100, %630 ]
  %611 = mul nsw i64 %indvars.iv99, %591
  %612 = mul nuw nsw i64 %indvars.iv99, 7
  br label %631

._crit_edge50.loopexit:                           ; preds = %630
  br label %._crit_edge50

._crit_edge50:                                    ; preds = %._crit_edge50.loopexit, %.preheader24
  %613 = mul nsw i32 %76, 7
  %614 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 8
  %615 = bitcast i32* %614 to i64*
  %616 = load i64, i64* %615, align 8
  %617 = trunc i64 %616 to i32
  %618 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 9
  %619 = lshr i64 %616, 32
  %620 = trunc i64 %619 to i32
  %621 = load i32, i32* %2, align 4, !tbaa !229
  %622 = bitcast double* %84 to i8*
  %623 = bitcast double* %86 to i8*
  %624 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 14
  %625 = load i32, i32* %624, align 8, !tbaa !279
  %626 = call i32 @MPI_Sendrecv(i8* %622, i32 %613, i32 1275070475, i32 %617, i32 %621, i8* %623, i32 %613, i32 1275070475, i32 %620, i32 %620, i32 %625, %struct.MPI_Status* nonnull %istatus) #3
  br i1 %590, label %.preheader22.lr.ph, label %._crit_edge47

.preheader22.lr.ph:                               ; preds = %._crit_edge50
  %627 = mul nsw i32 %4, 7
  %628 = sext i32 %89 to i64
  %629 = sext i32 %627 to i64
  br label %.preheader22

; <label>:630                                     ; preds = %631
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %lftr.wideiv101 = trunc i64 %indvars.iv.next100 to i32
  %exitcond102 = icmp eq i32 %lftr.wideiv101, %76
  br i1 %exitcond102, label %._crit_edge50.loopexit, label %.preheader23

; <label>:631                                     ; preds = %631, %.preheader23
  %indvars.iv96 = phi i64 [ 0, %.preheader23 ], [ %indvars.iv.next97, %631 ]
  %632 = add nsw i64 %indvars.iv96, %611
  %633 = getelementptr inbounds double, double* %78, i64 %632
  %634 = bitcast double* %633 to i64*
  %635 = load i64, i64* %634, align 8, !tbaa !190
  %636 = add nuw nsw i64 %indvars.iv96, %612
  %637 = getelementptr inbounds double, double* %84, i64 %636
  %638 = bitcast double* %637 to i64*
  store i64 %635, i64* %638, align 8, !tbaa !190
  %639 = getelementptr inbounds double, double* %86, i64 %636
  store double 0.000000e+00, double* %639, align 8, !tbaa !190
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %exitcond98 = icmp eq i64 %indvars.iv.next97, 7
  br i1 %exitcond98, label %630, label %631

.preheader22:                                     ; preds = %649, %.preheader22.lr.ph
  %indvars.iv92 = phi i64 [ 0, %.preheader22.lr.ph ], [ %indvars.iv.next93, %649 ]
  %640 = mul nuw nsw i64 %indvars.iv92, 7
  %641 = mul nsw i64 %indvars.iv92, %628
  %642 = add nsw i64 %641, %629
  br label %650

._crit_edge47.loopexit:                           ; preds = %649
  br label %._crit_edge47

._crit_edge47:                                    ; preds = %._crit_edge47.loopexit, %._crit_edge50
  %643 = sub nsw i32 %73, %46
  %644 = icmp sgt i32 %643, -1
  br i1 %644, label %.preheader21, label %658

.preheader21:                                     ; preds = %._crit_edge47
  br i1 %590, label %.preheader20.lr.ph, label %._crit_edge38

.preheader20.lr.ph:                               ; preds = %.preheader21
  %645 = icmp slt i32 %4, 1
  %646 = sext i32 %89 to i64
  %647 = sext i32 %643 to i64
  %648 = sext i32 %4 to i64
  br label %.preheader20

; <label>:649                                     ; preds = %650
  %indvars.iv.next93 = add nuw nsw i64 %indvars.iv92, 1
  %lftr.wideiv94 = trunc i64 %indvars.iv.next93 to i32
  %exitcond95 = icmp eq i32 %lftr.wideiv94, %76
  br i1 %exitcond95, label %._crit_edge47.loopexit, label %.preheader22

; <label>:650                                     ; preds = %650, %.preheader22
  %indvars.iv89 = phi i64 [ 0, %.preheader22 ], [ %indvars.iv.next90, %650 ]
  %651 = add nuw nsw i64 %indvars.iv89, %640
  %652 = getelementptr inbounds double, double* %86, i64 %651
  %653 = load double, double* %652, align 8, !tbaa !190
  %654 = add nsw i64 %642, %indvars.iv89
  %655 = getelementptr inbounds double, double* %78, i64 %654
  %656 = load double, double* %655, align 8, !tbaa !190
  %657 = fadd double %653, %656
  store double %657, double* %655, align 8, !tbaa !190
  %indvars.iv.next90 = add nuw nsw i64 %indvars.iv89, 1
  %exitcond91 = icmp eq i64 %indvars.iv.next90, 7
  br i1 %exitcond91, label %649, label %650

; <label>:658                                     ; preds = %._crit_edge47
  call void @__assert_fail(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.270, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.271, i64 0, i64 0), i32 585, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @__PRETTY_FUNCTION__.calc_moments, i64 0, i64 0)) #15
  unreachable

.preheader20:                                     ; preds = %._crit_edge42, %.preheader20.lr.ph
  %indvars.iv85 = phi i64 [ 0, %.preheader20.lr.ph ], [ %indvars.iv.next86, %._crit_edge42 ]
  br i1 %645, label %._crit_edge42, label %.lr.ph41

.lr.ph41:                                         ; preds = %.preheader20
  %659 = add nsw i64 %indvars.iv85, %647
  %660 = mul nsw i64 %659, %648
  %661 = add i64 %660, 4294967295
  %662 = mul nsw i64 %indvars.iv85, %646
  br label %665

.preheader19:                                     ; preds = %._crit_edge42
  br i1 true, label %.preheader18.lr.ph, label %.preheader19.._crit_edge38_crit_edge

.preheader19.._crit_edge38_crit_edge:             ; preds = %.preheader19
  br label %._crit_edge38

.preheader18.lr.ph:                               ; preds = %.preheader19
  %663 = mul nsw i32 %4, 7
  %664 = sext i32 %663 to i64
  br label %.preheader18

._crit_edge42.loopexit:                           ; preds = %672
  br label %._crit_edge42

._crit_edge42:                                    ; preds = %._crit_edge42.loopexit, %.preheader20
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 1
  %lftr.wideiv87 = trunc i64 %indvars.iv.next86 to i32
  %exitcond88 = icmp eq i32 %lftr.wideiv87, %76
  br i1 %exitcond88, label %.preheader19, label %.preheader20

; <label>:665                                     ; preds = %672, %.lr.ph41
  %indvars.iv81 = phi i64 [ %indvars.iv.next82, %672 ], [ 1, %.lr.ph41 ]
  %666 = add i64 %661, %indvars.iv81
  %sext = shl i64 %666, 32
  %667 = ashr exact i64 %sext, 32
  %668 = getelementptr inbounds double, double* %44, i64 %667
  %669 = load double, double* %668, align 8, !tbaa !190
  %670 = mul nuw nsw i64 %indvars.iv81, 7
  %671 = add nsw i64 %670, %662
  br label %673

; <label>:672                                     ; preds = %673
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %lftr.wideiv83 = trunc i64 %indvars.iv.next82 to i32
  %exitcond84 = icmp eq i32 %lftr.wideiv83, %88
  br i1 %exitcond84, label %._crit_edge42.loopexit, label %665

; <label>:673                                     ; preds = %673, %665
  %indvars.iv78 = phi i64 [ 0, %665 ], [ %indvars.iv.next79, %673 ]
  %674 = add nsw i64 %671, %indvars.iv78
  %675 = getelementptr inbounds double, double* %78, i64 %674
  %676 = load double, double* %675, align 8, !tbaa !190
  %677 = fmul double %669, %676
  store double %677, double* %675, align 8, !tbaa !190
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %exitcond80 = icmp eq i64 %indvars.iv.next79, 7
  br i1 %exitcond80, label %672, label %673

.preheader18:                                     ; preds = %693, %.preheader18.lr.ph
  %indvars.iv74 = phi i64 [ 0, %.preheader18.lr.ph ], [ %indvars.iv.next75, %693 ]
  %678 = mul nsw i64 %indvars.iv74, %646
  %679 = add nsw i64 %678, %664
  %680 = mul nuw nsw i64 %indvars.iv74, 7
  br label %694

._crit_edge38.loopexit:                           ; preds = %693
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %.preheader19.._crit_edge38_crit_edge, %.preheader21
  %681 = sext i32 %613 to i64
  %682 = getelementptr inbounds double, double* %81, i64 %681
  %683 = shl nsw i32 %76, 3
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds double, double* %81, i64 %684
  br i1 %578, label %.preheader, label %.preheader17.lr.ph

.preheader17.lr.ph:                               ; preds = %._crit_edge38
  %686 = fmul double %22, %22
  %687 = sext i32 %46 to i64
  %688 = sext i32 %88 to i64
  %689 = sext i32 %4 to i64
  %690 = sext i32 %73 to i64
  %691 = sext i32 %67 to i64
  %692 = sext i32 %71 to i64
  br label %.preheader17

; <label>:693                                     ; preds = %694
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %lftr.wideiv76 = trunc i64 %indvars.iv.next75 to i32
  %exitcond77 = icmp eq i32 %lftr.wideiv76, %76
  br i1 %exitcond77, label %._crit_edge38.loopexit, label %.preheader18

; <label>:694                                     ; preds = %694, %.preheader18
  %indvars.iv71 = phi i64 [ 0, %.preheader18 ], [ %indvars.iv.next72, %694 ]
  %695 = add nsw i64 %679, %indvars.iv71
  %696 = getelementptr inbounds double, double* %78, i64 %695
  %697 = bitcast double* %696 to i64*
  %698 = load i64, i64* %697, align 8, !tbaa !190
  %699 = add nuw nsw i64 %indvars.iv71, %680
  %700 = getelementptr inbounds double, double* %81, i64 %699
  %701 = bitcast double* %700 to i64*
  store i64 %698, i64* %701, align 8, !tbaa !190
  %indvars.iv.next72 = add nuw nsw i64 %indvars.iv71, 1
  %exitcond73 = icmp eq i64 %indvars.iv.next72, 7
  br i1 %exitcond73, label %693, label %694

.preheader17:                                     ; preds = %._crit_edge34, %.preheader17.lr.ph
  %indvars.iv69 = phi i64 [ %indvars.iv.next70, %._crit_edge34 ], [ %691, %.preheader17.lr.ph ]
  %702 = getelementptr inbounds i32, i32* %34, i64 %indvars.iv69
  %703 = load i32, i32* %702, align 4, !tbaa !1
  %704 = icmp sgt i32 %703, 0
  br i1 %704, label %.lr.ph33, label %._crit_edge34

.lr.ph33:                                         ; preds = %.preheader17
  %705 = getelementptr inbounds i32, i32* %30, i64 %indvars.iv69
  %706 = load i32, i32* %705, align 4
  %707 = sext i32 %706 to i64
  %708 = sext i32 %703 to i64
  br label %713

.preheader.loopexit:                              ; preds = %._crit_edge34
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %._crit_edge38
  %709 = icmp slt i32 %6, 0
  br i1 %709, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %710 = fmul double %22, %22
  %711 = add i32 %6, 1
  br label %752

._crit_edge34.loopexit:                           ; preds = %713
  br label %._crit_edge34

._crit_edge34:                                    ; preds = %._crit_edge34.loopexit, %.preheader17
  %712 = icmp slt i64 %indvars.iv69, %692
  %indvars.iv.next70 = add nsw i64 %indvars.iv69, 1
  br i1 %712, label %.preheader17, label %.preheader.loopexit

; <label>:713                                     ; preds = %713, %.lr.ph33
  %indvars.iv67 = phi i64 [ 0, %.lr.ph33 ], [ %indvars.iv.next68, %713 ]
  %714 = add nsw i64 %707, %indvars.iv67
  %715 = sub nsw i64 %714, %687
  %716 = sub nsw i64 %714, %690
  %717 = mul nsw i64 %715, %688
  %718 = add nsw i64 %717, %689
  %719 = getelementptr inbounds double, double* %36, i64 %718
  %720 = load double, double* %719, align 8, !tbaa !190
  %721 = fdiv double %720, %686
  %722 = getelementptr inbounds double, double* %682, i64 %716
  store double %721, double* %722, align 8, !tbaa !190
  %723 = getelementptr inbounds double, double* %38, i64 %718
  %724 = bitcast double* %723 to i64*
  %725 = load i64, i64* %724, align 8, !tbaa !190
  %726 = getelementptr inbounds double, double* %685, i64 %716
  %727 = bitcast double* %726 to i64*
  store i64 %725, i64* %727, align 8, !tbaa !190
  %indvars.iv.next68 = add nuw nsw i64 %indvars.iv67, 1
  %728 = icmp slt i64 %indvars.iv.next68, %708
  br i1 %728, label %713, label %._crit_edge34.loopexit

._crit_edge.loopexit:                             ; preds = %752
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %729 = bitcast double* %timing_e_inter to i8*
  call void @llvm.lifetime.start(i64 8, i8* %729) #3
  %730 = call double @MPI_Wtime() #3
  %731 = fsub double %730, %87
  store double %731, double* %timing_e_inter, align 8, !tbaa !190
  %732 = bitcast double* %timing_inter_min to i8*
  call void @llvm.lifetime.start(i64 8, i8* %732) #3
  %733 = bitcast double* %timing_inter_max to i8*
  call void @llvm.lifetime.start(i64 8, i8* %733) #3
  %734 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 13
  %735 = load i32, i32* %734, align 4, !tbaa !280
  %736 = call i32 @MPI_Allreduce(i8* %729, i8* %733, i32 1, i32 1275070475, i32 1476395009, i32 %735) #3
  %737 = load i32, i32* %734, align 4, !tbaa !280
  %738 = call i32 @MPI_Allreduce(i8* %729, i8* %732, i32 1, i32 1275070475, i32 1476395010, i32 %737) #3
  %739 = call double @MPI_Wtime() #3
  %740 = bitcast double* %timing_e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %740) #3
  %741 = call double @MPI_Wtime() #3
  %742 = fsub double %741, %739
  store double %742, double* %timing_e, align 8, !tbaa !190
  %743 = bitcast double* %timing_max to i8*
  call void @llvm.lifetime.start(i64 8, i8* %743) #3
  store double 0.000000e+00, double* %timing_max, align 8, !tbaa !190
  %744 = bitcast double* %timing_min to i8*
  call void @llvm.lifetime.start(i64 8, i8* %744) #3
  store double 0.000000e+00, double* %timing_min, align 8, !tbaa !190
  %745 = load i32, i32* %734, align 4, !tbaa !280
  %746 = call i32 @MPI_Allreduce(i8* %740, i8* %743, i32 1, i32 1275070475, i32 1476395009, i32 %745) #3
  %747 = load i32, i32* %734, align 4, !tbaa !280
  %748 = call i32 @MPI_Allreduce(i8* %740, i8* %744, i32 1, i32 1275070475, i32 1476395010, i32 %747) #3
  %749 = getelementptr inbounds %struct.gtc_bench_data_t, %struct.gtc_bench_data_t* %gtc_input, i64 0, i32 5, i32 0
  %750 = load i32, i32* %749, align 8, !tbaa !27
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %757, label %766

; <label>:752                                     ; preds = %752, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %752 ], [ 0, %.lr.ph ]
  %753 = getelementptr inbounds double, double* %40, i64 %indvars.iv
  %754 = load double, double* %753, align 8, !tbaa !190
  %755 = fdiv double %754, %710
  %756 = getelementptr inbounds double, double* %42, i64 %indvars.iv
  store double %755, double* %756, align 8, !tbaa !190
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %711
  br i1 %exitcond, label %._crit_edge.loopexit, label %752

; <label>:757                                     ; preds = %._crit_edge
  %758 = load i32, i32* @istep, align 4, !tbaa !1
  %759 = load double, double* %timing_e_inter, align 8, !tbaa !190
  %760 = load double, double* %timing_inter_max, align 8, !tbaa !190
  %761 = load double, double* %timing_inter_min, align 8, !tbaa !190
  %762 = load double, double* %timing_e, align 8, !tbaa !190
  %763 = load double, double* %timing_max, align 8, !tbaa !190
  %764 = load double, double* %timing_min, align 8, !tbaa !190
  %765 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([107 x i8], [107 x i8]* @.str.2.272, i64 0, i64 0), i32 %758, double %759, double %760, double %761, double %762, double %763, double %764)
  br label %766

; <label>:766                                     ; preds = %757, %._crit_edge
  call void @llvm.lifetime.end(i64 8, i8* %744) #3
  call void @llvm.lifetime.end(i64 8, i8* %743) #3
  call void @llvm.lifetime.end(i64 8, i8* %740) #3
  call void @llvm.lifetime.end(i64 8, i8* %733) #3
  call void @llvm.lifetime.end(i64 8, i8* %732) #3
  call void @llvm.lifetime.end(i64 8, i8* %729) #3
  call void @llvm.lifetime.end(i64 20, i8* %1) #3
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @output(%struct.gtc_bench_data_t* nocapture readnone %gtc_input) #12 {
  ret i32 0
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { cold }
attributes #14 = { nounwind readonly }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"int", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !3, i64 0}
!7 = !{!8, !2, i64 1444}
!8 = !{!"", !9, i64 0, !11, i64 512, !12, i64 984, !13, i64 1112, !14, i64 1176, !15, i64 1440, !16, i64 1536, !17, i64 1800, !18, i64 2032}
!9 = !{!"", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !2, i64 16, !2, i64 20, !2, i64 24, !2, i64 28, !2, i64 32, !2, i64 36, !2, i64 40, !2, i64 44, !10, i64 48, !2, i64 56, !2, i64 60, !2, i64 64, !2, i64 68, !2, i64 72, !2, i64 76, !2, i64 80, !2, i64 84, !2, i64 88, !2, i64 92, !2, i64 96, !2, i64 100, !2, i64 104, !2, i64 108, !2, i64 112, !2, i64 116, !2, i64 120, !2, i64 124, !2, i64 128, !2, i64 132, !2, i64 136, !2, i64 140, !2, i64 144, !2, i64 148, !2, i64 152, !2, i64 156, !2, i64 160, !2, i64 164, !2, i64 168, !2, i64 172, !2, i64 176, !2, i64 180, !2, i64 184, !10, i64 192, !10, i64 200, !10, i64 208, !10, i64 216, !10, i64 224, !10, i64 232, !10, i64 240, !10, i64 248, !10, i64 256, !10, i64 264, !10, i64 272, !10, i64 280, !10, i64 288, !10, i64 296, !10, i64 304, !10, i64 312, !10, i64 320, !10, i64 328, !10, i64 336, !10, i64 344, !10, i64 352, !10, i64 360, !10, i64 368, !10, i64 376, !10, i64 384, !10, i64 392, !10, i64 400, !10, i64 408, !10, i64 416, !10, i64 424, !10, i64 432, !10, i64 440, !10, i64 448, !10, i64 456, !10, i64 464, !10, i64 472, !10, i64 480, !10, i64 488, !10, i64 496, !10, i64 504}
!10 = !{!"double", !3, i64 0}
!11 = !{!"", !2, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !6, i64 240, !6, i64 248, !6, i64 256, !6, i64 264, !6, i64 272, !6, i64 280, !6, i64 288, !6, i64 296, !6, i64 304, !6, i64 312, !6, i64 320, !6, i64 328, !6, i64 336, !6, i64 344, !6, i64 352, !6, i64 360, !6, i64 368, !6, i64 376, !6, i64 384, !6, i64 392, !6, i64 400, !6, i64 408, !6, i64 416, !6, i64 424, !6, i64 432, !6, i64 440, !6, i64 448, !6, i64 456, !6, i64 464}
!12 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120}
!13 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56}
!14 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !3, i64 96, !10, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !2, i64 168, !2, i64 172, !2, i64 176, !2, i64 180, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !2, i64 216, !2, i64 220, !6, i64 224, !6, i64 232, !6, i64 240, !6, i64 248, !2, i64 256, !2, i64 260}
!15 = !{!"", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !2, i64 16, !2, i64 20, !2, i64 24, !2, i64 28, !2, i64 32, !2, i64 36, !2, i64 40, !2, i64 44, !2, i64 48, !2, i64 52, !2, i64 56, !6, i64 64, !2, i64 72, !6, i64 80, !2, i64 88}
!16 = !{!"", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !2, i64 16, !2, i64 20, !2, i64 24, !2, i64 28, !2, i64 32, !2, i64 36, !2, i64 40, !2, i64 44, !2, i64 48, !2, i64 52, !2, i64 56, !2, i64 60, !10, i64 64, !10, i64 72, !10, i64 80, !10, i64 88, !10, i64 96, !6, i64 104, !6, i64 112, !2, i64 120, !2, i64 124, !2, i64 128, !2, i64 132, !2, i64 136, !2, i64 140, !2, i64 144, !2, i64 148, !2, i64 152, !2, i64 156, !2, i64 160, !2, i64 164, !6, i64 168, !6, i64 176, !6, i64 184, !2, i64 192, !6, i64 200, !2, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !2, i64 240, !6, i64 248, !2, i64 256}
!17 = !{!"", !2, i64 0, !2, i64 4, !2, i64 8, !2, i64 12, !2, i64 16, !2, i64 20, !2, i64 24, !10, i64 32, !10, i64 40, !2, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !2, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !2, i64 144, !6, i64 152, !2, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !2, i64 192, !6, i64 200, !2, i64 208, !6, i64 216, !6, i64 224}
!18 = !{!"", !2, i64 0, !2, i64 4, !2, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88}
!19 = !{!8, !2, i64 1448}
!20 = !{!8, !2, i64 1440}
!21 = !{!8, !2, i64 176}
!22 = !{!8, !2, i64 104}
!23 = !{!8, !2, i64 72}
!24 = !{!8, !2, i64 60}
!25 = !{!8, !10, i64 408}
!26 = !{!8, !2, i64 80}
!27 = !{!15, !2, i64 0}
!28 = !{!3, !3, i64 0}
!29 = !{!11, !6, i64 16}
!30 = !{!11, !6, i64 72}
!31 = !{!11, !6, i64 384}
!32 = !{!11, !6, i64 192}
!33 = !{!11, !6, i64 200}
!34 = !{!11, !6, i64 120}
!35 = !{!11, !6, i64 128}
!36 = !{!11, !6, i64 376}
!37 = !{!11, !6, i64 368}
!38 = !{!11, !6, i64 104}
!39 = !{!11, !6, i64 56}
!40 = !{!11, !6, i64 144}
!41 = !{!11, !6, i64 136}
!42 = !{!11, !6, i64 232}
!43 = !{!11, !6, i64 216}
!44 = !{!11, !6, i64 8}
!45 = !{!11, !6, i64 64}
!46 = !{!11, !6, i64 152}
!47 = !{!11, !6, i64 24}
!48 = !{!11, !6, i64 32}
!49 = !{!11, !6, i64 240}
!50 = !{!11, !6, i64 248}
!51 = !{!11, !6, i64 184}
!52 = !{!11, !6, i64 352}
!53 = !{!11, !6, i64 160}
!54 = !{!11, !6, i64 168}
!55 = !{!11, !6, i64 176}
!56 = !{!11, !6, i64 88}
!57 = !{!11, !6, i64 272}
!58 = !{!11, !6, i64 264}
!59 = !{!11, !6, i64 208}
!60 = !{!11, !6, i64 112}
!61 = !{!11, !6, i64 80}
!62 = !{!11, !6, i64 40}
!63 = !{!11, !6, i64 48}
!64 = !{!11, !6, i64 96}
!65 = !{!11, !6, i64 392}
!66 = !{!11, !6, i64 400}
!67 = !{!11, !6, i64 408}
!68 = !{!11, !6, i64 416}
!69 = !{!11, !6, i64 296}
!70 = !{!11, !6, i64 312}
!71 = !{!11, !6, i64 304}
!72 = !{!11, !6, i64 320}
!73 = !{!11, !6, i64 280}
!74 = !{!11, !6, i64 288}
!75 = !{!11, !6, i64 328}
!76 = !{!11, !6, i64 336}
!77 = !{!11, !6, i64 344}
!78 = !{!11, !6, i64 360}
!79 = !{!11, !6, i64 424}
!80 = !{!11, !6, i64 432}
!81 = !{!11, !6, i64 440}
!82 = !{!11, !6, i64 448}
!83 = !{!11, !6, i64 456}
!84 = !{!11, !6, i64 464}
!85 = !{!12, !6, i64 0}
!86 = !{!12, !6, i64 8}
!87 = !{!12, !6, i64 16}
!88 = !{!12, !6, i64 24}
!89 = !{!12, !6, i64 32}
!90 = !{!12, !6, i64 40}
!91 = !{!12, !6, i64 48}
!92 = !{!12, !6, i64 56}
!93 = !{!12, !6, i64 64}
!94 = !{!12, !6, i64 72}
!95 = !{!12, !6, i64 80}
!96 = !{!12, !6, i64 88}
!97 = !{!12, !6, i64 96}
!98 = !{!12, !6, i64 104}
!99 = !{!12, !6, i64 112}
!100 = !{!12, !6, i64 120}
!101 = !{!13, !6, i64 0}
!102 = !{!13, !6, i64 8}
!103 = !{!13, !6, i64 16}
!104 = !{!13, !6, i64 24}
!105 = !{!13, !6, i64 32}
!106 = !{!13, !6, i64 40}
!107 = !{!13, !6, i64 48}
!108 = !{!13, !6, i64 56}
!109 = !{!15, !6, i64 64}
!110 = !{!15, !6, i64 80}
!111 = !{!16, !6, i64 104}
!112 = !{!16, !6, i64 112}
!113 = !{!16, !6, i64 168}
!114 = !{!16, !6, i64 176}
!115 = !{!16, !6, i64 184}
!116 = !{!16, !6, i64 200}
!117 = !{!16, !6, i64 216}
!118 = !{!16, !6, i64 224}
!119 = !{!16, !6, i64 232}
!120 = !{!16, !6, i64 248}
!121 = !{!14, !6, i64 16}
!122 = !{!14, !6, i64 24}
!123 = !{!14, !6, i64 32}
!124 = !{!14, !6, i64 40}
!125 = !{!14, !6, i64 48}
!126 = !{!14, !6, i64 56}
!127 = !{!14, !6, i64 64}
!128 = !{!14, !6, i64 72}
!129 = !{!14, !6, i64 80}
!130 = !{!14, !6, i64 88}
!131 = !{!14, !6, i64 0}
!132 = !{!14, !6, i64 8}
!133 = !{!14, !6, i64 136}
!134 = !{!14, !6, i64 144}
!135 = !{!14, !6, i64 152}
!136 = !{!14, !6, i64 160}
!137 = !{!14, !6, i64 184}
!138 = !{!14, !6, i64 192}
!139 = !{!14, !6, i64 200}
!140 = !{!14, !6, i64 208}
!141 = !{!14, !6, i64 224}
!142 = !{!14, !6, i64 232}
!143 = !{!14, !6, i64 240}
!144 = !{!14, !6, i64 248}
!145 = !{!18, !6, i64 16}
!146 = !{!18, !6, i64 24}
!147 = !{!18, !6, i64 32}
!148 = !{!15, !2, i64 8}
!149 = !{!9, !2, i64 104}
!150 = !{!9, !2, i64 176}
!151 = !{!9, !2, i64 72}
!152 = !{!9, !2, i64 12}
!153 = !{!9, !2, i64 16}
!154 = !{!9, !2, i64 24}
!155 = !{!9, !2, i64 60}
!156 = !{!9, !2, i64 68}
!157 = !{!9, !10, i64 192}
!158 = !{!9, !10, i64 200}
!159 = !{!9, !2, i64 96}
!160 = !{!9, !10, i64 264}
!161 = !{!9, !2, i64 120}
!162 = !{!9, !10, i64 224}
!163 = !{!9, !10, i64 208}
!164 = !{!9, !10, i64 216}
!165 = !{!9, !10, i64 232}
!166 = !{!9, !10, i64 240}
!167 = !{!9, !10, i64 248}
!168 = !{!9, !10, i64 392}
!169 = !{!9, !10, i64 400}
!170 = !{!9, !10, i64 432}
!171 = !{!9, !10, i64 416}
!172 = !{!9, !10, i64 272}
!173 = !{!9, !10, i64 440}
!174 = !{!9, !10, i64 424}
!175 = !{!9, !10, i64 288}
!176 = !{!9, !10, i64 384}
!177 = !{!9, !10, i64 448}
!178 = !{!9, !10, i64 456}
!179 = !{!9, !10, i64 464}
!180 = !{!9, !10, i64 472}
!181 = !{!9, !10, i64 376}
!182 = !{!9, !2, i64 136}
!183 = !{!9, !2, i64 80}
!184 = !{!9, !2, i64 76}
!185 = !{!9, !2, i64 140}
!186 = !{!16, !2, i64 120}
!187 = !{!18, !2, i64 0}
!188 = !{!18, !2, i64 4}
!189 = !{!18, !2, i64 8}
!190 = !{!10, !10, i64 0}
!191 = !{!9, !10, i64 408}
!192 = !{!9, !2, i64 0}
!193 = !{!9, !2, i64 4}
!194 = !{!9, !2, i64 8}
!195 = !{!9, !10, i64 360}
!196 = !{!9, !10, i64 368}
!197 = !{!9, !2, i64 20}
!198 = !{!9, !10, i64 480}
!199 = !{!9, !2, i64 36}
!200 = !{!9, !2, i64 40}
!201 = !{!9, !2, i64 44}
!202 = !{!9, !10, i64 48}
!203 = !{!9, !10, i64 488}
!204 = !{!9, !10, i64 496}
!205 = !{!9, !10, i64 504}
!206 = !{!9, !2, i64 124}
!207 = !{!9, !10, i64 344}
!208 = !{!9, !10, i64 336}
!209 = !{!9, !10, i64 352}
!210 = !{!9, !2, i64 32}
!211 = !{!9, !2, i64 28}
!212 = !{!9, !10, i64 256}
!213 = !{!9, !2, i64 180}
!214 = !{!9, !2, i64 184}
!215 = !{!14, !2, i64 168}
!216 = !{!14, !2, i64 172}
!217 = !{!14, !2, i64 176}
!218 = !{!14, !2, i64 180}
!219 = !{!14, !2, i64 216}
!220 = !{!14, !2, i64 220}
!221 = !{!14, !2, i64 256}
!222 = !{!14, !2, i64 260}
!223 = !{!11, !2, i64 0}
!224 = !{!15, !2, i64 48}
!225 = !{!15, !2, i64 12}
!226 = !{!15, !2, i64 16}
!227 = !{!15, !2, i64 20}
!228 = !{!15, !2, i64 24}
!229 = !{!15, !2, i64 28}
!230 = !{!15, !2, i64 32}
!231 = !{!15, !2, i64 36}
!232 = !{!15, !2, i64 40}
!233 = !{!15, !2, i64 44}
!234 = !{!15, !2, i64 72}
!235 = !{!15, !2, i64 88}
!236 = !{!16, !2, i64 0}
!237 = !{!16, !2, i64 4}
!238 = !{!16, !2, i64 8}
!239 = !{!16, !2, i64 12}
!240 = !{!16, !2, i64 16}
!241 = !{!16, !2, i64 20}
!242 = !{!16, !2, i64 24}
!243 = !{!16, !2, i64 28}
!244 = !{!16, !2, i64 32}
!245 = !{!16, !2, i64 36}
!246 = !{!16, !2, i64 40}
!247 = !{!16, !2, i64 44}
!248 = !{!16, !2, i64 48}
!249 = !{!16, !2, i64 52}
!250 = !{!16, !2, i64 56}
!251 = !{!16, !2, i64 60}
!252 = !{!16, !10, i64 64}
!253 = !{!16, !10, i64 72}
!254 = !{!16, !10, i64 80}
!255 = !{!16, !10, i64 88}
!256 = !{!16, !10, i64 96}
!257 = !{!16, !2, i64 124}
!258 = !{!16, !2, i64 132}
!259 = !{!16, !2, i64 128}
!260 = !{!16, !2, i64 140}
!261 = !{!16, !2, i64 136}
!262 = !{!16, !2, i64 144}
!263 = !{!16, !2, i64 148}
!264 = !{!16, !2, i64 152}
!265 = !{!16, !2, i64 156}
!266 = !{!16, !2, i64 192}
!267 = !{!16, !2, i64 208}
!268 = !{!16, !2, i64 240}
!269 = !{!16, !2, i64 256}
!270 = !{!18, !6, i64 40}
!271 = !{!18, !6, i64 48}
!272 = !{!18, !6, i64 56}
!273 = !{!18, !6, i64 64}
!274 = !{!18, !6, i64 72}
!275 = !{!18, !6, i64 80}
!276 = !{!18, !6, i64 88}
!277 = !{!9, !2, i64 100}
!278 = !{!16, !2, i64 164}
!279 = !{!15, !2, i64 56}
!280 = !{!15, !2, i64 52}
!281 = !{!9, !10, i64 296}
!282 = !{!9, !10, i64 304}
!283 = !{!9, !10, i64 312}
!284 = !{!15, !2, i64 4}
!285 = !{!286, !6, i64 152}
!286 = !{!"RngStream_InfoState", !3, i64 0, !3, i64 48, !3, i64 96, !2, i64 144, !2, i64 148, !6, i64 152}
!287 = !{!288, !288, i64 0}
!288 = !{!"long", !3, i64 0}
!289 = !{!286, !2, i64 144}
!290 = !{!286, !2, i64 148}
!291 = !{!9, !2, i64 64}
!292 = !{!16, !2, i64 160}
