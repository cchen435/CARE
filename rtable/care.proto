syntax = "proto2";
package pb;

/**
 * this file define the recovery function table used by
 * care. The table encodes the function type and input parameters
 */


/**
 * this part is copied from LLVM 6.0.1, which defines the basic
 * types utilized in LLVM IR. Since our function routines are generated
 * from LLVM IR, So we can reuse it.
 */

 enum TypeID {
// PrimitiveTypes - make sure LastPrimitiveTyID stays up to date. 
  VoidTyID      = 0;        ///<  0: type with no size
  HalfTyID      = 1;        ///<  1: 16-bit floating point type
  FloatTyID     = 2;        ///<  2: 32-bit floating point type
  DoubleTyID    = 3;        ///<  3: 64-bit floating point type
  X86_FP80TyID  = 4;        ///<  4: 80-bit floating point type (X87)
  FP128TyID     = 5;        ///<  5: 128-bit floating point type (112-bit mantissa)
  PPC_FP128TyID = 6;        ///<  6: 128-bit floating point type (two 64-bits, PowerPC)
  LabelTyID     = 7;        ///<  7: Labels
  MetadataTyID  = 8;        ///<  8: Metadata
  X86_MMXTyID   = 9;        ///<  9: MMX vectors (64 bits, X86 specific)
  TokenTyID     = 10;       ///< 10: Tokens
  // Derived types... see DerivedTypes.h file.
  // Make sure FirstDerivedTyID stays up to date!
  IntegerTyID   = 11;       ///< 11: Arbitrary bit width integers
  FunctionTyID  = 12;       ///< 12: Functions
  StructTyID    = 13;       ///< 13: Structures
  ArrayTyID     = 14;       ///< 14: Arrays
  PointerTyID   = 15;       ///< 15: Pointers
  VectorTyID    = 16;       ///< 16: SIMD 'packed' format, or other vector type
}


message Type{
  message StructTy {
    repeated Type ElemTy = 1;
  }

  required TypeID ID   = 1;    // The typeID
  oneof SubclassData {
    int32 Width = 2;           // The width (in bits) of the type
    Type PointeeTy = 3;        // Valid only for Pointer Type, representing the base type of pointer
    StructTy MemberTy = 4;     // Valid only for StructTyID
    Type ArrayElemTy = 5;      // Valid only for ArrayTyID
  }
}

message FunctionTy{
  required Type ReturnTy = 1;    // return type
  required string fname = 2;     // function name
  repeated Type ParamTy = 3;     // parameter types
}

message Record {
  required bytes key = 1;
  required FunctionTy FuncTy = 2;
  repeated string parameters = 3;
}

message Table {
  repeated Record records = 1;
}
