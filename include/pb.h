// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: care.proto

#ifndef PROTOBUF_INCLUDED_care_2eproto
#define PROTOBUF_INCLUDED_care_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_care_2eproto 

namespace protobuf_care_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_care_2eproto
namespace pb {
class FunctionTy;
class FunctionTyDefaultTypeInternal;
extern FunctionTyDefaultTypeInternal _FunctionTy_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
class Type_StructTy;
class Type_StructTyDefaultTypeInternal;
extern Type_StructTyDefaultTypeInternal _Type_StructTy_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::FunctionTy* Arena::CreateMaybeMessage<::pb::FunctionTy>(Arena*);
template<> ::pb::Record* Arena::CreateMaybeMessage<::pb::Record>(Arena*);
template<> ::pb::Table* Arena::CreateMaybeMessage<::pb::Table>(Arena*);
template<> ::pb::Type* Arena::CreateMaybeMessage<::pb::Type>(Arena*);
template<> ::pb::Type_StructTy* Arena::CreateMaybeMessage<::pb::Type_StructTy>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum TypeID {
  HalfTyID = 1,
  FloatTyID = 2,
  DoubleTyID = 3,
  X86_FP80TyID = 4,
  FP128TyID = 5,
  PPC_FP128TyID = 6,
  LabelTyID = 7,
  MetadataTyID = 8,
  X86_MMXTyID = 9,
  TokenTyID = 10,
  IntegerTyID = 11,
  FunctionTyID = 12,
  StructTyID = 13,
  ArrayTyID = 14,
  PointerTyID = 15,
  VectorTyID = 16
};
bool TypeID_IsValid(int value);
const TypeID TypeID_MIN = HalfTyID;
const TypeID TypeID_MAX = VectorTyID;
const int TypeID_ARRAYSIZE = TypeID_MAX + 1;

const ::google::protobuf::EnumDescriptor* TypeID_descriptor();
inline const ::std::string& TypeID_Name(TypeID value) {
  return ::google::protobuf::internal::NameOfEnum(
    TypeID_descriptor(), value);
}
inline bool TypeID_Parse(
    const ::std::string& name, TypeID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypeID>(
    TypeID_descriptor(), name, value);
}
// ===================================================================

class Type_StructTy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Type.StructTy) */ {
 public:
  Type_StructTy();
  virtual ~Type_StructTy();

  Type_StructTy(const Type_StructTy& from);

  inline Type_StructTy& operator=(const Type_StructTy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type_StructTy(Type_StructTy&& from) noexcept
    : Type_StructTy() {
    *this = ::std::move(from);
  }

  inline Type_StructTy& operator=(Type_StructTy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Type_StructTy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type_StructTy* internal_default_instance() {
    return reinterpret_cast<const Type_StructTy*>(
               &_Type_StructTy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Type_StructTy* other);
  friend void swap(Type_StructTy& a, Type_StructTy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type_StructTy* New() const final {
    return CreateMaybeMessage<Type_StructTy>(NULL);
  }

  Type_StructTy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type_StructTy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type_StructTy& from);
  void MergeFrom(const Type_StructTy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_StructTy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Type ElemTy = 1;
  int elemty_size() const;
  void clear_elemty();
  static const int kElemTyFieldNumber = 1;
  ::pb::Type* mutable_elemty(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Type >*
      mutable_elemty();
  const ::pb::Type& elemty(int index) const;
  ::pb::Type* add_elemty();
  const ::google::protobuf::RepeatedPtrField< ::pb::Type >&
      elemty() const;

  // @@protoc_insertion_point(class_scope:pb.Type.StructTy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::Type > elemty_;
  friend struct ::protobuf_care_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  enum SubclassDataCase {
    kWidth = 2,
    kPointeeTy = 3,
    kMemberTy = 4,
    kArrayElemTy = 5,
    SUBCLASSDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Type* other);
  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const final {
    return CreateMaybeMessage<Type>(NULL);
  }

  Type* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Type_StructTy StructTy;

  // accessors -------------------------------------------------------

  // required .pb.TypeID ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::pb::TypeID id() const;
  void set_id(::pb::TypeID value);

  // optional int32 Width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional .pb.Type PointeeTy = 3;
  bool has_pointeety() const;
  void clear_pointeety();
  static const int kPointeeTyFieldNumber = 3;
  private:
  const ::pb::Type& _internal_pointeety() const;
  public:
  const ::pb::Type& pointeety() const;
  ::pb::Type* release_pointeety();
  ::pb::Type* mutable_pointeety();
  void set_allocated_pointeety(::pb::Type* pointeety);

  // optional .pb.Type.StructTy MemberTy = 4;
  bool has_memberty() const;
  void clear_memberty();
  static const int kMemberTyFieldNumber = 4;
  private:
  const ::pb::Type_StructTy& _internal_memberty() const;
  public:
  const ::pb::Type_StructTy& memberty() const;
  ::pb::Type_StructTy* release_memberty();
  ::pb::Type_StructTy* mutable_memberty();
  void set_allocated_memberty(::pb::Type_StructTy* memberty);

  // optional .pb.Type ArrayElemTy = 5;
  bool has_arrayelemty() const;
  void clear_arrayelemty();
  static const int kArrayElemTyFieldNumber = 5;
  private:
  const ::pb::Type& _internal_arrayelemty() const;
  public:
  const ::pb::Type& arrayelemty() const;
  ::pb::Type* release_arrayelemty();
  ::pb::Type* mutable_arrayelemty();
  void set_allocated_arrayelemty(::pb::Type* arrayelemty);

  void clear_SubclassData();
  SubclassDataCase SubclassData_case() const;
  // @@protoc_insertion_point(class_scope:pb.Type)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_width();
  void set_has_pointeety();
  void set_has_memberty();
  void set_has_arrayelemty();

  inline bool has_SubclassData() const;
  inline void clear_has_SubclassData();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  union SubclassDataUnion {
    SubclassDataUnion() {}
    ::google::protobuf::int32 width_;
    ::pb::Type* pointeety_;
    ::pb::Type_StructTy* memberty_;
    ::pb::Type* arrayelemty_;
  } SubclassData_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_care_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FunctionTy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.FunctionTy) */ {
 public:
  FunctionTy();
  virtual ~FunctionTy();

  FunctionTy(const FunctionTy& from);

  inline FunctionTy& operator=(const FunctionTy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionTy(FunctionTy&& from) noexcept
    : FunctionTy() {
    *this = ::std::move(from);
  }

  inline FunctionTy& operator=(FunctionTy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionTy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionTy* internal_default_instance() {
    return reinterpret_cast<const FunctionTy*>(
               &_FunctionTy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FunctionTy* other);
  friend void swap(FunctionTy& a, FunctionTy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionTy* New() const final {
    return CreateMaybeMessage<FunctionTy>(NULL);
  }

  FunctionTy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionTy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FunctionTy& from);
  void MergeFrom(const FunctionTy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionTy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Type ParamTy = 3;
  int paramty_size() const;
  void clear_paramty();
  static const int kParamTyFieldNumber = 3;
  ::pb::Type* mutable_paramty(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Type >*
      mutable_paramty();
  const ::pb::Type& paramty(int index) const;
  ::pb::Type* add_paramty();
  const ::google::protobuf::RepeatedPtrField< ::pb::Type >&
      paramty() const;

  // required string fname = 2;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 2;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // required .pb.Type ReturnTy = 1;
  bool has_returnty() const;
  void clear_returnty();
  static const int kReturnTyFieldNumber = 1;
  private:
  const ::pb::Type& _internal_returnty() const;
  public:
  const ::pb::Type& returnty() const;
  ::pb::Type* release_returnty();
  ::pb::Type* mutable_returnty();
  void set_allocated_returnty(::pb::Type* returnty);

  // @@protoc_insertion_point(class_scope:pb.FunctionTy)
 private:
  void set_has_returnty();
  void clear_has_returnty();
  void set_has_fname();
  void clear_has_fname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::Type > paramty_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::pb::Type* returnty_;
  friend struct ::protobuf_care_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(NULL);
  }

  Record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::std::string& parameters(int index) const;
  ::std::string* mutable_parameters(int index);
  void set_parameters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(int index, ::std::string&& value);
  #endif
  void set_parameters(int index, const char* value);
  void set_parameters(int index, const char* value, size_t size);
  ::std::string* add_parameters();
  void add_parameters(const ::std::string& value);
  #if LANG_CXX11
  void add_parameters(::std::string&& value);
  #endif
  void add_parameters(const char* value);
  void add_parameters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parameters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameters();

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required .pb.FunctionTy FuncTy = 2;
  bool has_functy() const;
  void clear_functy();
  static const int kFuncTyFieldNumber = 2;
  private:
  const ::pb::FunctionTy& _internal_functy() const;
  public:
  const ::pb::FunctionTy& functy() const;
  ::pb::FunctionTy* release_functy();
  ::pb::FunctionTy* mutable_functy();
  void set_allocated_functy(::pb::FunctionTy* functy);

  // @@protoc_insertion_point(class_scope:pb.Record)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_functy();
  void clear_has_functy();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameters_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::pb::FunctionTy* functy_;
  friend struct ::protobuf_care_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(NULL);
  }

  Table* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Record records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  ::pb::Record* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Record >*
      mutable_records();
  const ::pb::Record& records(int index) const;
  ::pb::Record* add_records();
  const ::google::protobuf::RepeatedPtrField< ::pb::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:pb.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::Record > records_;
  friend struct ::protobuf_care_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Type_StructTy

// repeated .pb.Type ElemTy = 1;
inline int Type_StructTy::elemty_size() const {
  return elemty_.size();
}
inline void Type_StructTy::clear_elemty() {
  elemty_.Clear();
}
inline ::pb::Type* Type_StructTy::mutable_elemty(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Type.StructTy.ElemTy)
  return elemty_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Type >*
Type_StructTy::mutable_elemty() {
  // @@protoc_insertion_point(field_mutable_list:pb.Type.StructTy.ElemTy)
  return &elemty_;
}
inline const ::pb::Type& Type_StructTy::elemty(int index) const {
  // @@protoc_insertion_point(field_get:pb.Type.StructTy.ElemTy)
  return elemty_.Get(index);
}
inline ::pb::Type* Type_StructTy::add_elemty() {
  // @@protoc_insertion_point(field_add:pb.Type.StructTy.ElemTy)
  return elemty_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Type >&
Type_StructTy::elemty() const {
  // @@protoc_insertion_point(field_list:pb.Type.StructTy.ElemTy)
  return elemty_;
}

// -------------------------------------------------------------------

// Type

// required .pb.TypeID ID = 1;
inline bool Type::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Type::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Type::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Type::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::pb::TypeID Type::id() const {
  // @@protoc_insertion_point(field_get:pb.Type.ID)
  return static_cast< ::pb::TypeID >(id_);
}
inline void Type::set_id(::pb::TypeID value) {
  assert(::pb::TypeID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.Type.ID)
}

// optional int32 Width = 2;
inline bool Type::has_width() const {
  return SubclassData_case() == kWidth;
}
inline void Type::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void Type::clear_width() {
  if (has_width()) {
    SubclassData_.width_ = 0;
    clear_has_SubclassData();
  }
}
inline ::google::protobuf::int32 Type::width() const {
  // @@protoc_insertion_point(field_get:pb.Type.Width)
  if (has_width()) {
    return SubclassData_.width_;
  }
  return 0;
}
inline void Type::set_width(::google::protobuf::int32 value) {
  if (!has_width()) {
    clear_SubclassData();
    set_has_width();
  }
  SubclassData_.width_ = value;
  // @@protoc_insertion_point(field_set:pb.Type.Width)
}

// optional .pb.Type PointeeTy = 3;
inline bool Type::has_pointeety() const {
  return SubclassData_case() == kPointeeTy;
}
inline void Type::set_has_pointeety() {
  _oneof_case_[0] = kPointeeTy;
}
inline void Type::clear_pointeety() {
  if (has_pointeety()) {
    delete SubclassData_.pointeety_;
    clear_has_SubclassData();
  }
}
inline const ::pb::Type& Type::_internal_pointeety() const {
  return *SubclassData_.pointeety_;
}
inline ::pb::Type* Type::release_pointeety() {
  // @@protoc_insertion_point(field_release:pb.Type.PointeeTy)
  if (has_pointeety()) {
    clear_has_SubclassData();
      ::pb::Type* temp = SubclassData_.pointeety_;
    SubclassData_.pointeety_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::Type& Type::pointeety() const {
  // @@protoc_insertion_point(field_get:pb.Type.PointeeTy)
  return has_pointeety()
      ? *SubclassData_.pointeety_
      : *reinterpret_cast< ::pb::Type*>(&::pb::_Type_default_instance_);
}
inline ::pb::Type* Type::mutable_pointeety() {
  if (!has_pointeety()) {
    clear_SubclassData();
    set_has_pointeety();
    SubclassData_.pointeety_ = CreateMaybeMessage< ::pb::Type >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.Type.PointeeTy)
  return SubclassData_.pointeety_;
}

// optional .pb.Type.StructTy MemberTy = 4;
inline bool Type::has_memberty() const {
  return SubclassData_case() == kMemberTy;
}
inline void Type::set_has_memberty() {
  _oneof_case_[0] = kMemberTy;
}
inline void Type::clear_memberty() {
  if (has_memberty()) {
    delete SubclassData_.memberty_;
    clear_has_SubclassData();
  }
}
inline const ::pb::Type_StructTy& Type::_internal_memberty() const {
  return *SubclassData_.memberty_;
}
inline ::pb::Type_StructTy* Type::release_memberty() {
  // @@protoc_insertion_point(field_release:pb.Type.MemberTy)
  if (has_memberty()) {
    clear_has_SubclassData();
      ::pb::Type_StructTy* temp = SubclassData_.memberty_;
    SubclassData_.memberty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::Type_StructTy& Type::memberty() const {
  // @@protoc_insertion_point(field_get:pb.Type.MemberTy)
  return has_memberty()
      ? *SubclassData_.memberty_
      : *reinterpret_cast< ::pb::Type_StructTy*>(&::pb::_Type_StructTy_default_instance_);
}
inline ::pb::Type_StructTy* Type::mutable_memberty() {
  if (!has_memberty()) {
    clear_SubclassData();
    set_has_memberty();
    SubclassData_.memberty_ = CreateMaybeMessage< ::pb::Type_StructTy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.Type.MemberTy)
  return SubclassData_.memberty_;
}

// optional .pb.Type ArrayElemTy = 5;
inline bool Type::has_arrayelemty() const {
  return SubclassData_case() == kArrayElemTy;
}
inline void Type::set_has_arrayelemty() {
  _oneof_case_[0] = kArrayElemTy;
}
inline void Type::clear_arrayelemty() {
  if (has_arrayelemty()) {
    delete SubclassData_.arrayelemty_;
    clear_has_SubclassData();
  }
}
inline const ::pb::Type& Type::_internal_arrayelemty() const {
  return *SubclassData_.arrayelemty_;
}
inline ::pb::Type* Type::release_arrayelemty() {
  // @@protoc_insertion_point(field_release:pb.Type.ArrayElemTy)
  if (has_arrayelemty()) {
    clear_has_SubclassData();
      ::pb::Type* temp = SubclassData_.arrayelemty_;
    SubclassData_.arrayelemty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::Type& Type::arrayelemty() const {
  // @@protoc_insertion_point(field_get:pb.Type.ArrayElemTy)
  return has_arrayelemty()
      ? *SubclassData_.arrayelemty_
      : *reinterpret_cast< ::pb::Type*>(&::pb::_Type_default_instance_);
}
inline ::pb::Type* Type::mutable_arrayelemty() {
  if (!has_arrayelemty()) {
    clear_SubclassData();
    set_has_arrayelemty();
    SubclassData_.arrayelemty_ = CreateMaybeMessage< ::pb::Type >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.Type.ArrayElemTy)
  return SubclassData_.arrayelemty_;
}

inline bool Type::has_SubclassData() const {
  return SubclassData_case() != SUBCLASSDATA_NOT_SET;
}
inline void Type::clear_has_SubclassData() {
  _oneof_case_[0] = SUBCLASSDATA_NOT_SET;
}
inline Type::SubclassDataCase Type::SubclassData_case() const {
  return Type::SubclassDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FunctionTy

// required .pb.Type ReturnTy = 1;
inline bool FunctionTy::has_returnty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionTy::set_has_returnty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionTy::clear_has_returnty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionTy::clear_returnty() {
  if (returnty_ != NULL) returnty_->Clear();
  clear_has_returnty();
}
inline const ::pb::Type& FunctionTy::_internal_returnty() const {
  return *returnty_;
}
inline const ::pb::Type& FunctionTy::returnty() const {
  const ::pb::Type* p = returnty_;
  // @@protoc_insertion_point(field_get:pb.FunctionTy.ReturnTy)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Type*>(
      &::pb::_Type_default_instance_);
}
inline ::pb::Type* FunctionTy::release_returnty() {
  // @@protoc_insertion_point(field_release:pb.FunctionTy.ReturnTy)
  clear_has_returnty();
  ::pb::Type* temp = returnty_;
  returnty_ = NULL;
  return temp;
}
inline ::pb::Type* FunctionTy::mutable_returnty() {
  set_has_returnty();
  if (returnty_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Type>(GetArenaNoVirtual());
    returnty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.FunctionTy.ReturnTy)
  return returnty_;
}
inline void FunctionTy::set_allocated_returnty(::pb::Type* returnty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returnty_;
  }
  if (returnty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returnty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returnty, submessage_arena);
    }
    set_has_returnty();
  } else {
    clear_has_returnty();
  }
  returnty_ = returnty;
  // @@protoc_insertion_point(field_set_allocated:pb.FunctionTy.ReturnTy)
}

// required string fname = 2;
inline bool FunctionTy::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionTy::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionTy::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionTy::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& FunctionTy::fname() const {
  // @@protoc_insertion_point(field_get:pb.FunctionTy.fname)
  return fname_.GetNoArena();
}
inline void FunctionTy::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FunctionTy.fname)
}
#if LANG_CXX11
inline void FunctionTy::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.FunctionTy.fname)
}
#endif
inline void FunctionTy::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FunctionTy.fname)
}
inline void FunctionTy::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FunctionTy.fname)
}
inline ::std::string* FunctionTy::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:pb.FunctionTy.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionTy::release_fname() {
  // @@protoc_insertion_point(field_release:pb.FunctionTy.fname)
  if (!has_fname()) {
    return NULL;
  }
  clear_has_fname();
  return fname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionTy::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:pb.FunctionTy.fname)
}

// repeated .pb.Type ParamTy = 3;
inline int FunctionTy::paramty_size() const {
  return paramty_.size();
}
inline void FunctionTy::clear_paramty() {
  paramty_.Clear();
}
inline ::pb::Type* FunctionTy::mutable_paramty(int index) {
  // @@protoc_insertion_point(field_mutable:pb.FunctionTy.ParamTy)
  return paramty_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Type >*
FunctionTy::mutable_paramty() {
  // @@protoc_insertion_point(field_mutable_list:pb.FunctionTy.ParamTy)
  return &paramty_;
}
inline const ::pb::Type& FunctionTy::paramty(int index) const {
  // @@protoc_insertion_point(field_get:pb.FunctionTy.ParamTy)
  return paramty_.Get(index);
}
inline ::pb::Type* FunctionTy::add_paramty() {
  // @@protoc_insertion_point(field_add:pb.FunctionTy.ParamTy)
  return paramty_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Type >&
FunctionTy::paramty() const {
  // @@protoc_insertion_point(field_list:pb.FunctionTy.ParamTy)
  return paramty_;
}

// -------------------------------------------------------------------

// Record

// required string key = 1;
inline bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:pb.Record.key)
  return key_.GetNoArena();
}
inline void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Record.key)
}
#if LANG_CXX11
inline void Record::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Record.key)
}
#endif
inline void Record::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Record.key)
}
inline void Record::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Record.key)
}
inline ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pb.Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:pb.Record.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.Record.key)
}

// required .pb.FunctionTy FuncTy = 2;
inline bool Record::has_functy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_functy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_functy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_functy() {
  if (functy_ != NULL) functy_->Clear();
  clear_has_functy();
}
inline const ::pb::FunctionTy& Record::_internal_functy() const {
  return *functy_;
}
inline const ::pb::FunctionTy& Record::functy() const {
  const ::pb::FunctionTy* p = functy_;
  // @@protoc_insertion_point(field_get:pb.Record.FuncTy)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::FunctionTy*>(
      &::pb::_FunctionTy_default_instance_);
}
inline ::pb::FunctionTy* Record::release_functy() {
  // @@protoc_insertion_point(field_release:pb.Record.FuncTy)
  clear_has_functy();
  ::pb::FunctionTy* temp = functy_;
  functy_ = NULL;
  return temp;
}
inline ::pb::FunctionTy* Record::mutable_functy() {
  set_has_functy();
  if (functy_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::FunctionTy>(GetArenaNoVirtual());
    functy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Record.FuncTy)
  return functy_;
}
inline void Record::set_allocated_functy(::pb::FunctionTy* functy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete functy_;
  }
  if (functy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      functy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, functy, submessage_arena);
    }
    set_has_functy();
  } else {
    clear_has_functy();
  }
  functy_ = functy;
  // @@protoc_insertion_point(field_set_allocated:pb.Record.FuncTy)
}

// repeated string parameters = 3;
inline int Record::parameters_size() const {
  return parameters_.size();
}
inline void Record::clear_parameters() {
  parameters_.Clear();
}
inline const ::std::string& Record::parameters(int index) const {
  // @@protoc_insertion_point(field_get:pb.Record.parameters)
  return parameters_.Get(index);
}
inline ::std::string* Record::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Record.parameters)
  return parameters_.Mutable(index);
}
inline void Record::set_parameters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Record.parameters)
  parameters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Record::set_parameters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Record.parameters)
  parameters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Record::set_parameters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Record.parameters)
}
inline void Record::set_parameters(int index, const char* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Record.parameters)
}
inline ::std::string* Record::add_parameters() {
  // @@protoc_insertion_point(field_add_mutable:pb.Record.parameters)
  return parameters_.Add();
}
inline void Record::add_parameters(const ::std::string& value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Record.parameters)
}
#if LANG_CXX11
inline void Record::add_parameters(::std::string&& value) {
  parameters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Record.parameters)
}
#endif
inline void Record::add_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Record.parameters)
}
inline void Record::add_parameters(const char* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Record.parameters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Record::parameters() const {
  // @@protoc_insertion_point(field_list:pb.Record.parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Record::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:pb.Record.parameters)
  return &parameters_;
}

// -------------------------------------------------------------------

// Table

// repeated .pb.Record records = 1;
inline int Table::records_size() const {
  return records_.size();
}
inline void Table::clear_records() {
  records_.Clear();
}
inline ::pb::Record* Table::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Table.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Record >*
Table::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:pb.Table.records)
  return &records_;
}
inline const ::pb::Record& Table::records(int index) const {
  // @@protoc_insertion_point(field_get:pb.Table.records)
  return records_.Get(index);
}
inline ::pb::Record* Table::add_records() {
  // @@protoc_insertion_point(field_add:pb.Table.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Record >&
Table::records() const {
  // @@protoc_insertion_point(field_list:pb.Table.records)
  return records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::TypeID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TypeID>() {
  return ::pb::TypeID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_care_2eproto
